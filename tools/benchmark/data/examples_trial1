CURRENT BENCHMARK: "1 + true" [this should error out]
Ensuring program runs successfully...
...done.
Program did not run successfully. Moving on to next benchmark.

CURRENT BENCHMARK: "" (empty)
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 349 ops/sec +/- 81.85% (51 runs sampled)
Compile  (ast -> js)  x 3.64 ops/sec +/- 15.84% (23 runs sampled)
Evaluate (ast -> res) x 2.38 ops/sec +/- 13.23% (17 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: "1"
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 500 ops/sec +/- 1.10% (68 runs sampled)
Compile  (ast -> js)  x 4.05 ops/sec +/- 9.22% (25 runs sampled)
Evaluate (ast -> res) x 2.50 ops/sec +/- 15.56% (16 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: "print("Ahoy, world!")"
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 348 ops/sec +/- 3.49% (53 runs sampled)
Compile  (ast -> js)  x 4.60 ops/sec +/- 6.98% (28 runs sampled)
Evaluate (ast -> res) x 2.51 ops/sec +/- 17.08% (16 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: "lam(x): x end"
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 294 ops/sec +/- 0.76% (54 runs sampled)
Compile  (ast -> js)  x 4.17 ops/sec +/- 9.58% (25 runs sampled)
Evaluate (ast -> res) x 2.77 ops/sec +/- 0.87% (18 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: insertion-sort.arr
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 35.87 ops/sec +/- 0.77% (61 runs sampled)
Compile  (ast -> js)  x 1.48 ops/sec +/- 6.25% (12 runs sampled)
Evaluate (ast -> res) x 1.18 ops/sec +/- 13.15% (11 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: "range(0,100).map(lam(x): x + 1 end)"
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 171 ops/sec +/- 1.67% (62 runs sampled)
Compile  (ast -> js)  x 3.77 ops/sec +/- 0.45% (23 runs sampled)
Evaluate (ast -> res) x 2.31 ops/sec +/- 16.14% (18 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res)


CURRENT BENCHMARK: "1+1+...+1" (542 times)
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 5.12 ops/sec +/- 20.57% (17 runs sampled)
Compile  (ast -> js)  x 0.22 ops/sec +/- 11.31% (6 runs sampled)
Evaluate (ast -> res) x 0.22 ops/sec +/- 13.84% (5 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res),Compile  (ast -> js) 


CURRENT BENCHMARK: "1+1+...+1 "(1084 times)
Ensuring program runs successfully...
...done.
Parse    (src -> ast) x 2.59 ops/sec +/- 26.17% (11 runs sampled)
Compile  (ast -> js)  x 0.11 ops/sec +/- 7.98% (5 runs sampled)
Evaluate (ast -> res) x 0.11 ops/sec +/- 7.49% (5 runs sampled)
Fastest is Parse    (src -> ast)
Slowest is Evaluate (ast -> res),Compile  (ast -> js) 
