#lang pyret

structs Animal [
  boa: length :: number;
  dillo: length :: number, weight :: number
]

;; desugars to

def-type Animal ::
  union(
    boa@{length :: number},
    dillo@{length :: number, weight :: number}
  )

;; boa@{length :: number} is a subtype of:
;;   boa@{}
;;   {length :: number}
;;   {}

;; dillo@{length :: number, weight :: number} is a subtype of:
;;   dillo@{length :: number}
;;   {length :: number, weight :: number}
;;   {}

fun Animal?(maybe-animal :: {}):
  or(boa?(maybe-animal), dillo?(maybe-animal))

;; destructuring assignment
def boa-brand, boa?: brand(boa)

;; now boa-brand has type: ∀ α <: {} -> boa@α
;; and boa? has type:
;;   boa@Any -> True ∩ Any -> False
;; propagating that intersection type around (through wrapping boa?,
;; etc) will be hard

fun boa(length :: number):
  ;; boa-brand is a functional brander - it evaluates to a new version
  ;; of the value that's wrapped in a recognizable brand
  boa-brand<{length :: number}>({
    length: length,
  })

def dillo-brand, dillo-brand?: brand(boa)

fun dillo(length, weight):
  dillo-brand({
    length: length,
    weight: weight
  })

fun dillo?(maybe-dillo):
  dillo-brand?(maybe-dillo)

