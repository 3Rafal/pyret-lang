[x] seal(obj, fields)
   - all of names must exist on obj
   - result is an obj with the fields as its seal, which is a mutable proxy 
     to the original obj

[X] brander()
   - produces brander object with brand() and check() methods
   - brand() used on any value, produces a copy of the value (either reference
     or prim) where this-gensym has been added to the set of brands.
   - check() recognizes any object with this-gensym in its set of brands
     and returns true, false if it does not have the brand.

[] consistent naming in grammar for lists of things
[] bug report on module docs for language definitions
[] bug report on resolved-module-path? docs

[x] make a real AST (in pyret.rkt?  before or after it?)

[] figure out what define-syntax is less boilerplate

[] keep seal() consistent with initialization/new object fields?

[x] make helper for id-parsing
[]  and str-parsing in pyret.rkt

[] ordering of things in grammar vs pyret.rkt

[] decide on a line length and enforce

[] make seal into a built-in method?

Seal/lookup tests
  [x] no seal success
  [x] no seal field not found
  [x] 2 seals success
  [x] 2 seals caught by first
  [x] 2 seals caught by second

Assignment tests
  [] assignment success
  [] assignment fail
  [] assignment seal fail
  [] assignment seal success
  [] 2 seals success
  [] 2 seals caught by first
  [] 2 seals caught by second

[] add default initiliazers for all values in pyret.rkt e.g. (mknum 5)
[] applicaiton should check type better

[x] resolve submoduley things with tokens and dedent errors
   - just have a pyret-tokenizer.rkt

[] Redex the initial semantics
[] Think about self-reference/method invocation
[] Where do built-in number methods go?

[] Brackets for expr-based lookup
[] See what we can share from p-base
