require = require("requirejs");
require(["runtime"], function(runtimeLib) {

  var staticModules = {
    "builtin://arrays": ({
"requires":[{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE,M,$lists21,$VS22) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,27,9,510,27,27,528],
[M,27,39,540,27,73,574],
[M,26,4,484,28,7,586],
[M,29,30,618,29,52,640],
[M,29,21,609,29,27,615],
[M,29,4,592,29,56,644],
[M,30,40,686,30,47,693],
[M,31,6,701,31,33,728],
[M,30,24,670,30,30,676],
[M,30,4,650,33,7,750],
[M,34,15,767,34,36,788],
[M,34,4,756,34,40,792],
[M,35,20,814,35,42,836],
[M,35,4,798,35,46,840],
[M,37,9,881,37,34,906],
[M,37,36,908,37,62,934],
[M,37,6,878,37,63,935],
[M,36,4,846,38,7,943],
[M,40,19,998,40,37,1016],
[M,40,19,998,40,49,1028],
[M,40,19,998,40,64,1043],
[M,40,6,985,40,70,1049],
[M,39,4,949,41,7,1057],
[M,43,19,1116,43,37,1134],
[M,43,19,1116,43,51,1148],
[M,43,19,1116,43,66,1163],
[M,43,6,1103,43,72,1169],
[M,42,4,1063,44,7,1177],
[M,45,45,1224,45,63,1242],
[M,45,68,1247,45,79,1258],
[M,45,45,1224,45,80,1259],
[M,45,19,1198,45,81,1260],
[M,45,4,1183,45,85,1264],
[M,25,2,465,46,4,1269],
[M,24,29,456,24,34,461],
[M,24,16,443,24,24,451],
[M,24,0,427,47,3,1273],
[M,49,11,1286,49,22,1297],
[M,54,4,1408,57,7,1481],
[M,56,6,1462,56,17,1473],
[M,56,11,1467,56,16,1472],
[M,55,6,1428,55,33,1455],
[M,55,28,1450,55,32,1454],
[M,54,9,1413,54,16,1420],
[M,53,2,1391,58,5,1487],
[M,60,2,1500,60,11,1509],
[M,59,2,1490,59,9,1497],
[M,52,8,1362,52,34,1388],
[M,51,24,1323,51,37,1336],
[M,51,46,1345,51,52,1351],
[M,51,0,1299,61,3,1513],
[M,64,24,1563,64,34,1573],
[M,66,4,1621,66,30,1647],
[M,65,2,1577,67,5,1653],
[M,68,2,1656,68,11,1665],
[M,64,8,1547,64,35,1574],
[M,63,0,1515,69,3,1669],
[M,71,46,1717,71,54,1725],
[M,73,2,1762,73,11,1771],
[M,72,8,1735,72,32,1759],
[M,71,23,1694,71,24,1695],
[M,71,35,1706,71,41,1712],
[M,71,0,1671,74,3,1775],
[M,77,2,1856,77,25,1879],
[M,76,68,1845,76,75,1852],
[M,76,28,1805,76,36,1813],
[M,76,47,1824,76,53,1830],
[M,76,62,1839,76,63,1840],
[M,76,0,1777,78,3,1883],
[M,81,2,1948,81,20,1966],
[M,80,58,1943,80,59,1944],
[M,80,28,1913,80,36,1921],
[M,80,47,1932,80,53,1938],
[M,80,0,1885,82,3,1970],
[M,85,2,2022,85,14,2034],
[M,84,40,2012,84,46,2018],
[M,84,27,1999,84,35,2007],
[M,84,0,1972,86,3,2038],
[M,89,2,2096,89,19,2113],
[M,88,45,2085,88,52,2092],
[M,88,32,2072,88,40,2080],
[M,88,0,2040,90,3,2117],
[M,94,22,2165,94,31,2174],
[M,94,16,2159,94,35,2178],
[M,94,9,2152,94,39,2182],
[M,95,23,2207,95,32,2216],
[M,95,17,2201,95,37,2221],
[M,95,9,2193,95,41,2225],
[M,96,26,2253,96,35,2262],
[M,96,20,2247,96,43,2270],
[M,96,9,2236,96,47,2274],
[M,97,29,2305,97,38,2314],
[M,97,23,2299,97,49,2325],
[M,97,9,2285,97,53,2329],
[M,98,32,2363,98,41,2372],
[M,98,26,2357,98,55,2386],
[M,98,9,2340,98,59,2390],
[M,99,35,2427,99,44,2436],
[M,99,29,2421,99,61,2453],
[M,99,9,2401,99,65,2457],
[M,20,0,384,20,23,407],
[M,18,12,372,18,22,382],
[M,3,0,21,100,1,2459]];
var $type$RawArray1 = NAMESPACE.get("$type$RawArray");
var equal$always2 = NAMESPACE.get("equal-always");
var raise3 = NAMESPACE.get("raise");
var $type$Number4 = NAMESPACE.get("$type$Number");
var raw$array$get5 = NAMESPACE.get("raw-array-get");
var $type$Nothing6 = NAMESPACE.get("$type$Nothing");
var raw$array$set7 = NAMESPACE.get("raw-array-set");
var nothing8 = NAMESPACE.get("nothing");
var raw$array$length9 = NAMESPACE.get("raw-array-length");
var raw$array$to$list10 = NAMESPACE.get("raw-array-to-list");
var _plus11 = NAMESPACE.get("_plus");
var raw$array$of12 = NAMESPACE.get("raw-array-of");
var _lessthan13 = NAMESPACE.get("_lessthan");
var raw$array14 = NAMESPACE.get("raw-array");
var builtins15 = NAMESPACE.get("builtins");
var lists16 = R.getField($lists21,"values");
var VS17 = R.getField($VS22,"values");
var lists18 = R.getField($lists21,"types");
var VS19 = R.getField($VS22,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists21);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS22);
var $toplevel24 = function($$resumer239) {
var $step23 = 0;
var $ans26 = D;
var $al27 = L[102];
try {
if(R.isActivationRecord($$resumer239)) {
$step23 = $$resumer239.step;
$al27 = $$resumer239.from;
$ans26 = $$resumer239.ans;
$resumer239 = $$resumer239.args[0];
provides312 = $$resumer239.vars[0];
array307 = $$resumer239.vars[1];
array$to$list$now236 = $$resumer239.vars[2];
array$length225 = $$resumer239.vars[3];
array$get$now215 = $$resumer239.vars[4];
array$set$now204 = $$resumer239.vars[5];
array$of192 = $$resumer239.vars[6];
array$from$list181 = $$resumer239.vars[7];
build$array161 = $$resumer239.vars[8];
is$array308 = $$resumer239.vars[9];
make139 = $$resumer239.vars[10];
get$arr$key40 = $$resumer239.vars[11];
List233 = $$resumer239.vars[12];
Array136 = $$resumer239.vars[13];
ArrayT28 = $$resumer239.vars[14];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step23) {
case 0: var ArrayT28 = R.namedBrander("Array");
var Array136 = R.makeBranderAnn(ArrayT28,"Array");
var List233 = R.getDotAnn(L[101],"lists",lists18,"List");
var get$arr$key40 = R.makeObject({});
var make139 = {"$var":D};
var $temp_lam30 = function($arr31) {
var $step29 = 0;
var $ans32 = D;
var $al33 = L[36];
try {
if(R.isActivationRecord($arr31)) {
$step29 = $arr31.step;
$al33 = $arr31.from;
$ans32 = $arr31.ans;
arr31 = $arr31.args[0];
ann_check_temp135 = $arr31.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],1,$t);
}
var arr31 = $arr31;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step29) {
case 0: $step29 = 1;
$al33 = L[35];
R._checkAnn(L[35],$type$RawArray1,arr31);
break;
case 1: var $temp_full35 = function($$underscore36,$key37) {
var $step34 = 0;
var $ans38 = D;
var $al39 = L[2];
try {
if(R.isActivationRecord($$underscore36)) {
$step34 = $$underscore36.step;
$al39 = $$underscore36.from;
$ans38 = $$underscore36.ans;
$underscore36 = $$underscore36.args[0];
key37 = $$underscore36.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],2,$t);
}
var $underscore36 = $$underscore36;
var key37 = $key37;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step34) {
case 0: $step34 = 1;
$al39 = L[0];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al39,equal$always2);
}
$ans38 = equal$always2.app(key37,get$arr$key40);
break;
case 1: var anf_arg41 = $ans38;
$al39 = L[0];
var anf_if42 = R.checkWrapBoolean(anf_arg41);
if(R.isPyretTrue(anf_if42)) {
$step34 = 2;
} else {
$step34 = 3;
}
break;
case 2: $step34 = 4;
$ans38 = arr31;
break;
case 3: $step34 = 4;
$al39 = L[1];
if(!(R.isFunction(raise3))) {
R.ffi.throwNonFunApp($al39,raise3);
}
$ans38 = raise3.app(("Cannot get arr externally"));
break;
case 4: ++R.GAS;
return $ans38;
default: throw "No case numbered " + $step34 + " in $temp_full35";
}
}
} catch($e43) {
if(R.isCont($e43) && ($step34 !== 4)) {
$e43.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al39,$temp_full35,$step34,[$underscore36,key37],[]);
}
if(R.isPyretException($e43)) {
$e43.pyretStack.push($al39);
}
throw $e43;
}
};
var anf_obj124 = R.makeMethod1($temp_full35);
var $temp_full45 = function($$underscore46,$ix47) {
var $step44 = 0;
var $ans48 = D;
var $al49 = L[5];
try {
if(R.isActivationRecord($$underscore46)) {
$step44 = $$underscore46.step;
$al49 = $$underscore46.from;
$ans48 = $$underscore46.ans;
$underscore46 = $$underscore46.args[0];
ix47 = $$underscore46.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],2,$t);
}
var $underscore46 = $$underscore46;
var ix47 = $ix47;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step44) {
case 0: $step44 = 1;
$al49 = L[4];
R._checkAnn(L[4],$type$Number4,ix47);
break;
case 1: $step44 = 2;
$al49 = L[3];
if(!(R.isFunction(raw$array$get5))) {
R.ffi.throwNonFunApp($al49,raw$array$get5);
}
$ans48 = raw$array$get5.app(arr31,ix47);
break;
case 2: ++R.GAS;
return $ans48;
default: throw "No case numbered " + $step44 + " in $temp_full45";
}
}
} catch($e50) {
if(R.isCont($e50) && ($step44 !== 2)) {
$e50.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al49,$temp_full45,$step44,[$underscore46,ix47],[]);
}
if(R.isPyretException($e50)) {
$e50.pyretStack.push($al49);
}
throw $e50;
}
};
var anf_obj125 = R.makeMethod1($temp_full45);
var $temp_full52 = function($self53,$ix54,$val55) {
var $step51 = 0;
var $ans56 = D;
var $al57 = L[9];
try {
if(R.isActivationRecord($self53)) {
$step51 = $self53.step;
$al57 = $self53.from;
$ans56 = $self53.ans;
self53 = $self53.args[0];
ix54 = $self53.args[1];
val55 = $self53.args[2];
ann_check_temp58 = $self53.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],3,$t);
}
var self53 = $self53;
var ix54 = $ix54;
var val55 = $val55;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step51) {
case 0: $step51 = 1;
$al57 = L[8];
R._checkAnn(L[8],$type$Number4,ix54);
break;
case 1: $step51 = 2;
$al57 = L[7];
if(!(R.isFunction(raw$array$set7))) {
R.ffi.throwNonFunApp($al57,raw$array$set7);
}
$ans56 = raw$array$set7.app(arr31,ix54,val55);
break;
case 2: var ann_check_temp58 = nothing8;
$step51 = 3;
$al57 = L[6];
R._checkAnn(L[6],$type$Nothing6,ann_check_temp58);
break;
case 3: $step51 = 4;
$ans56 = ann_check_temp58;
break;
case 4: ++R.GAS;
return $ans56;
default: throw "No case numbered " + $step51 + " in $temp_full52";
}
}
} catch($e59) {
if(R.isCont($e59) && ($step51 !== 4)) {
$e59.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al57,$temp_full52,$step51,[self53,ix54,val55],[ann_check_temp58]);
}
if(R.isPyretException($e59)) {
$e59.pyretStack.push($al57);
}
throw $e59;
}
};
var anf_obj126 = R.makeMethod2($temp_full52);
var $temp_full61 = function($$underscore62) {
var $step60 = 0;
var $ans63 = D;
var $al64 = L[11];
try {
if(R.isActivationRecord($$underscore62)) {
$step60 = $$underscore62.step;
$al64 = $$underscore62.from;
$ans63 = $$underscore62.ans;
$underscore62 = $$underscore62.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
var $underscore62 = $$underscore62;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step60) {
case 0: $step60 = 1;
$al64 = L[10];
if(!(R.isFunction(raw$array$length9))) {
R.ffi.throwNonFunApp($al64,raw$array$length9);
}
$ans63 = raw$array$length9.app(arr31);
break;
case 1: ++R.GAS;
return $ans63;
default: throw "No case numbered " + $step60 + " in $temp_full61";
}
}
} catch($e65) {
if(R.isCont($e65) && ($step60 !== 1)) {
$e65.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al64,$temp_full61,$step60,[$underscore62],[]);
}
if(R.isPyretException($e65)) {
$e65.pyretStack.push($al64);
}
throw $e65;
}
};
var anf_obj127 = R.makeMethod0($temp_full61);
var $temp_full67 = function($$underscore68) {
var $step66 = 0;
var $ans69 = D;
var $al70 = L[13];
try {
if(R.isActivationRecord($$underscore68)) {
$step66 = $$underscore68.step;
$al70 = $$underscore68.from;
$ans69 = $$underscore68.ans;
$underscore68 = $$underscore68.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
var $underscore68 = $$underscore68;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step66) {
case 0: $step66 = 1;
$al70 = L[12];
if(!(R.isFunction(raw$array$to$list10))) {
R.ffi.throwNonFunApp($al70,raw$array$to$list10);
}
$ans69 = raw$array$to$list10.app(arr31);
break;
case 1: ++R.GAS;
return $ans69;
default: throw "No case numbered " + $step66 + " in $temp_full67";
}
}
} catch($e71) {
if(R.isCont($e71) && ($step66 !== 1)) {
$e71.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al70,$temp_full67,$step66,[$underscore68],[]);
}
if(R.isPyretException($e71)) {
$e71.pyretStack.push($al70);
}
throw $e71;
}
};
var anf_obj128 = R.makeMethod0($temp_full67);
var $temp_full73 = function($self74,$other75,$eq76) {
var $step72 = 0;
var $ans77 = D;
var $al78 = L[17];
try {
if(R.isActivationRecord($self74)) {
$step72 = $self74.step;
$al78 = $self74.from;
$ans77 = $self74.ans;
self74 = $self74.args[0];
other75 = $self74.args[1];
eq76 = $self74.args[2];
anf_arg81 = $self74.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],3,$t);
}
var self74 = $self74;
var other75 = $other75;
var eq76 = $eq76;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step72) {
case 0: $step72 = 1;
$al78 = L[14];
$field79 = R.getColonFieldLoc(self74,"get-arr",L[14]);
if(R.isMethod($field79)) {
$ans77 = $field79.full_meth(self74,get$arr$key40);
} else {
if(!(R.isFunction($field79))) {
R.ffi.throwNonFunApp(L[14],$field79);
}
$ans77 = $field79.app(get$arr$key40);
}
break;
case 1: var anf_arg81 = $ans77;
$step72 = 2;
$al78 = L[15];
$field80 = R.getColonFieldLoc(other75,"get-arr",L[15]);
if(R.isMethod($field80)) {
$ans77 = $field80.full_meth(other75,get$arr$key40);
} else {
if(!(R.isFunction($field80))) {
R.ffi.throwNonFunApp(L[15],$field80);
}
$ans77 = $field80.app(get$arr$key40);
}
break;
case 2: var anf_arg82 = $ans77;
$step72 = 3;
$al78 = L[16];
if(!(R.isFunction(eq76))) {
R.ffi.throwNonFunApp($al78,eq76);
}
$ans77 = eq76.app(anf_arg81,anf_arg82);
break;
case 3: ++R.GAS;
return $ans77;
default: throw "No case numbered " + $step72 + " in $temp_full73";
}
}
} catch($e83) {
if(R.isCont($e83) && ($step72 !== 3)) {
$e83.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al78,$temp_full73,$step72,[self74,other75,eq76],[anf_arg81]);
}
if(R.isPyretException($e83)) {
$e83.pyretStack.push($al78);
}
throw $e83;
}
};
var anf_obj129 = R.makeMethod2($temp_full73);
var $temp_full85 = function($self86,$torepr87) {
var $step84 = 0;
var $ans88 = D;
var $al89 = L[22];
try {
if(R.isActivationRecord($self86)) {
$step84 = $self86.step;
$al89 = $self86.from;
$ans88 = $self86.ans;
self86 = $self86.args[0];
torepr87 = $self86.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],2,$t);
}
var self86 = $self86;
var torepr87 = $torepr87;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step84) {
case 0: $step84 = 1;
$al89 = L[18];
$field90 = R.getColonFieldLoc(self86,"to-list-now",L[18]);
if(R.isMethod($field90)) {
$ans88 = $field90.full_meth(self86);
} else {
if(!(R.isFunction($field90))) {
R.ffi.throwNonFunApp(L[18],$field90);
}
$ans88 = $field90.app();
}
break;
case 1: var anf_method_obj91 = $ans88;
$step84 = 2;
$al89 = L[19];
$field92 = R.getColonFieldLoc(anf_method_obj91,"map",L[19]);
if(R.isMethod($field92)) {
$ans88 = $field92.full_meth(anf_method_obj91,torepr87);
} else {
if(!(R.isFunction($field92))) {
R.ffi.throwNonFunApp(L[19],$field92);
}
$ans88 = $field92.app(torepr87);
}
break;
case 2: var anf_method_obj93 = $ans88;
$step84 = 3;
$al89 = L[20];
$field94 = R.getColonFieldLoc(anf_method_obj93,"join-str",L[20]);
if(R.isMethod($field94)) {
$ans88 = $field94.full_meth(anf_method_obj93,(", "));
} else {
if(!(R.isFunction($field94))) {
R.ffi.throwNonFunApp(L[20],$field94);
}
$ans88 = $field94.app((", "));
}
break;
case 3: var anf_arg95 = $ans88;
$step84 = 4;
$al89 = L[21];
if(!(R.isFunction(_plus11))) {
R.ffi.throwNonFunApp($al89,_plus11);
}
$ans88 = _plus11.app(("[array: "),anf_arg95);
break;
case 4: var anf_arg96 = $ans88;
$step84 = 5;
$al89 = L[21];
if(!(R.isFunction(_plus11))) {
R.ffi.throwNonFunApp($al89,_plus11);
}
$ans88 = _plus11.app(anf_arg96,("]"));
break;
case 5: ++R.GAS;
return $ans88;
default: throw "No case numbered " + $step84 + " in $temp_full85";
}
}
} catch($e97) {
if(R.isCont($e97) && ($step84 !== 5)) {
$e97.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al89,$temp_full85,$step84,[self86,torepr87],[]);
}
if(R.isPyretException($e97)) {
$e97.pyretStack.push($al89);
}
throw $e97;
}
};
var anf_obj130 = R.makeMethod1($temp_full85);
var $temp_full99 = function($self100,$tostring101) {
var $step98 = 0;
var $ans102 = D;
var $al103 = L[27];
try {
if(R.isActivationRecord($self100)) {
$step98 = $self100.step;
$al103 = $self100.from;
$ans102 = $self100.ans;
self100 = $self100.args[0];
tostring101 = $self100.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[27],2,$t);
}
var self100 = $self100;
var tostring101 = $tostring101;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step98) {
case 0: $step98 = 1;
$al103 = L[23];
$field104 = R.getColonFieldLoc(self100,"to-list-now",L[23]);
if(R.isMethod($field104)) {
$ans102 = $field104.full_meth(self100);
} else {
if(!(R.isFunction($field104))) {
R.ffi.throwNonFunApp(L[23],$field104);
}
$ans102 = $field104.app();
}
break;
case 1: var anf_method_obj105 = $ans102;
$step98 = 2;
$al103 = L[24];
$field106 = R.getColonFieldLoc(anf_method_obj105,"map",L[24]);
if(R.isMethod($field106)) {
$ans102 = $field106.full_meth(anf_method_obj105,tostring101);
} else {
if(!(R.isFunction($field106))) {
R.ffi.throwNonFunApp(L[24],$field106);
}
$ans102 = $field106.app(tostring101);
}
break;
case 2: var anf_method_obj107 = $ans102;
$step98 = 3;
$al103 = L[25];
$field108 = R.getColonFieldLoc(anf_method_obj107,"join-str",L[25]);
if(R.isMethod($field108)) {
$ans102 = $field108.full_meth(anf_method_obj107,(", "));
} else {
if(!(R.isFunction($field108))) {
R.ffi.throwNonFunApp(L[25],$field108);
}
$ans102 = $field108.app((", "));
}
break;
case 3: var anf_arg109 = $ans102;
$step98 = 4;
$al103 = L[26];
if(!(R.isFunction(_plus11))) {
R.ffi.throwNonFunApp($al103,_plus11);
}
$ans102 = _plus11.app(("[array: "),anf_arg109);
break;
case 4: var anf_arg110 = $ans102;
$step98 = 5;
$al103 = L[26];
if(!(R.isFunction(_plus11))) {
R.ffi.throwNonFunApp($al103,_plus11);
}
$ans102 = _plus11.app(anf_arg110,("]"));
break;
case 5: ++R.GAS;
return $ans102;
default: throw "No case numbered " + $step98 + " in $temp_full99";
}
}
} catch($e111) {
if(R.isCont($e111) && ($step98 !== 5)) {
$e111.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al103,$temp_full99,$step98,[self100,tostring101],[]);
}
if(R.isPyretException($e111)) {
$e111.pyretStack.push($al103);
}
throw $e111;
}
};
var anf_obj131 = R.makeMethod1($temp_full99);
var $temp_full113 = function($self114) {
var $step112 = 0;
var $ans115 = D;
var $al116 = L[32];
try {
if(R.isActivationRecord($self114)) {
$step112 = $self114.step;
$al116 = $self114.from;
$ans115 = $self114.ans;
self114 = $self114.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
var self114 = $self114;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step112) {
case 0: $step112 = 1;
$al116 = L[28];
$field117 = R.getColonFieldLoc(self114,"to-list-now",L[28]);
if(R.isMethod($field117)) {
$ans115 = $field117.full_meth(self114);
} else {
if(!(R.isFunction($field117))) {
R.ffi.throwNonFunApp(L[28],$field117);
}
$ans115 = $field117.app();
}
break;
case 1: var anf_method_obj118 = $ans115;
var anf_arg119 = G(VS17,"vs-value",L[29]);
$step112 = 2;
$al116 = L[30];
$field120 = R.getColonFieldLoc(anf_method_obj118,"map",L[30]);
if(R.isMethod($field120)) {
$ans115 = $field120.full_meth(anf_method_obj118,anf_arg119);
} else {
if(!(R.isFunction($field120))) {
R.ffi.throwNonFunApp(L[30],$field120);
}
$ans115 = $field120.app(anf_arg119);
}
break;
case 2: var anf_arg121 = $ans115;
$step112 = 3;
$al116 = L[31];
$field122 = R.getColonFieldLoc(VS17,"vs-collection",L[31]);
if(R.isMethod($field122)) {
$ans115 = $field122.full_meth(VS17,("array"),anf_arg121);
} else {
if(!(R.isFunction($field122))) {
R.ffi.throwNonFunApp(L[31],$field122);
}
$ans115 = $field122.app(("array"),anf_arg121);
}
break;
case 3: ++R.GAS;
return $ans115;
default: throw "No case numbered " + $step112 + " in $temp_full113";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step112 !== 3)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al116,$temp_full113,$step112,[self114],[]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al116);
}
throw $e123;
}
};
var anf_obj132 = R.makeMethod0($temp_full113);
var anf_arg133 = R.makeObject({"get-arr":anf_obj124,
"get-now":anf_obj125,
"set-now":anf_obj126,
"length":anf_obj127,
"to-list-now":anf_obj128,
"_equals":anf_obj129,
"_torepr":anf_obj130,
"_tostring":anf_obj131,
"_output":anf_obj132});
$step29 = 2;
$al33 = L[33];
$field134 = R.getColonFieldLoc(ArrayT28,"brand",L[33]);
if(R.isMethod($field134)) {
$ans32 = $field134.full_meth(ArrayT28,anf_arg133);
} else {
if(!(R.isFunction($field134))) {
R.ffi.throwNonFunApp(L[33],$field134);
}
$ans32 = $field134.app(anf_arg133);
}
break;
case 2: var ann_check_temp135 = $ans32;
$step29 = 3;
$al33 = L[34];
R._checkAnn(L[34],Array136,ann_check_temp135);
break;
case 3: $step29 = 4;
$ans32 = ann_check_temp135;
break;
case 4: ++R.GAS;
return $ans32;
default: throw "No case numbered " + $step29 + " in $temp_lam30";
}
}
} catch($e137) {
if(R.isCont($e137) && ($step29 !== 4)) {
$e137.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al33,$temp_lam30,$step29,[arr31],[ann_check_temp135]);
}
if(R.isPyretException($e137)) {
$e137.pyretStack.push($al33);
}
throw $e137;
}
};
var anf_assign138 = R.makeFunction($temp_lam30);
make139.$var = anf_assign138;
var is$array308 = G(ArrayT28,"test",L[37]);
var build$array161 = {"$var":D};
var array$from$list181 = {"$var":D};
var array$of192 = {"$var":D};
var array$set$now204 = {"$var":D};
var array$get$now215 = {"$var":D};
var array$length225 = {"$var":D};
var array$to$list$now236 = {"$var":D};
var $temp_lam141 = function($f142,$len143) {
var $step140 = 0;
var $ans144 = D;
var $al145 = L[50];
try {
if(R.isActivationRecord($f142)) {
$step140 = $f142.step;
$al145 = $f142.from;
$ans144 = $f142.ans;
f142 = $f142.args[0];
len143 = $f142.args[1];
arr152 = $f142.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var f142 = $f142;
var len143 = $len143;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step140) {
case 0: $step140 = 1;
$al145 = L[48];
R._checkAnn(L[48],R.Function,f142);
break;
case 1: $step140 = 2;
$al145 = L[49];
R._checkAnn(L[49],$type$Number4,len143);
break;
case 2: $step140 = 3;
$al145 = L[47];
if(!(R.isFunction(raw$array$of12))) {
R.ffi.throwNonFunApp($al145,raw$array$of12);
}
$ans144 = raw$array$of12.app(nothing8,len143);
break;
case 3: var arr152 = $ans144;
var loop154 = {"$var":D};
var $temp_lam147 = function($i148) {
var $step146 = 0;
var $ans149 = D;
var $al150 = L[44];
try {
if(R.isActivationRecord($i148)) {
$step146 = $i148.step;
$al150 = $i148.from;
$ans149 = $i148.ans;
i148 = $i148.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],1,$t);
}
var i148 = $i148;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step146) {
case 0: $step146 = 1;
$al150 = L[43];
if(!(R.isFunction(_lessthan13))) {
R.ffi.throwNonFunApp($al150,_lessthan13);
}
$ans149 = _lessthan13.app(i148,len143);
break;
case 1: var anf_arg151 = $ans149;
$al150 = L[38];
var anf_if156 = R.checkWrapBoolean(anf_arg151);
if(R.isPyretTrue(anf_if156)) {
$step146 = 2;
} else {
$step146 = 7;
}
break;
case 2: $step146 = 3;
$al150 = L[42];
if(!(R.isFunction(f142))) {
R.ffi.throwNonFunApp($al150,f142);
}
$ans149 = f142.app(i148);
break;
case 3: var anf_arg153 = $ans149;
$step146 = 4;
$al150 = L[41];
if(!(R.isFunction(raw$array$set7))) {
R.ffi.throwNonFunApp($al150,raw$array$set7);
}
$ans149 = raw$array$set7.app(arr152,i148,anf_arg153);
break;
case 4: $step146 = 5;
$al150 = L[40];
if(!(R.isFunction(_plus11))) {
R.ffi.throwNonFunApp($al150,_plus11);
}
$ans149 = _plus11.app(i148,(1));
break;
case 5: var anf_arg155 = $ans149;
$step146 = 6;
$al150 = L[39];
if(!(R.isFunction(loop154.$var))) {
R.ffi.throwNonFunApp($al150,loop154.$var);
}
$ans149 = loop154.$var.app(anf_arg155);
break;
case 6: $step146 = 8;
$ans149 = nothing8;
break;
case 7: $step146 = 8;
$ans149 = nothing8;
break;
case 8: ++R.GAS;
return $ans149;
default: throw "No case numbered " + $step146 + " in $temp_lam147";
}
}
} catch($e157) {
if(R.isCont($e157) && ($step146 !== 8)) {
$e157.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al150,$temp_lam147,$step146,[i148],[]);
}
if(R.isPyretException($e157)) {
$e157.pyretStack.push($al150);
}
throw $e157;
}
};
var anf_assign158 = R.makeFunction($temp_lam147);
loop154.$var = anf_assign158;
$step140 = 4;
$al145 = L[46];
if(!(R.isFunction(loop154.$var))) {
R.ffi.throwNonFunApp($al145,loop154.$var);
}
$ans144 = loop154.$var.app((0));
break;
case 4: $step140 = 5;
$al145 = L[45];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al145,make139.$var);
}
$ans144 = make139.$var.app(arr152);
break;
case 5: ++R.GAS;
return $ans144;
default: throw "No case numbered " + $step140 + " in $temp_lam141";
}
}
} catch($e159) {
if(R.isCont($e159) && ($step140 !== 5)) {
$e159.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al145,$temp_lam141,$step140,[f142,len143],[arr152]);
}
if(R.isPyretException($e159)) {
$e159.pyretStack.push($al145);
}
throw $e159;
}
};
var anf_assign160 = R.makeFunction($temp_lam141);
build$array161.$var = anf_assign160;
var $temp_lam163 = function($l164) {
var $step162 = 0;
var $ans165 = D;
var $al166 = L[56];
try {
if(R.isActivationRecord($l164)) {
$step162 = $l164.step;
$al166 = $l164.from;
$ans165 = $l164.ans;
l164 = $l164.args[0];
arr175 = $l164.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[56],1,$t);
}
var l164 = $l164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step162) {
case 0: $step162 = 1;
$al166 = L[51];
$field167 = R.getColonFieldLoc(l164,"length",L[51]);
if(R.isMethod($field167)) {
$ans165 = $field167.full_meth(l164);
} else {
if(!(R.isFunction($field167))) {
R.ffi.throwNonFunApp(L[51],$field167);
}
$ans165 = $field167.app();
}
break;
case 1: var anf_arg168 = $ans165;
$step162 = 2;
$al166 = L[55];
if(!(R.isFunction(raw$array$of12))) {
R.ffi.throwNonFunApp($al166,raw$array$of12);
}
$ans165 = raw$array$of12.app((0),anf_arg168);
break;
case 2: var arr175 = $ans165;
var $temp_lam170 = function($n171,$elt172) {
var $step169 = 0;
var $ans173 = D;
var $al174 = L[53];
try {
if(R.isActivationRecord($n171)) {
$step169 = $n171.step;
$al174 = $n171.from;
$ans173 = $n171.ans;
n171 = $n171.args[0];
elt172 = $n171.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[53],2,$t);
}
var n171 = $n171;
var elt172 = $elt172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step169) {
case 0: $step169 = 1;
$al174 = L[52];
if(!(R.isFunction(raw$array$set7))) {
R.ffi.throwNonFunApp($al174,raw$array$set7);
}
$ans173 = raw$array$set7.app(arr175,n171,elt172);
break;
case 1: ++R.GAS;
return $ans173;
default: throw "No case numbered " + $step169 + " in $temp_lam170";
}
}
} catch($e176) {
if(R.isCont($e176) && ($step169 !== 1)) {
$e176.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al174,$temp_lam170,$step169,[n171,elt172],[]);
}
if(R.isPyretException($e176)) {
$e176.pyretStack.push($al174);
}
throw $e176;
}
};
var anf_arg177 = R.makeFunction($temp_lam170);
$step162 = 3;
$al166 = L[53];
$field178 = R.getColonFieldLoc(lists16,"each_n",L[53]);
if(R.isMethod($field178)) {
$ans165 = $field178.full_meth(lists16,anf_arg177,(0),l164);
} else {
if(!(R.isFunction($field178))) {
R.ffi.throwNonFunApp(L[53],$field178);
}
$ans165 = $field178.app(anf_arg177,(0),l164);
}
break;
case 3: $step162 = 4;
$al166 = L[54];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al166,make139.$var);
}
$ans165 = make139.$var.app(arr175);
break;
case 4: ++R.GAS;
return $ans165;
default: throw "No case numbered " + $step162 + " in $temp_lam163";
}
}
} catch($e179) {
if(R.isCont($e179) && ($step162 !== 4)) {
$e179.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al166,$temp_lam163,$step162,[l164],[arr175]);
}
if(R.isPyretException($e179)) {
$e179.pyretStack.push($al166);
}
throw $e179;
}
};
var anf_assign180 = R.makeFunction($temp_lam163);
array$from$list181.$var = anf_assign180;
var $temp_lam183 = function($elt184,$count185) {
var $step182 = 0;
var $ans186 = D;
var $al187 = L[62];
try {
if(R.isActivationRecord($elt184)) {
$step182 = $elt184.step;
$al187 = $elt184.from;
$ans186 = $elt184.ans;
elt184 = $elt184.args[0];
count185 = $elt184.args[1];
ann_check_temp189 = $elt184.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[62],2,$t);
}
var elt184 = $elt184;
var count185 = $count185;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step182) {
case 0: $step182 = 1;
$al187 = L[60];
R._checkAnn(L[60],R.Any,elt184);
break;
case 1: $step182 = 2;
$al187 = L[61];
R._checkAnn(L[61],$type$Number4,count185);
break;
case 2: $step182 = 3;
$al187 = L[59];
if(!(R.isFunction(raw$array$of12))) {
R.ffi.throwNonFunApp($al187,raw$array$of12);
}
$ans186 = raw$array$of12.app(elt184,count185);
break;
case 3: var arr188 = $ans186;
$step182 = 4;
$al187 = L[58];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al187,make139.$var);
}
$ans186 = make139.$var.app(arr188);
break;
case 4: var ann_check_temp189 = $ans186;
$step182 = 5;
$al187 = L[57];
R._checkAnn(L[57],Array136,ann_check_temp189);
break;
case 5: $step182 = 6;
$ans186 = ann_check_temp189;
break;
case 6: ++R.GAS;
return $ans186;
default: throw "No case numbered " + $step182 + " in $temp_lam183";
}
}
} catch($e190) {
if(R.isCont($e190) && ($step182 !== 6)) {
$e190.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al187,$temp_lam183,$step182,[elt184,count185],[ann_check_temp189]);
}
if(R.isPyretException($e190)) {
$e190.pyretStack.push($al187);
}
throw $e190;
}
};
var anf_assign191 = R.makeFunction($temp_lam183);
array$of192.$var = anf_assign191;
var $temp_lam194 = function($arr195,$index196,$val197) {
var $step193 = 0;
var $ans198 = D;
var $al199 = L[68];
try {
if(R.isActivationRecord($arr195)) {
$step193 = $arr195.step;
$al199 = $arr195.from;
$ans198 = $arr195.ans;
arr195 = $arr195.args[0];
index196 = $arr195.args[1];
val197 = $arr195.args[2];
ann_check_temp201 = $arr195.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[68],3,$t);
}
var arr195 = $arr195;
var index196 = $index196;
var val197 = $val197;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step193) {
case 0: $step193 = 1;
$al199 = L[65];
R._checkAnn(L[65],Array136,arr195);
break;
case 1: $step193 = 2;
$al199 = L[66];
R._checkAnn(L[66],$type$Number4,index196);
break;
case 2: $step193 = 3;
$al199 = L[67];
R._checkAnn(L[67],R.Any,val197);
break;
case 3: $step193 = 4;
$al199 = L[63];
$field200 = R.getColonFieldLoc(arr195,"set-now",L[63]);
if(R.isMethod($field200)) {
$ans198 = $field200.full_meth(arr195,index196,val197);
} else {
if(!(R.isFunction($field200))) {
R.ffi.throwNonFunApp(L[63],$field200);
}
$ans198 = $field200.app(index196,val197);
}
break;
case 4: var ann_check_temp201 = $ans198;
$step193 = 5;
$al199 = L[64];
R._checkAnn(L[64],$type$Nothing6,ann_check_temp201);
break;
case 5: $step193 = 6;
$ans198 = ann_check_temp201;
break;
case 6: ++R.GAS;
return $ans198;
default: throw "No case numbered " + $step193 + " in $temp_lam194";
}
}
} catch($e202) {
if(R.isCont($e202) && ($step193 !== 6)) {
$e202.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al199,$temp_lam194,$step193,[arr195,index196,val197],[ann_check_temp201]);
}
if(R.isPyretException($e202)) {
$e202.pyretStack.push($al199);
}
throw $e202;
}
};
var anf_assign203 = R.makeFunction($temp_lam194);
array$set$now204.$var = anf_assign203;
var $temp_lam206 = function($arr207,$index208) {
var $step205 = 0;
var $ans209 = D;
var $al210 = L[73];
try {
if(R.isActivationRecord($arr207)) {
$step205 = $arr207.step;
$al210 = $arr207.from;
$ans209 = $arr207.ans;
arr207 = $arr207.args[0];
index208 = $arr207.args[1];
ann_check_temp212 = $arr207.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[73],2,$t);
}
var arr207 = $arr207;
var index208 = $index208;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step205) {
case 0: $step205 = 1;
$al210 = L[71];
R._checkAnn(L[71],Array136,arr207);
break;
case 1: $step205 = 2;
$al210 = L[72];
R._checkAnn(L[72],$type$Number4,index208);
break;
case 2: $step205 = 3;
$al210 = L[69];
$field211 = R.getColonFieldLoc(arr207,"get-now",L[69]);
if(R.isMethod($field211)) {
$ans209 = $field211.full_meth(arr207,index208);
} else {
if(!(R.isFunction($field211))) {
R.ffi.throwNonFunApp(L[69],$field211);
}
$ans209 = $field211.app(index208);
}
break;
case 3: var ann_check_temp212 = $ans209;
$step205 = 4;
$al210 = L[70];
R._checkAnn(L[70],R.Any,ann_check_temp212);
break;
case 4: $step205 = 5;
$ans209 = ann_check_temp212;
break;
case 5: ++R.GAS;
return $ans209;
default: throw "No case numbered " + $step205 + " in $temp_lam206";
}
}
} catch($e213) {
if(R.isCont($e213) && ($step205 !== 5)) {
$e213.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al210,$temp_lam206,$step205,[arr207,index208],[ann_check_temp212]);
}
if(R.isPyretException($e213)) {
$e213.pyretStack.push($al210);
}
throw $e213;
}
};
var anf_assign214 = R.makeFunction($temp_lam206);
array$get$now215.$var = anf_assign214;
var $temp_lam217 = function($arr218) {
var $step216 = 0;
var $ans219 = D;
var $al220 = L[77];
try {
if(R.isActivationRecord($arr218)) {
$step216 = $arr218.step;
$al220 = $arr218.from;
$ans219 = $arr218.ans;
arr218 = $arr218.args[0];
ann_check_temp222 = $arr218.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[77],1,$t);
}
var arr218 = $arr218;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step216) {
case 0: $step216 = 1;
$al220 = L[76];
R._checkAnn(L[76],Array136,arr218);
break;
case 1: $step216 = 2;
$al220 = L[74];
$field221 = R.getColonFieldLoc(arr218,"length",L[74]);
if(R.isMethod($field221)) {
$ans219 = $field221.full_meth(arr218);
} else {
if(!(R.isFunction($field221))) {
R.ffi.throwNonFunApp(L[74],$field221);
}
$ans219 = $field221.app();
}
break;
case 2: var ann_check_temp222 = $ans219;
$step216 = 3;
$al220 = L[75];
R._checkAnn(L[75],$type$Number4,ann_check_temp222);
break;
case 3: $step216 = 4;
$ans219 = ann_check_temp222;
break;
case 4: ++R.GAS;
return $ans219;
default: throw "No case numbered " + $step216 + " in $temp_lam217";
}
}
} catch($e223) {
if(R.isCont($e223) && ($step216 !== 4)) {
$e223.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al220,$temp_lam217,$step216,[arr218],[ann_check_temp222]);
}
if(R.isPyretException($e223)) {
$e223.pyretStack.push($al220);
}
throw $e223;
}
};
var anf_assign224 = R.makeFunction($temp_lam217);
array$length225.$var = anf_assign224;
var $temp_lam227 = function($arr228) {
var $step226 = 0;
var $ans229 = D;
var $al230 = L[81];
try {
if(R.isActivationRecord($arr228)) {
$step226 = $arr228.step;
$al230 = $arr228.from;
$ans229 = $arr228.ans;
arr228 = $arr228.args[0];
ann_check_temp232 = $arr228.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[81],1,$t);
}
var arr228 = $arr228;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step226) {
case 0: $step226 = 1;
$al230 = L[80];
R._checkAnn(L[80],Array136,arr228);
break;
case 1: $step226 = 2;
$al230 = L[78];
$field231 = R.getColonFieldLoc(arr228,"to-list-now",L[78]);
if(R.isMethod($field231)) {
$ans229 = $field231.full_meth(arr228);
} else {
if(!(R.isFunction($field231))) {
R.ffi.throwNonFunApp(L[78],$field231);
}
$ans229 = $field231.app();
}
break;
case 2: var ann_check_temp232 = $ans229;
$step226 = 3;
$al230 = L[79];
R._checkAnn(L[79],List233,ann_check_temp232);
break;
case 3: $step226 = 4;
$ans229 = ann_check_temp232;
break;
case 4: ++R.GAS;
return $ans229;
default: throw "No case numbered " + $step226 + " in $temp_lam227";
}
}
} catch($e234) {
if(R.isCont($e234) && ($step226 !== 4)) {
$e234.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al230,$temp_lam227,$step226,[arr228],[ann_check_temp232]);
}
if(R.isPyretException($e234)) {
$e234.pyretStack.push($al230);
}
throw $e234;
}
};
var anf_assign235 = R.makeFunction($temp_lam227);
array$to$list$now236.$var = anf_assign235;
var $temp_lam238 = function($$resumer239) {
var $step237 = 0;
var $ans240 = D;
var $al241 = L[84];
try {
if(R.isActivationRecord($$resumer239)) {
$step237 = $$resumer239.step;
$al241 = $$resumer239.from;
$ans240 = $$resumer239.ans;
$resumer239 = $$resumer239.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[84],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step237) {
case 0: var anf_arg242 = [];
$step237 = 1;
$al241 = L[82];
$field243 = R.getColonFieldLoc(raw$array14,"make",L[82]);
if(R.isMethod($field243)) {
$ans240 = $field243.full_meth(raw$array14,anf_arg242);
} else {
if(!(R.isFunction($field243))) {
R.ffi.throwNonFunApp(L[82],$field243);
}
$ans240 = $field243.app(anf_arg242);
}
break;
case 1: var anf_arg244 = $ans240;
$step237 = 2;
$al241 = L[83];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al241,make139.$var);
}
$ans240 = make139.$var.app(anf_arg244);
break;
case 2: ++R.GAS;
return $ans240;
default: throw "No case numbered " + $step237 + " in $temp_lam238";
}
}
} catch($e245) {
if(R.isCont($e245) && ($step237 !== 2)) {
$e245.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al241,$temp_lam238,$step237,[],[]);
}
if(R.isPyretException($e245)) {
$e245.pyretStack.push($al241);
}
throw $e245;
}
};
var anf_obj301 = R.makeFunction($temp_lam238);
var $temp_lam247 = function($a248) {
var $step246 = 0;
var $ans249 = D;
var $al250 = L[87];
try {
if(R.isActivationRecord($a248)) {
$step246 = $a248.step;
$al250 = $a248.from;
$ans249 = $a248.ans;
a248 = $a248.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[87],1,$t);
}
var a248 = $a248;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step246) {
case 0: var anf_arg251 = [a248];
$step246 = 1;
$al250 = L[85];
$field252 = R.getColonFieldLoc(raw$array14,"make",L[85]);
if(R.isMethod($field252)) {
$ans249 = $field252.full_meth(raw$array14,anf_arg251);
} else {
if(!(R.isFunction($field252))) {
R.ffi.throwNonFunApp(L[85],$field252);
}
$ans249 = $field252.app(anf_arg251);
}
break;
case 1: var anf_arg253 = $ans249;
$step246 = 2;
$al250 = L[86];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al250,make139.$var);
}
$ans249 = make139.$var.app(anf_arg253);
break;
case 2: ++R.GAS;
return $ans249;
default: throw "No case numbered " + $step246 + " in $temp_lam247";
}
}
} catch($e254) {
if(R.isCont($e254) && ($step246 !== 2)) {
$e254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al250,$temp_lam247,$step246,[a248],[]);
}
if(R.isPyretException($e254)) {
$e254.pyretStack.push($al250);
}
throw $e254;
}
};
var anf_obj302 = R.makeFunction($temp_lam247);
var $temp_lam256 = function($a257,$b258) {
var $step255 = 0;
var $ans259 = D;
var $al260 = L[90];
try {
if(R.isActivationRecord($a257)) {
$step255 = $a257.step;
$al260 = $a257.from;
$ans259 = $a257.ans;
a257 = $a257.args[0];
b258 = $a257.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[90],2,$t);
}
var a257 = $a257;
var b258 = $b258;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step255) {
case 0: var anf_arg261 = [a257,b258];
$step255 = 1;
$al260 = L[88];
$field262 = R.getColonFieldLoc(raw$array14,"make",L[88]);
if(R.isMethod($field262)) {
$ans259 = $field262.full_meth(raw$array14,anf_arg261);
} else {
if(!(R.isFunction($field262))) {
R.ffi.throwNonFunApp(L[88],$field262);
}
$ans259 = $field262.app(anf_arg261);
}
break;
case 1: var anf_arg263 = $ans259;
$step255 = 2;
$al260 = L[89];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al260,make139.$var);
}
$ans259 = make139.$var.app(anf_arg263);
break;
case 2: ++R.GAS;
return $ans259;
default: throw "No case numbered " + $step255 + " in $temp_lam256";
}
}
} catch($e264) {
if(R.isCont($e264) && ($step255 !== 2)) {
$e264.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al260,$temp_lam256,$step255,[a257,b258],[]);
}
if(R.isPyretException($e264)) {
$e264.pyretStack.push($al260);
}
throw $e264;
}
};
var anf_obj303 = R.makeFunction($temp_lam256);
var $temp_lam266 = function($a267,$b268,$c269) {
var $step265 = 0;
var $ans270 = D;
var $al271 = L[93];
try {
if(R.isActivationRecord($a267)) {
$step265 = $a267.step;
$al271 = $a267.from;
$ans270 = $a267.ans;
a267 = $a267.args[0];
b268 = $a267.args[1];
c269 = $a267.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[93],3,$t);
}
var a267 = $a267;
var b268 = $b268;
var c269 = $c269;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step265) {
case 0: var anf_arg272 = [a267,b268,c269];
$step265 = 1;
$al271 = L[91];
$field273 = R.getColonFieldLoc(raw$array14,"make",L[91]);
if(R.isMethod($field273)) {
$ans270 = $field273.full_meth(raw$array14,anf_arg272);
} else {
if(!(R.isFunction($field273))) {
R.ffi.throwNonFunApp(L[91],$field273);
}
$ans270 = $field273.app(anf_arg272);
}
break;
case 1: var anf_arg274 = $ans270;
$step265 = 2;
$al271 = L[92];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al271,make139.$var);
}
$ans270 = make139.$var.app(anf_arg274);
break;
case 2: ++R.GAS;
return $ans270;
default: throw "No case numbered " + $step265 + " in $temp_lam266";
}
}
} catch($e275) {
if(R.isCont($e275) && ($step265 !== 2)) {
$e275.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al271,$temp_lam266,$step265,[a267,b268,c269],[]);
}
if(R.isPyretException($e275)) {
$e275.pyretStack.push($al271);
}
throw $e275;
}
};
var anf_obj304 = R.makeFunction($temp_lam266);
var $temp_lam277 = function($a278,$b279,$c280,$d281) {
var $step276 = 0;
var $ans282 = D;
var $al283 = L[96];
try {
if(R.isActivationRecord($a278)) {
$step276 = $a278.step;
$al283 = $a278.from;
$ans282 = $a278.ans;
a278 = $a278.args[0];
b279 = $a278.args[1];
c280 = $a278.args[2];
d281 = $a278.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[96],4,$t);
}
var a278 = $a278;
var b279 = $b279;
var c280 = $c280;
var d281 = $d281;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step276) {
case 0: var anf_arg284 = [a278,b279,c280,d281];
$step276 = 1;
$al283 = L[94];
$field285 = R.getColonFieldLoc(raw$array14,"make",L[94]);
if(R.isMethod($field285)) {
$ans282 = $field285.full_meth(raw$array14,anf_arg284);
} else {
if(!(R.isFunction($field285))) {
R.ffi.throwNonFunApp(L[94],$field285);
}
$ans282 = $field285.app(anf_arg284);
}
break;
case 1: var anf_arg286 = $ans282;
$step276 = 2;
$al283 = L[95];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al283,make139.$var);
}
$ans282 = make139.$var.app(anf_arg286);
break;
case 2: ++R.GAS;
return $ans282;
default: throw "No case numbered " + $step276 + " in $temp_lam277";
}
}
} catch($e287) {
if(R.isCont($e287) && ($step276 !== 2)) {
$e287.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al283,$temp_lam277,$step276,[a278,b279,c280,d281],[]);
}
if(R.isPyretException($e287)) {
$e287.pyretStack.push($al283);
}
throw $e287;
}
};
var anf_obj305 = R.makeFunction($temp_lam277);
var $temp_lam289 = function($a290,$b291,$c292,$d293,$e294) {
var $step288 = 0;
var $ans295 = D;
var $al296 = L[99];
try {
if(R.isActivationRecord($a290)) {
$step288 = $a290.step;
$al296 = $a290.from;
$ans295 = $a290.ans;
a290 = $a290.args[0];
b291 = $a290.args[1];
c292 = $a290.args[2];
d293 = $a290.args[3];
e294 = $a290.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[99],5,$t);
}
var a290 = $a290;
var b291 = $b291;
var c292 = $c292;
var d293 = $d293;
var e294 = $e294;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step288) {
case 0: var anf_arg297 = [a290,b291,c292,d293,e294];
$step288 = 1;
$al296 = L[97];
$field298 = R.getColonFieldLoc(raw$array14,"make",L[97]);
if(R.isMethod($field298)) {
$ans295 = $field298.full_meth(raw$array14,anf_arg297);
} else {
if(!(R.isFunction($field298))) {
R.ffi.throwNonFunApp(L[97],$field298);
}
$ans295 = $field298.app(anf_arg297);
}
break;
case 1: var anf_arg299 = $ans295;
$step288 = 2;
$al296 = L[98];
if(!(R.isFunction(make139.$var))) {
R.ffi.throwNonFunApp($al296,make139.$var);
}
$ans295 = make139.$var.app(anf_arg299);
break;
case 2: ++R.GAS;
return $ans295;
default: throw "No case numbered " + $step288 + " in $temp_lam289";
}
}
} catch($e300) {
if(R.isCont($e300) && ($step288 !== 2)) {
$e300.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al296,$temp_lam289,$step288,[a290,b291,c292,d293,e294],[]);
}
if(R.isPyretException($e300)) {
$e300.pyretStack.push($al296);
}
throw $e300;
}
};
var anf_obj306 = R.makeFunction($temp_lam289);
var array307 = R.makeObject({"make":make139.$var,
"make0":anf_obj301,
"make1":anf_obj302,
"make2":anf_obj303,
"make3":anf_obj304,
"make4":anf_obj305,
"make5":anf_obj306});
var provides312 = R.makeObject({"array":array307,
"build-array":build$array161.$var,
"array-from-list":array$from$list181.$var,
"is-array":is$array308,
"array-of":array$of192.$var,
"array-set-now":array$set$now204.$var,
"array-get-now":array$get$now215.$var,
"array-length":array$length225.$var,
"array-to-list-now":array$to$list$now236.$var});
$step23 = 1;
$al27 = L[100];
$field309 = R.getColonFieldLoc(builtins15,"current-checker",L[100]);
if(R.isMethod($field309)) {
$ans26 = $field309.full_meth(builtins15);
} else {
if(!(R.isFunction($field309))) {
R.ffi.throwNonFunApp(L[100],$field309);
}
$ans26 = $field309.app();
}
break;
case 1: var anf_method_obj310 = $ans26;
$step23 = 2;
$al27 = L[100];
$field311 = R.getColonFieldLoc(anf_method_obj310,"results",L[100]);
if(R.isMethod($field311)) {
$ans26 = $field311.full_meth(anf_method_obj310);
} else {
if(!(R.isFunction($field311))) {
R.ffi.throwNonFunApp(L[100],$field311);
}
$ans26 = $field311.app();
}
break;
case 2: var checks313 = $ans26;
$step23 = 3;
$ans26 = R.makeObject({"answer":nothing8,
"namespace":NAMESPACE,
"defined-values":{"array":array307,
"array-to-list-now":array$to$list$now236.$var,
"make":make139.$var,
"array-length":array$length225.$var,
"array-get-now":array$get$now215.$var,
"array-set-now":array$set$now204.$var,
"array-of":array$of192.$var,
"array-from-list":array$from$list181.$var,
"build-array":build$array161.$var,
"is-array":is$array308,
"ArrayT":ArrayT28,
"get-arr-key":get$arr$key40,
"VS":VS17,
"lists":lists16},
"defined-types":{"List":List233,
"Array":Array136,
"lists":lists18,
"VS":VS19},
"provide-plus-types":R.makeObject({"values":provides312,
"types":{"List":List233,
"Array":Array136}}),
"checks":checks313});
break;
case 3: ++R.GAS;
return $ans26;
default: throw "No case numbered " + $step23 + " in $toplevel24";
}
}
} catch($e314) {
if(R.isCont($e314) && ($step23 !== 3)) {
$e314.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al27,$toplevel24,$step23,[],[provides312,array307,array$to$list$now236,array$length225,array$get$now215,array$set$now204,array$of192,array$from$list181,build$array161,is$array308,make139,get$arr$key40,List233,Array136,ArrayT28]);
}
if(R.isPyretException($e314)) {
$e314.pyretStack.push($al27);
}
throw $e314;
}
};
return R.safeCall($toplevel24,function(moduleVal) {
R.modules["$src/arr/base/arrays.arr20"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://contracts": ({
"requires":[{"import-type":"builtin",
"name":"error-display"},
{"import-type":"builtin",
"name":"lists"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE,M,$ED10,$L11) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,9,39,155,9,48,164],
[M,9,2,118,9,49,165],
[M,8,0,89,10,3,169],
[M,14,25,230,14,56,261],
[M,14,4,209,14,60,265],
[M,17,6,342,17,17,353],
[M,17,32,368,17,40,376],
[M,17,6,342,17,48,384],
[M,16,4,315,18,7,392],
[M,21,6,473,21,17,484],
[M,21,32,499,21,40,507],
[M,21,6,473,21,47,514],
[M,20,4,446,22,7,522],
[M,13,2,194,14,60,265],
[M,15,2,268,18,7,392],
[M,15,24,290,15,37,303],
[M,15,4,270,15,38,304],
[M,19,2,395,22,7,522],
[M,19,28,421,19,41,434],
[M,19,4,397,19,42,435],
[M,12,0,171,23,3,526],
[M,28,7,643,28,15,651],
[M,29,9,662,29,24,677],
[M,29,26,679,29,40,693],
[M,29,61,714,29,69,722],
[M,30,10,735,30,29,754],
[M,30,47,772,30,57,782],
[M,30,39,764,30,58,783],
[M,30,31,756,30,59,784],
[M,30,61,786,30,87,812],
[M,31,8,823,31,19,834],
[M,31,8,823,31,53,868],
[M,29,42,695,29,70,723],
[M,27,4,595,32,7,877],
[M,35,7,966,35,15,974],
[M,36,9,985,36,16,992],
[M,36,18,994,36,42,1018],
[M,36,60,1036,36,70,1046],
[M,36,52,1028,36,71,1047],
[M,36,44,1020,36,72,1048],
[M,37,10,1060,37,35,1085],
[M,37,56,1106,37,64,1114],
[M,37,37,1087,37,65,1115],
[M,34,4,918,38,7,1125],
[M,26,2,549,32,7,877],
[M,26,4,551,26,37,584],
[M,33,2,880,38,7,1125],
[M,33,4,882,33,29,907],
[M,25,0,528,39,3,1129],
[M,46,11,1313,46,19,1321],
[M,47,13,1336,47,20,1343],
[M,47,22,1345,47,69,1392],
[M,48,14,1438,48,33,1457],
[M,49,12,1472,49,23,1483],
[M,49,12,1472,49,49,1509],
[M,47,71,1394,47,99,1422],
[M,45,8,1287,50,11,1522],
[M,51,9,1533,51,17,1541],
[M,52,11,1554,52,18,1561],
[M,52,20,1563,52,74,1617],
[M,53,10,1630,53,21,1641],
[M,53,10,1630,53,47,1667],
[M,44,6,1251,53,49,1669],
[M,43,4,1204,54,7,1677],
[M,57,17,1785,57,24,1792],
[M,58,8,1802,58,34,1828],
[M,58,52,1846,58,61,1855],
[M,58,44,1838,58,62,1856],
[M,58,36,1830,58,63,1857],
[M,59,8,1867,59,47,1906],
[M,60,8,1941,60,27,1960],
[M,61,9,1971,61,22,1984],
[M,64,13,2054,64,21,2062],
[M,64,41,2082,64,49,2090],
[M,64,32,2073,64,50,2091],
[M,65,15,2108,65,22,2115],
[M,65,24,2117,65,53,2146],
[M,65,55,2148,65,76,2169],
[M,63,10,2033,66,13,2185],
[M,67,11,2198,67,19,2206],
[M,67,39,2226,67,47,2234],
[M,67,30,2217,67,48,2235],
[M,62,8,1994,67,50,2237],
[M,69,9,2259,69,17,2267],
[M,69,37,2287,69,45,2295],
[M,69,28,2278,69,46,2296],
[M,59,49,1908,59,72,1931],
[M,56,4,1727,71,7,2315],
[M,74,17,2422,74,24,2429],
[M,75,8,2439,75,32,2463],
[M,75,50,2481,75,64,2495],
[M,75,42,2473,75,65,2496],
[M,75,34,2465,75,66,2497],
[M,76,8,2507,76,39,2538],
[M,76,66,2565,76,107,2606],
[M,77,9,2617,77,22,2630],
[M,80,13,2700,80,21,2708],
[M,80,41,2728,80,49,2736],
[M,80,32,2719,80,50,2737],
[M,81,15,2754,81,22,2761],
[M,81,24,2763,81,53,2792],
[M,81,55,2794,81,76,2815],
[M,79,10,2679,82,13,2831],
[M,83,11,2844,83,19,2852],
[M,83,39,2872,83,47,2880],
[M,83,30,2863,83,48,2881],
[M,78,8,2640,83,50,2883],
[M,85,9,2905,85,17,2913],
[M,85,37,2933,85,45,2941],
[M,85,28,2924,85,46,2942],
[M,76,41,2540,76,64,2563],
[M,73,4,2364,87,7,2961],
[M,90,7,3088,90,15,3096],
[M,91,9,3107,91,16,3114],
[M,92,10,3126,92,45,3161],
[M,93,49,3212,93,75,3238],
[M,93,10,3173,93,76,3239],
[M,94,10,3251,94,42,3283],
[M,95,17,3303,95,25,3311],
[M,95,8,3294,95,26,3312],
[M,96,9,3323,96,16,3330],
[M,96,18,3332,96,37,3351],
[M,97,29,3383,97,48,3402],
[M,97,53,3407,97,80,3434],
[M,97,29,3383,97,81,3435],
[M,97,8,3362,97,82,3436],
[M,89,4,3040,99,7,3452],
[M,102,7,3548,102,15,3556],
[M,103,9,3567,103,16,3574],
[M,103,18,3576,103,42,3600],
[M,104,83,3685,104,93,3695],
[M,104,49,3651,104,94,3696],
[M,104,10,3612,104,95,3697],
[M,105,10,3709,105,44,3743],
[M,105,62,3761,105,71,3770],
[M,105,54,3753,105,72,3771],
[M,105,46,3745,105,73,3772],
[M,104,57,3659,104,93,3695],
[M,101,4,3500,106,7,3782],
[M,42,2,1153,54,7,1677],
[M,42,28,1179,42,41,1192],
[M,42,4,1155,42,42,1193],
[M,55,2,1680,71,7,2315],
[M,55,31,1709,55,37,1715],
[M,55,4,1682,55,38,1716],
[M,72,2,2318,87,7,2961],
[M,72,4,2320,72,37,2353],
[M,88,2,2964,99,7,3452],
[M,88,46,3008,88,52,3014],
[M,88,46,3008,88,66,3028],
[M,88,4,2966,88,67,3029],
[M,100,2,3455,106,7,3782],
[M,100,4,3457,100,36,3489],
[M,41,0,1131,107,3,3786],
[M,3,0,17,107,3,3786]];
var _plus1 = NAMESPACE.get("_plus");
var $type$String2 = NAMESPACE.get("$type$String");
var builtins3 = NAMESPACE.get("builtins");
var nothing4 = NAMESPACE.get("nothing");
var ED5 = R.getField($ED10,"values");
var L6 = R.getField($L11,"values");
var ED7 = R.getField($ED10,"types");
var L8 = R.getField($L11,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED10);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$L11);
var $toplevel13 = function($$resumer527) {
var $step12 = 0;
var $ans15 = D;
var $al16 = L[154];
try {
if(R.isActivationRecord($$resumer527)) {
$step12 = $$resumer527.step;
$al16 = $$resumer527.from;
$ans15 = $$resumer527.ans;
$resumer527 = $$resumer527.args[0];
provides525 = $$resumer527.vars[0];
dot$ann$not$present519 = $$resumer527.vars[1];
is$dot$ann$not$present517 = $$resumer527.vars[2];
record$fields$fail515 = $$resumer527.vars[3];
is$record$fields$fail513 = $$resumer527.vars[4];
predicate$failure511 = $$resumer527.vars[5];
is$predicate$failure509 = $$resumer527.vars[6];
type$mismatch507 = $$resumer527.vars[7];
is$type$mismatch505 = $$resumer527.vars[8];
ref$init503 = $$resumer527.vars[9];
is$ref$init501 = $$resumer527.vars[10];
is$FailureReason499 = $$resumer527.vars[11];
FailureReason497 = $$resumer527.vars[12];
missing$field200 = $$resumer527.vars[13];
is$missing$field198 = $$resumer527.vars[14];
field$failure196 = $$resumer527.vars[15];
is$field$failure194 = $$resumer527.vars[16];
is$FieldFailure192 = $$resumer527.vars[17];
FieldFailure190 = $$resumer527.vars[18];
fail$arg105 = $$resumer527.vars[19];
is$fail$arg103 = $$resumer527.vars[20];
fail101 = $$resumer527.vars[21];
is$fail99 = $$resumer527.vars[22];
ok97 = $$resumer527.vars[23];
is$ok95 = $$resumer527.vars[24];
is$ContractResult93 = $$resumer527.vars[25];
ContractResult91 = $$resumer527.vars[26];
draw$and$highlight30 = $$resumer527.vars[27];
FailureReason73 = $$resumer527.vars[28];
FieldFailure524 = $$resumer527.vars[29];
ContractResult523 = $$resumer527.vars[30];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step12) {
case 0: var ContractResult17 = R.namedBrander("ContractResult");
var ContractResult523 = R.makeBranderAnn(ContractResult17,"ContractResult");
var FieldFailure18 = R.namedBrander("FieldFailure");
var FieldFailure524 = R.makeBranderAnn(FieldFailure18,"FieldFailure");
var FailureReason19 = R.namedBrander("FailureReason");
var FailureReason73 = R.makeBranderAnn(FailureReason19,"FailureReason");
var draw$and$highlight30 = {"$var":D};
var ContractResult89 = {"$var":D};
var ContractResult91 = {"$var":D};
var is$ContractResult93 = {"$var":D};
var is$ok95 = {"$var":D};
var ok97 = {"$var":D};
var is$fail99 = {"$var":D};
var fail101 = {"$var":D};
var is$fail$arg103 = {"$var":D};
var fail$arg105 = {"$var":D};
var FieldFailure188 = {"$var":D};
var FieldFailure190 = {"$var":D};
var is$FieldFailure192 = {"$var":D};
var is$field$failure194 = {"$var":D};
var field$failure196 = {"$var":D};
var is$missing$field198 = {"$var":D};
var missing$field200 = {"$var":D};
var FailureReason495 = {"$var":D};
var FailureReason497 = {"$var":D};
var is$FailureReason499 = {"$var":D};
var is$ref$init501 = {"$var":D};
var ref$init503 = {"$var":D};
var is$type$mismatch505 = {"$var":D};
var type$mismatch507 = {"$var":D};
var is$predicate$failure509 = {"$var":D};
var predicate$failure511 = {"$var":D};
var is$record$fields$fail513 = {"$var":D};
var record$fields$fail515 = {"$var":D};
var is$dot$ann$not$present517 = {"$var":D};
var dot$ann$not$present519 = {"$var":D};
var $temp_lam21 = function($l22) {
var $step20 = 0;
var $ans23 = D;
var $al24 = L[2];
try {
if(R.isActivationRecord($l22)) {
$step20 = $l22.step;
$al24 = $l22.from;
$ans23 = $l22.ans;
l22 = $l22.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
var l22 = $l22;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step20) {
case 0: $step20 = 1;
$al24 = L[0];
$field25 = R.getColonFieldLoc(ED5,"loc",L[0]);
if(R.isMethod($field25)) {
$ans23 = $field25.full_meth(ED5,l22);
} else {
if(!(R.isFunction($field25))) {
R.ffi.throwNonFunApp(L[0],$field25);
}
$ans23 = $field25.app(l22);
}
break;
case 1: var anf_arg26 = $ans23;
$step20 = 2;
$al24 = L[1];
$field27 = R.getColonFieldLoc(ED5,"loc-display",L[1]);
if(R.isMethod($field27)) {
$ans23 = $field27.full_meth(ED5,l22,("error-highlight"),anf_arg26);
} else {
if(!(R.isFunction($field27))) {
R.ffi.throwNonFunApp(L[1],$field27);
}
$ans23 = $field27.app(l22,("error-highlight"),anf_arg26);
}
break;
case 2: ++R.GAS;
return $ans23;
default: throw "No case numbered " + $step20 + " in $temp_lam21";
}
}
} catch($e28) {
if(R.isCont($e28) && ($step20 !== 2)) {
$e28.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al24,$temp_lam21,$step20,[l22],[]);
}
if(R.isPyretException($e28)) {
$e28.pyretStack.push($al24);
}
throw $e28;
}
};
var anf_assign29 = R.makeFunction($temp_lam21);
draw$and$highlight30.$var = anf_assign29;
var $temp_full32 = function($self33) {
var $step31 = 0;
var $ans34 = D;
var $al35 = L[4];
try {
if(R.isActivationRecord($self33)) {
$step31 = $self33.step;
$al35 = $self33.from;
$ans34 = $self33.ans;
self33 = $self33.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[4],1,$t);
}
var self33 = $self33;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step31) {
case 0: $step31 = 1;
$al35 = L[3];
$field36 = R.getColonFieldLoc(ED5,"text",L[3]);
if(R.isMethod($field36)) {
$ans34 = $field36.full_meth(ED5,("There were no errors"));
} else {
if(!(R.isFunction($field36))) {
R.ffi.throwNonFunApp(L[3],$field36);
}
$ans34 = $field36.app(("There were no errors"));
}
break;
case 1: ++R.GAS;
return $ans34;
default: throw "No case numbered " + $step31 + " in $temp_full32";
}
}
} catch($e37) {
if(R.isCont($e37) && ($step31 !== 1)) {
$e37.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al35,$temp_full32,$step31,[self33],[]);
}
if(R.isPyretException($e37)) {
$e37.pyretStack.push($al35);
}
throw $e37;
}
};
var anf_singleton_variant_member59 = R.makeMethod0($temp_full32);
var $temp_full39 = function($self40) {
var $step38 = 0;
var $ans41 = D;
var $al42 = L[8];
try {
if(R.isActivationRecord($self40)) {
$step38 = $self40.step;
$al42 = $self40.from;
$ans41 = $self40.ans;
self40 = $self40.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],1,$t);
}
var self40 = $self40;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step38) {
case 0: var anf_method_obj43 = G(self40,"reason",L[5]);
var anf_arg44 = G(self40,"loc",L[6]);
$step38 = 1;
$al42 = L[7];
$field45 = R.getColonFieldLoc(anf_method_obj43,"render-reason",L[7]);
if(R.isMethod($field45)) {
$ans41 = $field45.full_meth(anf_method_obj43,anf_arg44,(false));
} else {
if(!(R.isFunction($field45))) {
R.ffi.throwNonFunApp(L[7],$field45);
}
$ans41 = $field45.app(anf_arg44,(false));
}
break;
case 1: ++R.GAS;
return $ans41;
default: throw "No case numbered " + $step38 + " in $temp_full39";
}
}
} catch($e46) {
if(R.isCont($e46) && ($step38 !== 1)) {
$e46.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al42,$temp_full39,$step38,[self40],[]);
}
if(R.isPyretException($e46)) {
$e46.pyretStack.push($al42);
}
throw $e46;
}
};
var anf_variant_member67 = R.makeMethod0($temp_full39);
var $temp_full48 = function($self49) {
var $step47 = 0;
var $ans50 = D;
var $al51 = L[12];
try {
if(R.isActivationRecord($self49)) {
$step47 = $self49.step;
$al51 = $self49.from;
$ans50 = $self49.ans;
self49 = $self49.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],1,$t);
}
var self49 = $self49;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step47) {
case 0: var anf_method_obj52 = G(self49,"reason",L[9]);
var anf_arg53 = G(self49,"loc",L[10]);
$step47 = 1;
$al51 = L[11];
$field54 = R.getColonFieldLoc(anf_method_obj52,"render-reason",L[11]);
if(R.isMethod($field54)) {
$ans50 = $field54.full_meth(anf_method_obj52,anf_arg53,(true));
} else {
if(!(R.isFunction($field54))) {
R.ffi.throwNonFunApp(L[11],$field54);
}
$ans50 = $field54.app(anf_arg53,(true));
}
break;
case 1: ++R.GAS;
return $ans50;
default: throw "No case numbered " + $step47 + " in $temp_full48";
}
}
} catch($e55) {
if(R.isCont($e55) && ($step47 !== 1)) {
$e55.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al51,$temp_full48,$step47,[self49],[]);
}
if(R.isPyretException($e55)) {
$e55.pyretStack.push($al51);
}
throw $e55;
}
};
var anf_variant_member79 = R.makeMethod0($temp_full48);
var $ok_getfields62 = function(f) {
return f();
};
var $ok_getfieldsref60 = function(f) {
return f();
};
var $ok_mutablemask61 = [];
var $ok$base56 = {"render-reason":anf_singleton_variant_member59,
"_match":R.makeMatch("ok",0)};
var $ok$brands58 = {"$brand$ok":true};
$ok$brands58[ContractResult17._brand] = true;
var $fail_getfields70 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $fail_getfieldsref68 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $fail_mutablemask69 = [false,false];
var $fail$base64 = {"$fieldNames":["loc","reason"],
"render-reason":anf_variant_member67,
"_match":R.makeMatch("fail",2)};
var $fail$brands66 = {"$brand$fail":true};
$fail$brands66[ContractResult17._brand] = true;
var fail72 = R.makeVariantConstructor(L[16],function() {
return [FailureReason73];
},["reason74"],[L[15]],[false,false],["loc75","reason74"],$fail_mutablemask69,$fail$base64,$fail$brands66,"fail",$fail_getfieldsref68,$fail_getfields70,$fail$base64);
var $fail$arg_getfields82 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $fail$arg_getfieldsref80 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $fail$arg_mutablemask81 = [false,false];
var $fail$arg$base76 = {"$fieldNames":["loc","reason"],
"render-reason":anf_variant_member79,
"_match":R.makeMatch("fail-arg",2)};
var $fail$arg$brands78 = {"$brand$fail$arg":true};
$fail$arg$brands78[ContractResult17._brand] = true;
var fail$arg84 = R.makeVariantConstructor(L[19],function() {
return [FailureReason73];
},["reason85"],[L[18]],[false,false],["loc86","reason85"],$fail$arg_mutablemask81,$fail$arg$base76,$fail$arg$brands78,"fail-arg",$fail$arg_getfieldsref80,$fail$arg_getfields82,$fail$arg$base76);
var anf_assign88 = R.makeObject({"ContractResult":R.makeFunction(function($val87) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[20],1,$t);
}
return R.makeBoolean(R.hasBrand($val87,ContractResult17._brand));
}),
"is-ok":R.makeFunction(function($val63) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
return R.makeBoolean(R.hasBrand($val63,"$brand$ok"));
}),
"ok":R.makeDataValue($ok$base56,$ok$brands58,"ok",$ok_getfieldsref60,$ok_getfields62,-1,$ok_mutablemask61,$ok$base56),
"is-fail":R.makeFunction(function($val71) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[14],1,$t);
}
return R.makeBoolean(R.hasBrand($val71,"$brand$fail"));
}),
"fail":fail72,
"is-fail-arg":R.makeFunction(function($val83) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],1,$t);
}
return R.makeBoolean(R.hasBrand($val83,"$brand$fail$arg"));
}),
"fail-arg":fail$arg84});
ContractResult89.$var = anf_assign88;
var anf_assign90 = G(ContractResult89.$var,"ContractResult",L[20]);
ContractResult91.$var = anf_assign90;
var anf_assign92 = G(ContractResult89.$var,"ContractResult",L[20]);
is$ContractResult93.$var = anf_assign92;
var anf_assign94 = G(ContractResult89.$var,"is-ok",L[13]);
is$ok95.$var = anf_assign94;
var anf_assign96 = G(ContractResult89.$var,"ok",L[13]);
ok97.$var = anf_assign96;
var anf_assign98 = G(ContractResult89.$var,"is-fail",L[14]);
is$fail99.$var = anf_assign98;
var anf_assign100 = G(ContractResult89.$var,"fail",L[14]);
fail101.$var = anf_assign100;
var anf_assign102 = G(ContractResult89.$var,"is-fail-arg",L[17]);
is$fail$arg103.$var = anf_assign102;
var anf_assign104 = G(ContractResult89.$var,"fail-arg",L[17]);
fail$arg105.$var = anf_assign104;
var $temp_full107 = function($self108,$loc109,$from$fail$arg110) {
var $step106 = 0;
var $ans111 = D;
var $al112 = L[33];
try {
if(R.isActivationRecord($self108)) {
$step106 = $self108.step;
$al112 = $self108.from;
$ans111 = $self108.ans;
self108 = $self108.args[0];
loc109 = $self108.args[1];
from$fail$arg110 = $self108.args[2];
anf_array_val131 = $self108.vars[0];
anf_array_val124 = $self108.vars[1];
anf_array_val123 = $self108.vars[2];
anf_array_val122 = $self108.vars[3];
anf_array_val121 = $self108.vars[4];
anf_method_obj126 = $self108.vars[5];
anf_method_obj133 = $self108.vars[6];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[33],3,$t);
}
var self108 = $self108;
var loc109 = $loc109;
var from$fail$arg110 = $from$fail$arg110;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step106) {
case 0: var anf_method_obj133 = G(ED5,"error",L[21]);
var anf_method_obj126 = G(ED5,"para-nospace",L[22]);
$step106 = 1;
$al112 = L[23];
$field113 = R.getColonFieldLoc(ED5,"text",L[23]);
if(R.isMethod($field113)) {
$ans111 = $field113.full_meth(ED5,("At "));
} else {
if(!(R.isFunction($field113))) {
R.ffi.throwNonFunApp(L[23],$field113);
}
$ans111 = $field113.app(("At "));
}
break;
case 1: var anf_array_val121 = $ans111;
var anf_arg114 = G(self108,"loc",L[24]);
$step106 = 2;
$al112 = L[32];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al112,draw$and$highlight30.$var);
}
$ans111 = draw$and$highlight30.$var.app(anf_arg114);
break;
case 2: var anf_array_val122 = $ans111;
$step106 = 3;
$al112 = L[25];
$field115 = R.getColonFieldLoc(ED5,"text",L[25]);
if(R.isMethod($field115)) {
$ans111 = $field115.full_meth(ED5,(", field "));
} else {
if(!(R.isFunction($field115))) {
R.ffi.throwNonFunApp(L[25],$field115);
}
$ans111 = $field115.app((", field "));
}
break;
case 3: var anf_array_val123 = $ans111;
var anf_arg116 = G(self108,"field",L[26]);
$step106 = 4;
$al112 = L[27];
$field117 = R.getColonFieldLoc(ED5,"text",L[27]);
if(R.isMethod($field117)) {
$ans111 = $field117.full_meth(ED5,anf_arg116);
} else {
if(!(R.isFunction($field117))) {
R.ffi.throwNonFunApp(L[27],$field117);
}
$ans111 = $field117.app(anf_arg116);
}
break;
case 4: var anf_arg118 = $ans111;
$step106 = 5;
$al112 = L[28];
$field119 = R.getColonFieldLoc(ED5,"code",L[28]);
if(R.isMethod($field119)) {
$ans111 = $field119.full_meth(ED5,anf_arg118);
} else {
if(!(R.isFunction($field119))) {
R.ffi.throwNonFunApp(L[28],$field119);
}
$ans111 = $field119.app(anf_arg118);
}
break;
case 5: var anf_array_val124 = $ans111;
$step106 = 6;
$al112 = L[29];
$field120 = R.getColonFieldLoc(ED5,"text",L[29]);
if(R.isMethod($field120)) {
$ans111 = $field120.full_meth(ED5,(" failed because"));
} else {
if(!(R.isFunction($field120))) {
R.ffi.throwNonFunApp(L[29],$field120);
}
$ans111 = $field120.app((" failed because"));
}
break;
case 6: var anf_array_val125 = $ans111;
var anf_arg127 = [anf_array_val121,anf_array_val122,anf_array_val123,anf_array_val124,anf_array_val125];
$step106 = 7;
$al112 = L[22];
$field128 = R.getColonFieldLoc(anf_method_obj126,"make",L[22]);
if(R.isMethod($field128)) {
$ans111 = $field128.full_meth(anf_method_obj126,anf_arg127);
} else {
if(!(R.isFunction($field128))) {
R.ffi.throwNonFunApp(L[22],$field128);
}
$ans111 = $field128.app(anf_arg127);
}
break;
case 7: var anf_array_val131 = $ans111;
var anf_method_obj129 = G(self108,"reason",L[30]);
$step106 = 8;
$al112 = L[31];
$field130 = R.getColonFieldLoc(anf_method_obj129,"render-reason",L[31]);
if(R.isMethod($field130)) {
$ans111 = $field130.full_meth(anf_method_obj129,loc109,from$fail$arg110);
} else {
if(!(R.isFunction($field130))) {
R.ffi.throwNonFunApp(L[31],$field130);
}
$ans111 = $field130.app(loc109,from$fail$arg110);
}
break;
case 8: var anf_array_val132 = $ans111;
var anf_arg134 = [anf_array_val131,anf_array_val132];
$step106 = 9;
$al112 = L[21];
$field135 = R.getColonFieldLoc(anf_method_obj133,"make",L[21]);
if(R.isMethod($field135)) {
$ans111 = $field135.full_meth(anf_method_obj133,anf_arg134);
} else {
if(!(R.isFunction($field135))) {
R.ffi.throwNonFunApp(L[21],$field135);
}
$ans111 = $field135.app(anf_arg134);
}
break;
case 9: ++R.GAS;
return $ans111;
default: throw "No case numbered " + $step106 + " in $temp_full107";
}
}
} catch($e136) {
if(R.isCont($e136) && ($step106 !== 9)) {
$e136.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al112,$temp_full107,$step106,[self108,loc109,from$fail$arg110],[anf_array_val131,anf_array_val124,anf_array_val123,anf_array_val122,anf_array_val121,anf_method_obj126,anf_method_obj133]);
}
if(R.isPyretException($e136)) {
$e136.pyretStack.push($al112);
}
throw $e136;
}
};
var anf_variant_member166 = R.makeMethod2($temp_full107);
var $temp_full138 = function($self139,$loc140,$from$fail$arg141) {
var $step137 = 0;
var $ans142 = D;
var $al143 = L[43];
try {
if(R.isActivationRecord($self139)) {
$step137 = $self139.step;
$al143 = $self139.from;
$ans142 = $self139.ans;
self139 = $self139.args[0];
loc140 = $self139.args[1];
from$fail$arg141 = $self139.args[2];
anf_array_val153 = $self139.vars[0];
anf_array_val152 = $self139.vars[1];
anf_array_val151 = $self139.vars[2];
anf_method_obj155 = $self139.vars[3];
anf_method_obj159 = $self139.vars[4];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[43],3,$t);
}
var self139 = $self139;
var loc140 = $loc140;
var from$fail$arg141 = $from$fail$arg141;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step137) {
case 0: var anf_method_obj159 = G(ED5,"error",L[34]);
var anf_method_obj155 = G(ED5,"para",L[35]);
$step137 = 1;
$al143 = L[36];
$field144 = R.getColonFieldLoc(ED5,"text",L[36]);
if(R.isMethod($field144)) {
$ans142 = $field144.full_meth(ED5,("Missing field"));
} else {
if(!(R.isFunction($field144))) {
R.ffi.throwNonFunApp(L[36],$field144);
}
$ans142 = $field144.app(("Missing field"));
}
break;
case 1: var anf_array_val151 = $ans142;
var anf_arg145 = G(self139,"field",L[37]);
$step137 = 2;
$al143 = L[38];
$field146 = R.getColonFieldLoc(ED5,"text",L[38]);
if(R.isMethod($field146)) {
$ans142 = $field146.full_meth(ED5,anf_arg145);
} else {
if(!(R.isFunction($field146))) {
R.ffi.throwNonFunApp(L[38],$field146);
}
$ans142 = $field146.app(anf_arg145);
}
break;
case 2: var anf_arg147 = $ans142;
$step137 = 3;
$al143 = L[39];
$field148 = R.getColonFieldLoc(ED5,"code",L[39]);
if(R.isMethod($field148)) {
$ans142 = $field148.full_meth(ED5,anf_arg147);
} else {
if(!(R.isFunction($field148))) {
R.ffi.throwNonFunApp(L[39],$field148);
}
$ans142 = $field148.app(anf_arg147);
}
break;
case 3: var anf_array_val152 = $ans142;
$step137 = 4;
$al143 = L[40];
$field149 = R.getColonFieldLoc(ED5,"text",L[40]);
if(R.isMethod($field149)) {
$ans142 = $field149.full_meth(ED5,("is required at"));
} else {
if(!(R.isFunction($field149))) {
R.ffi.throwNonFunApp(L[40],$field149);
}
$ans142 = $field149.app(("is required at"));
}
break;
case 4: var anf_array_val153 = $ans142;
var anf_arg150 = G(self139,"loc",L[41]);
$step137 = 5;
$al143 = L[42];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al143,draw$and$highlight30.$var);
}
$ans142 = draw$and$highlight30.$var.app(anf_arg150);
break;
case 5: var anf_array_val154 = $ans142;
var anf_arg156 = [anf_array_val151,anf_array_val152,anf_array_val153,anf_array_val154];
$step137 = 6;
$al143 = L[35];
$field157 = R.getColonFieldLoc(anf_method_obj155,"make",L[35]);
if(R.isMethod($field157)) {
$ans142 = $field157.full_meth(anf_method_obj155,anf_arg156);
} else {
if(!(R.isFunction($field157))) {
R.ffi.throwNonFunApp(L[35],$field157);
}
$ans142 = $field157.app(anf_arg156);
}
break;
case 6: var anf_array_val158 = $ans142;
var anf_arg160 = [anf_array_val158];
$step137 = 7;
$al143 = L[34];
$field161 = R.getColonFieldLoc(anf_method_obj159,"make",L[34]);
if(R.isMethod($field161)) {
$ans142 = $field161.full_meth(anf_method_obj159,anf_arg160);
} else {
if(!(R.isFunction($field161))) {
R.ffi.throwNonFunApp(L[34],$field161);
}
$ans142 = $field161.app(anf_arg160);
}
break;
case 7: ++R.GAS;
return $ans142;
default: throw "No case numbered " + $step137 + " in $temp_full138";
}
}
} catch($e162) {
if(R.isCont($e162) && ($step137 !== 7)) {
$e162.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al143,$temp_full138,$step137,[self139,loc140,from$fail$arg141],[anf_array_val153,anf_array_val152,anf_array_val151,anf_method_obj155,anf_method_obj159]);
}
if(R.isPyretException($e162)) {
$e162.pyretStack.push($al143);
}
throw $e162;
}
};
var anf_variant_member178 = R.makeMethod2($temp_full138);
var $field$failure_getfields169 = function(f) {
return f(this.dict["loc"],this.dict["field"],this.dict["reason"]);
};
var $field$failure_getfieldsref167 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]),R.derefField(this.dict["reason"],false,refmask[2]));
};
var $field$failure_mutablemask168 = [false,false,false];
var $field$failure$base163 = {"$fieldNames":["loc","field","reason"],
"render-reason":anf_variant_member166,
"_match":R.makeMatch("field-failure",3)};
var $field$failure$brands165 = {"$brand$field$failure":true};
$field$failure$brands165[FieldFailure18._brand] = true;
var field$failure171 = R.makeVariantConstructor(L[45],function() {
return [];
},[],[],[false,false,false],["loc172","field173","reason174"],$field$failure_mutablemask168,$field$failure$base163,$field$failure$brands165,"field-failure",$field$failure_getfieldsref167,$field$failure_getfields169,$field$failure$base163);
var $missing$field_getfields181 = function(f) {
return f(this.dict["loc"],this.dict["field"]);
};
var $missing$field_getfieldsref179 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]));
};
var $missing$field_mutablemask180 = [false,false];
var $missing$field$base175 = {"$fieldNames":["loc","field"],
"render-reason":anf_variant_member178,
"_match":R.makeMatch("missing-field",2)};
var $missing$field$brands177 = {"$brand$missing$field":true};
$missing$field$brands177[FieldFailure18._brand] = true;
var missing$field183 = R.makeVariantConstructor(L[47],function() {
return [];
},[],[],[false,false],["loc184","field185"],$missing$field_mutablemask180,$missing$field$base175,$missing$field$brands177,"missing-field",$missing$field_getfieldsref179,$missing$field_getfields181,$missing$field$base175);
var anf_assign187 = R.makeObject({"FieldFailure":R.makeFunction(function($val186) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[48],1,$t);
}
return R.makeBoolean(R.hasBrand($val186,FieldFailure18._brand));
}),
"is-field-failure":R.makeFunction(function($val170) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],1,$t);
}
return R.makeBoolean(R.hasBrand($val170,"$brand$field$failure"));
}),
"field-failure":field$failure171,
"is-missing-field":R.makeFunction(function($val182) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[46],1,$t);
}
return R.makeBoolean(R.hasBrand($val182,"$brand$missing$field"));
}),
"missing-field":missing$field183});
FieldFailure188.$var = anf_assign187;
var anf_assign189 = G(FieldFailure188.$var,"FieldFailure",L[48]);
FieldFailure190.$var = anf_assign189;
var anf_assign191 = G(FieldFailure188.$var,"FieldFailure",L[48]);
is$FieldFailure192.$var = anf_assign191;
var anf_assign193 = G(FieldFailure188.$var,"is-field-failure",L[44]);
is$field$failure194.$var = anf_assign193;
var anf_assign195 = G(FieldFailure188.$var,"field-failure",L[44]);
field$failure196.$var = anf_assign195;
var anf_assign197 = G(FieldFailure188.$var,"is-missing-field",L[46]);
is$missing$field198.$var = anf_assign197;
var anf_assign199 = G(FieldFailure188.$var,"missing-field",L[46]);
missing$field200.$var = anf_assign199;
var $temp_full202 = function($self203,$loc204,$from$fail$arg205) {
var $step201 = 0;
var $ans206 = D;
var $al207 = L[63];
try {
if(R.isActivationRecord($self203)) {
$step201 = $self203.step;
$al207 = $self203.from;
$ans206 = $self203.ans;
self203 = $self203.args[0];
loc204 = $self203.args[1];
from$fail$arg205 = $self203.args[2];
anf_array_val236 = $self203.vars[0];
anf_method_obj231 = $self203.vars[1];
anf_method_obj238 = $self203.vars[2];
anf_arg241 = $self203.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[63],3,$t);
}
var self203 = $self203;
var loc204 = $loc204;
var from$fail$arg205 = $from$fail$arg205;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step201) {
case 0: var $temp_lam209 = function($user$loc210) {
var $step208 = 0;
var $ans211 = D;
var $al212 = L[56];
try {
if(R.isActivationRecord($user$loc210)) {
$step208 = $user$loc210.step;
$al212 = $user$loc210.from;
$ans211 = $user$loc210.ans;
user$loc210 = $user$loc210.args[0];
anf_array_val223 = $user$loc210.vars[0];
anf_array_val216 = $user$loc210.vars[1];
anf_array_val215 = $user$loc210.vars[2];
anf_method_obj218 = $user$loc210.vars[3];
anf_method_obj225 = $user$loc210.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[56],1,$t);
}
var user$loc210 = $user$loc210;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step208) {
case 0: var anf_method_obj225 = G(ED5,"error",L[49]);
var anf_method_obj218 = G(ED5,"para",L[50]);
$step208 = 1;
$al212 = L[51];
$field213 = R.getColonFieldLoc(ED5,"text",L[51]);
if(R.isMethod($field213)) {
$ans211 = $field213.full_meth(ED5,("Failed while initializing a graph at"));
} else {
if(!(R.isFunction($field213))) {
R.ffi.throwNonFunApp(L[51],$field213);
}
$ans211 = $field213.app(("Failed while initializing a graph at"));
}
break;
case 1: var anf_array_val215 = $ans211;
$step208 = 2;
$al212 = L[55];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al212,draw$and$highlight30.$var);
}
$ans211 = draw$and$highlight30.$var.app(user$loc210);
break;
case 2: var anf_array_val216 = $ans211;
$step208 = 3;
$al212 = L[52];
$field214 = R.getColonFieldLoc(ED5,"text",L[52]);
if(R.isMethod($field214)) {
$ans211 = $field214.full_meth(ED5,("because:"));
} else {
if(!(R.isFunction($field214))) {
R.ffi.throwNonFunApp(L[52],$field214);
}
$ans211 = $field214.app(("because:"));
}
break;
case 3: var anf_array_val217 = $ans211;
var anf_arg219 = [anf_array_val215,anf_array_val216,anf_array_val217];
$step208 = 4;
$al212 = L[50];
$field220 = R.getColonFieldLoc(anf_method_obj218,"make",L[50]);
if(R.isMethod($field220)) {
$ans211 = $field220.full_meth(anf_method_obj218,anf_arg219);
} else {
if(!(R.isFunction($field220))) {
R.ffi.throwNonFunApp(L[50],$field220);
}
$ans211 = $field220.app(anf_arg219);
}
break;
case 4: var anf_array_val223 = $ans211;
var anf_method_obj221 = G(self203,"reason",L[53]);
$step208 = 5;
$al212 = L[54];
$field222 = R.getColonFieldLoc(anf_method_obj221,"render-reason",L[54]);
if(R.isMethod($field222)) {
$ans211 = $field222.full_meth(anf_method_obj221,loc204,(false));
} else {
if(!(R.isFunction($field222))) {
R.ffi.throwNonFunApp(L[54],$field222);
}
$ans211 = $field222.app(loc204,(false));
}
break;
case 5: var anf_array_val224 = $ans211;
var anf_arg226 = [anf_array_val223,anf_array_val224];
$step208 = 6;
$al212 = L[49];
$field227 = R.getColonFieldLoc(anf_method_obj225,"make",L[49]);
if(R.isMethod($field227)) {
$ans211 = $field227.full_meth(anf_method_obj225,anf_arg226);
} else {
if(!(R.isFunction($field227))) {
R.ffi.throwNonFunApp(L[49],$field227);
}
$ans211 = $field227.app(anf_arg226);
}
break;
case 6: ++R.GAS;
return $ans211;
default: throw "No case numbered " + $step208 + " in $temp_lam209";
}
}
} catch($e228) {
if(R.isCont($e228) && ($step208 !== 6)) {
$e228.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al212,$temp_lam209,$step208,[user$loc210],[anf_array_val223,anf_array_val216,anf_array_val215,anf_method_obj218,anf_method_obj225]);
}
if(R.isPyretException($e228)) {
$e228.pyretStack.push($al212);
}
throw $e228;
}
};
var anf_arg241 = R.makeFunction($temp_lam209);
var anf_method_obj238 = G(ED5,"error",L[57]);
var anf_method_obj231 = G(ED5,"para",L[58]);
$step201 = 1;
$al207 = L[59];
$field229 = R.getColonFieldLoc(ED5,"text",L[59]);
if(R.isMethod($field229)) {
$ans206 = $field229.full_meth(ED5,("Failed while initializing a graph, because:"));
} else {
if(!(R.isFunction($field229))) {
R.ffi.throwNonFunApp(L[59],$field229);
}
$ans206 = $field229.app(("Failed while initializing a graph, because:"));
}
break;
case 1: var anf_array_val230 = $ans206;
var anf_arg232 = [anf_array_val230];
$step201 = 2;
$al207 = L[58];
$field233 = R.getColonFieldLoc(anf_method_obj231,"make",L[58]);
if(R.isMethod($field233)) {
$ans206 = $field233.full_meth(anf_method_obj231,anf_arg232);
} else {
if(!(R.isFunction($field233))) {
R.ffi.throwNonFunApp(L[58],$field233);
}
$ans206 = $field233.app(anf_arg232);
}
break;
case 2: var anf_array_val236 = $ans206;
var anf_method_obj234 = G(self203,"reason",L[60]);
$step201 = 3;
$al207 = L[61];
$field235 = R.getColonFieldLoc(anf_method_obj234,"render-reason",L[61]);
if(R.isMethod($field235)) {
$ans206 = $field235.full_meth(anf_method_obj234,loc204,(false));
} else {
if(!(R.isFunction($field235))) {
R.ffi.throwNonFunApp(L[61],$field235);
}
$ans206 = $field235.app(loc204,(false));
}
break;
case 3: var anf_array_val237 = $ans206;
var anf_arg239 = [anf_array_val236,anf_array_val237];
$step201 = 4;
$al207 = L[57];
$field240 = R.getColonFieldLoc(anf_method_obj238,"make",L[57]);
if(R.isMethod($field240)) {
$ans206 = $field240.full_meth(anf_method_obj238,anf_arg239);
} else {
if(!(R.isFunction($field240))) {
R.ffi.throwNonFunApp(L[57],$field240);
}
$ans206 = $field240.app(anf_arg239);
}
break;
case 4: var anf_arg242 = $ans206;
$step201 = 5;
$al207 = L[62];
$field243 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[62]);
if(R.isMethod($field243)) {
$ans206 = $field243.full_meth(ED5,(0),(true),anf_arg241,anf_arg242);
} else {
if(!(R.isFunction($field243))) {
R.ffi.throwNonFunApp(L[62],$field243);
}
$ans206 = $field243.app((0),(true),anf_arg241,anf_arg242);
}
break;
case 5: ++R.GAS;
return $ans206;
default: throw "No case numbered " + $step201 + " in $temp_full202";
}
}
} catch($e244) {
if(R.isCont($e244) && ($step201 !== 5)) {
$e244.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al207,$temp_full202,$step201,[self203,loc204,from$fail$arg205],[anf_array_val236,anf_method_obj231,anf_method_obj238,anf_arg241]);
}
if(R.isPyretException($e244)) {
$e244.pyretStack.push($al207);
}
throw $e244;
}
};
var anf_variant_member441 = R.makeMethod2($temp_full202);
var $temp_full246 = function($self247,$loc248,$from$fail$arg249) {
var $step245 = 0;
var $ans250 = D;
var $al251 = L[87];
try {
if(R.isActivationRecord($self247)) {
$step245 = $self247.step;
$al251 = $self247.from;
$ans250 = $self247.ans;
self247 = $self247.args[0];
loc248 = $self247.args[1];
from$fail$arg249 = $self247.args[2];
anf_method_obj299 = $self247.vars[0];
anf_method_obj290 = $self247.vars[1];
anf_arg293 = $self247.vars[2];
message280 = $self247.vars[3];
anf_array_val262 = $self247.vars[4];
anf_array_val261 = $self247.vars[5];
anf_array_val260 = $self247.vars[6];
anf_array_val259 = $self247.vars[7];
anf_method_obj264 = $self247.vars[8];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[87],3,$t);
}
var self247 = $self247;
var loc248 = $loc248;
var from$fail$arg249 = $from$fail$arg249;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step245) {
case 0: var anf_method_obj264 = G(ED5,"para",L[64]);
$step245 = 1;
$al251 = L[65];
$field252 = R.getColonFieldLoc(ED5,"text",L[65]);
if(R.isMethod($field252)) {
$ans250 = $field252.full_meth(ED5,("Expected to get"));
} else {
if(!(R.isFunction($field252))) {
R.ffi.throwNonFunApp(L[65],$field252);
}
$ans250 = $field252.app(("Expected to get"));
}
break;
case 1: var anf_array_val259 = $ans250;
var anf_arg253 = G(self247,"name",L[66]);
$step245 = 2;
$al251 = L[67];
$field254 = R.getColonFieldLoc(ED5,"text",L[67]);
if(R.isMethod($field254)) {
$ans250 = $field254.full_meth(ED5,anf_arg253);
} else {
if(!(R.isFunction($field254))) {
R.ffi.throwNonFunApp(L[67],$field254);
}
$ans250 = $field254.app(anf_arg253);
}
break;
case 2: var anf_arg255 = $ans250;
$step245 = 3;
$al251 = L[68];
$field256 = R.getColonFieldLoc(ED5,"code",L[68]);
if(R.isMethod($field256)) {
$ans250 = $field256.full_meth(ED5,anf_arg255);
} else {
if(!(R.isFunction($field256))) {
R.ffi.throwNonFunApp(L[68],$field256);
}
$ans250 = $field256.app(anf_arg255);
}
break;
case 3: var anf_array_val260 = $ans250;
$step245 = 4;
$al251 = L[69];
$field257 = R.getColonFieldLoc(ED5,"text",L[69]);
if(R.isMethod($field257)) {
$ans250 = $field257.full_meth(ED5,("because of the annotation at"));
} else {
if(!(R.isFunction($field257))) {
R.ffi.throwNonFunApp(L[69],$field257);
}
$ans250 = $field257.app(("because of the annotation at"));
}
break;
case 4: var anf_array_val261 = $ans250;
$step245 = 5;
$al251 = L[86];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al251,draw$and$highlight30.$var);
}
$ans250 = draw$and$highlight30.$var.app(loc248);
break;
case 5: var anf_array_val262 = $ans250;
$step245 = 6;
$al251 = L[70];
$field258 = R.getColonFieldLoc(ED5,"text",L[70]);
if(R.isMethod($field258)) {
$ans250 = $field258.full_meth(ED5,("but got:"));
} else {
if(!(R.isFunction($field258))) {
R.ffi.throwNonFunApp(L[70],$field258);
}
$ans250 = $field258.app(("but got:"));
}
break;
case 6: var anf_array_val263 = $ans250;
var anf_arg265 = [anf_array_val259,anf_array_val260,anf_array_val261,anf_array_val262,anf_array_val263];
$step245 = 7;
$al251 = L[64];
$field266 = R.getColonFieldLoc(anf_method_obj264,"make",L[64]);
if(R.isMethod($field266)) {
$ans250 = $field266.full_meth(anf_method_obj264,anf_arg265);
} else {
if(!(R.isFunction($field266))) {
R.ffi.throwNonFunApp(L[64],$field266);
}
$ans250 = $field266.app(anf_arg265);
}
break;
case 7: var message280 = $ans250;
$al251 = L[71];
var anf_if302 = R.checkWrapBoolean(from$fail$arg249);
if(R.isPyretTrue(anf_if302)) {
$step245 = 8;
} else {
$step245 = 11;
}
break;
case 8: var $temp_lam268 = function($l269) {
var $step267 = 0;
var $ans270 = D;
var $al271 = L[78];
try {
if(R.isActivationRecord($l269)) {
$step267 = $l269.step;
$al271 = $l269.from;
$ans270 = $l269.ans;
l269 = $l269.args[0];
anf_array_val275 = $l269.vars[0];
anf_method_obj277 = $l269.vars[1];
anf_array_val281 = $l269.vars[2];
anf_method_obj283 = $l269.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[78],1,$t);
}
var l269 = $l269;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step267) {
case 0: var anf_method_obj283 = G(ED5,"error",L[72]);
var anf_arg272 = G(self247,"val",L[73]);
$step267 = 1;
$al271 = L[74];
$field273 = R.getColonFieldLoc(ED5,"embed",L[74]);
if(R.isMethod($field273)) {
$ans270 = $field273.full_meth(ED5,anf_arg272);
} else {
if(!(R.isFunction($field273))) {
R.ffi.throwNonFunApp(L[74],$field273);
}
$ans270 = $field273.app(anf_arg272);
}
break;
case 1: var anf_array_val281 = $ans270;
var anf_method_obj277 = G(ED5,"para",L[75]);
$step267 = 2;
$al271 = L[76];
$field274 = R.getColonFieldLoc(ED5,"text",L[76]);
if(R.isMethod($field274)) {
$ans270 = $field274.full_meth(ED5,("called from around"));
} else {
if(!(R.isFunction($field274))) {
R.ffi.throwNonFunApp(L[76],$field274);
}
$ans270 = $field274.app(("called from around"));
}
break;
case 2: var anf_array_val275 = $ans270;
$step267 = 3;
$al271 = L[77];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al271,draw$and$highlight30.$var);
}
$ans270 = draw$and$highlight30.$var.app(l269);
break;
case 3: var anf_array_val276 = $ans270;
var anf_arg278 = [anf_array_val275,anf_array_val276];
$step267 = 4;
$al271 = L[75];
$field279 = R.getColonFieldLoc(anf_method_obj277,"make",L[75]);
if(R.isMethod($field279)) {
$ans270 = $field279.full_meth(anf_method_obj277,anf_arg278);
} else {
if(!(R.isFunction($field279))) {
R.ffi.throwNonFunApp(L[75],$field279);
}
$ans270 = $field279.app(anf_arg278);
}
break;
case 4: var anf_array_val282 = $ans270;
var anf_arg284 = [message280,anf_array_val281,anf_array_val282];
$step267 = 5;
$al271 = L[72];
$field285 = R.getColonFieldLoc(anf_method_obj283,"make",L[72]);
if(R.isMethod($field285)) {
$ans270 = $field285.full_meth(anf_method_obj283,anf_arg284);
} else {
if(!(R.isFunction($field285))) {
R.ffi.throwNonFunApp(L[72],$field285);
}
$ans270 = $field285.app(anf_arg284);
}
break;
case 5: ++R.GAS;
return $ans270;
default: throw "No case numbered " + $step267 + " in $temp_lam268";
}
}
} catch($e286) {
if(R.isCont($e286) && ($step267 !== 5)) {
$e286.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al271,$temp_lam268,$step267,[l269],[anf_array_val275,anf_method_obj277,anf_array_val281,anf_method_obj283]);
}
if(R.isPyretException($e286)) {
$e286.pyretStack.push($al271);
}
throw $e286;
}
};
var anf_arg293 = R.makeFunction($temp_lam268);
var anf_method_obj290 = G(ED5,"error",L[79]);
var anf_arg287 = G(self247,"val",L[80]);
$step245 = 9;
$al251 = L[81];
$field288 = R.getColonFieldLoc(ED5,"embed",L[81]);
if(R.isMethod($field288)) {
$ans250 = $field288.full_meth(ED5,anf_arg287);
} else {
if(!(R.isFunction($field288))) {
R.ffi.throwNonFunApp(L[81],$field288);
}
$ans250 = $field288.app(anf_arg287);
}
break;
case 9: var anf_array_val289 = $ans250;
var anf_arg291 = [message280,anf_array_val289];
$step245 = 10;
$al251 = L[79];
$field292 = R.getColonFieldLoc(anf_method_obj290,"make",L[79]);
if(R.isMethod($field292)) {
$ans250 = $field292.full_meth(anf_method_obj290,anf_arg291);
} else {
if(!(R.isFunction($field292))) {
R.ffi.throwNonFunApp(L[79],$field292);
}
$ans250 = $field292.app(anf_arg291);
}
break;
case 10: var anf_arg294 = $ans250;
$step245 = 13;
$al251 = L[82];
$field295 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[82]);
if(R.isMethod($field295)) {
$ans250 = $field295.full_meth(ED5,(0),(true),anf_arg293,anf_arg294);
} else {
if(!(R.isFunction($field295))) {
R.ffi.throwNonFunApp(L[82],$field295);
}
$ans250 = $field295.app((0),(true),anf_arg293,anf_arg294);
}
break;
case 11: var anf_method_obj299 = G(ED5,"error",L[83]);
var anf_arg296 = G(self247,"val",L[84]);
$step245 = 12;
$al251 = L[85];
$field297 = R.getColonFieldLoc(ED5,"embed",L[85]);
if(R.isMethod($field297)) {
$ans250 = $field297.full_meth(ED5,anf_arg296);
} else {
if(!(R.isFunction($field297))) {
R.ffi.throwNonFunApp(L[85],$field297);
}
$ans250 = $field297.app(anf_arg296);
}
break;
case 12: var anf_array_val298 = $ans250;
var anf_arg300 = [message280,anf_array_val298];
$step245 = 13;
$al251 = L[83];
$field301 = R.getColonFieldLoc(anf_method_obj299,"make",L[83]);
if(R.isMethod($field301)) {
$ans250 = $field301.full_meth(anf_method_obj299,anf_arg300);
} else {
if(!(R.isFunction($field301))) {
R.ffi.throwNonFunApp(L[83],$field301);
}
$ans250 = $field301.app(anf_arg300);
}
break;
case 13: ++R.GAS;
return $ans250;
default: throw "No case numbered " + $step245 + " in $temp_full246";
}
}
} catch($e303) {
if(R.isCont($e303) && ($step245 !== 13)) {
$e303.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al251,$temp_full246,$step245,[self247,loc248,from$fail$arg249],[anf_method_obj299,anf_method_obj290,anf_arg293,message280,anf_array_val262,anf_array_val261,anf_array_val260,anf_array_val259,anf_method_obj264]);
}
if(R.isPyretException($e303)) {
$e303.pyretStack.push($al251);
}
throw $e303;
}
};
var anf_variant_member452 = R.makeMethod2($temp_full246);
var $temp_full305 = function($self306,$loc307,$from$fail$arg308) {
var $step304 = 0;
var $ans309 = D;
var $al310 = L[111];
try {
if(R.isActivationRecord($self306)) {
$step304 = $self306.step;
$al310 = $self306.from;
$ans309 = $self306.ans;
self306 = $self306.args[0];
loc307 = $self306.args[1];
from$fail$arg308 = $self306.args[2];
anf_method_obj358 = $self306.vars[0];
anf_method_obj349 = $self306.vars[1];
anf_arg352 = $self306.vars[2];
message339 = $self306.vars[3];
anf_array_val321 = $self306.vars[4];
anf_array_val320 = $self306.vars[5];
anf_array_val319 = $self306.vars[6];
anf_array_val318 = $self306.vars[7];
anf_method_obj323 = $self306.vars[8];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[111],3,$t);
}
var self306 = $self306;
var loc307 = $loc307;
var from$fail$arg308 = $from$fail$arg308;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step304) {
case 0: var anf_method_obj323 = G(ED5,"para",L[88]);
$step304 = 1;
$al310 = L[89];
$field311 = R.getColonFieldLoc(ED5,"text",L[89]);
if(R.isMethod($field311)) {
$ans309 = $field311.full_meth(ED5,("The predicate"));
} else {
if(!(R.isFunction($field311))) {
R.ffi.throwNonFunApp(L[89],$field311);
}
$ans309 = $field311.app(("The predicate"));
}
break;
case 1: var anf_array_val318 = $ans309;
var anf_arg312 = G(self306,"pred-name",L[90]);
$step304 = 2;
$al310 = L[91];
$field313 = R.getColonFieldLoc(ED5,"text",L[91]);
if(R.isMethod($field313)) {
$ans309 = $field313.full_meth(ED5,anf_arg312);
} else {
if(!(R.isFunction($field313))) {
R.ffi.throwNonFunApp(L[91],$field313);
}
$ans309 = $field313.app(anf_arg312);
}
break;
case 2: var anf_arg314 = $ans309;
$step304 = 3;
$al310 = L[92];
$field315 = R.getColonFieldLoc(ED5,"code",L[92]);
if(R.isMethod($field315)) {
$ans309 = $field315.full_meth(ED5,anf_arg314);
} else {
if(!(R.isFunction($field315))) {
R.ffi.throwNonFunApp(L[92],$field315);
}
$ans309 = $field315.app(anf_arg314);
}
break;
case 3: var anf_array_val319 = $ans309;
$step304 = 4;
$al310 = L[93];
$field316 = R.getColonFieldLoc(ED5,"text",L[93]);
if(R.isMethod($field316)) {
$ans309 = $field316.full_meth(ED5,("in the annotation at"));
} else {
if(!(R.isFunction($field316))) {
R.ffi.throwNonFunApp(L[93],$field316);
}
$ans309 = $field316.app(("in the annotation at"));
}
break;
case 4: var anf_array_val320 = $ans309;
$step304 = 5;
$al310 = L[110];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al310,draw$and$highlight30.$var);
}
$ans309 = draw$and$highlight30.$var.app(loc307);
break;
case 5: var anf_array_val321 = $ans309;
$step304 = 6;
$al310 = L[94];
$field317 = R.getColonFieldLoc(ED5,"text",L[94]);
if(R.isMethod($field317)) {
$ans309 = $field317.full_meth(ED5,("returned false for this value:"));
} else {
if(!(R.isFunction($field317))) {
R.ffi.throwNonFunApp(L[94],$field317);
}
$ans309 = $field317.app(("returned false for this value:"));
}
break;
case 6: var anf_array_val322 = $ans309;
var anf_arg324 = [anf_array_val318,anf_array_val319,anf_array_val320,anf_array_val321,anf_array_val322];
$step304 = 7;
$al310 = L[88];
$field325 = R.getColonFieldLoc(anf_method_obj323,"make",L[88]);
if(R.isMethod($field325)) {
$ans309 = $field325.full_meth(anf_method_obj323,anf_arg324);
} else {
if(!(R.isFunction($field325))) {
R.ffi.throwNonFunApp(L[88],$field325);
}
$ans309 = $field325.app(anf_arg324);
}
break;
case 7: var message339 = $ans309;
$al310 = L[95];
var anf_if361 = R.checkWrapBoolean(from$fail$arg308);
if(R.isPyretTrue(anf_if361)) {
$step304 = 8;
} else {
$step304 = 11;
}
break;
case 8: var $temp_lam327 = function($l328) {
var $step326 = 0;
var $ans329 = D;
var $al330 = L[102];
try {
if(R.isActivationRecord($l328)) {
$step326 = $l328.step;
$al330 = $l328.from;
$ans329 = $l328.ans;
l328 = $l328.args[0];
anf_array_val334 = $l328.vars[0];
anf_method_obj336 = $l328.vars[1];
anf_array_val340 = $l328.vars[2];
anf_method_obj342 = $l328.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[102],1,$t);
}
var l328 = $l328;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step326) {
case 0: var anf_method_obj342 = G(ED5,"error",L[96]);
var anf_arg331 = G(self306,"val",L[97]);
$step326 = 1;
$al330 = L[98];
$field332 = R.getColonFieldLoc(ED5,"embed",L[98]);
if(R.isMethod($field332)) {
$ans329 = $field332.full_meth(ED5,anf_arg331);
} else {
if(!(R.isFunction($field332))) {
R.ffi.throwNonFunApp(L[98],$field332);
}
$ans329 = $field332.app(anf_arg331);
}
break;
case 1: var anf_array_val340 = $ans329;
var anf_method_obj336 = G(ED5,"para",L[99]);
$step326 = 2;
$al330 = L[100];
$field333 = R.getColonFieldLoc(ED5,"text",L[100]);
if(R.isMethod($field333)) {
$ans329 = $field333.full_meth(ED5,("called from around"));
} else {
if(!(R.isFunction($field333))) {
R.ffi.throwNonFunApp(L[100],$field333);
}
$ans329 = $field333.app(("called from around"));
}
break;
case 2: var anf_array_val334 = $ans329;
$step326 = 3;
$al330 = L[101];
if(!(R.isFunction(draw$and$highlight30.$var))) {
R.ffi.throwNonFunApp($al330,draw$and$highlight30.$var);
}
$ans329 = draw$and$highlight30.$var.app(l328);
break;
case 3: var anf_array_val335 = $ans329;
var anf_arg337 = [anf_array_val334,anf_array_val335];
$step326 = 4;
$al330 = L[99];
$field338 = R.getColonFieldLoc(anf_method_obj336,"make",L[99]);
if(R.isMethod($field338)) {
$ans329 = $field338.full_meth(anf_method_obj336,anf_arg337);
} else {
if(!(R.isFunction($field338))) {
R.ffi.throwNonFunApp(L[99],$field338);
}
$ans329 = $field338.app(anf_arg337);
}
break;
case 4: var anf_array_val341 = $ans329;
var anf_arg343 = [message339,anf_array_val340,anf_array_val341];
$step326 = 5;
$al330 = L[96];
$field344 = R.getColonFieldLoc(anf_method_obj342,"make",L[96]);
if(R.isMethod($field344)) {
$ans329 = $field344.full_meth(anf_method_obj342,anf_arg343);
} else {
if(!(R.isFunction($field344))) {
R.ffi.throwNonFunApp(L[96],$field344);
}
$ans329 = $field344.app(anf_arg343);
}
break;
case 5: ++R.GAS;
return $ans329;
default: throw "No case numbered " + $step326 + " in $temp_lam327";
}
}
} catch($e345) {
if(R.isCont($e345) && ($step326 !== 5)) {
$e345.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al330,$temp_lam327,$step326,[l328],[anf_array_val334,anf_method_obj336,anf_array_val340,anf_method_obj342]);
}
if(R.isPyretException($e345)) {
$e345.pyretStack.push($al330);
}
throw $e345;
}
};
var anf_arg352 = R.makeFunction($temp_lam327);
var anf_method_obj349 = G(ED5,"error",L[103]);
var anf_arg346 = G(self306,"val",L[104]);
$step304 = 9;
$al310 = L[105];
$field347 = R.getColonFieldLoc(ED5,"embed",L[105]);
if(R.isMethod($field347)) {
$ans309 = $field347.full_meth(ED5,anf_arg346);
} else {
if(!(R.isFunction($field347))) {
R.ffi.throwNonFunApp(L[105],$field347);
}
$ans309 = $field347.app(anf_arg346);
}
break;
case 9: var anf_array_val348 = $ans309;
var anf_arg350 = [message339,anf_array_val348];
$step304 = 10;
$al310 = L[103];
$field351 = R.getColonFieldLoc(anf_method_obj349,"make",L[103]);
if(R.isMethod($field351)) {
$ans309 = $field351.full_meth(anf_method_obj349,anf_arg350);
} else {
if(!(R.isFunction($field351))) {
R.ffi.throwNonFunApp(L[103],$field351);
}
$ans309 = $field351.app(anf_arg350);
}
break;
case 10: var anf_arg353 = $ans309;
$step304 = 13;
$al310 = L[106];
$field354 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[106]);
if(R.isMethod($field354)) {
$ans309 = $field354.full_meth(ED5,(0),(true),anf_arg352,anf_arg353);
} else {
if(!(R.isFunction($field354))) {
R.ffi.throwNonFunApp(L[106],$field354);
}
$ans309 = $field354.app((0),(true),anf_arg352,anf_arg353);
}
break;
case 11: var anf_method_obj358 = G(ED5,"error",L[107]);
var anf_arg355 = G(self306,"val",L[108]);
$step304 = 12;
$al310 = L[109];
$field356 = R.getColonFieldLoc(ED5,"embed",L[109]);
if(R.isMethod($field356)) {
$ans309 = $field356.full_meth(ED5,anf_arg355);
} else {
if(!(R.isFunction($field356))) {
R.ffi.throwNonFunApp(L[109],$field356);
}
$ans309 = $field356.app(anf_arg355);
}
break;
case 12: var anf_array_val357 = $ans309;
var anf_arg359 = [message339,anf_array_val357];
$step304 = 13;
$al310 = L[107];
$field360 = R.getColonFieldLoc(anf_method_obj358,"make",L[107]);
if(R.isMethod($field360)) {
$ans309 = $field360.full_meth(anf_method_obj358,anf_arg359);
} else {
if(!(R.isFunction($field360))) {
R.ffi.throwNonFunApp(L[107],$field360);
}
$ans309 = $field360.app(anf_arg359);
}
break;
case 13: ++R.GAS;
return $ans309;
default: throw "No case numbered " + $step304 + " in $temp_full305";
}
}
} catch($e362) {
if(R.isCont($e362) && ($step304 !== 13)) {
$e362.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al310,$temp_full305,$step304,[self306,loc307,from$fail$arg308],[anf_method_obj358,anf_method_obj349,anf_arg352,message339,anf_array_val321,anf_array_val320,anf_array_val319,anf_array_val318,anf_method_obj323]);
}
if(R.isPyretException($e362)) {
$e362.pyretStack.push($al310);
}
throw $e362;
}
};
var anf_variant_member463 = R.makeMethod2($temp_full305);
var $temp_full364 = function($self365,$loc366,$from$fail$arg367) {
var $step363 = 0;
var $ans368 = D;
var $al369 = L[126];
try {
if(R.isActivationRecord($self365)) {
$step363 = $self365.step;
$al369 = $self365.from;
$ans368 = $self365.ans;
self365 = $self365.args[0];
loc366 = $self365.args[1];
from$fail$arg367 = $self365.args[2];
anf_array_val402 = $self365.vars[0];
anf_method_obj385 = $self365.vars[1];
anf_array_val401 = $self365.vars[2];
anf_array_val400 = $self365.vars[3];
anf_array_val376 = $self365.vars[4];
anf_array_val375 = $self365.vars[5];
anf_method_obj378 = $self365.vars[6];
anf_method_obj404 = $self365.vars[7];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[126],3,$t);
}
var self365 = $self365;
var loc366 = $loc366;
var from$fail$arg367 = $from$fail$arg367;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step363) {
case 0: var anf_method_obj404 = G(ED5,"error",L[112]);
var anf_method_obj378 = G(ED5,"para",L[113]);
$step363 = 1;
$al369 = L[114];
$field370 = R.getColonFieldLoc(ED5,"text",L[114]);
if(R.isMethod($field370)) {
$ans368 = $field370.full_meth(ED5,("The record annotation at"));
} else {
if(!(R.isFunction($field370))) {
R.ffi.throwNonFunApp(L[114],$field370);
}
$ans368 = $field370.app(("The record annotation at"));
}
break;
case 1: var anf_array_val375 = $ans368;
$step363 = 2;
$al369 = L[115];
$field371 = R.getColonFieldLoc(ED5,"text",L[115]);
if(R.isMethod($field371)) {
$ans368 = $field371.full_meth(ED5,("this annotation"));
} else {
if(!(R.isFunction($field371))) {
R.ffi.throwNonFunApp(L[115],$field371);
}
$ans368 = $field371.app(("this annotation"));
}
break;
case 2: var anf_arg372 = $ans368;
$step363 = 3;
$al369 = L[116];
$field373 = R.getColonFieldLoc(ED5,"loc-display",L[116]);
if(R.isMethod($field373)) {
$ans368 = $field373.full_meth(ED5,loc366,("error-highlight"),anf_arg372);
} else {
if(!(R.isFunction($field373))) {
R.ffi.throwNonFunApp(L[116],$field373);
}
$ans368 = $field373.app(loc366,("error-highlight"),anf_arg372);
}
break;
case 3: var anf_array_val376 = $ans368;
$step363 = 4;
$al369 = L[117];
$field374 = R.getColonFieldLoc(ED5,"text",L[117]);
if(R.isMethod($field374)) {
$ans368 = $field374.full_meth(ED5,("failed on this value:"));
} else {
if(!(R.isFunction($field374))) {
R.ffi.throwNonFunApp(L[117],$field374);
}
$ans368 = $field374.app(("failed on this value:"));
}
break;
case 4: var anf_array_val377 = $ans368;
var anf_arg379 = [anf_array_val375,anf_array_val376,anf_array_val377];
$step363 = 5;
$al369 = L[113];
$field380 = R.getColonFieldLoc(anf_method_obj378,"make",L[113]);
if(R.isMethod($field380)) {
$ans368 = $field380.full_meth(anf_method_obj378,anf_arg379);
} else {
if(!(R.isFunction($field380))) {
R.ffi.throwNonFunApp(L[113],$field380);
}
$ans368 = $field380.app(anf_arg379);
}
break;
case 5: var anf_array_val400 = $ans368;
var anf_arg381 = G(self365,"val",L[118]);
$step363 = 6;
$al369 = L[119];
$field382 = R.getColonFieldLoc(ED5,"embed",L[119]);
if(R.isMethod($field382)) {
$ans368 = $field382.full_meth(ED5,anf_arg381);
} else {
if(!(R.isFunction($field382))) {
R.ffi.throwNonFunApp(L[119],$field382);
}
$ans368 = $field382.app(anf_arg381);
}
break;
case 6: var anf_array_val401 = $ans368;
var anf_method_obj385 = G(ED5,"para",L[120]);
$step363 = 7;
$al369 = L[121];
$field383 = R.getColonFieldLoc(ED5,"text",L[121]);
if(R.isMethod($field383)) {
$ans368 = $field383.full_meth(ED5,("Because:"));
} else {
if(!(R.isFunction($field383))) {
R.ffi.throwNonFunApp(L[121],$field383);
}
$ans368 = $field383.app(("Because:"));
}
break;
case 7: var anf_array_val384 = $ans368;
var anf_arg386 = [anf_array_val384];
$step363 = 8;
$al369 = L[120];
$field387 = R.getColonFieldLoc(anf_method_obj385,"make",L[120]);
if(R.isMethod($field387)) {
$ans368 = $field387.full_meth(anf_method_obj385,anf_arg386);
} else {
if(!(R.isFunction($field387))) {
R.ffi.throwNonFunApp(L[120],$field387);
}
$ans368 = $field387.app(anf_arg386);
}
break;
case 8: var anf_array_val402 = $ans368;
var anf_method_obj395 = G(self365,"field-failures",L[122]);
var $temp_lam389 = function($recv_390) {
var $step388 = 0;
var $ans391 = D;
var $al392 = L[123];
try {
if(R.isActivationRecord($recv_390)) {
$step388 = $recv_390.step;
$al392 = $recv_390.from;
$ans391 = $recv_390.ans;
recv_390 = $recv_390.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[123],1,$t);
}
var recv_390 = $recv_390;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step388) {
case 0: $step388 = 1;
$al392 = L[123];
$field393 = R.getColonFieldLoc(recv_390,"render-reason",L[123]);
if(R.isMethod($field393)) {
$ans391 = $field393.full_meth(recv_390,loc366,(false));
} else {
if(!(R.isFunction($field393))) {
R.ffi.throwNonFunApp(L[123],$field393);
}
$ans391 = $field393.app(loc366,(false));
}
break;
case 1: ++R.GAS;
return $ans391;
default: throw "No case numbered " + $step388 + " in $temp_lam389";
}
}
} catch($e394) {
if(R.isCont($e394) && ($step388 !== 1)) {
$e394.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al392,$temp_lam389,$step388,[recv_390],[]);
}
if(R.isPyretException($e394)) {
$e394.pyretStack.push($al392);
}
throw $e394;
}
};
var anf_arg396 = R.makeFunction($temp_lam389);
$step363 = 9;
$al369 = L[124];
$field397 = R.getColonFieldLoc(anf_method_obj395,"map",L[124]);
if(R.isMethod($field397)) {
$ans368 = $field397.full_meth(anf_method_obj395,anf_arg396);
} else {
if(!(R.isFunction($field397))) {
R.ffi.throwNonFunApp(L[124],$field397);
}
$ans368 = $field397.app(anf_arg396);
}
break;
case 9: var anf_arg398 = $ans368;
$step363 = 10;
$al369 = L[125];
$field399 = R.getColonFieldLoc(ED5,"bulleted-sequence",L[125]);
if(R.isMethod($field399)) {
$ans368 = $field399.full_meth(ED5,anf_arg398);
} else {
if(!(R.isFunction($field399))) {
R.ffi.throwNonFunApp(L[125],$field399);
}
$ans368 = $field399.app(anf_arg398);
}
break;
case 10: var anf_array_val403 = $ans368;
var anf_arg405 = [anf_array_val400,anf_array_val401,anf_array_val402,anf_array_val403];
$step363 = 11;
$al369 = L[112];
$field406 = R.getColonFieldLoc(anf_method_obj404,"make",L[112]);
if(R.isMethod($field406)) {
$ans368 = $field406.full_meth(anf_method_obj404,anf_arg405);
} else {
if(!(R.isFunction($field406))) {
R.ffi.throwNonFunApp(L[112],$field406);
}
$ans368 = $field406.app(anf_arg405);
}
break;
case 11: ++R.GAS;
return $ans368;
default: throw "No case numbered " + $step363 + " in $temp_full364";
}
}
} catch($e407) {
if(R.isCont($e407) && ($step363 !== 11)) {
$e407.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al369,$temp_full364,$step363,[self365,loc366,from$fail$arg367],[anf_array_val402,anf_method_obj385,anf_array_val401,anf_array_val400,anf_array_val376,anf_array_val375,anf_method_obj378,anf_method_obj404]);
}
if(R.isPyretException($e407)) {
$e407.pyretStack.push($al369);
}
throw $e407;
}
};
var anf_variant_member474 = R.makeMethod2($temp_full364);
var $temp_full409 = function($self410,$loc411,$from$fail$arg412) {
var $step408 = 0;
var $ans413 = D;
var $al414 = L[138];
try {
if(R.isActivationRecord($self410)) {
$step408 = $self410.step;
$al414 = $self410.from;
$ans413 = $self410.ans;
self410 = $self410.args[0];
loc411 = $self410.args[1];
from$fail$arg412 = $self410.args[2];
anf_array_val428 = $self410.vars[0];
anf_array_val427 = $self410.vars[1];
anf_array_val426 = $self410.vars[2];
anf_method_obj430 = $self410.vars[3];
anf_method_obj434 = $self410.vars[4];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[138],3,$t);
}
var self410 = $self410;
var loc411 = $loc411;
var from$fail$arg412 = $from$fail$arg412;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step408) {
case 0: var anf_method_obj434 = G(ED5,"error",L[127]);
var anf_method_obj430 = G(ED5,"para",L[128]);
$step408 = 1;
$al414 = L[129];
$field415 = R.getColonFieldLoc(ED5,"text",L[129]);
if(R.isMethod($field415)) {
$ans413 = $field415.full_meth(ED5,("Couldn't find"));
} else {
if(!(R.isFunction($field415))) {
R.ffi.throwNonFunApp(L[129],$field415);
}
$ans413 = $field415.app(("Couldn't find"));
}
break;
case 1: var anf_array_val426 = $ans413;
var anf_arg416 = G(self410,"field",L[130]);
$step408 = 2;
$al414 = L[137];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al414,_plus1);
}
$ans413 = _plus1.app(("the annotation named "),anf_arg416);
break;
case 2: var anf_arg417 = $ans413;
$step408 = 3;
$al414 = L[131];
$field418 = R.getColonFieldLoc(ED5,"text",L[131]);
if(R.isMethod($field418)) {
$ans413 = $field418.full_meth(ED5,anf_arg417);
} else {
if(!(R.isFunction($field418))) {
R.ffi.throwNonFunApp(L[131],$field418);
}
$ans413 = $field418.app(anf_arg417);
}
break;
case 3: var anf_arg419 = $ans413;
$step408 = 4;
$al414 = L[132];
$field420 = R.getColonFieldLoc(ED5,"loc-display",L[132]);
if(R.isMethod($field420)) {
$ans413 = $field420.full_meth(ED5,loc411,("error-highlight"),anf_arg419);
} else {
if(!(R.isFunction($field420))) {
R.ffi.throwNonFunApp(L[132],$field420);
}
$ans413 = $field420.app(loc411,("error-highlight"),anf_arg419);
}
break;
case 4: var anf_array_val427 = $ans413;
$step408 = 5;
$al414 = L[133];
$field421 = R.getColonFieldLoc(ED5,"text",L[133]);
if(R.isMethod($field421)) {
$ans413 = $field421.full_meth(ED5,("in the annotations from"));
} else {
if(!(R.isFunction($field421))) {
R.ffi.throwNonFunApp(L[133],$field421);
}
$ans413 = $field421.app(("in the annotations from"));
}
break;
case 5: var anf_array_val428 = $ans413;
var anf_arg422 = G(self410,"name",L[134]);
$step408 = 6;
$al414 = L[135];
$field423 = R.getColonFieldLoc(ED5,"text",L[135]);
if(R.isMethod($field423)) {
$ans413 = $field423.full_meth(ED5,anf_arg422);
} else {
if(!(R.isFunction($field423))) {
R.ffi.throwNonFunApp(L[135],$field423);
}
$ans413 = $field423.app(anf_arg422);
}
break;
case 6: var anf_arg424 = $ans413;
$step408 = 7;
$al414 = L[136];
$field425 = R.getColonFieldLoc(ED5,"code",L[136]);
if(R.isMethod($field425)) {
$ans413 = $field425.full_meth(ED5,anf_arg424);
} else {
if(!(R.isFunction($field425))) {
R.ffi.throwNonFunApp(L[136],$field425);
}
$ans413 = $field425.app(anf_arg424);
}
break;
case 7: var anf_array_val429 = $ans413;
var anf_arg431 = [anf_array_val426,anf_array_val427,anf_array_val428,anf_array_val429];
$step408 = 8;
$al414 = L[128];
$field432 = R.getColonFieldLoc(anf_method_obj430,"make",L[128]);
if(R.isMethod($field432)) {
$ans413 = $field432.full_meth(anf_method_obj430,anf_arg431);
} else {
if(!(R.isFunction($field432))) {
R.ffi.throwNonFunApp(L[128],$field432);
}
$ans413 = $field432.app(anf_arg431);
}
break;
case 8: var anf_array_val433 = $ans413;
var anf_arg435 = [anf_array_val433];
$step408 = 9;
$al414 = L[127];
$field436 = R.getColonFieldLoc(anf_method_obj434,"make",L[127]);
if(R.isMethod($field436)) {
$ans413 = $field436.full_meth(anf_method_obj434,anf_arg435);
} else {
if(!(R.isFunction($field436))) {
R.ffi.throwNonFunApp(L[127],$field436);
}
$ans413 = $field436.app(anf_arg435);
}
break;
case 9: ++R.GAS;
return $ans413;
default: throw "No case numbered " + $step408 + " in $temp_full409";
}
}
} catch($e437) {
if(R.isCont($e437) && ($step408 !== 9)) {
$e437.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al414,$temp_full409,$step408,[self410,loc411,from$fail$arg412],[anf_array_val428,anf_array_val427,anf_array_val426,anf_method_obj430,anf_method_obj434]);
}
if(R.isPyretException($e437)) {
$e437.pyretStack.push($al414);
}
throw $e437;
}
};
var anf_variant_member485 = R.makeMethod2($temp_full409);
var $ref$init_getfields444 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $ref$init_getfieldsref442 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $ref$init_mutablemask443 = [false,false];
var $ref$init$base438 = {"$fieldNames":["loc","reason"],
"render-reason":anf_variant_member441,
"_match":R.makeMatch("ref-init",2)};
var $ref$init$brands440 = {"$brand$ref$init":true};
$ref$init$brands440[FailureReason19._brand] = true;
var ref$init446 = R.makeVariantConstructor(L[141],function() {
return [FailureReason73];
},["reason447"],[L[140]],[false,false],["loc448","reason447"],$ref$init_mutablemask443,$ref$init$base438,$ref$init$brands440,"ref-init",$ref$init_getfieldsref442,$ref$init_getfields444,$ref$init$base438);
var $type$mismatch_getfields455 = function(f) {
return f(this.dict["val"],this.dict["name"]);
};
var $type$mismatch_getfieldsref453 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["name"],false,refmask[1]));
};
var $type$mismatch_mutablemask454 = [false,false];
var $type$mismatch$base449 = {"$fieldNames":["val","name"],
"render-reason":anf_variant_member452,
"_match":R.makeMatch("type-mismatch",2)};
var $type$mismatch$brands451 = {"$brand$type$mismatch":true};
$type$mismatch$brands451[FailureReason19._brand] = true;
var type$mismatch457 = R.makeVariantConstructor(L[144],function() {
return [$type$String2];
},["name458"],[L[143]],[false,false],["val459","name458"],$type$mismatch_mutablemask454,$type$mismatch$base449,$type$mismatch$brands451,"type-mismatch",$type$mismatch_getfieldsref453,$type$mismatch_getfields455,$type$mismatch$base449);
var $predicate$failure_getfields466 = function(f) {
return f(this.dict["val"],this.dict["pred-name"]);
};
var $predicate$failure_getfieldsref464 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["pred-name"],false,refmask[1]));
};
var $predicate$failure_mutablemask465 = [false,false];
var $predicate$failure$base460 = {"$fieldNames":["val","pred-name"],
"render-reason":anf_variant_member463,
"_match":R.makeMatch("predicate-failure",2)};
var $predicate$failure$brands462 = {"$brand$predicate$failure":true};
$predicate$failure$brands462[FailureReason19._brand] = true;
var predicate$failure468 = R.makeVariantConstructor(L[146],function() {
return [];
},[],[],[false,false],["val469","pred$name470"],$predicate$failure_mutablemask465,$predicate$failure$base460,$predicate$failure$brands462,"predicate-failure",$predicate$failure_getfieldsref464,$predicate$failure_getfields466,$predicate$failure$base460);
var $record$fields$fail_getfields477 = function(f) {
return f(this.dict["val"],this.dict["field-failures"]);
};
var $record$fields$fail_getfieldsref475 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["field-failures"],false,refmask[1]));
};
var $record$fields$fail_mutablemask476 = [false,false];
var $record$fields$fail$base471 = {"$fieldNames":["val","field-failures"],
"render-reason":anf_variant_member474,
"_match":R.makeMatch("record-fields-fail",2)};
var $record$fields$fail$brands473 = {"$brand$record$fields$fail":true};
$record$fields$fail$brands473[FailureReason19._brand] = true;
var record$fields$fail479 = R.makeVariantConstructor(L[150],function() {
return [R.getDotAnn(L[148],"L",L8,"List")];
},["field$failures480"],[L[149]],[false,false],["val481","field$failures480"],$record$fields$fail_mutablemask476,$record$fields$fail$base471,$record$fields$fail$brands473,"record-fields-fail",$record$fields$fail_getfieldsref475,$record$fields$fail_getfields477,$record$fields$fail$base471);
var $dot$ann$not$present_getfields488 = function(f) {
return f(this.dict["name"],this.dict["field"]);
};
var $dot$ann$not$present_getfieldsref486 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]));
};
var $dot$ann$not$present_mutablemask487 = [false,false];
var $dot$ann$not$present$base482 = {"$fieldNames":["name","field"],
"render-reason":anf_variant_member485,
"_match":R.makeMatch("dot-ann-not-present",2)};
var $dot$ann$not$present$brands484 = {"$brand$dot$ann$not$present":true};
$dot$ann$not$present$brands484[FailureReason19._brand] = true;
var dot$ann$not$present490 = R.makeVariantConstructor(L[152],function() {
return [];
},[],[],[false,false],["name491","field492"],$dot$ann$not$present_mutablemask487,$dot$ann$not$present$base482,$dot$ann$not$present$brands484,"dot-ann-not-present",$dot$ann$not$present_getfieldsref486,$dot$ann$not$present_getfields488,$dot$ann$not$present$base482);
var anf_assign494 = R.makeObject({"FailureReason":R.makeFunction(function($val493) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[153],1,$t);
}
return R.makeBoolean(R.hasBrand($val493,FailureReason19._brand));
}),
"is-ref-init":R.makeFunction(function($val445) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[139],1,$t);
}
return R.makeBoolean(R.hasBrand($val445,"$brand$ref$init"));
}),
"ref-init":ref$init446,
"is-type-mismatch":R.makeFunction(function($val456) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[142],1,$t);
}
return R.makeBoolean(R.hasBrand($val456,"$brand$type$mismatch"));
}),
"type-mismatch":type$mismatch457,
"is-predicate-failure":R.makeFunction(function($val467) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[145],1,$t);
}
return R.makeBoolean(R.hasBrand($val467,"$brand$predicate$failure"));
}),
"predicate-failure":predicate$failure468,
"is-record-fields-fail":R.makeFunction(function($val478) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[147],1,$t);
}
return R.makeBoolean(R.hasBrand($val478,"$brand$record$fields$fail"));
}),
"record-fields-fail":record$fields$fail479,
"is-dot-ann-not-present":R.makeFunction(function($val489) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[151],1,$t);
}
return R.makeBoolean(R.hasBrand($val489,"$brand$dot$ann$not$present"));
}),
"dot-ann-not-present":dot$ann$not$present490});
FailureReason495.$var = anf_assign494;
var anf_assign496 = G(FailureReason495.$var,"FailureReason",L[153]);
FailureReason497.$var = anf_assign496;
var anf_assign498 = G(FailureReason495.$var,"FailureReason",L[153]);
is$FailureReason499.$var = anf_assign498;
var anf_assign500 = G(FailureReason495.$var,"is-ref-init",L[139]);
is$ref$init501.$var = anf_assign500;
var anf_assign502 = G(FailureReason495.$var,"ref-init",L[139]);
ref$init503.$var = anf_assign502;
var anf_assign504 = G(FailureReason495.$var,"is-type-mismatch",L[142]);
is$type$mismatch505.$var = anf_assign504;
var anf_assign506 = G(FailureReason495.$var,"type-mismatch",L[142]);
type$mismatch507.$var = anf_assign506;
var anf_assign508 = G(FailureReason495.$var,"is-predicate-failure",L[145]);
is$predicate$failure509.$var = anf_assign508;
var anf_assign510 = G(FailureReason495.$var,"predicate-failure",L[145]);
predicate$failure511.$var = anf_assign510;
var anf_assign512 = G(FailureReason495.$var,"is-record-fields-fail",L[147]);
is$record$fields$fail513.$var = anf_assign512;
var anf_assign514 = G(FailureReason495.$var,"record-fields-fail",L[147]);
record$fields$fail515.$var = anf_assign514;
var anf_assign516 = G(FailureReason495.$var,"is-dot-ann-not-present",L[151]);
is$dot$ann$not$present517.$var = anf_assign516;
var anf_assign518 = G(FailureReason495.$var,"dot-ann-not-present",L[151]);
dot$ann$not$present519.$var = anf_assign518;
var provides525 = R.makeObject({"draw-and-highlight":draw$and$highlight30.$var,
"ContractResult":ContractResult91.$var,
"is-ContractResult":is$ContractResult93.$var,
"ok":ok97.$var,
"is-ok":is$ok95.$var,
"fail":fail101.$var,
"is-fail":is$fail99.$var,
"fail-arg":fail$arg105.$var,
"is-fail-arg":is$fail$arg103.$var,
"FieldFailure":FieldFailure190.$var,
"is-FieldFailure":is$FieldFailure192.$var,
"field-failure":field$failure196.$var,
"is-field-failure":is$field$failure194.$var,
"missing-field":missing$field200.$var,
"is-missing-field":is$missing$field198.$var,
"FailureReason":FailureReason497.$var,
"is-FailureReason":is$FailureReason499.$var,
"ref-init":ref$init503.$var,
"is-ref-init":is$ref$init501.$var,
"type-mismatch":type$mismatch507.$var,
"is-type-mismatch":is$type$mismatch505.$var,
"predicate-failure":predicate$failure511.$var,
"is-predicate-failure":is$predicate$failure509.$var,
"record-fields-fail":record$fields$fail515.$var,
"is-record-fields-fail":is$record$fields$fail513.$var,
"dot-ann-not-present":dot$ann$not$present519.$var,
"is-dot-ann-not-present":is$dot$ann$not$present517.$var});
$step12 = 1;
$al16 = L[20];
$field520 = R.getColonFieldLoc(builtins3,"current-checker",L[20]);
if(R.isMethod($field520)) {
$ans15 = $field520.full_meth(builtins3);
} else {
if(!(R.isFunction($field520))) {
R.ffi.throwNonFunApp(L[20],$field520);
}
$ans15 = $field520.app();
}
break;
case 1: var anf_method_obj521 = $ans15;
$step12 = 2;
$al16 = L[20];
$field522 = R.getColonFieldLoc(anf_method_obj521,"results",L[20]);
if(R.isMethod($field522)) {
$ans15 = $field522.full_meth(anf_method_obj521);
} else {
if(!(R.isFunction($field522))) {
R.ffi.throwNonFunApp(L[20],$field522);
}
$ans15 = $field522.app();
}
break;
case 2: var checks526 = $ans15;
$step12 = 3;
$ans15 = R.makeObject({"answer":nothing4,
"namespace":NAMESPACE,
"defined-values":{"dot-ann-not-present":dot$ann$not$present519.$var,
"is-dot-ann-not-present":is$dot$ann$not$present517.$var,
"record-fields-fail":record$fields$fail515.$var,
"is-record-fields-fail":is$record$fields$fail513.$var,
"predicate-failure":predicate$failure511.$var,
"is-predicate-failure":is$predicate$failure509.$var,
"type-mismatch":type$mismatch507.$var,
"is-type-mismatch":is$type$mismatch505.$var,
"ref-init":ref$init503.$var,
"is-ref-init":is$ref$init501.$var,
"is-FailureReason":is$FailureReason499.$var,
"FailureReason":FailureReason497.$var,
"missing-field":missing$field200.$var,
"is-missing-field":is$missing$field198.$var,
"field-failure":field$failure196.$var,
"is-field-failure":is$field$failure194.$var,
"is-FieldFailure":is$FieldFailure192.$var,
"FieldFailure":FieldFailure190.$var,
"fail-arg":fail$arg105.$var,
"is-fail-arg":is$fail$arg103.$var,
"fail":fail101.$var,
"is-fail":is$fail99.$var,
"ok":ok97.$var,
"is-ok":is$ok95.$var,
"is-ContractResult":is$ContractResult93.$var,
"ContractResult":ContractResult91.$var,
"draw-and-highlight":draw$and$highlight30.$var,
"ED":ED5,
"L":L6},
"defined-types":{"FailureReason":FailureReason73,
"L":L8,
"FieldFailure":FieldFailure524,
"ContractResult":ContractResult523,
"ED":ED7},
"provide-plus-types":R.makeObject({"values":provides525,
"types":{"ContractResult":ContractResult523,
"FieldFailure":FieldFailure524,
"FailureReason":FailureReason73}}),
"checks":checks526});
break;
case 3: ++R.GAS;
return $ans15;
default: throw "No case numbered " + $step12 + " in $toplevel13";
}
}
} catch($e528) {
if(R.isCont($e528) && ($step12 !== 3)) {
$e528.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al16,$toplevel13,$step12,[],[provides525,dot$ann$not$present519,is$dot$ann$not$present517,record$fields$fail515,is$record$fields$fail513,predicate$failure511,is$predicate$failure509,type$mismatch507,is$type$mismatch505,ref$init503,is$ref$init501,is$FailureReason499,FailureReason497,missing$field200,is$missing$field198,field$failure196,is$field$failure194,is$FieldFailure192,FieldFailure190,fail$arg105,is$fail$arg103,fail101,is$fail99,ok97,is$ok95,is$ContractResult93,ContractResult91,draw$and$highlight30,FailureReason73,FieldFailure524,ContractResult523]);
}
if(R.isPyretException($e528)) {
$e528.pyretStack.push($al16);
}
throw $e528;
}
};
return R.safeCall($toplevel13,function(moduleVal) {
R.modules["$src/arr/base/contracts.arr9"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://either": ({
"requires":[],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule": function(R,NAMESPACE, M) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,7,2,60,7,16,74],
[M,7,14,72,7,15,73],
[M,7,4,62,7,16,74],
[M,8,2,77,8,17,92],
[M,8,15,90,8,16,91],
[M,8,4,79,8,17,92],
[M,6,0,40,9,3,96],
[M,3,0,13,9,3,96]];
var builtins1 = NAMESPACE.get("builtins");
var nothing2 = NAMESPACE.get("nothing");
var $toplevel5 = function($$resumer49) {
var $step4 = 0;
var $ans7 = D;
var $al8 = L[7];
try {
if(R.isActivationRecord($$resumer49)) {
$step4 = $$resumer49.step;
$al8 = $$resumer49.from;
$ans7 = $$resumer49.ans;
$resumer49 = $$resumer49.args[0];
provides47 = $$resumer49.vars[0];
right42 = $$resumer49.vars[1];
is$right40 = $$resumer49.vars[2];
left38 = $$resumer49.vars[3];
is$left36 = $$resumer49.vars[4];
is$Either34 = $$resumer49.vars[5];
Either32 = $$resumer49.vars[6];
Either46 = $$resumer49.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4) {
case 0: var Either9 = R.namedBrander("Either");
var Either46 = R.makeBranderAnn(Either9,"Either");
var Either30 = {"$var":D};
var Either32 = {"$var":D};
var is$Either34 = {"$var":D};
var is$left36 = {"$var":D};
var left38 = {"$var":D};
var is$right40 = {"$var":D};
var right42 = {"$var":D};
var $left_getfields15 = function(f) {
return f(this.dict["v"]);
};
var $left_getfieldsref13 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $left_mutablemask14 = [false];
var $left$base10 = {"$fieldNames":["v"],
"_match":R.makeMatch("left",1)};
var $left$brands12 = {"$brand$left":true};
$left$brands12[Either9._brand] = true;
var left17 = R.makeVariantConstructor(L[2],function() {
return [R.Any];
},["v18"],[L[1]],[false],["v18"],$left_mutablemask14,$left$base10,$left$brands12,"left",$left_getfieldsref13,$left_getfields15,$left$base10);
var $right_getfields24 = function(f) {
return f(this.dict["v"]);
};
var $right_getfieldsref22 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $right_mutablemask23 = [false];
var $right$base19 = {"$fieldNames":["v"],
"_match":R.makeMatch("right",1)};
var $right$brands21 = {"$brand$right":true};
$right$brands21[Either9._brand] = true;
var right26 = R.makeVariantConstructor(L[5],function() {
return [R.Any];
},["v27"],[L[4]],[false],["v27"],$right_mutablemask23,$right$base19,$right$brands21,"right",$right_getfieldsref22,$right_getfields24,$right$base19);
var anf_assign29 = R.makeObject({"Either":R.makeFunction(function($val28) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[6],1,$t);
}
return R.makeBoolean(R.hasBrand($val28,Either9._brand));
}),
"is-left":R.makeFunction(function($val16) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],1,$t);
}
return R.makeBoolean(R.hasBrand($val16,"$brand$left"));
}),
"left":left17,
"is-right":R.makeFunction(function($val25) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[3],1,$t);
}
return R.makeBoolean(R.hasBrand($val25,"$brand$right"));
}),
"right":right26});
Either30.$var = anf_assign29;
var anf_assign31 = G(Either30.$var,"Either",L[6]);
Either32.$var = anf_assign31;
var anf_assign33 = G(Either30.$var,"Either",L[6]);
is$Either34.$var = anf_assign33;
var anf_assign35 = G(Either30.$var,"is-left",L[0]);
is$left36.$var = anf_assign35;
var anf_assign37 = G(Either30.$var,"left",L[0]);
left38.$var = anf_assign37;
var anf_assign39 = G(Either30.$var,"is-right",L[3]);
is$right40.$var = anf_assign39;
var anf_assign41 = G(Either30.$var,"right",L[3]);
right42.$var = anf_assign41;
var provides47 = R.makeObject({"Either":Either32.$var,
"is-Either":is$Either34.$var,
"left":left38.$var,
"is-left":is$left36.$var,
"right":right42.$var,
"is-right":is$right40.$var});
$step4 = 1;
$al8 = L[6];
$field43 = R.getColonFieldLoc(builtins1,"current-checker",L[6]);
if(R.isMethod($field43)) {
$ans7 = $field43.full_meth(builtins1);
} else {
if(!(R.isFunction($field43))) {
R.ffi.throwNonFunApp(L[6],$field43);
}
$ans7 = $field43.app();
}
break;
case 1: var anf_method_obj44 = $ans7;
$step4 = 2;
$al8 = L[6];
$field45 = R.getColonFieldLoc(anf_method_obj44,"results",L[6]);
if(R.isMethod($field45)) {
$ans7 = $field45.full_meth(anf_method_obj44);
} else {
if(!(R.isFunction($field45))) {
R.ffi.throwNonFunApp(L[6],$field45);
}
$ans7 = $field45.app();
}
break;
case 2: var checks48 = $ans7;
$step4 = 3;
$ans7 = R.makeObject({"answer":nothing2,
"namespace":NAMESPACE,
"defined-values":{"right":right42.$var,
"is-right":is$right40.$var,
"left":left38.$var,
"is-left":is$left36.$var,
"is-Either":is$Either34.$var,
"Either":Either32.$var},
"defined-types":{"Either":Either46},
"provide-plus-types":R.makeObject({"values":provides47,
"types":{"Either":Either46}}),
"checks":checks48});
break;
case 3: ++R.GAS;
return $ans7;
default: throw "No case numbered " + $step4 + " in $toplevel5";
}
}
} catch($e50) {
if(R.isCont($e50) && ($step4 !== 3)) {
$e50.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al8,$toplevel5,$step4,[],[provides47,right42,is$right40,left38,is$left36,is$Either34,Either32,Either46]);
}
if(R.isPyretException($e50)) {
$e50.pyretStack.push($al8);
}
throw $e50;
}
};
return R.safeCall($toplevel5,function(moduleVal) {
R.modules["$src/arr/base/either.arr3"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://equality": ({
"requires":[{"import-type":"builtin",
"name":"error"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE, M, $error9) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,8,2,85,8,9,92],
[M,9,2,95,9,46,139],
[M,9,23,116,9,29,122],
[M,9,4,97,9,46,139],
[M,10,2,142,10,45,185],
[M,10,22,162,10,28,168],
[M,10,4,144,10,45,185],
[M,7,0,62,11,3,189],
[M,15,4,263,15,32,291],
[M,16,4,296,16,32,324],
[M,17,6,331,17,37,362],
[M,17,24,349,17,37,362],
[M,17,4,329,17,49,374],
[M,17,6,331,17,19,344],
[M,16,6,298,16,22,314],
[M,15,6,265,15,22,281],
[M,13,21,212,13,35,226],
[M,13,44,235,13,58,249],
[M,13,0,191,20,3,431],
[M,24,4,504,24,29,529],
[M,25,4,534,25,29,559],
[M,26,4,564,26,31,591],
[M,26,6,566,26,21,581],
[M,25,6,536,25,19,549],
[M,24,6,506,24,19,519],
[M,22,20,453,22,34,467],
[M,22,43,476,22,57,490],
[M,22,0,433,29,3,691],
[M,33,34,793,33,67,826],
[M,33,28,787,33,68,827],
[M,33,6,765,33,24,783],
[M,34,6,834,34,11,839],
[M,35,6,854,35,21,869],
[M,32,2,733,36,5,884],
[M,32,8,739,32,22,753],
[M,31,21,714,31,35,728],
[M,31,0,693,37,3,888],
[M,40,5,927,40,6,928],
[M,40,20,942,40,57,979],
[M,39,22,912,39,29,919],
[M,39,0,890,41,3,987],
[M,3,0,13,41,3,987]];
var $type$String1 = NAMESPACE.get("$type$String");
var raise2 = NAMESPACE.get("raise");
var $type$Boolean3 = NAMESPACE.get("$type$Boolean");
var builtins4 = NAMESPACE.get("builtins");
var nothing5 = NAMESPACE.get("nothing");
var error6 = R.getField($error9,"values");
var error7 = R.getField($error9,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error9);
var $toplevel11 = function($$resumer131) {
var $step10 = 0;
var $ans13 = D;
var $al14 = L[41];
try {
if(R.isActivationRecord($$resumer131)) {
$step10 = $$resumer131.step;
$al14 = $$resumer131.from;
$ans13 = $$resumer131.ans;
$resumer131 = $$resumer131.args[0];
provides129 = $$resumer131.vars[0];
from$boolean125 = $$resumer131.vars[1];
to$boolean116 = $$resumer131.vars[2];
equal$or97 = $$resumer131.vars[3];
equal$and82 = $$resumer131.vars[4];
Unknown63 = $$resumer131.vars[5];
is$Unknown61 = $$resumer131.vars[6];
NotEqual59 = $$resumer131.vars[7];
is$NotEqual57 = $$resumer131.vars[8];
Equal55 = $$resumer131.vars[9];
is$Equal53 = $$resumer131.vars[10];
is$EqualityResult51 = $$resumer131.vars[11];
EqualityResult49 = $$resumer131.vars[12];
EqualityResult79 = $$resumer131.vars[13];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step10) {
case 0: var EqualityResult15 = R.namedBrander("EqualityResult");
var EqualityResult79 = R.makeBranderAnn(EqualityResult15,"EqualityResult");
var EqualityResult47 = {"$var":D};
var EqualityResult49 = {"$var":D};
var is$EqualityResult51 = {"$var":D};
var is$Equal53 = {"$var":D};
var Equal55 = {"$var":D};
var is$NotEqual57 = {"$var":D};
var NotEqual59 = {"$var":D};
var is$Unknown61 = {"$var":D};
var Unknown63 = {"$var":D};
var equal$and82 = {"$var":D};
var equal$or97 = {"$var":D};
var to$boolean116 = {"$var":D};
var from$boolean125 = {"$var":D};
var $Equal_getfields21 = function(f) {
return f();
};
var $Equal_getfieldsref19 = function(f) {
return f();
};
var $Equal_mutablemask20 = [];
var $Equal$base16 = {"_match":R.makeMatch("Equal",0)};
var $Equal$brands18 = {"$brand$Equal":true};
$Equal$brands18[EqualityResult15._brand] = true;
var $NotEqual_getfields28 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $NotEqual_getfieldsref26 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $NotEqual_mutablemask27 = [false,false,false];
var $NotEqual$base23 = {"$fieldNames":["reason","value1","value2"],
"_match":R.makeMatch("NotEqual",3)};
var $NotEqual$brands25 = {"$brand$NotEqual":true};
$NotEqual$brands25[EqualityResult15._brand] = true;
var NotEqual30 = R.makeVariantConstructor(L[3],function() {
return [$type$String1];
},["reason31"],[L[2]],[false,false,false],["reason31","value132","value233"],$NotEqual_mutablemask27,$NotEqual$base23,$NotEqual$brands25,"NotEqual",$NotEqual_getfieldsref26,$NotEqual_getfields28,$NotEqual$base23);
var $Unknown_getfields39 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $Unknown_getfieldsref37 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $Unknown_mutablemask38 = [false,false,false];
var $Unknown$base34 = {"$fieldNames":["reason","value1","value2"],
"_match":R.makeMatch("Unknown",3)};
var $Unknown$brands36 = {"$brand$Unknown":true};
$Unknown$brands36[EqualityResult15._brand] = true;
var Unknown41 = R.makeVariantConstructor(L[6],function() {
return [$type$String1];
},["reason42"],[L[5]],[false,false,false],["reason42","value143","value244"],$Unknown_mutablemask38,$Unknown$base34,$Unknown$brands36,"Unknown",$Unknown_getfieldsref37,$Unknown_getfields39,$Unknown$base34);
var anf_assign46 = R.makeObject({"EqualityResult":R.makeFunction(function($val45) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[7],1,$t);
}
return R.makeBoolean(R.hasBrand($val45,EqualityResult15._brand));
}),
"is-Equal":R.makeFunction(function($val22) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],1,$t);
}
return R.makeBoolean(R.hasBrand($val22,"$brand$Equal"));
}),
"Equal":R.makeDataValue($Equal$base16,$Equal$brands18,"Equal",$Equal_getfieldsref19,$Equal_getfields21,-1,$Equal_mutablemask20,$Equal$base16),
"is-NotEqual":R.makeFunction(function($val29) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1],1,$t);
}
return R.makeBoolean(R.hasBrand($val29,"$brand$NotEqual"));
}),
"NotEqual":NotEqual30,
"is-Unknown":R.makeFunction(function($val40) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[4],1,$t);
}
return R.makeBoolean(R.hasBrand($val40,"$brand$Unknown"));
}),
"Unknown":Unknown41});
EqualityResult47.$var = anf_assign46;
var anf_assign48 = G(EqualityResult47.$var,"EqualityResult",L[7]);
EqualityResult49.$var = anf_assign48;
var anf_assign50 = G(EqualityResult47.$var,"EqualityResult",L[7]);
is$EqualityResult51.$var = anf_assign50;
var anf_assign52 = G(EqualityResult47.$var,"is-Equal",L[0]);
is$Equal53.$var = anf_assign52;
var anf_assign54 = G(EqualityResult47.$var,"Equal",L[0]);
Equal55.$var = anf_assign54;
var anf_assign56 = G(EqualityResult47.$var,"is-NotEqual",L[1]);
is$NotEqual57.$var = anf_assign56;
var anf_assign58 = G(EqualityResult47.$var,"NotEqual",L[1]);
NotEqual59.$var = anf_assign58;
var anf_assign60 = G(EqualityResult47.$var,"is-Unknown",L[4]);
is$Unknown61.$var = anf_assign60;
var anf_assign62 = G(EqualityResult47.$var,"Unknown",L[4]);
Unknown63.$var = anf_assign62;
var $temp_lam65 = function($er166,$er267) {
var $step64 = 0;
var $ans68 = D;
var $al69 = L[18];
try {
if(R.isActivationRecord($er166)) {
$step64 = $er166.step;
$al69 = $er166.from;
$ans68 = $er166.ans;
er166 = $er166.args[0];
er267 = $er166.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[18],2,$t);
}
var er166 = $er166;
var er267 = $er267;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step64) {
case 0: $step64 = 1;
$al69 = L[16];
R._checkAnn(L[16],EqualityResult79,er166);
break;
case 1: $step64 = 2;
$al69 = L[17];
R._checkAnn(L[17],EqualityResult79,er267);
break;
case 2: $step64 = 3;
$al69 = L[15];
if(!(R.isFunction(is$NotEqual57.$var))) {
R.ffi.throwNonFunApp($al69,is$NotEqual57.$var);
}
$ans68 = is$NotEqual57.$var.app(er166);
break;
case 3: var anf_arg70 = $ans68;
$al69 = L[8];
var anf_if78 = R.checkWrapBoolean(anf_arg70);
if(R.isPyretTrue(anf_if78)) {
$step64 = 4;
} else {
$step64 = 5;
}
break;
case 4: $step64 = 16;
$ans68 = er166;
break;
case 5: $step64 = 6;
$al69 = L[14];
if(!(R.isFunction(is$NotEqual57.$var))) {
R.ffi.throwNonFunApp($al69,is$NotEqual57.$var);
}
$ans68 = is$NotEqual57.$var.app(er267);
break;
case 6: var anf_arg71 = $ans68;
$al69 = L[9];
var anf_if77 = R.checkWrapBoolean(anf_arg71);
if(R.isPyretTrue(anf_if77)) {
$step64 = 7;
} else {
$step64 = 8;
}
break;
case 7: $step64 = 16;
$ans68 = er267;
break;
case 8: $step64 = 9;
$al69 = L[13];
if(!(R.isFunction(is$Equal53.$var))) {
R.ffi.throwNonFunApp($al69,is$Equal53.$var);
}
$ans68 = is$Equal53.$var.app(er166);
break;
case 9: var anf_arg72 = $ans68;
$al69 = L[10];
var anf_if76 = R.checkWrapBoolean(anf_arg72);
if(R.isPyretTrue(anf_if76)) {
$step64 = 10;
} else {
$step64 = 12;
}
break;
case 10: $step64 = 11;
$al69 = L[11];
if(!(R.isFunction(is$Equal53.$var))) {
R.ffi.throwNonFunApp($al69,is$Equal53.$var);
}
$ans68 = is$Equal53.$var.app(er267);
break;
case 11: var anf_arg73 = $ans68;
$step64 = 13;
$al69 = L[10];
$ans68 = R.checkWrapBoolean(anf_arg73);
break;
case 12: $step64 = 13;
$ans68 = (false);
break;
case 13: var anf_arg74 = $ans68;
$al69 = L[12];
var anf_if75 = R.checkWrapBoolean(anf_arg74);
if(R.isPyretTrue(anf_if75)) {
$step64 = 14;
} else {
$step64 = 15;
}
break;
case 14: $step64 = 16;
$ans68 = Equal55.$var;
break;
case 15: $step64 = 16;
$ans68 = er166;
break;
case 16: ++R.GAS;
return $ans68;
default: throw "No case numbered " + $step64 + " in $temp_lam65";
}
}
} catch($e80) {
if(R.isCont($e80) && ($step64 !== 16)) {
$e80.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al69,$temp_lam65,$step64,[er166,er267],[]);
}
if(R.isPyretException($e80)) {
$e80.pyretStack.push($al69);
}
throw $e80;
}
};
var anf_assign81 = R.makeFunction($temp_lam65);
equal$and82.$var = anf_assign81;
var $temp_lam84 = function($er185,$er286) {
var $step83 = 0;
var $ans87 = D;
var $al88 = L[27];
try {
if(R.isActivationRecord($er185)) {
$step83 = $er185.step;
$al88 = $er185.from;
$ans87 = $er185.ans;
er185 = $er185.args[0];
er286 = $er185.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[27],2,$t);
}
var er185 = $er185;
var er286 = $er286;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step83) {
case 0: $step83 = 1;
$al88 = L[25];
R._checkAnn(L[25],EqualityResult79,er185);
break;
case 1: $step83 = 2;
$al88 = L[26];
R._checkAnn(L[26],EqualityResult79,er286);
break;
case 2: $step83 = 3;
$al88 = L[24];
if(!(R.isFunction(is$Equal53.$var))) {
R.ffi.throwNonFunApp($al88,is$Equal53.$var);
}
$ans87 = is$Equal53.$var.app(er185);
break;
case 3: var anf_arg89 = $ans87;
$al88 = L[19];
var anf_if94 = R.checkWrapBoolean(anf_arg89);
if(R.isPyretTrue(anf_if94)) {
$step83 = 4;
} else {
$step83 = 5;
}
break;
case 4: $step83 = 12;
$ans87 = er185;
break;
case 5: $step83 = 6;
$al88 = L[23];
if(!(R.isFunction(is$Equal53.$var))) {
R.ffi.throwNonFunApp($al88,is$Equal53.$var);
}
$ans87 = is$Equal53.$var.app(er286);
break;
case 6: var anf_arg90 = $ans87;
$al88 = L[20];
var anf_if93 = R.checkWrapBoolean(anf_arg90);
if(R.isPyretTrue(anf_if93)) {
$step83 = 7;
} else {
$step83 = 8;
}
break;
case 7: $step83 = 12;
$ans87 = er286;
break;
case 8: $step83 = 9;
$al88 = L[22];
if(!(R.isFunction(is$Unknown61.$var))) {
R.ffi.throwNonFunApp($al88,is$Unknown61.$var);
}
$ans87 = is$Unknown61.$var.app(er185);
break;
case 9: var anf_arg91 = $ans87;
$al88 = L[21];
var anf_if92 = R.checkWrapBoolean(anf_arg91);
if(R.isPyretTrue(anf_if92)) {
$step83 = 10;
} else {
$step83 = 11;
}
break;
case 10: $step83 = 12;
$ans87 = er185;
break;
case 11: $step83 = 12;
$ans87 = er286;
break;
case 12: ++R.GAS;
return $ans87;
default: throw "No case numbered " + $step83 + " in $temp_lam84";
}
}
} catch($e95) {
if(R.isCont($e95) && ($step83 !== 12)) {
$e95.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al88,$temp_lam84,$step83,[er185,er286],[]);
}
if(R.isPyretException($e95)) {
$e95.pyretStack.push($al88);
}
throw $e95;
}
};
var anf_assign96 = R.makeFunction($temp_lam84);
equal$or97.$var = anf_assign96;
var $temp_lam99 = function($er100) {
var $step98 = 0;
var $ans101 = D;
var $al102 = L[36];
try {
if(R.isActivationRecord($er100)) {
$step98 = $er100.step;
$al102 = $er100.from;
$ans101 = $er100.ans;
er100 = $er100.args[0];
cases103 = $er100.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],1,$t);
}
var er100 = $er100;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step98) {
case 0: $step98 = 1;
$al102 = L[35];
R._checkAnn(L[35],EqualityResult79,er100);
break;
case 1: var cases103 = er100;
$step98 = 2;
$al102 = L[34];
R._checkAnn(L[34],EqualityResult79,cases103);
break;
case 2: var $cases_dispatch113 = {"Unknown":3,
"Equal":5,
"NotEqual":6};
$al102 = L[33];
$step98 = $cases_dispatch113[cases103.$name] || 7;
break;
case 3: if(cases103.$arity >= 0) {
if(3 !== cases103.$arity) {
R.ffi.throwCasesArityErrorC(L[30],3,cases103.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[30],true);
}
var $fn109 = cases103.$constructor.$fieldNames;
var r104 = R.derefField(cases103.dict[$fn109[0]],cases103.$mut_fields_mask[0],false);
var v1105 = R.derefField(cases103.dict[$fn109[1]],cases103.$mut_fields_mask[1],false);
var v2106 = R.derefField(cases103.dict[$fn109[2]],cases103.$mut_fields_mask[2],false);
$step98 = 4;
$al102 = L[28];
$field107 = R.getColonFieldLoc(error6,"equality-failure",L[28]);
if(R.isMethod($field107)) {
$ans101 = $field107.full_meth(error6,r104,v1105,v2106);
} else {
if(!(R.isFunction($field107))) {
R.ffi.throwNonFunApp(L[28],$field107);
}
$ans101 = $field107.app(r104,v1105,v2106);
}
break;
case 4: var anf_arg108 = $ans101;
$step98 = 8;
$al102 = L[29];
if(!(R.isFunction(raise2))) {
R.ffi.throwNonFunApp($al102,raise2);
}
$ans101 = raise2.app(anf_arg108);
break;
case 5: if(cases103.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[31],false);
}
$step98 = 8;
$ans101 = (true);
break;
case 6: if(cases103.$arity >= 0) {
if(3 !== cases103.$arity) {
R.ffi.throwCasesArityErrorC(L[32],3,cases103.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[32],true);
}
var $fn109 = cases103.$constructor.$fieldNames;
R.derefField(cases103.dict[$fn109[0]],cases103.$mut_fields_mask[0],false);
R.derefField(cases103.dict[$fn109[1]],cases103.$mut_fields_mask[1],false);
R.derefField(cases103.dict[$fn109[2]],cases103.$mut_fields_mask[2],false);
$step98 = 8;
$ans101 = (false);
break;
case 7: $step98 = 8;
$al102 = L[33];
$ans101 = R.throwNoCasesMatched(L[33],cases103);
break;
case 8: ++R.GAS;
return $ans101;
default: throw "No case numbered " + $step98 + " in $temp_lam99";
}
}
} catch($e114) {
if(R.isCont($e114) && ($step98 !== 8)) {
$e114.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al102,$temp_lam99,$step98,[er100],[cases103]);
}
if(R.isPyretException($e114)) {
$e114.pyretStack.push($al102);
}
throw $e114;
}
};
var anf_assign115 = R.makeFunction($temp_lam99);
to$boolean116.$var = anf_assign115;
var $temp_lam118 = function($b119) {
var $step117 = 0;
var $ans120 = D;
var $al121 = L[40];
try {
if(R.isActivationRecord($b119)) {
$step117 = $b119.step;
$al121 = $b119.from;
$ans120 = $b119.ans;
b119 = $b119.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],1,$t);
}
var b119 = $b119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step117) {
case 0: $step117 = 1;
$al121 = L[39];
R._checkAnn(L[39],$type$Boolean3,b119);
break;
case 1: $al121 = L[37];
var anf_if122 = R.checkWrapBoolean(b119);
if(R.isPyretTrue(anf_if122)) {
$step117 = 2;
} else {
$step117 = 3;
}
break;
case 2: $step117 = 4;
$ans120 = Equal55.$var;
break;
case 3: $step117 = 4;
$al121 = L[38];
if(!(R.isFunction(NotEqual59.$var))) {
R.ffi.throwNonFunApp($al121,NotEqual59.$var);
}
$ans120 = NotEqual59.$var.app(("false"),("value1"),("value2"));
break;
case 4: ++R.GAS;
return $ans120;
default: throw "No case numbered " + $step117 + " in $temp_lam118";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step117 !== 4)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al121,$temp_lam118,$step117,[b119],[]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al121);
}
throw $e123;
}
};
var anf_assign124 = R.makeFunction($temp_lam118);
from$boolean125.$var = anf_assign124;
var provides129 = R.makeObject({"EqualityResult":EqualityResult49.$var,
"is-EqualityResult":is$EqualityResult51.$var,
"Equal":Equal55.$var,
"is-Equal":is$Equal53.$var,
"NotEqual":NotEqual59.$var,
"is-NotEqual":is$NotEqual57.$var,
"Unknown":Unknown63.$var,
"is-Unknown":is$Unknown61.$var,
"equal-and":equal$and82.$var,
"equal-or":equal$or97.$var,
"to-boolean":to$boolean116.$var,
"from-boolean":from$boolean125.$var});
$step10 = 1;
$al14 = L[7];
$field126 = R.getColonFieldLoc(builtins4,"current-checker",L[7]);
if(R.isMethod($field126)) {
$ans13 = $field126.full_meth(builtins4);
} else {
if(!(R.isFunction($field126))) {
R.ffi.throwNonFunApp(L[7],$field126);
}
$ans13 = $field126.app();
}
break;
case 1: var anf_method_obj127 = $ans13;
$step10 = 2;
$al14 = L[7];
$field128 = R.getColonFieldLoc(anf_method_obj127,"results",L[7]);
if(R.isMethod($field128)) {
$ans13 = $field128.full_meth(anf_method_obj127);
} else {
if(!(R.isFunction($field128))) {
R.ffi.throwNonFunApp(L[7],$field128);
}
$ans13 = $field128.app();
}
break;
case 2: var checks130 = $ans13;
$step10 = 3;
$ans13 = R.makeObject({"answer":nothing5,
"namespace":NAMESPACE,
"defined-values":{"from-boolean":from$boolean125.$var,
"to-boolean":to$boolean116.$var,
"equal-or":equal$or97.$var,
"equal-and":equal$and82.$var,
"Unknown":Unknown63.$var,
"is-Unknown":is$Unknown61.$var,
"NotEqual":NotEqual59.$var,
"is-NotEqual":is$NotEqual57.$var,
"Equal":Equal55.$var,
"is-Equal":is$Equal53.$var,
"is-EqualityResult":is$EqualityResult51.$var,
"EqualityResult":EqualityResult49.$var,
"error":error6},
"defined-types":{"EqualityResult":EqualityResult79,
"error":error7},
"provide-plus-types":R.makeObject({"values":provides129,
"types":{"EqualityResult":EqualityResult79}}),
"checks":checks130});
break;
case 3: ++R.GAS;
return $ans13;
default: throw "No case numbered " + $step10 + " in $toplevel11";
}
}
} catch($e132) {
if(R.isCont($e132) && ($step10 !== 3)) {
$e132.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al14,$toplevel11,$step10,[],[provides129,from$boolean125,to$boolean116,equal$or97,equal$and82,Unknown63,is$Unknown61,NotEqual59,is$NotEqual57,Equal55,is$Equal53,is$EqualityResult51,EqualityResult49,EqualityResult79]);
}
if(R.isPyretException($e132)) {
$e132.pyretStack.push($al14);
}
throw $e132;
}
};
return R.safeCall($toplevel11,function(moduleVal) {
R.modules["$src/arr/base/equality.arr8"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://error": ({
"requires":[{"import-type":"builtin",
"name":"error-display"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE, M, $ED15) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,9,39,162,9,48,171],
[M,9,2,125,9,49,172],
[M,8,0,96,10,3,176],
[M,12,36,241,12,43,248],
[M,12,45,250,12,58,263],
[M,12,25,230,12,63,268],
[M,12,16,221,12,64,269],
[M,12,2,207,12,65,270],
[M,11,0,177,13,3,274],
[M,19,7,375,19,15,383],
[M,19,18,386,19,25,393],
[M,19,35,403,19,47,415],
[M,19,27,395,19,48,416],
[M,18,4,347,20,7,426],
[M,23,7,496,23,15,504],
[M,24,9,515,24,16,522],
[M,25,10,534,25,67,591],
[M,26,29,622,26,37,630],
[M,26,40,633,26,60,653],
[M,27,17,673,27,25,681],
[M,27,8,664,27,26,682],
[M,26,10,603,26,38,631],
[M,22,4,468,28,7,691],
[M,31,7,781,31,15,789],
[M,32,9,800,32,16,807],
[M,33,10,819,33,47,856],
[M,33,65,874,33,80,889],
[M,33,57,866,33,81,890],
[M,33,49,858,33,82,891],
[M,34,10,903,34,34,927],
[M,34,55,948,34,63,956],
[M,34,36,929,34,64,957],
[M,30,4,753,35,7,967],
[M,38,7,1045,38,15,1053],
[M,39,9,1064,39,16,1071],
[M,39,18,1073,39,44,1099],
[M,39,54,1109,39,66,1121],
[M,39,46,1101,39,67,1122],
[M,40,9,1134,40,16,1141],
[M,40,18,1143,40,48,1173],
[M,41,25,1201,41,39,1215],
[M,41,8,1184,41,40,1216],
[M,37,4,1017,42,7,1225],
[M,45,7,1311,45,15,1319],
[M,46,9,1330,46,16,1337],
[M,47,10,1349,47,26,1365],
[M,47,44,1383,47,54,1393],
[M,47,36,1375,47,55,1394],
[M,47,28,1367,47,56,1395],
[M,47,58,1397,47,106,1445],
[M,48,29,1476,48,37,1484],
[M,49,9,1497,49,16,1504],
[M,49,18,1506,49,44,1532],
[M,50,17,1552,50,25,1560],
[M,50,8,1543,50,26,1561],
[M,48,10,1457,48,38,1485],
[M,44,4,1283,51,7,1570],
[M,54,7,1662,54,15,1670],
[M,55,9,1681,55,16,1688],
[M,56,10,1700,56,43,1733],
[M,56,61,1751,56,71,1761],
[M,56,53,1743,56,72,1762],
[M,56,45,1735,56,73,1763],
[M,57,10,1775,57,64,1829],
[M,58,29,1860,58,37,1868],
[M,59,9,1881,59,16,1888],
[M,59,18,1890,59,48,1920],
[M,60,17,1940,60,29,1952],
[M,60,8,1931,60,30,1953],
[M,58,10,1841,58,38,1869],
[M,53,4,1634,61,7,1962],
[M,64,7,2037,64,15,2045],
[M,65,9,2056,65,16,2063],
[M,66,10,2075,66,70,2135],
[M,67,29,2166,67,37,2174],
[M,68,9,2187,68,16,2194],
[M,68,18,2196,68,48,2226],
[M,69,17,2246,69,29,2258],
[M,69,8,2237,69,30,2259],
[M,67,10,2147,67,38,2175],
[M,63,4,2009,70,7,2268],
[M,73,7,2350,73,15,2358],
[M,74,9,2369,74,16,2376],
[M,75,10,2388,75,29,2407],
[M,75,39,2417,75,54,2432],
[M,75,31,2409,75,55,2433],
[M,75,57,2435,75,70,2448],
[M,75,80,2458,75,96,2474],
[M,75,72,2450,75,97,2475],
[M,76,10,2487,76,40,2517],
[M,76,50,2527,76,58,2535],
[M,76,42,2519,76,59,2536],
[M,76,61,2538,76,85,2562],
[M,77,29,2593,77,37,2601],
[M,77,40,2604,77,60,2624],
[M,78,17,2644,78,27,2654],
[M,78,8,2635,78,28,2655],
[M,77,10,2574,77,38,2602],
[M,72,4,2322,79,7,2664],
[M,82,7,2749,82,15,2757],
[M,83,9,2768,83,16,2775],
[M,84,10,2787,84,29,2806],
[M,84,39,2816,84,54,2831],
[M,84,31,2808,84,55,2832],
[M,84,57,2834,84,70,2847],
[M,84,80,2857,84,96,2873],
[M,84,72,2849,84,97,2874],
[M,85,10,2886,85,28,2904],
[M,85,38,2914,85,51,2927],
[M,85,30,2906,85,52,2928],
[M,85,54,2930,85,80,2956],
[M,86,18,2976,86,26,2984],
[M,86,10,2968,86,27,2985],
[M,86,29,2987,86,53,3011],
[M,87,29,3042,87,37,3050],
[M,87,40,3053,87,60,3073],
[M,88,17,3093,88,27,3103],
[M,88,8,3084,88,28,3104],
[M,87,10,3023,87,38,3051],
[M,81,4,2721,89,7,3113],
[M,94,11,3254,94,19,3262],
[M,95,13,3277,95,20,3284],
[M,96,14,3300,96,42,3328],
[M,96,53,3339,96,61,3347],
[M,96,44,3330,96,62,3348],
[M,96,64,3350,96,112,3398],
[M,97,21,3422,97,29,3430],
[M,97,12,3413,97,30,3431],
[M,98,13,3446,98,20,3453],
[M,98,22,3455,98,35,3468],
[M,98,37,3470,98,60,3493],
[M,93,8,3233,99,11,3507],
[M,100,9,3518,100,17,3526],
[M,101,11,3539,101,26,3554],
[M,101,28,3556,101,48,3576],
[M,101,59,3587,101,67,3595],
[M,101,50,3578,101,68,3596],
[M,101,70,3598,101,91,3619],
[M,101,102,3630,101,110,3638],
[M,101,93,3621,101,111,3639],
[M,92,6,3197,101,114,3642],
[M,91,4,3170,102,7,3650],
[M,105,7,3731,105,15,3739],
[M,106,9,3750,106,24,3765],
[M,106,26,3767,106,63,3804],
[M,106,74,3815,106,82,3823],
[M,106,65,3806,106,83,3824],
[M,107,10,3836,107,26,3852],
[M,107,37,3863,107,46,3872],
[M,107,28,3854,107,47,3873],
[M,108,10,3885,108,30,3905],
[M,108,41,3916,108,49,3924],
[M,108,32,3907,108,50,3925],
[M,104,4,3703,109,7,3935],
[M,112,7,4041,112,15,4049],
[M,113,9,4060,113,16,4067],
[M,114,10,4079,114,35,4104],
[M,114,53,4122,114,64,4133],
[M,114,45,4114,114,65,4134],
[M,114,37,4106,114,66,4135],
[M,114,68,4137,114,96,4165],
[M,115,9,4177,115,16,4184],
[M,115,27,4195,115,36,4204],
[M,115,18,4186,115,37,4205],
[M,116,9,4217,116,16,4224],
[M,116,27,4235,116,36,4244],
[M,116,18,4226,116,37,4245],
[M,117,16,4264,117,27,4275],
[M,117,8,4256,117,43,4291],
[M,118,9,4302,118,20,4313],
[M,119,10,4325,119,33,4348],
[M,120,10,4360,120,36,4386],
[M,121,11,4399,121,18,4406],
[M,122,12,4420,122,53,4461],
[M,122,71,4479,122,86,4494],
[M,122,63,4471,122,87,4495],
[M,122,55,4463,122,88,4496],
[M,122,90,4498,122,107,4515],
[M,117,16,4264,117,42,4290],
[M,111,4,4013,123,7,4526],
[M,126,7,4621,126,15,4629],
[M,127,9,4640,127,16,4647],
[M,128,10,4659,128,35,4684],
[M,128,53,4702,128,64,4713],
[M,128,45,4694,128,65,4714],
[M,128,37,4686,128,66,4715],
[M,128,68,4717,128,96,4745],
[M,129,9,4757,129,16,4764],
[M,129,27,4775,129,36,4784],
[M,129,18,4766,129,37,4785],
[M,130,9,4797,130,16,4804],
[M,130,27,4815,130,36,4824],
[M,130,18,4806,130,37,4825],
[M,131,8,4836,131,26,4854],
[M,132,9,4865,132,20,4876],
[M,133,10,4888,133,55,4933],
[M,134,11,4946,134,18,4953],
[M,135,12,4967,135,51,5006],
[M,135,69,5024,135,84,5039],
[M,135,61,5016,135,85,5040],
[M,135,53,5008,135,86,5041],
[M,135,88,5043,135,105,5060],
[M,125,4,4593,136,7,5071],
[M,139,7,5171,139,15,5179],
[M,140,11,5192,140,24,5205],
[M,140,27,5208,140,44,5225],
[M,140,11,5192,140,44,5225],
[M,141,11,5238,141,18,5245],
[M,142,12,5259,142,42,5289],
[M,142,63,5310,142,78,5325],
[M,143,12,5340,143,35,5363],
[M,143,46,5374,143,59,5387],
[M,143,37,5365,143,60,5388],
[M,144,15,5405,144,28,5418],
[M,144,15,5405,144,33,5423],
[M,144,35,5425,144,55,5445],
[M,144,62,5452,144,83,5473],
[M,145,12,5491,145,47,5526],
[M,145,58,5537,145,75,5554],
[M,145,49,5528,145,76,5555],
[M,146,15,5572,146,32,5589],
[M,146,15,5572,146,37,5594],
[M,146,39,5596,146,55,5612],
[M,146,62,5619,146,79,5636],
[M,142,44,5291,142,79,5326],
[M,148,11,5667,148,18,5674],
[M,149,12,5688,149,42,5718],
[M,149,63,5739,149,78,5754],
[M,150,12,5769,150,30,5787],
[M,150,41,5798,150,54,5811],
[M,150,32,5789,150,55,5812],
[M,151,15,5829,151,28,5842],
[M,151,15,5829,151,33,5847],
[M,151,35,5849,151,55,5869],
[M,151,62,5876,151,83,5897],
[M,152,12,5915,152,52,5955],
[M,152,63,5966,152,80,5983],
[M,152,54,5957,152,81,5984],
[M,153,15,6001,153,32,6018],
[M,153,15,6001,153,37,6023],
[M,153,39,6025,153,55,6041],
[M,153,62,6048,153,79,6065],
[M,149,44,5720,149,79,5755],
[M,138,4,5143,155,7,6091],
[M,158,9,6205,158,33,6229],
[M,159,9,6240,159,17,6248],
[M,160,11,6261,160,18,6268],
[M,161,12,6282,161,42,6312],
[M,161,63,6333,161,78,6348],
[M,162,12,6363,162,76,6427],
[M,161,44,6314,161,79,6349],
[M,164,9,6451,164,17,6459],
[M,165,11,6472,165,18,6479],
[M,166,12,6493,166,42,6523],
[M,166,63,6544,166,78,6559],
[M,167,12,6574,167,89,6651],
[M,166,44,6525,166,79,6560],
[M,157,4,6175,169,7,6671],
[M,172,17,6770,172,26,6779],
[M,172,17,6770,172,35,6788],
[M,173,20,6809,173,33,6822],
[M,174,19,6868,174,32,6881],
[M,175,23,6941,175,42,6960],
[M,175,23,6941,175,47,6965],
[M,178,13,7072,178,25,7084],
[M,178,13,7072,178,38,7097],
[M,179,13,7112,179,21,7120],
[M,180,15,7137,180,22,7144],
[M,180,24,7146,180,50,7172],
[M,180,61,7183,180,80,7202],
[M,180,52,7174,180,81,7203],
[M,180,83,7205,180,111,7233],
[M,182,15,7297,182,22,7304],
[M,182,24,7306,182,54,7336],
[M,182,56,7338,182,74,7356],
[M,182,76,7358,182,92,7374],
[M,183,31,7408,183,40,7417],
[M,183,14,7391,183,41,7418],
[M,182,32,7314,182,53,7335],
[M,181,14,7250,181,44,7280],
[M,180,91,7213,180,110,7232],
[M,185,13,7449,185,21,7457],
[M,186,15,7474,186,22,7481],
[M,186,24,7483,186,50,7509],
[M,186,61,7520,186,80,7539],
[M,186,52,7511,186,81,7540],
[M,187,16,7558,187,70,7612],
[M,188,33,7648,188,45,7660],
[M,189,15,7678,189,22,7685],
[M,189,24,7687,189,39,7702],
[M,191,15,7766,191,22,7773],
[M,191,24,7775,191,54,7805],
[M,191,56,7807,191,74,7825],
[M,191,76,7827,191,92,7843],
[M,192,31,7877,192,40,7886],
[M,192,14,7860,192,41,7887],
[M,191,32,7783,191,53,7804],
[M,190,14,7719,190,44,7749],
[M,188,14,7629,188,46,7661],
[M,187,24,7566,187,69,7611],
[M,177,8,7042,194,11,7914],
[M,195,9,7925,195,17,7933],
[M,196,11,7946,196,18,7953],
[M,196,20,7955,196,46,7981],
[M,196,57,7992,196,76,8011],
[M,196,48,7983,196,77,8012],
[M,196,79,8014,196,107,8042],
[M,197,29,8074,197,41,8086],
[M,198,11,8100,198,18,8107],
[M,198,20,8109,198,50,8139],
[M,198,52,8141,198,70,8159],
[M,198,72,8161,198,88,8177],
[M,199,27,8207,199,36,8216],
[M,176,6,7006,199,39,8219],
[M,199,10,8190,199,37,8217],
[M,198,28,8117,198,49,8138],
[M,197,10,8055,197,42,8087],
[M,196,87,8022,196,106,8041],
[M,171,4,6732,200,7,8227],
[M,203,7,8305,203,15,8313],
[M,204,9,8324,204,16,8331],
[M,205,10,8343,205,73,8406],
[M,206,29,8437,206,37,8445],
[M,206,40,8448,206,60,8468],
[M,207,17,8488,207,33,8504],
[M,207,8,8479,207,34,8505],
[M,206,10,8418,206,38,8446],
[M,202,4,8277,208,7,8514],
[M,211,7,8642,211,15,8650],
[M,211,17,8652,211,40,8675],
[M,211,25,8660,211,39,8674],
[M,210,4,8614,212,7,8684],
[M,215,7,8765,215,15,8773],
[M,216,9,8784,216,16,8791],
[M,216,18,8793,216,37,8812],
[M,216,55,8830,216,64,8839],
[M,216,47,8822,216,65,8840],
[M,216,39,8814,216,66,8841],
[M,216,68,8843,216,90,8865],
[M,217,29,8896,217,37,8904],
[M,217,40,8907,217,73,8940],
[M,217,10,8877,217,38,8905],
[M,214,4,8737,218,7,8950],
[M,221,7,9044,221,15,9052],
[M,222,9,9063,222,16,9070],
[M,223,13,9085,223,23,9095],
[M,223,13,9085,223,32,9104],
[M,223,13,9085,223,37,9109],
[M,223,39,9111,223,86,9158],
[M,224,39,9198,224,87,9246],
[M,226,22,9285,226,32,9295],
[M,226,37,9300,226,44,9307],
[M,226,22,9285,226,45,9308],
[M,226,8,9271,226,52,9315],
[M,220,4,9016,227,7,9324],
[M,232,11,9525,232,19,9533],
[M,233,13,9548,233,20,9555],
[M,233,22,9557,233,52,9587],
[M,233,71,9606,233,81,9616],
[M,233,62,9597,233,82,9617],
[M,233,54,9589,233,83,9618],
[M,234,14,9634,234,52,9672],
[M,235,14,9713,235,33,9732],
[M,235,43,9742,235,54,9753],
[M,235,35,9734,235,55,9754],
[M,234,54,9674,234,77,9697],
[M,231,8,9504,236,11,9768],
[M,237,9,9779,237,17,9787],
[M,238,11,9800,238,18,9807],
[M,238,20,9809,238,50,9839],
[M,238,69,9858,238,79,9868],
[M,238,60,9849,238,80,9869],
[M,238,52,9841,238,81,9870],
[M,239,12,9884,239,31,9903],
[M,239,41,9913,239,52,9924],
[M,239,33,9905,239,53,9925],
[M,230,6,9468,239,56,9928],
[M,229,4,9441,240,7,9936],
[M,243,15,10038,243,26,10049],
[M,244,15,10065,244,26,10076],
[M,246,10,10098,246,49,10137],
[M,246,32,10120,246,49,10137],
[M,246,8,10096,263,13,11033],
[M,249,13,10247,249,21,10255],
[M,250,15,10272,250,22,10279],
[M,250,24,10281,250,40,10297],
[M,251,15,10315,251,22,10322],
[M,251,24,10324,251,40,10340],
[M,252,15,10358,252,22,10365],
[M,252,24,10367,252,40,10383],
[M,253,15,10401,253,22,10408],
[M,253,24,10410,253,54,10440],
[M,254,22,10464,254,39,10481],
[M,254,14,10456,254,40,10482],
[M,254,42,10484,254,87,10529],
[M,248,10,10207,256,13,10546],
[M,257,13,10560,257,64,10611],
[M,257,41,10588,257,64,10611],
[M,258,12,10625,258,98,10711],
[M,259,10,10722,260,110,10865],
[M,260,12,10767,260,110,10865],
[M,261,10,10876,262,110,11019],
[M,262,12,10921,262,110,11019],
[M,257,10,10557,263,13,11033],
[M,261,18,10884,261,41,10907],
[M,259,18,10730,259,41,10753],
[M,257,13,10560,257,36,10583],
[M,265,11,11066,265,19,11074],
[M,266,13,11089,266,20,11096],
[M,266,22,11098,266,79,11155],
[M,267,13,11171,267,20,11178],
[M,267,31,11189,267,42,11200],
[M,267,22,11180,267,43,11201],
[M,268,13,11217,268,20,11224],
[M,268,31,11235,268,42,11246],
[M,268,22,11226,268,43,11247],
[M,246,10,10098,246,27,10115],
[M,242,4,10002,270,7,11266],
[M,274,7,11321,274,15,11329],
[M,274,17,11331,274,51,11365],
[M,273,4,11293,275,7,11374],
[M,278,34,11449,278,44,11459],
[M,278,25,11440,278,45,11460],
[M,278,4,11419,278,49,11464],
[M,17,2,298,20,7,426],
[M,17,33,329,17,39,335],
[M,17,4,300,17,40,336],
[M,21,2,429,28,7,691],
[M,21,4,431,21,30,457],
[M,29,2,694,35,7,967],
[M,29,43,735,29,49,741],
[M,29,4,696,29,50,742],
[M,36,2,970,42,7,1225],
[M,36,4,972,36,38,1006],
[M,43,2,1228,51,7,1570],
[M,43,39,1265,43,45,1271],
[M,43,4,1230,43,46,1272],
[M,52,2,1573,61,7,1962],
[M,52,45,1616,52,51,1622],
[M,52,4,1575,52,52,1623],
[M,62,2,1965,70,7,2268],
[M,62,4,1967,62,35,1998],
[M,71,2,2271,79,7,2664],
[M,71,4,2273,71,42,2311],
[M,80,2,2667,89,7,3113],
[M,80,4,2669,80,45,2710],
[M,90,2,3116,102,7,3650],
[M,90,38,3152,90,44,3158],
[M,90,4,3118,90,45,3159],
[M,103,2,3653,109,7,3935],
[M,103,4,3655,103,41,3692],
[M,110,2,3938,123,7,4526],
[M,110,4,3940,110,66,4002],
[M,124,2,4529,136,7,5071],
[M,124,4,4531,124,55,4582],
[M,137,2,5074,155,7,6091],
[M,137,4,5076,137,60,5132],
[M,156,2,6094,169,7,6671],
[M,156,64,6156,156,71,6163],
[M,156,4,6096,156,72,6164],
[M,170,2,6674,200,7,8227],
[M,170,4,6676,170,49,6721],
[M,201,2,8230,208,7,8514],
[M,201,4,8232,201,38,8266],
[M,209,2,8517,212,7,8684],
[M,209,29,8544,209,35,8550],
[M,209,48,8563,209,54,8569],
[M,209,72,8587,209,78,8593],
[M,209,4,8519,209,88,8603],
[M,213,2,8687,218,7,8950],
[M,213,34,8719,213,40,8725],
[M,213,4,8689,213,41,8726],
[M,219,2,8953,227,7,9324],
[M,219,4,8955,219,30,8981],
[M,228,2,9327,240,7,9936],
[M,228,39,9364,228,45,9370],
[M,228,63,9388,228,69,9394],
[M,228,81,9406,228,87,9412],
[M,228,4,9329,228,88,9413],
[M,241,2,9939,270,7,11266],
[M,241,31,9968,241,37,9974],
[M,241,4,9941,241,54,9991],
[M,272,2,11270,275,7,11374],
[M,277,2,11378,278,49,11464],
[M,277,4,11380,277,32,11408],
[M,16,0,277,279,3,11468],
[M,361,12,15317,361,36,15341],
[M,361,4,15309,361,37,15342],
[M,360,2,15284,362,5,15348],
[M,285,9,11597,285,17,11605],
[M,286,11,11618,286,18,11625],
[M,286,20,11627,286,63,11670],
[M,287,11,11684,287,26,11699],
[M,288,12,11713,288,49,11750],
[M,288,61,11762,288,88,11789],
[M,288,51,11752,288,108,11809],
[M,289,12,11823,289,62,11873],
[M,290,12,11887,290,58,11933],
[M,290,68,11943,290,80,11955],
[M,290,60,11935,290,81,11956],
[M,291,12,11970,291,34,11992],
[M,291,44,12002,291,56,12014],
[M,291,36,11994,291,57,12015],
[M,291,59,12017,291,89,12047],
[M,292,20,12069,292,33,12082],
[M,292,12,12061,292,34,12083],
[M,292,36,12085,292,63,12112],
[M,293,11,12126,293,18,12133],
[M,293,30,12145,293,97,12212],
[M,293,20,12135,293,106,12221],
[M,295,9,12247,295,17,12255],
[M,296,11,12268,296,18,12275],
[M,296,20,12277,296,67,12324],
[M,297,11,12338,297,26,12353],
[M,298,12,12367,298,49,12404],
[M,298,61,12416,298,88,12443],
[M,298,51,12406,298,108,12463],
[M,299,12,12477,299,59,12524],
[M,300,12,12538,300,97,12623],
[M,301,11,12637,301,18,12644],
[M,302,22,12668,302,86,12732],
[M,302,12,12658,302,95,12741],
[M,303,12,12755,303,97,12840],
[M,304,7,12850,304,15,12858],
[M,305,9,12869,305,16,12876],
[M,305,18,12878,305,72,12932],
[M,305,93,12953,305,101,12961],
[M,306,9,12974,306,15,12980],
[M,307,11,12993,307,18,13000],
[M,307,20,13002,307,73,13055],
[M,308,11,13069,308,22,13080],
[M,305,74,12934,305,102,12962],
[M,283,4,11551,309,7,13107],
[M,312,7,13171,312,15,13179],
[M,312,18,13182,312,25,13189],
[M,313,10,13201,313,74,13265],
[M,314,10,13277,314,112,13379],
[M,311,4,13143,315,7,13389],
[M,318,7,13469,318,15,13477],
[M,318,18,13480,318,33,13495],
[M,319,10,13507,319,87,13584],
[M,320,29,13615,320,37,13623],
[M,321,10,13636,321,62,13688],
[M,320,10,13596,320,38,13624],
[M,317,4,13441,322,7,13698],
[M,325,7,13771,325,15,13779],
[M,325,18,13782,325,33,13797],
[M,326,10,13809,326,37,13836],
[M,327,29,13867,327,37,13875],
[M,328,10,13888,328,52,13930],
[M,327,10,13848,327,38,13876],
[M,324,4,13743,329,7,13940],
[M,332,7,14011,332,15,14019],
[M,332,18,14022,332,33,14037],
[M,333,10,14049,333,72,14111],
[M,334,29,14142,334,37,14150],
[M,335,10,14163,335,100,14253],
[M,334,10,14123,334,38,14151],
[M,331,4,13983,336,7,14263],
[M,339,26,14355,339,34,14363],
[M,339,26,14355,339,47,14376],
[M,339,6,14335,339,47,14376],
[M,338,4,14295,340,7,14384],
[M,343,75,14528,343,83,14536],
[M,343,75,14528,343,96,14549],
[M,343,6,14459,343,96,14549],
[M,342,4,14419,344,7,14557],
[M,347,75,14707,347,83,14715],
[M,347,75,14707,347,96,14728],
[M,347,6,14638,347,96,14728],
[M,346,4,14598,348,7,14736],
[M,350,62,14832,350,70,14840],
[M,350,62,14832,350,83,14853],
[M,350,38,14808,350,83,14853],
[M,350,4,14774,350,87,14857],
[M,352,60,14949,352,68,14957],
[M,352,60,14949,352,81,14970],
[M,352,38,14927,352,81,14970],
[M,352,4,14893,352,85,14974],
[M,354,63,15072,354,71,15080],
[M,354,63,15072,354,84,15093],
[M,354,38,15047,354,84,15093],
[M,354,4,15013,354,88,15097],
[M,356,67,15203,356,75,15211],
[M,356,67,15203,356,88,15224],
[M,356,38,15174,356,88,15224],
[M,356,4,15140,356,92,15228],
[M,282,2,11489,309,7,13107],
[M,282,46,11533,282,52,11539],
[M,282,4,11491,282,53,11540],
[M,310,2,13110,315,7,13389],
[M,310,4,13112,310,24,13132],
[M,316,2,13392,322,7,13698],
[M,316,4,13394,316,40,13430],
[M,323,2,13701,329,7,13940],
[M,323,4,13703,323,33,13732],
[M,330,2,13943,336,7,14263],
[M,330,4,13945,330,31,13972],
[M,337,2,14266,340,7,14384],
[M,337,4,14268,337,20,14284],
[M,341,2,14387,344,7,14557],
[M,341,4,14389,341,23,14408],
[M,345,2,14560,348,7,14736],
[M,345,4,14562,345,29,14587],
[M,349,2,14739,350,87,14857],
[M,349,4,14741,349,26,14763],
[M,351,2,14860,352,85,14974],
[M,351,4,14862,351,24,14882],
[M,353,2,14977,354,88,15097],
[M,353,4,14979,353,27,15002],
[M,355,2,15100,356,92,15228],
[M,355,4,15102,355,31,15129],
[M,357,2,15231,357,20,15249],
[M,357,4,15233,357,20,15249],
[M,358,2,15252,358,22,15272],
[M,358,4,15254,358,22,15272],
[M,281,0,11470,363,3,15352],
[M,1,0,0,363,3,15352]];
var _plus1 = NAMESPACE.get("_plus");
var _lessthan2 = NAMESPACE.get("_lessthan");
var equal$always3 = NAMESPACE.get("equal-always");
var tostring4 = NAMESPACE.get("tostring");
var is$number5 = NAMESPACE.get("is-number");
var num$is$roughnum6 = NAMESPACE.get("num-is-roughnum");
var $type$String7 = NAMESPACE.get("$type$String");
var $type$Number8 = NAMESPACE.get("$type$Number");
var $type$Boolean9 = NAMESPACE.get("$type$Boolean");
var builtins10 = NAMESPACE.get("builtins");
var nothing11 = NAMESPACE.get("nothing");
var ED12 = R.getField($ED15,"values");
var ED13 = R.getField($ED15,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED15);
var $toplevel17 = function($$resumer1862) {
var $step16 = 0;
var $ans19 = D;
var $al20 = L[617];
try {
if(R.isActivationRecord($$resumer1862)) {
$step16 = $$resumer1862.step;
$al20 = $$resumer1862.from;
$ans19 = $$resumer1862.ans;
$resumer1862 = $$resumer1862.args[0];
provides1860 = $$resumer1862.vars[0];
missing$comma1854 = $$resumer1862.vars[1];
is$missing$comma1852 = $$resumer1862.vars[2];
missing$end1850 = $$resumer1862.vars[3];
is$missing$end1848 = $$resumer1862.vars[4];
app$args$missing$comma1846 = $$resumer1862.vars[5];
is$app$args$missing$comma1844 = $$resumer1862.vars[6];
args$missing$comma1842 = $$resumer1862.vars[7];
is$args$missing$comma1840 = $$resumer1862.vars[8];
fun$missing$end1838 = $$resumer1862.vars[9];
is$fun$missing$end1836 = $$resumer1862.vars[10];
fun$missing$colon1834 = $$resumer1862.vars[11];
is$fun$missing$colon1832 = $$resumer1862.vars[12];
bad$check$block$stmt1830 = $$resumer1862.vars[13];
is$bad$check$block$stmt1828 = $$resumer1862.vars[14];
bad$block$stmt1826 = $$resumer1862.vars[15];
is$bad$block$stmt1824 = $$resumer1862.vars[16];
empty$block1822 = $$resumer1862.vars[17];
is$empty$block1820 = $$resumer1862.vars[18];
parse$error$bad$number1818 = $$resumer1862.vars[19];
is$parse$error$bad$number1816 = $$resumer1862.vars[20];
parse$error$bad$operator1814 = $$resumer1862.vars[21];
is$parse$error$bad$operator1812 = $$resumer1862.vars[22];
parse$error$unterminated$string1810 = $$resumer1862.vars[23];
is$parse$error$unterminated$string1808 = $$resumer1862.vars[24];
parse$error$eof1806 = $$resumer1862.vars[25];
is$parse$error$eof1804 = $$resumer1862.vars[26];
parse$error$next$token1802 = $$resumer1862.vars[27];
is$parse$error$next$token1800 = $$resumer1862.vars[28];
is$ParseError1798 = $$resumer1862.vars[29];
ParseError1796 = $$resumer1862.vars[30];
user$exception1383 = $$resumer1862.vars[31];
is$user$exception1381 = $$resumer1862.vars[32];
user$break1379 = $$resumer1862.vars[33];
is$user$break1377 = $$resumer1862.vars[34];
equality$failure1375 = $$resumer1862.vars[35];
is$equality$failure1373 = $$resumer1862.vars[36];
invalid$array$index1371 = $$resumer1862.vars[37];
is$invalid$array$index1369 = $$resumer1862.vars[38];
module$load$failure1367 = $$resumer1862.vars[39];
is$module$load$failure1365 = $$resumer1862.vars[40];
uninitialized$id1363 = $$resumer1862.vars[41];
is$uninitialized$id1361 = $$resumer1862.vars[42];
bad$app1359 = $$resumer1862.vars[43];
is$bad$app1357 = $$resumer1862.vars[44];
non$function$app1355 = $$resumer1862.vars[45];
is$non$function$app1353 = $$resumer1862.vars[46];
arity$mismatch1351 = $$resumer1862.vars[47];
is$arity$mismatch1349 = $$resumer1862.vars[48];
cases$singleton$mismatch1347 = $$resumer1862.vars[49];
is$cases$singleton$mismatch1345 = $$resumer1862.vars[50];
cases$arity$mismatch1343 = $$resumer1862.vars[51];
is$cases$arity$mismatch1341 = $$resumer1862.vars[52];
numeric$binop$error1339 = $$resumer1862.vars[53];
is$numeric$binop$error1337 = $$resumer1862.vars[54];
num$string$binop$error1335 = $$resumer1862.vars[55];
is$num$string$binop$error1333 = $$resumer1862.vars[56];
outside$numeric$range1331 = $$resumer1862.vars[57];
is$outside$numeric$range1329 = $$resumer1862.vars[58];
generic$type$mismatch1327 = $$resumer1862.vars[59];
is$generic$type$mismatch1325 = $$resumer1862.vars[60];
non$boolean$op1323 = $$resumer1862.vars[61];
is$non$boolean$op1321 = $$resumer1862.vars[62];
non$boolean$condition1319 = $$resumer1862.vars[63];
is$non$boolean$condition1317 = $$resumer1862.vars[64];
extend$non$object1315 = $$resumer1862.vars[65];
is$extend$non$object1313 = $$resumer1862.vars[66];
lookup$non$object1311 = $$resumer1862.vars[67];
is$lookup$non$object1309 = $$resumer1862.vars[68];
field$not$found1307 = $$resumer1862.vars[69];
is$field$not$found1305 = $$resumer1862.vars[70];
internal$error1303 = $$resumer1862.vars[71];
is$internal$error1301 = $$resumer1862.vars[72];
no$branches$matched1299 = $$resumer1862.vars[73];
is$no$branches$matched1297 = $$resumer1862.vars[74];
no$cases$matched1295 = $$resumer1862.vars[75];
is$no$cases$matched1293 = $$resumer1862.vars[76];
message$exception1291 = $$resumer1862.vars[77];
is$message$exception1289 = $$resumer1862.vars[78];
is$RuntimeError1287 = $$resumer1862.vars[79];
RuntimeError1285 = $$resumer1862.vars[80];
vert$list$values56 = $$resumer1862.vars[81];
draw$and$highlight33 = $$resumer1862.vars[82];
ParseError1859 = $$resumer1862.vars[83];
RuntimeError1858 = $$resumer1862.vars[84];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step16) {
case 0: var RuntimeError21 = R.namedBrander("RuntimeError");
var RuntimeError1858 = R.makeBranderAnn(RuntimeError21,"RuntimeError");
var ParseError22 = R.namedBrander("ParseError");
var ParseError1859 = R.makeBranderAnn(ParseError22,"ParseError");
var draw$and$highlight33 = {"$var":D};
var vert$list$values56 = {"$var":D};
var RuntimeError1283 = {"$var":D};
var RuntimeError1285 = {"$var":D};
var is$RuntimeError1287 = {"$var":D};
var is$message$exception1289 = {"$var":D};
var message$exception1291 = {"$var":D};
var is$no$cases$matched1293 = {"$var":D};
var no$cases$matched1295 = {"$var":D};
var is$no$branches$matched1297 = {"$var":D};
var no$branches$matched1299 = {"$var":D};
var is$internal$error1301 = {"$var":D};
var internal$error1303 = {"$var":D};
var is$field$not$found1305 = {"$var":D};
var field$not$found1307 = {"$var":D};
var is$lookup$non$object1309 = {"$var":D};
var lookup$non$object1311 = {"$var":D};
var is$extend$non$object1313 = {"$var":D};
var extend$non$object1315 = {"$var":D};
var is$non$boolean$condition1317 = {"$var":D};
var non$boolean$condition1319 = {"$var":D};
var is$non$boolean$op1321 = {"$var":D};
var non$boolean$op1323 = {"$var":D};
var is$generic$type$mismatch1325 = {"$var":D};
var generic$type$mismatch1327 = {"$var":D};
var is$outside$numeric$range1329 = {"$var":D};
var outside$numeric$range1331 = {"$var":D};
var is$num$string$binop$error1333 = {"$var":D};
var num$string$binop$error1335 = {"$var":D};
var is$numeric$binop$error1337 = {"$var":D};
var numeric$binop$error1339 = {"$var":D};
var is$cases$arity$mismatch1341 = {"$var":D};
var cases$arity$mismatch1343 = {"$var":D};
var is$cases$singleton$mismatch1345 = {"$var":D};
var cases$singleton$mismatch1347 = {"$var":D};
var is$arity$mismatch1349 = {"$var":D};
var arity$mismatch1351 = {"$var":D};
var is$non$function$app1353 = {"$var":D};
var non$function$app1355 = {"$var":D};
var is$bad$app1357 = {"$var":D};
var bad$app1359 = {"$var":D};
var is$uninitialized$id1361 = {"$var":D};
var uninitialized$id1363 = {"$var":D};
var is$module$load$failure1365 = {"$var":D};
var module$load$failure1367 = {"$var":D};
var is$invalid$array$index1369 = {"$var":D};
var invalid$array$index1371 = {"$var":D};
var is$equality$failure1373 = {"$var":D};
var equality$failure1375 = {"$var":D};
var is$user$break1377 = {"$var":D};
var user$break1379 = {"$var":D};
var is$user$exception1381 = {"$var":D};
var user$exception1383 = {"$var":D};
var ParseError1794 = {"$var":D};
var ParseError1796 = {"$var":D};
var is$ParseError1798 = {"$var":D};
var is$parse$error$next$token1800 = {"$var":D};
var parse$error$next$token1802 = {"$var":D};
var is$parse$error$eof1804 = {"$var":D};
var parse$error$eof1806 = {"$var":D};
var is$parse$error$unterminated$string1808 = {"$var":D};
var parse$error$unterminated$string1810 = {"$var":D};
var is$parse$error$bad$operator1812 = {"$var":D};
var parse$error$bad$operator1814 = {"$var":D};
var is$parse$error$bad$number1816 = {"$var":D};
var parse$error$bad$number1818 = {"$var":D};
var is$empty$block1820 = {"$var":D};
var empty$block1822 = {"$var":D};
var is$bad$block$stmt1824 = {"$var":D};
var bad$block$stmt1826 = {"$var":D};
var is$bad$check$block$stmt1828 = {"$var":D};
var bad$check$block$stmt1830 = {"$var":D};
var is$fun$missing$colon1832 = {"$var":D};
var fun$missing$colon1834 = {"$var":D};
var is$fun$missing$end1836 = {"$var":D};
var fun$missing$end1838 = {"$var":D};
var is$args$missing$comma1840 = {"$var":D};
var args$missing$comma1842 = {"$var":D};
var is$app$args$missing$comma1844 = {"$var":D};
var app$args$missing$comma1846 = {"$var":D};
var is$missing$end1848 = {"$var":D};
var missing$end1850 = {"$var":D};
var is$missing$comma1852 = {"$var":D};
var missing$comma1854 = {"$var":D};
var $temp_lam24 = function($l25) {
var $step23 = 0;
var $ans26 = D;
var $al27 = L[2];
try {
if(R.isActivationRecord($l25)) {
$step23 = $l25.step;
$al27 = $l25.from;
$ans26 = $l25.ans;
l25 = $l25.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
var l25 = $l25;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step23) {
case 0: $step23 = 1;
$al27 = L[0];
$field28 = R.getColonFieldLoc(ED12,"loc",L[0]);
if(R.isMethod($field28)) {
$ans26 = $field28.full_meth(ED12,l25);
} else {
if(!(R.isFunction($field28))) {
R.ffi.throwNonFunApp(L[0],$field28);
}
$ans26 = $field28.app(l25);
}
break;
case 1: var anf_arg29 = $ans26;
$step23 = 2;
$al27 = L[1];
$field30 = R.getColonFieldLoc(ED12,"loc-display",L[1]);
if(R.isMethod($field30)) {
$ans26 = $field30.full_meth(ED12,l25,("error-highlight"),anf_arg29);
} else {
if(!(R.isFunction($field30))) {
R.ffi.throwNonFunApp(L[1],$field30);
}
$ans26 = $field30.app(l25,("error-highlight"),anf_arg29);
}
break;
case 2: ++R.GAS;
return $ans26;
default: throw "No case numbered " + $step23 + " in $temp_lam24";
}
}
} catch($e31) {
if(R.isCont($e31) && ($step23 !== 2)) {
$e31.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al27,$temp_lam24,$step23,[l25],[]);
}
if(R.isPyretException($e31)) {
$e31.pyretStack.push($al27);
}
throw $e31;
}
};
var anf_assign32 = R.makeFunction($temp_lam24);
draw$and$highlight33.$var = anf_assign32;
var $temp_lam35 = function($vals36) {
var $step34 = 0;
var $ans37 = D;
var $al38 = L[8];
try {
if(R.isActivationRecord($vals36)) {
$step34 = $vals36.step;
$al38 = $vals36.from;
$ans37 = $vals36.ans;
vals36 = $vals36.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],1,$t);
}
var vals36 = $vals36;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step34) {
case 0: var $temp_lam40 = function($val41) {
var $step39 = 0;
var $ans42 = D;
var $al43 = L[5];
try {
if(R.isActivationRecord($val41)) {
$step39 = $val41.step;
$al43 = $val41.from;
$ans42 = $val41.ans;
val41 = $val41.args[0];
anf_method_obj46 = $val41.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],1,$t);
}
var val41 = $val41;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step39) {
case 0: var anf_method_obj46 = G(ED12,"para",L[3]);
$step39 = 1;
$al43 = L[4];
$field44 = R.getColonFieldLoc(ED12,"embed",L[4]);
if(R.isMethod($field44)) {
$ans42 = $field44.full_meth(ED12,val41);
} else {
if(!(R.isFunction($field44))) {
R.ffi.throwNonFunApp(L[4],$field44);
}
$ans42 = $field44.app(val41);
}
break;
case 1: var anf_array_val45 = $ans42;
var anf_arg47 = [anf_array_val45];
$step39 = 2;
$al43 = L[3];
$field48 = R.getColonFieldLoc(anf_method_obj46,"make",L[3]);
if(R.isMethod($field48)) {
$ans42 = $field48.full_meth(anf_method_obj46,anf_arg47);
} else {
if(!(R.isFunction($field48))) {
R.ffi.throwNonFunApp(L[3],$field48);
}
$ans42 = $field48.app(anf_arg47);
}
break;
case 2: ++R.GAS;
return $ans42;
default: throw "No case numbered " + $step39 + " in $temp_lam40";
}
}
} catch($e49) {
if(R.isCont($e49) && ($step39 !== 2)) {
$e49.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al43,$temp_lam40,$step39,[val41],[anf_method_obj46]);
}
if(R.isPyretException($e49)) {
$e49.pyretStack.push($al43);
}
throw $e49;
}
};
var anf_arg50 = R.makeFunction($temp_lam40);
$step34 = 1;
$al38 = L[6];
$field51 = R.getColonFieldLoc(vals36,"map",L[6]);
if(R.isMethod($field51)) {
$ans37 = $field51.full_meth(vals36,anf_arg50);
} else {
if(!(R.isFunction($field51))) {
R.ffi.throwNonFunApp(L[6],$field51);
}
$ans37 = $field51.app(anf_arg50);
}
break;
case 1: var anf_arg52 = $ans37;
$step34 = 2;
$al38 = L[7];
$field53 = R.getColonFieldLoc(ED12,"v-sequence",L[7]);
if(R.isMethod($field53)) {
$ans37 = $field53.full_meth(ED12,anf_arg52);
} else {
if(!(R.isFunction($field53))) {
R.ffi.throwNonFunApp(L[7],$field53);
}
$ans37 = $field53.app(anf_arg52);
}
break;
case 2: ++R.GAS;
return $ans37;
default: throw "No case numbered " + $step34 + " in $temp_lam35";
}
}
} catch($e54) {
if(R.isCont($e54) && ($step34 !== 2)) {
$e54.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al38,$temp_lam35,$step34,[vals36],[]);
}
if(R.isPyretException($e54)) {
$e54.pyretStack.push($al38);
}
throw $e54;
}
};
var anf_assign55 = R.makeFunction($temp_lam35);
vert$list$values56.$var = anf_assign55;
var $temp_full58 = function($self59) {
var $step57 = 0;
var $ans60 = D;
var $al61 = L[13];
try {
if(R.isActivationRecord($self59)) {
$step57 = $self59.step;
$al61 = $self59.from;
$ans60 = $self59.ans;
self59 = $self59.args[0];
anf_method_obj65 = $self59.vars[0];
anf_method_obj69 = $self59.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
var self59 = $self59;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step57) {
case 0: var anf_method_obj69 = G(ED12,"error",L[9]);
var anf_method_obj65 = G(ED12,"para",L[10]);
var anf_arg62 = G(self59,"message",L[11]);
$step57 = 1;
$al61 = L[12];
$field63 = R.getColonFieldLoc(ED12,"text",L[12]);
if(R.isMethod($field63)) {
$ans60 = $field63.full_meth(ED12,anf_arg62);
} else {
if(!(R.isFunction($field63))) {
R.ffi.throwNonFunApp(L[12],$field63);
}
$ans60 = $field63.app(anf_arg62);
}
break;
case 1: var anf_array_val64 = $ans60;
var anf_arg66 = [anf_array_val64];
$step57 = 2;
$al61 = L[10];
$field67 = R.getColonFieldLoc(anf_method_obj65,"make",L[10]);
if(R.isMethod($field67)) {
$ans60 = $field67.full_meth(anf_method_obj65,anf_arg66);
} else {
if(!(R.isFunction($field67))) {
R.ffi.throwNonFunApp(L[10],$field67);
}
$ans60 = $field67.app(anf_arg66);
}
break;
case 2: var anf_array_val68 = $ans60;
var anf_arg70 = [anf_array_val68];
$step57 = 3;
$al61 = L[9];
$field71 = R.getColonFieldLoc(anf_method_obj69,"make",L[9]);
if(R.isMethod($field71)) {
$ans60 = $field71.full_meth(anf_method_obj69,anf_arg70);
} else {
if(!(R.isFunction($field71))) {
R.ffi.throwNonFunApp(L[9],$field71);
}
$ans60 = $field71.app(anf_arg70);
}
break;
case 3: ++R.GAS;
return $ans60;
default: throw "No case numbered " + $step57 + " in $temp_full58";
}
}
} catch($e72) {
if(R.isCont($e72) && ($step57 !== 3)) {
$e72.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al61,$temp_full58,$step57,[self59],[anf_method_obj65,anf_method_obj69]);
}
if(R.isPyretException($e72)) {
$e72.pyretStack.push($al61);
}
throw $e72;
}
};
var anf_variant_member1007 = R.makeMethod0($temp_full58);
var $temp_full74 = function($self75) {
var $step73 = 0;
var $ans76 = D;
var $al77 = L[22];
try {
if(R.isActivationRecord($self75)) {
$step73 = $self75.step;
$al77 = $self75.from;
$ans76 = $self75.ans;
self75 = $self75.args[0];
anf_array_val89 = $self75.vars[0];
anf_array_val82 = $self75.vars[1];
anf_array_val81 = $self75.vars[2];
anf_method_obj84 = $self75.vars[3];
anf_method_obj91 = $self75.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],1,$t);
}
var self75 = $self75;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step73) {
case 0: var anf_method_obj91 = G(ED12,"error",L[14]);
var anf_method_obj84 = G(ED12,"para",L[15]);
$step73 = 1;
$al77 = L[16];
$field78 = R.getColonFieldLoc(ED12,"text",L[16]);
if(R.isMethod($field78)) {
$ans76 = $field78.full_meth(ED12,("No branches matched in the cases expression at"));
} else {
if(!(R.isFunction($field78))) {
R.ffi.throwNonFunApp(L[16],$field78);
}
$ans76 = $field78.app(("No branches matched in the cases expression at"));
}
break;
case 1: var anf_array_val81 = $ans76;
var anf_arg79 = G(self75,"loc",L[17]);
$step73 = 2;
$al77 = L[21];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al77,draw$and$highlight33.$var);
}
$ans76 = draw$and$highlight33.$var.app(anf_arg79);
break;
case 2: var anf_array_val82 = $ans76;
$step73 = 3;
$al77 = L[18];
$field80 = R.getColonFieldLoc(ED12,"text",L[18]);
if(R.isMethod($field80)) {
$ans76 = $field80.full_meth(ED12,("for value"));
} else {
if(!(R.isFunction($field80))) {
R.ffi.throwNonFunApp(L[18],$field80);
}
$ans76 = $field80.app(("for value"));
}
break;
case 3: var anf_array_val83 = $ans76;
var anf_arg85 = [anf_array_val81,anf_array_val82,anf_array_val83];
$step73 = 4;
$al77 = L[15];
$field86 = R.getColonFieldLoc(anf_method_obj84,"make",L[15]);
if(R.isMethod($field86)) {
$ans76 = $field86.full_meth(anf_method_obj84,anf_arg85);
} else {
if(!(R.isFunction($field86))) {
R.ffi.throwNonFunApp(L[15],$field86);
}
$ans76 = $field86.app(anf_arg85);
}
break;
case 4: var anf_array_val89 = $ans76;
var anf_arg87 = G(self75,"val",L[19]);
$step73 = 5;
$al77 = L[20];
$field88 = R.getColonFieldLoc(ED12,"embed",L[20]);
if(R.isMethod($field88)) {
$ans76 = $field88.full_meth(ED12,anf_arg87);
} else {
if(!(R.isFunction($field88))) {
R.ffi.throwNonFunApp(L[20],$field88);
}
$ans76 = $field88.app(anf_arg87);
}
break;
case 5: var anf_array_val90 = $ans76;
var anf_arg92 = [anf_array_val89,anf_array_val90];
$step73 = 6;
$al77 = L[14];
$field93 = R.getColonFieldLoc(anf_method_obj91,"make",L[14]);
if(R.isMethod($field93)) {
$ans76 = $field93.full_meth(anf_method_obj91,anf_arg92);
} else {
if(!(R.isFunction($field93))) {
R.ffi.throwNonFunApp(L[14],$field93);
}
$ans76 = $field93.app(anf_arg92);
}
break;
case 6: ++R.GAS;
return $ans76;
default: throw "No case numbered " + $step73 + " in $temp_full74";
}
}
} catch($e94) {
if(R.isCont($e94) && ($step73 !== 6)) {
$e94.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al77,$temp_full74,$step73,[self75],[anf_array_val89,anf_array_val82,anf_array_val81,anf_method_obj84,anf_method_obj91]);
}
if(R.isPyretException($e94)) {
$e94.pyretStack.push($al77);
}
throw $e94;
}
};
var anf_variant_member1017 = R.makeMethod0($temp_full74);
var $temp_full96 = function($self97) {
var $step95 = 0;
var $ans98 = D;
var $al99 = L[32];
try {
if(R.isActivationRecord($self97)) {
$step95 = $self97.step;
$al99 = $self97.from;
$ans98 = $self97.ans;
self97 = $self97.args[0];
anf_array_val109 = $self97.vars[0];
anf_array_val108 = $self97.vars[1];
anf_array_val107 = $self97.vars[2];
anf_method_obj111 = $self97.vars[3];
anf_method_obj115 = $self97.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
var self97 = $self97;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step95) {
case 0: var anf_method_obj115 = G(ED12,"error",L[23]);
var anf_method_obj111 = G(ED12,"para",L[24]);
$step95 = 1;
$al99 = L[25];
$field100 = R.getColonFieldLoc(ED12,"text",L[25]);
if(R.isMethod($field100)) {
$ans98 = $field100.full_meth(ED12,("No branches matched in the"));
} else {
if(!(R.isFunction($field100))) {
R.ffi.throwNonFunApp(L[25],$field100);
}
$ans98 = $field100.app(("No branches matched in the"));
}
break;
case 1: var anf_array_val107 = $ans98;
var anf_arg101 = G(self97,"expression",L[26]);
$step95 = 2;
$al99 = L[27];
$field102 = R.getColonFieldLoc(ED12,"text",L[27]);
if(R.isMethod($field102)) {
$ans98 = $field102.full_meth(ED12,anf_arg101);
} else {
if(!(R.isFunction($field102))) {
R.ffi.throwNonFunApp(L[27],$field102);
}
$ans98 = $field102.app(anf_arg101);
}
break;
case 2: var anf_arg103 = $ans98;
$step95 = 3;
$al99 = L[28];
$field104 = R.getColonFieldLoc(ED12,"code",L[28]);
if(R.isMethod($field104)) {
$ans98 = $field104.full_meth(ED12,anf_arg103);
} else {
if(!(R.isFunction($field104))) {
R.ffi.throwNonFunApp(L[28],$field104);
}
$ans98 = $field104.app(anf_arg103);
}
break;
case 3: var anf_array_val108 = $ans98;
$step95 = 4;
$al99 = L[29];
$field105 = R.getColonFieldLoc(ED12,"text",L[29]);
if(R.isMethod($field105)) {
$ans98 = $field105.full_meth(ED12,("expression at"));
} else {
if(!(R.isFunction($field105))) {
R.ffi.throwNonFunApp(L[29],$field105);
}
$ans98 = $field105.app(("expression at"));
}
break;
case 4: var anf_array_val109 = $ans98;
var anf_arg106 = G(self97,"loc",L[30]);
$step95 = 5;
$al99 = L[31];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al99,draw$and$highlight33.$var);
}
$ans98 = draw$and$highlight33.$var.app(anf_arg106);
break;
case 5: var anf_array_val110 = $ans98;
var anf_arg112 = [anf_array_val107,anf_array_val108,anf_array_val109,anf_array_val110];
$step95 = 6;
$al99 = L[24];
$field113 = R.getColonFieldLoc(anf_method_obj111,"make",L[24]);
if(R.isMethod($field113)) {
$ans98 = $field113.full_meth(anf_method_obj111,anf_arg112);
} else {
if(!(R.isFunction($field113))) {
R.ffi.throwNonFunApp(L[24],$field113);
}
$ans98 = $field113.app(anf_arg112);
}
break;
case 6: var anf_array_val114 = $ans98;
var anf_arg116 = [anf_array_val114];
$step95 = 7;
$al99 = L[23];
$field117 = R.getColonFieldLoc(anf_method_obj115,"make",L[23]);
if(R.isMethod($field117)) {
$ans98 = $field117.full_meth(anf_method_obj115,anf_arg116);
} else {
if(!(R.isFunction($field117))) {
R.ffi.throwNonFunApp(L[23],$field117);
}
$ans98 = $field117.app(anf_arg116);
}
break;
case 7: ++R.GAS;
return $ans98;
default: throw "No case numbered " + $step95 + " in $temp_full96";
}
}
} catch($e118) {
if(R.isCont($e118) && ($step95 !== 7)) {
$e118.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al99,$temp_full96,$step95,[self97],[anf_array_val109,anf_array_val108,anf_array_val107,anf_method_obj111,anf_method_obj115]);
}
if(R.isPyretException($e118)) {
$e118.pyretStack.push($al99);
}
throw $e118;
}
};
var anf_variant_member1028 = R.makeMethod0($temp_full96);
var $temp_full120 = function($self121) {
var $step119 = 0;
var $ans122 = D;
var $al123 = L[42];
try {
if(R.isActivationRecord($self121)) {
$step119 = $self121.step;
$al123 = $self121.from;
$ans122 = $self121.ans;
self121 = $self121.args[0];
anf_array_val139 = $self121.vars[0];
anf_method_obj134 = $self121.vars[1];
anf_array_val138 = $self121.vars[2];
anf_array_val127 = $self121.vars[3];
anf_method_obj129 = $self121.vars[4];
anf_method_obj141 = $self121.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],1,$t);
}
var self121 = $self121;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step119) {
case 0: var anf_method_obj141 = G(ED12,"error",L[33]);
var anf_method_obj129 = G(ED12,"para",L[34]);
$step119 = 1;
$al123 = L[35];
$field124 = R.getColonFieldLoc(ED12,"text",L[35]);
if(R.isMethod($field124)) {
$ans122 = $field124.full_meth(ED12,("Internal error:"));
} else {
if(!(R.isFunction($field124))) {
R.ffi.throwNonFunApp(L[35],$field124);
}
$ans122 = $field124.app(("Internal error:"));
}
break;
case 1: var anf_array_val127 = $ans122;
var anf_arg125 = G(self121,"message",L[36]);
$step119 = 2;
$al123 = L[37];
$field126 = R.getColonFieldLoc(ED12,"text",L[37]);
if(R.isMethod($field126)) {
$ans122 = $field126.full_meth(ED12,anf_arg125);
} else {
if(!(R.isFunction($field126))) {
R.ffi.throwNonFunApp(L[37],$field126);
}
$ans122 = $field126.app(anf_arg125);
}
break;
case 2: var anf_array_val128 = $ans122;
var anf_arg130 = [anf_array_val127,anf_array_val128];
$step119 = 3;
$al123 = L[34];
$field131 = R.getColonFieldLoc(anf_method_obj129,"make",L[34]);
if(R.isMethod($field131)) {
$ans122 = $field131.full_meth(anf_method_obj129,anf_arg130);
} else {
if(!(R.isFunction($field131))) {
R.ffi.throwNonFunApp(L[34],$field131);
}
$ans122 = $field131.app(anf_arg130);
}
break;
case 3: var anf_array_val138 = $ans122;
var anf_method_obj134 = G(ED12,"para",L[38]);
$step119 = 4;
$al123 = L[39];
$field132 = R.getColonFieldLoc(ED12,"text",L[39]);
if(R.isMethod($field132)) {
$ans122 = $field132.full_meth(ED12,("Relevant arguments:"));
} else {
if(!(R.isFunction($field132))) {
R.ffi.throwNonFunApp(L[39],$field132);
}
$ans122 = $field132.app(("Relevant arguments:"));
}
break;
case 4: var anf_array_val133 = $ans122;
var anf_arg135 = [anf_array_val133];
$step119 = 5;
$al123 = L[38];
$field136 = R.getColonFieldLoc(anf_method_obj134,"make",L[38]);
if(R.isMethod($field136)) {
$ans122 = $field136.full_meth(anf_method_obj134,anf_arg135);
} else {
if(!(R.isFunction($field136))) {
R.ffi.throwNonFunApp(L[38],$field136);
}
$ans122 = $field136.app(anf_arg135);
}
break;
case 5: var anf_array_val139 = $ans122;
var anf_arg137 = G(self121,"info-args",L[40]);
$step119 = 6;
$al123 = L[41];
if(!(R.isFunction(vert$list$values56.$var))) {
R.ffi.throwNonFunApp($al123,vert$list$values56.$var);
}
$ans122 = vert$list$values56.$var.app(anf_arg137);
break;
case 6: var anf_array_val140 = $ans122;
var anf_arg142 = [anf_array_val138,anf_array_val139,anf_array_val140];
$step119 = 7;
$al123 = L[33];
$field143 = R.getColonFieldLoc(anf_method_obj141,"make",L[33]);
if(R.isMethod($field143)) {
$ans122 = $field143.full_meth(anf_method_obj141,anf_arg142);
} else {
if(!(R.isFunction($field143))) {
R.ffi.throwNonFunApp(L[33],$field143);
}
$ans122 = $field143.app(anf_arg142);
}
break;
case 7: ++R.GAS;
return $ans122;
default: throw "No case numbered " + $step119 + " in $temp_full120";
}
}
} catch($e144) {
if(R.isCont($e144) && ($step119 !== 7)) {
$e144.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al123,$temp_full120,$step119,[self121],[anf_array_val139,anf_method_obj134,anf_array_val138,anf_array_val127,anf_method_obj129,anf_method_obj141]);
}
if(R.isPyretException($e144)) {
$e144.pyretStack.push($al123);
}
throw $e144;
}
};
var anf_variant_member1039 = R.makeMethod0($temp_full120);
var $temp_full146 = function($self147) {
var $step145 = 0;
var $ans148 = D;
var $al149 = L[56];
try {
if(R.isActivationRecord($self147)) {
$step145 = $self147.step;
$al149 = $self147.from;
$ans148 = $self147.ans;
self147 = $self147.args[0];
anf_array_val172 = $self147.vars[0];
anf_method_obj166 = $self147.vars[1];
anf_array_val171 = $self147.vars[2];
anf_array_val159 = $self147.vars[3];
anf_array_val158 = $self147.vars[4];
anf_array_val157 = $self147.vars[5];
anf_method_obj161 = $self147.vars[6];
anf_method_obj174 = $self147.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[56],1,$t);
}
var self147 = $self147;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step145) {
case 0: var anf_method_obj174 = G(ED12,"error",L[43]);
var anf_method_obj161 = G(ED12,"para",L[44]);
$step145 = 1;
$al149 = L[45];
$field150 = R.getColonFieldLoc(ED12,"text",L[45]);
if(R.isMethod($field150)) {
$ans148 = $field150.full_meth(ED12,("Field"));
} else {
if(!(R.isFunction($field150))) {
R.ffi.throwNonFunApp(L[45],$field150);
}
$ans148 = $field150.app(("Field"));
}
break;
case 1: var anf_array_val157 = $ans148;
var anf_arg151 = G(self147,"field",L[46]);
$step145 = 2;
$al149 = L[47];
$field152 = R.getColonFieldLoc(ED12,"text",L[47]);
if(R.isMethod($field152)) {
$ans148 = $field152.full_meth(ED12,anf_arg151);
} else {
if(!(R.isFunction($field152))) {
R.ffi.throwNonFunApp(L[47],$field152);
}
$ans148 = $field152.app(anf_arg151);
}
break;
case 2: var anf_arg153 = $ans148;
$step145 = 3;
$al149 = L[48];
$field154 = R.getColonFieldLoc(ED12,"code",L[48]);
if(R.isMethod($field154)) {
$ans148 = $field154.full_meth(ED12,anf_arg153);
} else {
if(!(R.isFunction($field154))) {
R.ffi.throwNonFunApp(L[48],$field154);
}
$ans148 = $field154.app(anf_arg153);
}
break;
case 3: var anf_array_val158 = $ans148;
$step145 = 4;
$al149 = L[49];
$field155 = R.getColonFieldLoc(ED12,"text",L[49]);
if(R.isMethod($field155)) {
$ans148 = $field155.full_meth(ED12,("not found in the lookup expression at"));
} else {
if(!(R.isFunction($field155))) {
R.ffi.throwNonFunApp(L[49],$field155);
}
$ans148 = $field155.app(("not found in the lookup expression at"));
}
break;
case 4: var anf_array_val159 = $ans148;
var anf_arg156 = G(self147,"loc",L[50]);
$step145 = 5;
$al149 = L[55];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al149,draw$and$highlight33.$var);
}
$ans148 = draw$and$highlight33.$var.app(anf_arg156);
break;
case 5: var anf_array_val160 = $ans148;
var anf_arg162 = [anf_array_val157,anf_array_val158,anf_array_val159,anf_array_val160];
$step145 = 6;
$al149 = L[44];
$field163 = R.getColonFieldLoc(anf_method_obj161,"make",L[44]);
if(R.isMethod($field163)) {
$ans148 = $field163.full_meth(anf_method_obj161,anf_arg162);
} else {
if(!(R.isFunction($field163))) {
R.ffi.throwNonFunApp(L[44],$field163);
}
$ans148 = $field163.app(anf_arg162);
}
break;
case 6: var anf_array_val171 = $ans148;
var anf_method_obj166 = G(ED12,"para",L[51]);
$step145 = 7;
$al149 = L[52];
$field164 = R.getColonFieldLoc(ED12,"text",L[52]);
if(R.isMethod($field164)) {
$ans148 = $field164.full_meth(ED12,("The object was:"));
} else {
if(!(R.isFunction($field164))) {
R.ffi.throwNonFunApp(L[52],$field164);
}
$ans148 = $field164.app(("The object was:"));
}
break;
case 7: var anf_array_val165 = $ans148;
var anf_arg167 = [anf_array_val165];
$step145 = 8;
$al149 = L[51];
$field168 = R.getColonFieldLoc(anf_method_obj166,"make",L[51]);
if(R.isMethod($field168)) {
$ans148 = $field168.full_meth(anf_method_obj166,anf_arg167);
} else {
if(!(R.isFunction($field168))) {
R.ffi.throwNonFunApp(L[51],$field168);
}
$ans148 = $field168.app(anf_arg167);
}
break;
case 8: var anf_array_val172 = $ans148;
var anf_arg169 = G(self147,"obj",L[53]);
$step145 = 9;
$al149 = L[54];
$field170 = R.getColonFieldLoc(ED12,"embed",L[54]);
if(R.isMethod($field170)) {
$ans148 = $field170.full_meth(ED12,anf_arg169);
} else {
if(!(R.isFunction($field170))) {
R.ffi.throwNonFunApp(L[54],$field170);
}
$ans148 = $field170.app(anf_arg169);
}
break;
case 9: var anf_array_val173 = $ans148;
var anf_arg175 = [anf_array_val171,anf_array_val172,anf_array_val173];
$step145 = 10;
$al149 = L[43];
$field176 = R.getColonFieldLoc(anf_method_obj174,"make",L[43]);
if(R.isMethod($field176)) {
$ans148 = $field176.full_meth(anf_method_obj174,anf_arg175);
} else {
if(!(R.isFunction($field176))) {
R.ffi.throwNonFunApp(L[43],$field176);
}
$ans148 = $field176.app(anf_arg175);
}
break;
case 10: ++R.GAS;
return $ans148;
default: throw "No case numbered " + $step145 + " in $temp_full146";
}
}
} catch($e177) {
if(R.isCont($e177) && ($step145 !== 10)) {
$e177.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al149,$temp_full146,$step145,[self147],[anf_array_val172,anf_method_obj166,anf_array_val171,anf_array_val159,anf_array_val158,anf_array_val157,anf_method_obj161,anf_method_obj174]);
}
if(R.isPyretException($e177)) {
$e177.pyretStack.push($al149);
}
throw $e177;
}
};
var anf_variant_member1050 = R.makeMethod0($temp_full146);
var $temp_full179 = function($self180) {
var $step178 = 0;
var $ans181 = D;
var $al182 = L[70];
try {
if(R.isActivationRecord($self180)) {
$step178 = $self180.step;
$al182 = $self180.from;
$ans181 = $self180.ans;
self180 = $self180.args[0];
anf_array_val205 = $self180.vars[0];
anf_method_obj199 = $self180.vars[1];
anf_array_val204 = $self180.vars[2];
anf_array_val192 = $self180.vars[3];
anf_array_val191 = $self180.vars[4];
anf_array_val190 = $self180.vars[5];
anf_method_obj194 = $self180.vars[6];
anf_method_obj207 = $self180.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[70],1,$t);
}
var self180 = $self180;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step178) {
case 0: var anf_method_obj207 = G(ED12,"error",L[57]);
var anf_method_obj194 = G(ED12,"para",L[58]);
$step178 = 1;
$al182 = L[59];
$field183 = R.getColonFieldLoc(ED12,"text",L[59]);
if(R.isMethod($field183)) {
$ans181 = $field183.full_meth(ED12,("Tried to look up field"));
} else {
if(!(R.isFunction($field183))) {
R.ffi.throwNonFunApp(L[59],$field183);
}
$ans181 = $field183.app(("Tried to look up field"));
}
break;
case 1: var anf_array_val190 = $ans181;
var anf_arg184 = G(self180,"field",L[60]);
$step178 = 2;
$al182 = L[61];
$field185 = R.getColonFieldLoc(ED12,"text",L[61]);
if(R.isMethod($field185)) {
$ans181 = $field185.full_meth(ED12,anf_arg184);
} else {
if(!(R.isFunction($field185))) {
R.ffi.throwNonFunApp(L[61],$field185);
}
$ans181 = $field185.app(anf_arg184);
}
break;
case 2: var anf_arg186 = $ans181;
$step178 = 3;
$al182 = L[62];
$field187 = R.getColonFieldLoc(ED12,"code",L[62]);
if(R.isMethod($field187)) {
$ans181 = $field187.full_meth(ED12,anf_arg186);
} else {
if(!(R.isFunction($field187))) {
R.ffi.throwNonFunApp(L[62],$field187);
}
$ans181 = $field187.app(anf_arg186);
}
break;
case 3: var anf_array_val191 = $ans181;
$step178 = 4;
$al182 = L[63];
$field188 = R.getColonFieldLoc(ED12,"text",L[63]);
if(R.isMethod($field188)) {
$ans181 = $field188.full_meth(ED12,("on a non-object in the lookup expression at"));
} else {
if(!(R.isFunction($field188))) {
R.ffi.throwNonFunApp(L[63],$field188);
}
$ans181 = $field188.app(("on a non-object in the lookup expression at"));
}
break;
case 4: var anf_array_val192 = $ans181;
var anf_arg189 = G(self180,"loc",L[64]);
$step178 = 5;
$al182 = L[69];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al182,draw$and$highlight33.$var);
}
$ans181 = draw$and$highlight33.$var.app(anf_arg189);
break;
case 5: var anf_array_val193 = $ans181;
var anf_arg195 = [anf_array_val190,anf_array_val191,anf_array_val192,anf_array_val193];
$step178 = 6;
$al182 = L[58];
$field196 = R.getColonFieldLoc(anf_method_obj194,"make",L[58]);
if(R.isMethod($field196)) {
$ans181 = $field196.full_meth(anf_method_obj194,anf_arg195);
} else {
if(!(R.isFunction($field196))) {
R.ffi.throwNonFunApp(L[58],$field196);
}
$ans181 = $field196.app(anf_arg195);
}
break;
case 6: var anf_array_val204 = $ans181;
var anf_method_obj199 = G(ED12,"para",L[65]);
$step178 = 7;
$al182 = L[66];
$field197 = R.getColonFieldLoc(ED12,"text",L[66]);
if(R.isMethod($field197)) {
$ans181 = $field197.full_meth(ED12,("The non-object was:"));
} else {
if(!(R.isFunction($field197))) {
R.ffi.throwNonFunApp(L[66],$field197);
}
$ans181 = $field197.app(("The non-object was:"));
}
break;
case 7: var anf_array_val198 = $ans181;
var anf_arg200 = [anf_array_val198];
$step178 = 8;
$al182 = L[65];
$field201 = R.getColonFieldLoc(anf_method_obj199,"make",L[65]);
if(R.isMethod($field201)) {
$ans181 = $field201.full_meth(anf_method_obj199,anf_arg200);
} else {
if(!(R.isFunction($field201))) {
R.ffi.throwNonFunApp(L[65],$field201);
}
$ans181 = $field201.app(anf_arg200);
}
break;
case 8: var anf_array_val205 = $ans181;
var anf_arg202 = G(self180,"non-obj",L[67]);
$step178 = 9;
$al182 = L[68];
$field203 = R.getColonFieldLoc(ED12,"embed",L[68]);
if(R.isMethod($field203)) {
$ans181 = $field203.full_meth(ED12,anf_arg202);
} else {
if(!(R.isFunction($field203))) {
R.ffi.throwNonFunApp(L[68],$field203);
}
$ans181 = $field203.app(anf_arg202);
}
break;
case 9: var anf_array_val206 = $ans181;
var anf_arg208 = [anf_array_val204,anf_array_val205,anf_array_val206];
$step178 = 10;
$al182 = L[57];
$field209 = R.getColonFieldLoc(anf_method_obj207,"make",L[57]);
if(R.isMethod($field209)) {
$ans181 = $field209.full_meth(anf_method_obj207,anf_arg208);
} else {
if(!(R.isFunction($field209))) {
R.ffi.throwNonFunApp(L[57],$field209);
}
$ans181 = $field209.app(anf_arg208);
}
break;
case 10: ++R.GAS;
return $ans181;
default: throw "No case numbered " + $step178 + " in $temp_full179";
}
}
} catch($e210) {
if(R.isCont($e210) && ($step178 !== 10)) {
$e210.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al182,$temp_full179,$step178,[self180],[anf_array_val205,anf_method_obj199,anf_array_val204,anf_array_val192,anf_array_val191,anf_array_val190,anf_method_obj194,anf_method_obj207]);
}
if(R.isPyretException($e210)) {
$e210.pyretStack.push($al182);
}
throw $e210;
}
};
var anf_variant_member1062 = R.makeMethod0($temp_full179);
var $temp_full212 = function($self213) {
var $step211 = 0;
var $ans214 = D;
var $al215 = L[80];
try {
if(R.isActivationRecord($self213)) {
$step211 = $self213.step;
$al215 = $self213.from;
$ans214 = $self213.ans;
self213 = $self213.args[0];
anf_array_val231 = $self213.vars[0];
anf_method_obj225 = $self213.vars[1];
anf_array_val230 = $self213.vars[2];
anf_array_val218 = $self213.vars[3];
anf_method_obj220 = $self213.vars[4];
anf_method_obj233 = $self213.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[80],1,$t);
}
var self213 = $self213;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step211) {
case 0: var anf_method_obj233 = G(ED12,"error",L[71]);
var anf_method_obj220 = G(ED12,"para",L[72]);
$step211 = 1;
$al215 = L[73];
$field216 = R.getColonFieldLoc(ED12,"text",L[73]);
if(R.isMethod($field216)) {
$ans214 = $field216.full_meth(ED12,("Tried to extend a non-object in the expression at"));
} else {
if(!(R.isFunction($field216))) {
R.ffi.throwNonFunApp(L[73],$field216);
}
$ans214 = $field216.app(("Tried to extend a non-object in the expression at"));
}
break;
case 1: var anf_array_val218 = $ans214;
var anf_arg217 = G(self213,"loc",L[74]);
$step211 = 2;
$al215 = L[79];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al215,draw$and$highlight33.$var);
}
$ans214 = draw$and$highlight33.$var.app(anf_arg217);
break;
case 2: var anf_array_val219 = $ans214;
var anf_arg221 = [anf_array_val218,anf_array_val219];
$step211 = 3;
$al215 = L[72];
$field222 = R.getColonFieldLoc(anf_method_obj220,"make",L[72]);
if(R.isMethod($field222)) {
$ans214 = $field222.full_meth(anf_method_obj220,anf_arg221);
} else {
if(!(R.isFunction($field222))) {
R.ffi.throwNonFunApp(L[72],$field222);
}
$ans214 = $field222.app(anf_arg221);
}
break;
case 3: var anf_array_val230 = $ans214;
var anf_method_obj225 = G(ED12,"para",L[75]);
$step211 = 4;
$al215 = L[76];
$field223 = R.getColonFieldLoc(ED12,"text",L[76]);
if(R.isMethod($field223)) {
$ans214 = $field223.full_meth(ED12,("The non-object was:"));
} else {
if(!(R.isFunction($field223))) {
R.ffi.throwNonFunApp(L[76],$field223);
}
$ans214 = $field223.app(("The non-object was:"));
}
break;
case 4: var anf_array_val224 = $ans214;
var anf_arg226 = [anf_array_val224];
$step211 = 5;
$al215 = L[75];
$field227 = R.getColonFieldLoc(anf_method_obj225,"make",L[75]);
if(R.isMethod($field227)) {
$ans214 = $field227.full_meth(anf_method_obj225,anf_arg226);
} else {
if(!(R.isFunction($field227))) {
R.ffi.throwNonFunApp(L[75],$field227);
}
$ans214 = $field227.app(anf_arg226);
}
break;
case 5: var anf_array_val231 = $ans214;
var anf_arg228 = G(self213,"non-obj",L[77]);
$step211 = 6;
$al215 = L[78];
$field229 = R.getColonFieldLoc(ED12,"embed",L[78]);
if(R.isMethod($field229)) {
$ans214 = $field229.full_meth(ED12,anf_arg228);
} else {
if(!(R.isFunction($field229))) {
R.ffi.throwNonFunApp(L[78],$field229);
}
$ans214 = $field229.app(anf_arg228);
}
break;
case 6: var anf_array_val232 = $ans214;
var anf_arg234 = [anf_array_val230,anf_array_val231,anf_array_val232];
$step211 = 7;
$al215 = L[71];
$field235 = R.getColonFieldLoc(anf_method_obj233,"make",L[71]);
if(R.isMethod($field235)) {
$ans214 = $field235.full_meth(anf_method_obj233,anf_arg234);
} else {
if(!(R.isFunction($field235))) {
R.ffi.throwNonFunApp(L[71],$field235);
}
$ans214 = $field235.app(anf_arg234);
}
break;
case 7: ++R.GAS;
return $ans214;
default: throw "No case numbered " + $step211 + " in $temp_full212";
}
}
} catch($e236) {
if(R.isCont($e236) && ($step211 !== 7)) {
$e236.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al215,$temp_full212,$step211,[self213],[anf_array_val231,anf_method_obj225,anf_array_val230,anf_array_val218,anf_method_obj220,anf_method_obj233]);
}
if(R.isPyretException($e236)) {
$e236.pyretStack.push($al215);
}
throw $e236;
}
};
var anf_variant_member1074 = R.makeMethod0($temp_full212);
var $temp_full238 = function($self239) {
var $step237 = 0;
var $ans240 = D;
var $al241 = L[98];
try {
if(R.isActivationRecord($self239)) {
$step237 = $self239.step;
$al241 = $self239.from;
$ans240 = $self239.ans;
self239 = $self239.args[0];
anf_array_val270 = $self239.vars[0];
anf_array_val263 = $self239.vars[1];
anf_array_val262 = $self239.vars[2];
anf_array_val261 = $self239.vars[3];
anf_array_val260 = $self239.vars[4];
anf_array_val259 = $self239.vars[5];
anf_array_val258 = $self239.vars[6];
anf_array_val257 = $self239.vars[7];
anf_array_val256 = $self239.vars[8];
anf_method_obj265 = $self239.vars[9];
anf_method_obj272 = $self239.vars[10];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[98],1,$t);
}
var self239 = $self239;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step237) {
case 0: var anf_method_obj272 = G(ED12,"error",L[81]);
var anf_method_obj265 = G(ED12,"para",L[82]);
$step237 = 1;
$al241 = L[83];
$field242 = R.getColonFieldLoc(ED12,"text",L[83]);
if(R.isMethod($field242)) {
$ans240 = $field242.full_meth(ED12,("Expected"));
} else {
if(!(R.isFunction($field242))) {
R.ffi.throwNonFunApp(L[83],$field242);
}
$ans240 = $field242.app(("Expected"));
}
break;
case 1: var anf_array_val256 = $ans240;
$step237 = 2;
$al241 = L[84];
$field243 = R.getColonFieldLoc(ED12,"text",L[84]);
if(R.isMethod($field243)) {
$ans240 = $field243.full_meth(ED12,("true"));
} else {
if(!(R.isFunction($field243))) {
R.ffi.throwNonFunApp(L[84],$field243);
}
$ans240 = $field243.app(("true"));
}
break;
case 2: var anf_arg244 = $ans240;
$step237 = 3;
$al241 = L[85];
$field245 = R.getColonFieldLoc(ED12,"code",L[85]);
if(R.isMethod($field245)) {
$ans240 = $field245.full_meth(ED12,anf_arg244);
} else {
if(!(R.isFunction($field245))) {
R.ffi.throwNonFunApp(L[85],$field245);
}
$ans240 = $field245.app(anf_arg244);
}
break;
case 3: var anf_array_val257 = $ans240;
$step237 = 4;
$al241 = L[86];
$field246 = R.getColonFieldLoc(ED12,"text",L[86]);
if(R.isMethod($field246)) {
$ans240 = $field246.full_meth(ED12,("or"));
} else {
if(!(R.isFunction($field246))) {
R.ffi.throwNonFunApp(L[86],$field246);
}
$ans240 = $field246.app(("or"));
}
break;
case 4: var anf_array_val258 = $ans240;
$step237 = 5;
$al241 = L[87];
$field247 = R.getColonFieldLoc(ED12,"text",L[87]);
if(R.isMethod($field247)) {
$ans240 = $field247.full_meth(ED12,("false"));
} else {
if(!(R.isFunction($field247))) {
R.ffi.throwNonFunApp(L[87],$field247);
}
$ans240 = $field247.app(("false"));
}
break;
case 5: var anf_arg248 = $ans240;
$step237 = 6;
$al241 = L[88];
$field249 = R.getColonFieldLoc(ED12,"code",L[88]);
if(R.isMethod($field249)) {
$ans240 = $field249.full_meth(ED12,anf_arg248);
} else {
if(!(R.isFunction($field249))) {
R.ffi.throwNonFunApp(L[88],$field249);
}
$ans240 = $field249.app(anf_arg248);
}
break;
case 6: var anf_array_val259 = $ans240;
$step237 = 7;
$al241 = L[89];
$field250 = R.getColonFieldLoc(ED12,"text",L[89]);
if(R.isMethod($field250)) {
$ans240 = $field250.full_meth(ED12,("for the test in the"));
} else {
if(!(R.isFunction($field250))) {
R.ffi.throwNonFunApp(L[89],$field250);
}
$ans240 = $field250.app(("for the test in the"));
}
break;
case 7: var anf_array_val260 = $ans240;
var anf_arg251 = G(self239,"typ",L[90]);
$step237 = 8;
$al241 = L[91];
$field252 = R.getColonFieldLoc(ED12,"text",L[91]);
if(R.isMethod($field252)) {
$ans240 = $field252.full_meth(ED12,anf_arg251);
} else {
if(!(R.isFunction($field252))) {
R.ffi.throwNonFunApp(L[91],$field252);
}
$ans240 = $field252.app(anf_arg251);
}
break;
case 8: var anf_array_val261 = $ans240;
$step237 = 9;
$al241 = L[92];
$field253 = R.getColonFieldLoc(ED12,"text",L[92]);
if(R.isMethod($field253)) {
$ans240 = $field253.full_meth(ED12,("expression at"));
} else {
if(!(R.isFunction($field253))) {
R.ffi.throwNonFunApp(L[92],$field253);
}
$ans240 = $field253.app(("expression at"));
}
break;
case 9: var anf_array_val262 = $ans240;
var anf_arg254 = G(self239,"loc",L[93]);
$step237 = 10;
$al241 = L[97];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al241,draw$and$highlight33.$var);
}
$ans240 = draw$and$highlight33.$var.app(anf_arg254);
break;
case 10: var anf_array_val263 = $ans240;
$step237 = 11;
$al241 = L[94];
$field255 = R.getColonFieldLoc(ED12,"text",L[94]);
if(R.isMethod($field255)) {
$ans240 = $field255.full_meth(ED12,(" but got:"));
} else {
if(!(R.isFunction($field255))) {
R.ffi.throwNonFunApp(L[94],$field255);
}
$ans240 = $field255.app((" but got:"));
}
break;
case 11: var anf_array_val264 = $ans240;
var anf_arg266 = [anf_array_val256,anf_array_val257,anf_array_val258,anf_array_val259,anf_array_val260,anf_array_val261,anf_array_val262,anf_array_val263,anf_array_val264];
$step237 = 12;
$al241 = L[82];
$field267 = R.getColonFieldLoc(anf_method_obj265,"make",L[82]);
if(R.isMethod($field267)) {
$ans240 = $field267.full_meth(anf_method_obj265,anf_arg266);
} else {
if(!(R.isFunction($field267))) {
R.ffi.throwNonFunApp(L[82],$field267);
}
$ans240 = $field267.app(anf_arg266);
}
break;
case 12: var anf_array_val270 = $ans240;
var anf_arg268 = G(self239,"value",L[95]);
$step237 = 13;
$al241 = L[96];
$field269 = R.getColonFieldLoc(ED12,"embed",L[96]);
if(R.isMethod($field269)) {
$ans240 = $field269.full_meth(ED12,anf_arg268);
} else {
if(!(R.isFunction($field269))) {
R.ffi.throwNonFunApp(L[96],$field269);
}
$ans240 = $field269.app(anf_arg268);
}
break;
case 13: var anf_array_val271 = $ans240;
var anf_arg273 = [anf_array_val270,anf_array_val271];
$step237 = 14;
$al241 = L[81];
$field274 = R.getColonFieldLoc(anf_method_obj272,"make",L[81]);
if(R.isMethod($field274)) {
$ans240 = $field274.full_meth(anf_method_obj272,anf_arg273);
} else {
if(!(R.isFunction($field274))) {
R.ffi.throwNonFunApp(L[81],$field274);
}
$ans240 = $field274.app(anf_arg273);
}
break;
case 14: ++R.GAS;
return $ans240;
default: throw "No case numbered " + $step237 + " in $temp_full238";
}
}
} catch($e275) {
if(R.isCont($e275) && ($step237 !== 14)) {
$e275.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al241,$temp_full238,$step237,[self239],[anf_array_val270,anf_array_val263,anf_array_val262,anf_array_val261,anf_array_val260,anf_array_val259,anf_array_val258,anf_array_val257,anf_array_val256,anf_method_obj265,anf_method_obj272]);
}
if(R.isPyretException($e275)) {
$e275.pyretStack.push($al241);
}
throw $e275;
}
};
var anf_variant_member1085 = R.makeMethod0($temp_full238);
var $temp_full277 = function($self278) {
var $step276 = 0;
var $ans279 = D;
var $al280 = L[119];
try {
if(R.isActivationRecord($self278)) {
$step276 = $self278.step;
$al280 = $self278.from;
$ans279 = $self278.ans;
self278 = $self278.args[0];
anf_array_val314 = $self278.vars[0];
anf_array_val307 = $self278.vars[1];
anf_array_val306 = $self278.vars[2];
anf_array_val305 = $self278.vars[3];
anf_array_val304 = $self278.vars[4];
anf_array_val303 = $self278.vars[5];
anf_array_val302 = $self278.vars[6];
anf_array_val301 = $self278.vars[7];
anf_array_val300 = $self278.vars[8];
anf_array_val299 = $self278.vars[9];
anf_array_val298 = $self278.vars[10];
anf_method_obj309 = $self278.vars[11];
anf_method_obj316 = $self278.vars[12];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[119],1,$t);
}
var self278 = $self278;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step276) {
case 0: var anf_method_obj316 = G(ED12,"error",L[99]);
var anf_method_obj309 = G(ED12,"para",L[100]);
$step276 = 1;
$al280 = L[101];
$field281 = R.getColonFieldLoc(ED12,"text",L[101]);
if(R.isMethod($field281)) {
$ans279 = $field281.full_meth(ED12,("Expected"));
} else {
if(!(R.isFunction($field281))) {
R.ffi.throwNonFunApp(L[101],$field281);
}
$ans279 = $field281.app(("Expected"));
}
break;
case 1: var anf_array_val298 = $ans279;
$step276 = 2;
$al280 = L[102];
$field282 = R.getColonFieldLoc(ED12,"text",L[102]);
if(R.isMethod($field282)) {
$ans279 = $field282.full_meth(ED12,("true"));
} else {
if(!(R.isFunction($field282))) {
R.ffi.throwNonFunApp(L[102],$field282);
}
$ans279 = $field282.app(("true"));
}
break;
case 2: var anf_arg283 = $ans279;
$step276 = 3;
$al280 = L[103];
$field284 = R.getColonFieldLoc(ED12,"code",L[103]);
if(R.isMethod($field284)) {
$ans279 = $field284.full_meth(ED12,anf_arg283);
} else {
if(!(R.isFunction($field284))) {
R.ffi.throwNonFunApp(L[103],$field284);
}
$ans279 = $field284.app(anf_arg283);
}
break;
case 3: var anf_array_val299 = $ans279;
$step276 = 4;
$al280 = L[104];
$field285 = R.getColonFieldLoc(ED12,"text",L[104]);
if(R.isMethod($field285)) {
$ans279 = $field285.full_meth(ED12,("or"));
} else {
if(!(R.isFunction($field285))) {
R.ffi.throwNonFunApp(L[104],$field285);
}
$ans279 = $field285.app(("or"));
}
break;
case 4: var anf_array_val300 = $ans279;
$step276 = 5;
$al280 = L[105];
$field286 = R.getColonFieldLoc(ED12,"text",L[105]);
if(R.isMethod($field286)) {
$ans279 = $field286.full_meth(ED12,("false"));
} else {
if(!(R.isFunction($field286))) {
R.ffi.throwNonFunApp(L[105],$field286);
}
$ans279 = $field286.app(("false"));
}
break;
case 5: var anf_arg287 = $ans279;
$step276 = 6;
$al280 = L[106];
$field288 = R.getColonFieldLoc(ED12,"code",L[106]);
if(R.isMethod($field288)) {
$ans279 = $field288.full_meth(ED12,anf_arg287);
} else {
if(!(R.isFunction($field288))) {
R.ffi.throwNonFunApp(L[106],$field288);
}
$ans279 = $field288.app(anf_arg287);
}
break;
case 6: var anf_array_val301 = $ans279;
$step276 = 7;
$al280 = L[107];
$field289 = R.getColonFieldLoc(ED12,"text",L[107]);
if(R.isMethod($field289)) {
$ans279 = $field289.full_meth(ED12,("for the"));
} else {
if(!(R.isFunction($field289))) {
R.ffi.throwNonFunApp(L[107],$field289);
}
$ans279 = $field289.app(("for the"));
}
break;
case 7: var anf_array_val302 = $ans279;
var anf_arg290 = G(self278,"position",L[108]);
$step276 = 8;
$al280 = L[109];
$field291 = R.getColonFieldLoc(ED12,"text",L[109]);
if(R.isMethod($field291)) {
$ans279 = $field291.full_meth(ED12,anf_arg290);
} else {
if(!(R.isFunction($field291))) {
R.ffi.throwNonFunApp(L[109],$field291);
}
$ans279 = $field291.app(anf_arg290);
}
break;
case 8: var anf_array_val303 = $ans279;
$step276 = 9;
$al280 = L[110];
$field292 = R.getColonFieldLoc(ED12,"text",L[110]);
if(R.isMethod($field292)) {
$ans279 = $field292.full_meth(ED12,("argument in the"));
} else {
if(!(R.isFunction($field292))) {
R.ffi.throwNonFunApp(L[110],$field292);
}
$ans279 = $field292.app(("argument in the"));
}
break;
case 9: var anf_array_val304 = $ans279;
var anf_arg293 = G(self278,"typ",L[111]);
$step276 = 10;
$al280 = L[112];
$field294 = R.getColonFieldLoc(ED12,"text",L[112]);
if(R.isMethod($field294)) {
$ans279 = $field294.full_meth(ED12,anf_arg293);
} else {
if(!(R.isFunction($field294))) {
R.ffi.throwNonFunApp(L[112],$field294);
}
$ans279 = $field294.app(anf_arg293);
}
break;
case 10: var anf_array_val305 = $ans279;
$step276 = 11;
$al280 = L[113];
$field295 = R.getColonFieldLoc(ED12,"text",L[113]);
if(R.isMethod($field295)) {
$ans279 = $field295.full_meth(ED12,("expression at"));
} else {
if(!(R.isFunction($field295))) {
R.ffi.throwNonFunApp(L[113],$field295);
}
$ans279 = $field295.app(("expression at"));
}
break;
case 11: var anf_array_val306 = $ans279;
var anf_arg296 = G(self278,"loc",L[114]);
$step276 = 12;
$al280 = L[118];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al280,draw$and$highlight33.$var);
}
$ans279 = draw$and$highlight33.$var.app(anf_arg296);
break;
case 12: var anf_array_val307 = $ans279;
$step276 = 13;
$al280 = L[115];
$field297 = R.getColonFieldLoc(ED12,"text",L[115]);
if(R.isMethod($field297)) {
$ans279 = $field297.full_meth(ED12,(" but got:"));
} else {
if(!(R.isFunction($field297))) {
R.ffi.throwNonFunApp(L[115],$field297);
}
$ans279 = $field297.app((" but got:"));
}
break;
case 13: var anf_array_val308 = $ans279;
var anf_arg310 = [anf_array_val298,anf_array_val299,anf_array_val300,anf_array_val301,anf_array_val302,anf_array_val303,anf_array_val304,anf_array_val305,anf_array_val306,anf_array_val307,anf_array_val308];
$step276 = 14;
$al280 = L[100];
$field311 = R.getColonFieldLoc(anf_method_obj309,"make",L[100]);
if(R.isMethod($field311)) {
$ans279 = $field311.full_meth(anf_method_obj309,anf_arg310);
} else {
if(!(R.isFunction($field311))) {
R.ffi.throwNonFunApp(L[100],$field311);
}
$ans279 = $field311.app(anf_arg310);
}
break;
case 14: var anf_array_val314 = $ans279;
var anf_arg312 = G(self278,"value",L[116]);
$step276 = 15;
$al280 = L[117];
$field313 = R.getColonFieldLoc(ED12,"embed",L[117]);
if(R.isMethod($field313)) {
$ans279 = $field313.full_meth(ED12,anf_arg312);
} else {
if(!(R.isFunction($field313))) {
R.ffi.throwNonFunApp(L[117],$field313);
}
$ans279 = $field313.app(anf_arg312);
}
break;
case 15: var anf_array_val315 = $ans279;
var anf_arg317 = [anf_array_val314,anf_array_val315];
$step276 = 16;
$al280 = L[99];
$field318 = R.getColonFieldLoc(anf_method_obj316,"make",L[99]);
if(R.isMethod($field318)) {
$ans279 = $field318.full_meth(anf_method_obj316,anf_arg317);
} else {
if(!(R.isFunction($field318))) {
R.ffi.throwNonFunApp(L[99],$field318);
}
$ans279 = $field318.app(anf_arg317);
}
break;
case 16: ++R.GAS;
return $ans279;
default: throw "No case numbered " + $step276 + " in $temp_full277";
}
}
} catch($e319) {
if(R.isCont($e319) && ($step276 !== 16)) {
$e319.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al280,$temp_full277,$step276,[self278],[anf_array_val314,anf_array_val307,anf_array_val306,anf_array_val305,anf_array_val304,anf_array_val303,anf_array_val302,anf_array_val301,anf_array_val300,anf_array_val299,anf_array_val298,anf_method_obj309,anf_method_obj316]);
}
if(R.isPyretException($e319)) {
$e319.pyretStack.push($al280);
}
throw $e319;
}
};
var anf_variant_member1097 = R.makeMethod0($temp_full277);
var $temp_full321 = function($self322) {
var $step320 = 0;
var $ans323 = D;
var $al324 = L[141];
try {
if(R.isActivationRecord($self322)) {
$step320 = $self322.step;
$al324 = $self322.from;
$ans323 = $self322.ans;
self322 = $self322.args[0];
anf_array_val363 = $self322.vars[0];
anf_array_val362 = $self322.vars[1];
anf_array_val361 = $self322.vars[2];
anf_method_obj365 = $self322.vars[3];
anf_method_obj369 = $self322.vars[4];
anf_arg372 = $self322.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],1,$t);
}
var self322 = $self322;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step320) {
case 0: var $temp_lam326 = function($loc327) {
var $step325 = 0;
var $ans328 = D;
var $al329 = L[131];
try {
if(R.isActivationRecord($loc327)) {
$step325 = $loc327.step;
$al329 = $loc327.from;
$ans328 = $loc327.ans;
loc327 = $loc327.args[0];
anf_array_val343 = $loc327.vars[0];
anf_method_obj345 = $loc327.vars[1];
anf_array_val349 = $loc327.vars[2];
anf_array_val348 = $loc327.vars[3];
anf_array_val335 = $loc327.vars[4];
anf_array_val334 = $loc327.vars[5];
anf_method_obj337 = $loc327.vars[6];
anf_method_obj351 = $loc327.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[131],1,$t);
}
var loc327 = $loc327;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step325) {
case 0: var anf_method_obj351 = G(ED12,"error",L[120]);
var anf_method_obj337 = G(ED12,"para",L[121]);
$step325 = 1;
$al329 = L[122];
$field330 = R.getColonFieldLoc(ED12,"text",L[122]);
if(R.isMethod($field330)) {
$ans328 = $field330.full_meth(ED12,("Expected to get a"));
} else {
if(!(R.isFunction($field330))) {
R.ffi.throwNonFunApp(L[122],$field330);
}
$ans328 = $field330.app(("Expected to get a"));
}
break;
case 1: var anf_array_val334 = $ans328;
var anf_arg331 = G(self322,"typ",L[123]);
$step325 = 2;
$al329 = L[124];
$field332 = R.getColonFieldLoc(ED12,"embed",L[124]);
if(R.isMethod($field332)) {
$ans328 = $field332.full_meth(ED12,anf_arg331);
} else {
if(!(R.isFunction($field332))) {
R.ffi.throwNonFunApp(L[124],$field332);
}
$ans328 = $field332.app(anf_arg331);
}
break;
case 2: var anf_array_val335 = $ans328;
$step325 = 3;
$al329 = L[125];
$field333 = R.getColonFieldLoc(ED12,"text",L[125]);
if(R.isMethod($field333)) {
$ans328 = $field333.full_meth(ED12,("as an argument, but got this instead:"));
} else {
if(!(R.isFunction($field333))) {
R.ffi.throwNonFunApp(L[125],$field333);
}
$ans328 = $field333.app(("as an argument, but got this instead:"));
}
break;
case 3: var anf_array_val336 = $ans328;
var anf_arg338 = [anf_array_val334,anf_array_val335,anf_array_val336];
$step325 = 4;
$al329 = L[121];
$field339 = R.getColonFieldLoc(anf_method_obj337,"make",L[121]);
if(R.isMethod($field339)) {
$ans328 = $field339.full_meth(anf_method_obj337,anf_arg338);
} else {
if(!(R.isFunction($field339))) {
R.ffi.throwNonFunApp(L[121],$field339);
}
$ans328 = $field339.app(anf_arg338);
}
break;
case 4: var anf_array_val348 = $ans328;
var anf_arg340 = G(self322,"val",L[126]);
$step325 = 5;
$al329 = L[127];
$field341 = R.getColonFieldLoc(ED12,"embed",L[127]);
if(R.isMethod($field341)) {
$ans328 = $field341.full_meth(ED12,anf_arg340);
} else {
if(!(R.isFunction($field341))) {
R.ffi.throwNonFunApp(L[127],$field341);
}
$ans328 = $field341.app(anf_arg340);
}
break;
case 5: var anf_array_val349 = $ans328;
var anf_method_obj345 = G(ED12,"para",L[128]);
$step325 = 6;
$al329 = L[129];
$field342 = R.getColonFieldLoc(ED12,"text",L[129]);
if(R.isMethod($field342)) {
$ans328 = $field342.full_meth(ED12,("at"));
} else {
if(!(R.isFunction($field342))) {
R.ffi.throwNonFunApp(L[129],$field342);
}
$ans328 = $field342.app(("at"));
}
break;
case 6: var anf_array_val343 = $ans328;
$step325 = 7;
$al329 = L[130];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al329,draw$and$highlight33.$var);
}
$ans328 = draw$and$highlight33.$var.app(loc327);
break;
case 7: var anf_array_val344 = $ans328;
var anf_arg346 = [anf_array_val343,anf_array_val344];
$step325 = 8;
$al329 = L[128];
$field347 = R.getColonFieldLoc(anf_method_obj345,"make",L[128]);
if(R.isMethod($field347)) {
$ans328 = $field347.full_meth(anf_method_obj345,anf_arg346);
} else {
if(!(R.isFunction($field347))) {
R.ffi.throwNonFunApp(L[128],$field347);
}
$ans328 = $field347.app(anf_arg346);
}
break;
case 8: var anf_array_val350 = $ans328;
var anf_arg352 = [anf_array_val348,anf_array_val349,anf_array_val350];
$step325 = 9;
$al329 = L[120];
$field353 = R.getColonFieldLoc(anf_method_obj351,"make",L[120]);
if(R.isMethod($field353)) {
$ans328 = $field353.full_meth(anf_method_obj351,anf_arg352);
} else {
if(!(R.isFunction($field353))) {
R.ffi.throwNonFunApp(L[120],$field353);
}
$ans328 = $field353.app(anf_arg352);
}
break;
case 9: ++R.GAS;
return $ans328;
default: throw "No case numbered " + $step325 + " in $temp_lam326";
}
}
} catch($e354) {
if(R.isCont($e354) && ($step325 !== 9)) {
$e354.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al329,$temp_lam326,$step325,[loc327],[anf_array_val343,anf_method_obj345,anf_array_val349,anf_array_val348,anf_array_val335,anf_array_val334,anf_method_obj337,anf_method_obj351]);
}
if(R.isPyretException($e354)) {
$e354.pyretStack.push($al329);
}
throw $e354;
}
};
var anf_arg372 = R.makeFunction($temp_lam326);
var anf_method_obj369 = G(ED12,"error",L[132]);
var anf_method_obj365 = G(ED12,"para-nospace",L[133]);
$step320 = 1;
$al324 = L[134];
$field355 = R.getColonFieldLoc(ED12,"text",L[134]);
if(R.isMethod($field355)) {
$ans323 = $field355.full_meth(ED12,("Expected "));
} else {
if(!(R.isFunction($field355))) {
R.ffi.throwNonFunApp(L[134],$field355);
}
$ans323 = $field355.app(("Expected "));
}
break;
case 1: var anf_array_val361 = $ans323;
var anf_arg356 = G(self322,"typ",L[135]);
$step320 = 2;
$al324 = L[136];
$field357 = R.getColonFieldLoc(ED12,"embed",L[136]);
if(R.isMethod($field357)) {
$ans323 = $field357.full_meth(ED12,anf_arg356);
} else {
if(!(R.isFunction($field357))) {
R.ffi.throwNonFunApp(L[136],$field357);
}
$ans323 = $field357.app(anf_arg356);
}
break;
case 2: var anf_array_val362 = $ans323;
$step320 = 3;
$al324 = L[137];
$field358 = R.getColonFieldLoc(ED12,"text",L[137]);
if(R.isMethod($field358)) {
$ans323 = $field358.full_meth(ED12,(", but got "));
} else {
if(!(R.isFunction($field358))) {
R.ffi.throwNonFunApp(L[137],$field358);
}
$ans323 = $field358.app((", but got "));
}
break;
case 3: var anf_array_val363 = $ans323;
var anf_arg359 = G(self322,"val",L[138]);
$step320 = 4;
$al324 = L[139];
$field360 = R.getColonFieldLoc(ED12,"embed",L[139]);
if(R.isMethod($field360)) {
$ans323 = $field360.full_meth(ED12,anf_arg359);
} else {
if(!(R.isFunction($field360))) {
R.ffi.throwNonFunApp(L[139],$field360);
}
$ans323 = $field360.app(anf_arg359);
}
break;
case 4: var anf_array_val364 = $ans323;
var anf_arg366 = [anf_array_val361,anf_array_val362,anf_array_val363,anf_array_val364];
$step320 = 5;
$al324 = L[133];
$field367 = R.getColonFieldLoc(anf_method_obj365,"make",L[133]);
if(R.isMethod($field367)) {
$ans323 = $field367.full_meth(anf_method_obj365,anf_arg366);
} else {
if(!(R.isFunction($field367))) {
R.ffi.throwNonFunApp(L[133],$field367);
}
$ans323 = $field367.app(anf_arg366);
}
break;
case 5: var anf_array_val368 = $ans323;
var anf_arg370 = [anf_array_val368];
$step320 = 6;
$al324 = L[132];
$field371 = R.getColonFieldLoc(anf_method_obj369,"make",L[132]);
if(R.isMethod($field371)) {
$ans323 = $field371.full_meth(anf_method_obj369,anf_arg370);
} else {
if(!(R.isFunction($field371))) {
R.ffi.throwNonFunApp(L[132],$field371);
}
$ans323 = $field371.app(anf_arg370);
}
break;
case 6: var anf_arg373 = $ans323;
$step320 = 7;
$al324 = L[140];
$field374 = R.getColonFieldLoc(ED12,"maybe-stack-loc",L[140]);
if(R.isMethod($field374)) {
$ans323 = $field374.full_meth(ED12,(0),(true),anf_arg372,anf_arg373);
} else {
if(!(R.isFunction($field374))) {
R.ffi.throwNonFunApp(L[140],$field374);
}
$ans323 = $field374.app((0),(true),anf_arg372,anf_arg373);
}
break;
case 7: ++R.GAS;
return $ans323;
default: throw "No case numbered " + $step320 + " in $temp_full321";
}
}
} catch($e375) {
if(R.isCont($e375) && ($step320 !== 7)) {
$e375.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al324,$temp_full321,$step320,[self322],[anf_array_val363,anf_array_val362,anf_array_val361,anf_method_obj365,anf_method_obj369,anf_arg372]);
}
if(R.isPyretException($e375)) {
$e375.pyretStack.push($al324);
}
throw $e375;
}
};
var anf_variant_member1110 = R.makeMethod0($temp_full321);
var $temp_full377 = function($self378) {
var $step376 = 0;
var $ans379 = D;
var $al380 = L[153];
try {
if(R.isActivationRecord($self378)) {
$step376 = $self378.step;
$al380 = $self378.from;
$ans379 = $self378.ans;
self378 = $self378.args[0];
anf_array_val394 = $self378.vars[0];
anf_array_val393 = $self378.vars[1];
anf_array_val392 = $self378.vars[2];
anf_array_val391 = $self378.vars[3];
anf_array_val390 = $self378.vars[4];
anf_method_obj396 = $self378.vars[5];
anf_method_obj400 = $self378.vars[6];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[153],1,$t);
}
var self378 = $self378;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step376) {
case 0: var anf_method_obj400 = G(ED12,"error",L[142]);
var anf_method_obj396 = G(ED12,"para-nospace",L[143]);
$step376 = 1;
$al380 = L[144];
$field381 = R.getColonFieldLoc(ED12,"text",L[144]);
if(R.isMethod($field381)) {
$ans379 = $field381.full_meth(ED12,("expected a number between "));
} else {
if(!(R.isFunction($field381))) {
R.ffi.throwNonFunApp(L[144],$field381);
}
$ans379 = $field381.app(("expected a number between "));
}
break;
case 1: var anf_array_val390 = $ans379;
var anf_arg382 = G(self378,"low",L[145]);
$step376 = 2;
$al380 = L[146];
$field383 = R.getColonFieldLoc(ED12,"embed",L[146]);
if(R.isMethod($field383)) {
$ans379 = $field383.full_meth(ED12,anf_arg382);
} else {
if(!(R.isFunction($field383))) {
R.ffi.throwNonFunApp(L[146],$field383);
}
$ans379 = $field383.app(anf_arg382);
}
break;
case 2: var anf_array_val391 = $ans379;
$step376 = 3;
$al380 = L[147];
$field384 = R.getColonFieldLoc(ED12,"text",L[147]);
if(R.isMethod($field384)) {
$ans379 = $field384.full_meth(ED12,(" and "));
} else {
if(!(R.isFunction($field384))) {
R.ffi.throwNonFunApp(L[147],$field384);
}
$ans379 = $field384.app((" and "));
}
break;
case 3: var anf_array_val392 = $ans379;
var anf_arg385 = G(self378,"high",L[148]);
$step376 = 4;
$al380 = L[149];
$field386 = R.getColonFieldLoc(ED12,"embed",L[149]);
if(R.isMethod($field386)) {
$ans379 = $field386.full_meth(ED12,anf_arg385);
} else {
if(!(R.isFunction($field386))) {
R.ffi.throwNonFunApp(L[149],$field386);
}
$ans379 = $field386.app(anf_arg385);
}
break;
case 4: var anf_array_val393 = $ans379;
$step376 = 5;
$al380 = L[150];
$field387 = R.getColonFieldLoc(ED12,"text",L[150]);
if(R.isMethod($field387)) {
$ans379 = $field387.full_meth(ED12,(", but got"));
} else {
if(!(R.isFunction($field387))) {
R.ffi.throwNonFunApp(L[150],$field387);
}
$ans379 = $field387.app((", but got"));
}
break;
case 5: var anf_array_val394 = $ans379;
var anf_arg388 = G(self378,"val",L[151]);
$step376 = 6;
$al380 = L[152];
$field389 = R.getColonFieldLoc(ED12,"embed",L[152]);
if(R.isMethod($field389)) {
$ans379 = $field389.full_meth(ED12,anf_arg388);
} else {
if(!(R.isFunction($field389))) {
R.ffi.throwNonFunApp(L[152],$field389);
}
$ans379 = $field389.app(anf_arg388);
}
break;
case 6: var anf_array_val395 = $ans379;
var anf_arg397 = [anf_array_val390,anf_array_val391,anf_array_val392,anf_array_val393,anf_array_val394,anf_array_val395];
$step376 = 7;
$al380 = L[143];
$field398 = R.getColonFieldLoc(anf_method_obj396,"make",L[143]);
if(R.isMethod($field398)) {
$ans379 = $field398.full_meth(anf_method_obj396,anf_arg397);
} else {
if(!(R.isFunction($field398))) {
R.ffi.throwNonFunApp(L[143],$field398);
}
$ans379 = $field398.app(anf_arg397);
}
break;
case 7: var anf_array_val399 = $ans379;
var anf_arg401 = [anf_array_val399];
$step376 = 8;
$al380 = L[142];
$field402 = R.getColonFieldLoc(anf_method_obj400,"make",L[142]);
if(R.isMethod($field402)) {
$ans379 = $field402.full_meth(anf_method_obj400,anf_arg401);
} else {
if(!(R.isFunction($field402))) {
R.ffi.throwNonFunApp(L[142],$field402);
}
$ans379 = $field402.app(anf_arg401);
}
break;
case 8: ++R.GAS;
return $ans379;
default: throw "No case numbered " + $step376 + " in $temp_full377";
}
}
} catch($e403) {
if(R.isCont($e403) && ($step376 !== 8)) {
$e403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al380,$temp_full377,$step376,[self378],[anf_array_val394,anf_array_val393,anf_array_val392,anf_array_val391,anf_array_val390,anf_method_obj396,anf_method_obj400]);
}
if(R.isPyretException($e403)) {
$e403.pyretStack.push($al380);
}
throw $e403;
}
};
var anf_variant_member1121 = R.makeMethod0($temp_full377);
var $temp_full405 = function($self406) {
var $step404 = 0;
var $ans407 = D;
var $al408 = L[179];
try {
if(R.isActivationRecord($self406)) {
$step404 = $self406.step;
$al408 = $self406.from;
$ans407 = $self406.ans;
self406 = $self406.args[0];
anf_array_val445 = $self406.vars[0];
anf_array_val444 = $self406.vars[1];
anf_method_obj447 = $self406.vars[2];
anf_array_val451 = $self406.vars[3];
anf_array_val450 = $self406.vars[4];
anf_method_obj453 = $self406.vars[5];
anf_array_val459 = $self406.vars[6];
anf_array_val458 = $self406.vars[7];
anf_method_obj430 = $self406.vars[8];
anf_array_val457 = $self406.vars[9];
anf_method_obj424 = $self406.vars[10];
anf_array_val456 = $self406.vars[11];
anf_array_val416 = $self406.vars[12];
anf_array_val415 = $self406.vars[13];
anf_method_obj418 = $self406.vars[14];
anf_method_obj461 = $self406.vars[15];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[179],1,$t);
}
var self406 = $self406;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step404) {
case 0: var anf_method_obj461 = G(ED12,"error",L[154]);
var anf_method_obj418 = G(ED12,"para",L[155]);
$step404 = 1;
$al408 = L[156];
$field409 = R.getColonFieldLoc(ED12,"text",L[156]);
if(R.isMethod($field409)) {
$ans407 = $field409.full_meth(ED12,("Invalid use of"));
} else {
if(!(R.isFunction($field409))) {
R.ffi.throwNonFunApp(L[156],$field409);
}
$ans407 = $field409.app(("Invalid use of"));
}
break;
case 1: var anf_array_val415 = $ans407;
var anf_arg410 = G(self406,"opname",L[157]);
$step404 = 2;
$al408 = L[158];
$field411 = R.getColonFieldLoc(ED12,"text",L[158]);
if(R.isMethod($field411)) {
$ans407 = $field411.full_meth(ED12,anf_arg410);
} else {
if(!(R.isFunction($field411))) {
R.ffi.throwNonFunApp(L[158],$field411);
}
$ans407 = $field411.app(anf_arg410);
}
break;
case 2: var anf_arg412 = $ans407;
$step404 = 3;
$al408 = L[159];
$field413 = R.getColonFieldLoc(ED12,"code",L[159]);
if(R.isMethod($field413)) {
$ans407 = $field413.full_meth(ED12,anf_arg412);
} else {
if(!(R.isFunction($field413))) {
R.ffi.throwNonFunApp(L[159],$field413);
}
$ans407 = $field413.app(anf_arg412);
}
break;
case 3: var anf_array_val416 = $ans407;
$step404 = 4;
$al408 = L[160];
$field414 = R.getColonFieldLoc(ED12,"text",L[160]);
if(R.isMethod($field414)) {
$ans407 = $field414.full_meth(ED12,("for these values:"));
} else {
if(!(R.isFunction($field414))) {
R.ffi.throwNonFunApp(L[160],$field414);
}
$ans407 = $field414.app(("for these values:"));
}
break;
case 4: var anf_array_val417 = $ans407;
var anf_arg419 = [anf_array_val415,anf_array_val416,anf_array_val417];
$step404 = 5;
$al408 = L[155];
$field420 = R.getColonFieldLoc(anf_method_obj418,"make",L[155]);
if(R.isMethod($field420)) {
$ans407 = $field420.full_meth(anf_method_obj418,anf_arg419);
} else {
if(!(R.isFunction($field420))) {
R.ffi.throwNonFunApp(L[155],$field420);
}
$ans407 = $field420.app(anf_arg419);
}
break;
case 5: var anf_array_val456 = $ans407;
var anf_method_obj424 = G(ED12,"para",L[161]);
var anf_arg421 = G(self406,"val1",L[162]);
$step404 = 6;
$al408 = L[163];
$field422 = R.getColonFieldLoc(ED12,"embed",L[163]);
if(R.isMethod($field422)) {
$ans407 = $field422.full_meth(ED12,anf_arg421);
} else {
if(!(R.isFunction($field422))) {
R.ffi.throwNonFunApp(L[163],$field422);
}
$ans407 = $field422.app(anf_arg421);
}
break;
case 6: var anf_array_val423 = $ans407;
var anf_arg425 = [anf_array_val423];
$step404 = 7;
$al408 = L[161];
$field426 = R.getColonFieldLoc(anf_method_obj424,"make",L[161]);
if(R.isMethod($field426)) {
$ans407 = $field426.full_meth(anf_method_obj424,anf_arg425);
} else {
if(!(R.isFunction($field426))) {
R.ffi.throwNonFunApp(L[161],$field426);
}
$ans407 = $field426.app(anf_arg425);
}
break;
case 7: var anf_array_val457 = $ans407;
var anf_method_obj430 = G(ED12,"para",L[164]);
var anf_arg427 = G(self406,"val2",L[165]);
$step404 = 8;
$al408 = L[166];
$field428 = R.getColonFieldLoc(ED12,"embed",L[166]);
if(R.isMethod($field428)) {
$ans407 = $field428.full_meth(ED12,anf_arg427);
} else {
if(!(R.isFunction($field428))) {
R.ffi.throwNonFunApp(L[166],$field428);
}
$ans407 = $field428.app(anf_arg427);
}
break;
case 8: var anf_array_val429 = $ans407;
var anf_arg431 = [anf_array_val429];
$step404 = 9;
$al408 = L[164];
$field432 = R.getColonFieldLoc(anf_method_obj430,"make",L[164]);
if(R.isMethod($field432)) {
$ans407 = $field432.full_meth(anf_method_obj430,anf_arg431);
} else {
if(!(R.isFunction($field432))) {
R.ffi.throwNonFunApp(L[164],$field432);
}
$ans407 = $field432.app(anf_arg431);
}
break;
case 9: var anf_array_val458 = $ans407;
var anf_arg433 = G(self406,"opdesc",L[167]);
$step404 = 10;
$al408 = L[178];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al408,_plus1);
}
$ans407 = _plus1.app(anf_arg433,(" requires:"));
break;
case 10: var anf_arg434 = $ans407;
$step404 = 11;
$al408 = L[168];
$field435 = R.getColonFieldLoc(ED12,"text",L[168]);
if(R.isMethod($field435)) {
$ans407 = $field435.full_meth(ED12,anf_arg434);
} else {
if(!(R.isFunction($field435))) {
R.ffi.throwNonFunApp(L[168],$field435);
}
$ans407 = $field435.app(anf_arg434);
}
break;
case 11: var anf_array_val459 = $ans407;
var anf_method_obj453 = G(ED12,"bulleted",L[169]);
$step404 = 12;
$al408 = L[170];
$field436 = R.getColonFieldLoc(ED12,"text",L[170]);
if(R.isMethod($field436)) {
$ans407 = $field436.full_meth(ED12,("Two numbers,"));
} else {
if(!(R.isFunction($field436))) {
R.ffi.throwNonFunApp(L[170],$field436);
}
$ans407 = $field436.app(("Two numbers,"));
}
break;
case 12: var anf_array_val450 = $ans407;
$step404 = 13;
$al408 = L[171];
$field437 = R.getColonFieldLoc(ED12,"text",L[171]);
if(R.isMethod($field437)) {
$ans407 = $field437.full_meth(ED12,("Two strings, or"));
} else {
if(!(R.isFunction($field437))) {
R.ffi.throwNonFunApp(L[171],$field437);
}
$ans407 = $field437.app(("Two strings, or"));
}
break;
case 13: var anf_array_val451 = $ans407;
var anf_method_obj447 = G(ED12,"para",L[172]);
$step404 = 14;
$al408 = L[173];
$field438 = R.getColonFieldLoc(ED12,"text",L[173]);
if(R.isMethod($field438)) {
$ans407 = $field438.full_meth(ED12,("A left-hand operand that has a"));
} else {
if(!(R.isFunction($field438))) {
R.ffi.throwNonFunApp(L[173],$field438);
}
$ans407 = $field438.app(("A left-hand operand that has a"));
}
break;
case 14: var anf_array_val444 = $ans407;
var anf_arg439 = G(self406,"methodname",L[174]);
$step404 = 15;
$al408 = L[175];
$field440 = R.getColonFieldLoc(ED12,"text",L[175]);
if(R.isMethod($field440)) {
$ans407 = $field440.full_meth(ED12,anf_arg439);
} else {
if(!(R.isFunction($field440))) {
R.ffi.throwNonFunApp(L[175],$field440);
}
$ans407 = $field440.app(anf_arg439);
}
break;
case 15: var anf_arg441 = $ans407;
$step404 = 16;
$al408 = L[176];
$field442 = R.getColonFieldLoc(ED12,"code",L[176]);
if(R.isMethod($field442)) {
$ans407 = $field442.full_meth(ED12,anf_arg441);
} else {
if(!(R.isFunction($field442))) {
R.ffi.throwNonFunApp(L[176],$field442);
}
$ans407 = $field442.app(anf_arg441);
}
break;
case 16: var anf_array_val445 = $ans407;
$step404 = 17;
$al408 = L[177];
$field443 = R.getColonFieldLoc(ED12,"text",L[177]);
if(R.isMethod($field443)) {
$ans407 = $field443.full_meth(ED12,("method"));
} else {
if(!(R.isFunction($field443))) {
R.ffi.throwNonFunApp(L[177],$field443);
}
$ans407 = $field443.app(("method"));
}
break;
case 17: var anf_array_val446 = $ans407;
var anf_arg448 = [anf_array_val444,anf_array_val445,anf_array_val446];
$step404 = 18;
$al408 = L[172];
$field449 = R.getColonFieldLoc(anf_method_obj447,"make",L[172]);
if(R.isMethod($field449)) {
$ans407 = $field449.full_meth(anf_method_obj447,anf_arg448);
} else {
if(!(R.isFunction($field449))) {
R.ffi.throwNonFunApp(L[172],$field449);
}
$ans407 = $field449.app(anf_arg448);
}
break;
case 18: var anf_array_val452 = $ans407;
var anf_arg454 = [anf_array_val450,anf_array_val451,anf_array_val452];
$step404 = 19;
$al408 = L[169];
$field455 = R.getColonFieldLoc(anf_method_obj453,"make",L[169]);
if(R.isMethod($field455)) {
$ans407 = $field455.full_meth(anf_method_obj453,anf_arg454);
} else {
if(!(R.isFunction($field455))) {
R.ffi.throwNonFunApp(L[169],$field455);
}
$ans407 = $field455.app(anf_arg454);
}
break;
case 19: var anf_array_val460 = $ans407;
var anf_arg462 = [anf_array_val456,anf_array_val457,anf_array_val458,anf_array_val459,anf_array_val460];
$step404 = 20;
$al408 = L[154];
$field463 = R.getColonFieldLoc(anf_method_obj461,"make",L[154]);
if(R.isMethod($field463)) {
$ans407 = $field463.full_meth(anf_method_obj461,anf_arg462);
} else {
if(!(R.isFunction($field463))) {
R.ffi.throwNonFunApp(L[154],$field463);
}
$ans407 = $field463.app(anf_arg462);
}
break;
case 20: ++R.GAS;
return $ans407;
default: throw "No case numbered " + $step404 + " in $temp_full405";
}
}
} catch($e464) {
if(R.isCont($e464) && ($step404 !== 20)) {
$e464.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al408,$temp_full405,$step404,[self406],[anf_array_val445,anf_array_val444,anf_method_obj447,anf_array_val451,anf_array_val450,anf_method_obj453,anf_array_val459,anf_array_val458,anf_method_obj430,anf_array_val457,anf_method_obj424,anf_array_val456,anf_array_val416,anf_array_val415,anf_method_obj418,anf_method_obj461]);
}
if(R.isPyretException($e464)) {
$e464.pyretStack.push($al408);
}
throw $e464;
}
};
var anf_variant_member1133 = R.makeMethod0($temp_full405);
var $temp_full466 = function($self467) {
var $step465 = 0;
var $ans468 = D;
var $al469 = L[202];
try {
if(R.isActivationRecord($self467)) {
$step465 = $self467.step;
$al469 = $self467.from;
$ans468 = $self467.ans;
self467 = $self467.args[0];
anf_array_val503 = $self467.vars[0];
anf_array_val502 = $self467.vars[1];
anf_method_obj505 = $self467.vars[2];
anf_array_val508 = $self467.vars[3];
anf_method_obj510 = $self467.vars[4];
anf_array_val516 = $self467.vars[5];
anf_array_val515 = $self467.vars[6];
anf_method_obj491 = $self467.vars[7];
anf_array_val514 = $self467.vars[8];
anf_method_obj485 = $self467.vars[9];
anf_array_val513 = $self467.vars[10];
anf_array_val477 = $self467.vars[11];
anf_array_val476 = $self467.vars[12];
anf_method_obj479 = $self467.vars[13];
anf_method_obj518 = $self467.vars[14];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[202],1,$t);
}
var self467 = $self467;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step465) {
case 0: var anf_method_obj518 = G(ED12,"error",L[180]);
var anf_method_obj479 = G(ED12,"para",L[181]);
$step465 = 1;
$al469 = L[182];
$field470 = R.getColonFieldLoc(ED12,"text",L[182]);
if(R.isMethod($field470)) {
$ans468 = $field470.full_meth(ED12,("Invalid use of"));
} else {
if(!(R.isFunction($field470))) {
R.ffi.throwNonFunApp(L[182],$field470);
}
$ans468 = $field470.app(("Invalid use of"));
}
break;
case 1: var anf_array_val476 = $ans468;
var anf_arg471 = G(self467,"opname",L[183]);
$step465 = 2;
$al469 = L[184];
$field472 = R.getColonFieldLoc(ED12,"text",L[184]);
if(R.isMethod($field472)) {
$ans468 = $field472.full_meth(ED12,anf_arg471);
} else {
if(!(R.isFunction($field472))) {
R.ffi.throwNonFunApp(L[184],$field472);
}
$ans468 = $field472.app(anf_arg471);
}
break;
case 2: var anf_arg473 = $ans468;
$step465 = 3;
$al469 = L[185];
$field474 = R.getColonFieldLoc(ED12,"code",L[185]);
if(R.isMethod($field474)) {
$ans468 = $field474.full_meth(ED12,anf_arg473);
} else {
if(!(R.isFunction($field474))) {
R.ffi.throwNonFunApp(L[185],$field474);
}
$ans468 = $field474.app(anf_arg473);
}
break;
case 3: var anf_array_val477 = $ans468;
$step465 = 4;
$al469 = L[186];
$field475 = R.getColonFieldLoc(ED12,"text",L[186]);
if(R.isMethod($field475)) {
$ans468 = $field475.full_meth(ED12,("for these values:"));
} else {
if(!(R.isFunction($field475))) {
R.ffi.throwNonFunApp(L[186],$field475);
}
$ans468 = $field475.app(("for these values:"));
}
break;
case 4: var anf_array_val478 = $ans468;
var anf_arg480 = [anf_array_val476,anf_array_val477,anf_array_val478];
$step465 = 5;
$al469 = L[181];
$field481 = R.getColonFieldLoc(anf_method_obj479,"make",L[181]);
if(R.isMethod($field481)) {
$ans468 = $field481.full_meth(anf_method_obj479,anf_arg480);
} else {
if(!(R.isFunction($field481))) {
R.ffi.throwNonFunApp(L[181],$field481);
}
$ans468 = $field481.app(anf_arg480);
}
break;
case 5: var anf_array_val513 = $ans468;
var anf_method_obj485 = G(ED12,"para",L[187]);
var anf_arg482 = G(self467,"val1",L[188]);
$step465 = 6;
$al469 = L[189];
$field483 = R.getColonFieldLoc(ED12,"embed",L[189]);
if(R.isMethod($field483)) {
$ans468 = $field483.full_meth(ED12,anf_arg482);
} else {
if(!(R.isFunction($field483))) {
R.ffi.throwNonFunApp(L[189],$field483);
}
$ans468 = $field483.app(anf_arg482);
}
break;
case 6: var anf_array_val484 = $ans468;
var anf_arg486 = [anf_array_val484];
$step465 = 7;
$al469 = L[187];
$field487 = R.getColonFieldLoc(anf_method_obj485,"make",L[187]);
if(R.isMethod($field487)) {
$ans468 = $field487.full_meth(anf_method_obj485,anf_arg486);
} else {
if(!(R.isFunction($field487))) {
R.ffi.throwNonFunApp(L[187],$field487);
}
$ans468 = $field487.app(anf_arg486);
}
break;
case 7: var anf_array_val514 = $ans468;
var anf_method_obj491 = G(ED12,"para",L[190]);
var anf_arg488 = G(self467,"val2",L[191]);
$step465 = 8;
$al469 = L[192];
$field489 = R.getColonFieldLoc(ED12,"embed",L[192]);
if(R.isMethod($field489)) {
$ans468 = $field489.full_meth(ED12,anf_arg488);
} else {
if(!(R.isFunction($field489))) {
R.ffi.throwNonFunApp(L[192],$field489);
}
$ans468 = $field489.app(anf_arg488);
}
break;
case 8: var anf_array_val490 = $ans468;
var anf_arg492 = [anf_array_val490];
$step465 = 9;
$al469 = L[190];
$field493 = R.getColonFieldLoc(anf_method_obj491,"make",L[190]);
if(R.isMethod($field493)) {
$ans468 = $field493.full_meth(anf_method_obj491,anf_arg492);
} else {
if(!(R.isFunction($field493))) {
R.ffi.throwNonFunApp(L[190],$field493);
}
$ans468 = $field493.app(anf_arg492);
}
break;
case 9: var anf_array_val515 = $ans468;
$step465 = 10;
$al469 = L[193];
$field494 = R.getColonFieldLoc(ED12,"text",L[193]);
if(R.isMethod($field494)) {
$ans468 = $field494.full_meth(ED12,("Either:"));
} else {
if(!(R.isFunction($field494))) {
R.ffi.throwNonFunApp(L[193],$field494);
}
$ans468 = $field494.app(("Either:"));
}
break;
case 10: var anf_array_val516 = $ans468;
var anf_method_obj510 = G(ED12,"bulleted",L[194]);
$step465 = 11;
$al469 = L[195];
$field495 = R.getColonFieldLoc(ED12,"text",L[195]);
if(R.isMethod($field495)) {
$ans468 = $field495.full_meth(ED12,("Both arguments must be numbers, or"));
} else {
if(!(R.isFunction($field495))) {
R.ffi.throwNonFunApp(L[195],$field495);
}
$ans468 = $field495.app(("Both arguments must be numbers, or"));
}
break;
case 11: var anf_array_val508 = $ans468;
var anf_method_obj505 = G(ED12,"para",L[196]);
$step465 = 12;
$al469 = L[197];
$field496 = R.getColonFieldLoc(ED12,"text",L[197]);
if(R.isMethod($field496)) {
$ans468 = $field496.full_meth(ED12,("The left operand must have a"));
} else {
if(!(R.isFunction($field496))) {
R.ffi.throwNonFunApp(L[197],$field496);
}
$ans468 = $field496.app(("The left operand must have a"));
}
break;
case 12: var anf_array_val502 = $ans468;
var anf_arg497 = G(self467,"methodname",L[198]);
$step465 = 13;
$al469 = L[199];
$field498 = R.getColonFieldLoc(ED12,"text",L[199]);
if(R.isMethod($field498)) {
$ans468 = $field498.full_meth(ED12,anf_arg497);
} else {
if(!(R.isFunction($field498))) {
R.ffi.throwNonFunApp(L[199],$field498);
}
$ans468 = $field498.app(anf_arg497);
}
break;
case 13: var anf_arg499 = $ans468;
$step465 = 14;
$al469 = L[200];
$field500 = R.getColonFieldLoc(ED12,"code",L[200]);
if(R.isMethod($field500)) {
$ans468 = $field500.full_meth(ED12,anf_arg499);
} else {
if(!(R.isFunction($field500))) {
R.ffi.throwNonFunApp(L[200],$field500);
}
$ans468 = $field500.app(anf_arg499);
}
break;
case 14: var anf_array_val503 = $ans468;
$step465 = 15;
$al469 = L[201];
$field501 = R.getColonFieldLoc(ED12,"text",L[201]);
if(R.isMethod($field501)) {
$ans468 = $field501.full_meth(ED12,("method"));
} else {
if(!(R.isFunction($field501))) {
R.ffi.throwNonFunApp(L[201],$field501);
}
$ans468 = $field501.app(("method"));
}
break;
case 15: var anf_array_val504 = $ans468;
var anf_arg506 = [anf_array_val502,anf_array_val503,anf_array_val504];
$step465 = 16;
$al469 = L[196];
$field507 = R.getColonFieldLoc(anf_method_obj505,"make",L[196]);
if(R.isMethod($field507)) {
$ans468 = $field507.full_meth(anf_method_obj505,anf_arg506);
} else {
if(!(R.isFunction($field507))) {
R.ffi.throwNonFunApp(L[196],$field507);
}
$ans468 = $field507.app(anf_arg506);
}
break;
case 16: var anf_array_val509 = $ans468;
var anf_arg511 = [anf_array_val508,anf_array_val509];
$step465 = 17;
$al469 = L[194];
$field512 = R.getColonFieldLoc(anf_method_obj510,"make",L[194]);
if(R.isMethod($field512)) {
$ans468 = $field512.full_meth(anf_method_obj510,anf_arg511);
} else {
if(!(R.isFunction($field512))) {
R.ffi.throwNonFunApp(L[194],$field512);
}
$ans468 = $field512.app(anf_arg511);
}
break;
case 17: var anf_array_val517 = $ans468;
var anf_arg519 = [anf_array_val513,anf_array_val514,anf_array_val515,anf_array_val516,anf_array_val517];
$step465 = 18;
$al469 = L[180];
$field520 = R.getColonFieldLoc(anf_method_obj518,"make",L[180]);
if(R.isMethod($field520)) {
$ans468 = $field520.full_meth(anf_method_obj518,anf_arg519);
} else {
if(!(R.isFunction($field520))) {
R.ffi.throwNonFunApp(L[180],$field520);
}
$ans468 = $field520.app(anf_arg519);
}
break;
case 18: ++R.GAS;
return $ans468;
default: throw "No case numbered " + $step465 + " in $temp_full466";
}
}
} catch($e521) {
if(R.isCont($e521) && ($step465 !== 18)) {
$e521.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al469,$temp_full466,$step465,[self467],[anf_array_val503,anf_array_val502,anf_method_obj505,anf_array_val508,anf_method_obj510,anf_array_val516,anf_array_val515,anf_method_obj491,anf_array_val514,anf_method_obj485,anf_array_val513,anf_array_val477,anf_array_val476,anf_method_obj479,anf_method_obj518]);
}
if(R.isPyretException($e521)) {
$e521.pyretStack.push($al469);
}
throw $e521;
}
};
var anf_variant_member1147 = R.makeMethod0($temp_full466);
var $temp_full523 = function($self524) {
var $step522 = 0;
var $ans525 = D;
var $al526 = L[243];
try {
if(R.isActivationRecord($self524)) {
$step522 = $self524.step;
$al526 = $self524.from;
$ans525 = $self524.ans;
self524 = $self524.args[0];
anf_array_val581 = $self524.vars[0];
anf_array_val580 = $self524.vars[1];
anf_array_val579 = $self524.vars[2];
anf_array_val578 = $self524.vars[3];
anf_array_val577 = $self524.vars[4];
anf_array_val576 = $self524.vars[5];
anf_array_val575 = $self524.vars[6];
anf_method_obj583 = $self524.vars[7];
anf_array_val552 = $self524.vars[8];
anf_array_val551 = $self524.vars[9];
anf_array_val550 = $self524.vars[10];
anf_array_val549 = $self524.vars[11];
anf_array_val548 = $self524.vars[12];
anf_array_val547 = $self524.vars[13];
anf_array_val546 = $self524.vars[14];
anf_method_obj554 = $self524.vars[15];
anf_method_obj589 = $self524.vars[16];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[243],1,$t);
}
var self524 = $self524;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step522) {
case 0: var anf_method_obj589 = G(ED12,"error",L[203]);
var anf_arg527 = G(self524,"num-args",L[204]);
var anf_arg528 = G(self524,"actual-arity",L[205]);
$step522 = 1;
$al526 = L[206];
if(!(R.isFunction(_lessthan2))) {
R.ffi.throwNonFunApp($al526,_lessthan2);
}
$ans525 = _lessthan2.app(anf_arg527,anf_arg528);
break;
case 1: var anf_arg529 = $ans525;
$al526 = L[206];
var anf_if592 = R.checkWrapBoolean(anf_arg529);
if(R.isPyretTrue(anf_if592)) {
$step522 = 2;
} else {
$step522 = 17;
}
break;
case 2: var anf_method_obj554 = G(ED12,"para",L[207]);
$step522 = 3;
$al526 = L[208];
$field530 = R.getColonFieldLoc(ED12,"text",L[208]);
if(R.isMethod($field530)) {
$ans525 = $field530.full_meth(ED12,("The cases branch at"));
} else {
if(!(R.isFunction($field530))) {
R.ffi.throwNonFunApp(L[208],$field530);
}
$ans525 = $field530.app(("The cases branch at"));
}
break;
case 3: var anf_array_val546 = $ans525;
var anf_arg531 = G(self524,"branch-loc",L[209]);
$step522 = 4;
$al526 = L[224];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al526,draw$and$highlight33.$var);
}
$ans525 = draw$and$highlight33.$var.app(anf_arg531);
break;
case 4: var anf_array_val547 = $ans525;
$step522 = 5;
$al526 = L[210];
$field532 = R.getColonFieldLoc(ED12,"text",L[210]);
if(R.isMethod($field532)) {
$ans525 = $field532.full_meth(ED12,("expects only"));
} else {
if(!(R.isFunction($field532))) {
R.ffi.throwNonFunApp(L[210],$field532);
}
$ans525 = $field532.app(("expects only"));
}
break;
case 5: var anf_array_val548 = $ans525;
var anf_arg533 = G(self524,"num-args",L[211]);
$step522 = 6;
$al526 = L[212];
$field534 = R.getColonFieldLoc(ED12,"embed",L[212]);
if(R.isMethod($field534)) {
$ans525 = $field534.full_meth(ED12,anf_arg533);
} else {
if(!(R.isFunction($field534))) {
R.ffi.throwNonFunApp(L[212],$field534);
}
$ans525 = $field534.app(anf_arg533);
}
break;
case 6: var anf_array_val549 = $ans525;
var anf_arg535 = G(self524,"num-args",L[213]);
$step522 = 7;
$al526 = L[214];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al526,equal$always3);
}
$ans525 = equal$always3.app(anf_arg535,(1));
break;
case 7: var anf_arg536 = $ans525;
$al526 = L[214];
var anf_if558 = R.checkWrapBoolean(anf_arg536);
if(R.isPyretTrue(anf_if558)) {
$step522 = 8;
} else {
$step522 = 9;
}
break;
case 8: $step522 = 10;
$al526 = L[215];
$field537 = R.getColonFieldLoc(ED12,"text",L[215]);
if(R.isMethod($field537)) {
$ans525 = $field537.full_meth(ED12,("argument,"));
} else {
if(!(R.isFunction($field537))) {
R.ffi.throwNonFunApp(L[215],$field537);
}
$ans525 = $field537.app(("argument,"));
}
break;
case 9: $step522 = 10;
$al526 = L[216];
$field538 = R.getColonFieldLoc(ED12,"text",L[216]);
if(R.isMethod($field538)) {
$ans525 = $field538.full_meth(ED12,("arguments,"));
} else {
if(!(R.isFunction($field538))) {
R.ffi.throwNonFunApp(L[216],$field538);
}
$ans525 = $field538.app(("arguments,"));
}
break;
case 10: var anf_array_val550 = $ans525;
$step522 = 11;
$al526 = L[217];
$field539 = R.getColonFieldLoc(ED12,"text",L[217]);
if(R.isMethod($field539)) {
$ans525 = $field539.full_meth(ED12,("but the actual value has"));
} else {
if(!(R.isFunction($field539))) {
R.ffi.throwNonFunApp(L[217],$field539);
}
$ans525 = $field539.app(("but the actual value has"));
}
break;
case 11: var anf_array_val551 = $ans525;
var anf_arg540 = G(self524,"actual-arity",L[218]);
$step522 = 12;
$al526 = L[219];
$field541 = R.getColonFieldLoc(ED12,"embed",L[219]);
if(R.isMethod($field541)) {
$ans525 = $field541.full_meth(ED12,anf_arg540);
} else {
if(!(R.isFunction($field541))) {
R.ffi.throwNonFunApp(L[219],$field541);
}
$ans525 = $field541.app(anf_arg540);
}
break;
case 12: var anf_array_val552 = $ans525;
var anf_arg542 = G(self524,"actual-arity",L[220]);
$step522 = 13;
$al526 = L[221];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al526,equal$always3);
}
$ans525 = equal$always3.app(anf_arg542,(1));
break;
case 13: var anf_arg543 = $ans525;
$al526 = L[221];
var anf_if557 = R.checkWrapBoolean(anf_arg543);
if(R.isPyretTrue(anf_if557)) {
$step522 = 14;
} else {
$step522 = 15;
}
break;
case 14: $step522 = 16;
$al526 = L[222];
$field544 = R.getColonFieldLoc(ED12,"text",L[222]);
if(R.isMethod($field544)) {
$ans525 = $field544.full_meth(ED12,("field"));
} else {
if(!(R.isFunction($field544))) {
R.ffi.throwNonFunApp(L[222],$field544);
}
$ans525 = $field544.app(("field"));
}
break;
case 15: $step522 = 16;
$al526 = L[223];
$field545 = R.getColonFieldLoc(ED12,"text",L[223]);
if(R.isMethod($field545)) {
$ans525 = $field545.full_meth(ED12,("fields"));
} else {
if(!(R.isFunction($field545))) {
R.ffi.throwNonFunApp(L[223],$field545);
}
$ans525 = $field545.app(("fields"));
}
break;
case 16: var anf_array_val553 = $ans525;
var anf_arg555 = [anf_array_val546,anf_array_val547,anf_array_val548,anf_array_val549,anf_array_val550,anf_array_val551,anf_array_val552,anf_array_val553];
$step522 = 32;
$al526 = L[207];
$field556 = R.getColonFieldLoc(anf_method_obj554,"make",L[207]);
if(R.isMethod($field556)) {
$ans525 = $field556.full_meth(anf_method_obj554,anf_arg555);
} else {
if(!(R.isFunction($field556))) {
R.ffi.throwNonFunApp(L[207],$field556);
}
$ans525 = $field556.app(anf_arg555);
}
break;
case 17: var anf_method_obj583 = G(ED12,"para",L[225]);
$step522 = 18;
$al526 = L[226];
$field559 = R.getColonFieldLoc(ED12,"text",L[226]);
if(R.isMethod($field559)) {
$ans525 = $field559.full_meth(ED12,("The cases branch at"));
} else {
if(!(R.isFunction($field559))) {
R.ffi.throwNonFunApp(L[226],$field559);
}
$ans525 = $field559.app(("The cases branch at"));
}
break;
case 18: var anf_array_val575 = $ans525;
var anf_arg560 = G(self524,"branch-loc",L[227]);
$step522 = 19;
$al526 = L[242];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al526,draw$and$highlight33.$var);
}
$ans525 = draw$and$highlight33.$var.app(anf_arg560);
break;
case 19: var anf_array_val576 = $ans525;
$step522 = 20;
$al526 = L[228];
$field561 = R.getColonFieldLoc(ED12,"text",L[228]);
if(R.isMethod($field561)) {
$ans525 = $field561.full_meth(ED12,("expects"));
} else {
if(!(R.isFunction($field561))) {
R.ffi.throwNonFunApp(L[228],$field561);
}
$ans525 = $field561.app(("expects"));
}
break;
case 20: var anf_array_val577 = $ans525;
var anf_arg562 = G(self524,"num-args",L[229]);
$step522 = 21;
$al526 = L[230];
$field563 = R.getColonFieldLoc(ED12,"embed",L[230]);
if(R.isMethod($field563)) {
$ans525 = $field563.full_meth(ED12,anf_arg562);
} else {
if(!(R.isFunction($field563))) {
R.ffi.throwNonFunApp(L[230],$field563);
}
$ans525 = $field563.app(anf_arg562);
}
break;
case 21: var anf_array_val578 = $ans525;
var anf_arg564 = G(self524,"num-args",L[231]);
$step522 = 22;
$al526 = L[232];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al526,equal$always3);
}
$ans525 = equal$always3.app(anf_arg564,(1));
break;
case 22: var anf_arg565 = $ans525;
$al526 = L[232];
var anf_if587 = R.checkWrapBoolean(anf_arg565);
if(R.isPyretTrue(anf_if587)) {
$step522 = 23;
} else {
$step522 = 24;
}
break;
case 23: $step522 = 25;
$al526 = L[233];
$field566 = R.getColonFieldLoc(ED12,"text",L[233]);
if(R.isMethod($field566)) {
$ans525 = $field566.full_meth(ED12,("argument,"));
} else {
if(!(R.isFunction($field566))) {
R.ffi.throwNonFunApp(L[233],$field566);
}
$ans525 = $field566.app(("argument,"));
}
break;
case 24: $step522 = 25;
$al526 = L[234];
$field567 = R.getColonFieldLoc(ED12,"text",L[234]);
if(R.isMethod($field567)) {
$ans525 = $field567.full_meth(ED12,("arguments,"));
} else {
if(!(R.isFunction($field567))) {
R.ffi.throwNonFunApp(L[234],$field567);
}
$ans525 = $field567.app(("arguments,"));
}
break;
case 25: var anf_array_val579 = $ans525;
$step522 = 26;
$al526 = L[235];
$field568 = R.getColonFieldLoc(ED12,"text",L[235]);
if(R.isMethod($field568)) {
$ans525 = $field568.full_meth(ED12,("but the actual value has only"));
} else {
if(!(R.isFunction($field568))) {
R.ffi.throwNonFunApp(L[235],$field568);
}
$ans525 = $field568.app(("but the actual value has only"));
}
break;
case 26: var anf_array_val580 = $ans525;
var anf_arg569 = G(self524,"actual-arity",L[236]);
$step522 = 27;
$al526 = L[237];
$field570 = R.getColonFieldLoc(ED12,"embed",L[237]);
if(R.isMethod($field570)) {
$ans525 = $field570.full_meth(ED12,anf_arg569);
} else {
if(!(R.isFunction($field570))) {
R.ffi.throwNonFunApp(L[237],$field570);
}
$ans525 = $field570.app(anf_arg569);
}
break;
case 27: var anf_array_val581 = $ans525;
var anf_arg571 = G(self524,"actual-arity",L[238]);
$step522 = 28;
$al526 = L[239];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al526,equal$always3);
}
$ans525 = equal$always3.app(anf_arg571,(1));
break;
case 28: var anf_arg572 = $ans525;
$al526 = L[239];
var anf_if586 = R.checkWrapBoolean(anf_arg572);
if(R.isPyretTrue(anf_if586)) {
$step522 = 29;
} else {
$step522 = 30;
}
break;
case 29: $step522 = 31;
$al526 = L[240];
$field573 = R.getColonFieldLoc(ED12,"text",L[240]);
if(R.isMethod($field573)) {
$ans525 = $field573.full_meth(ED12,("field"));
} else {
if(!(R.isFunction($field573))) {
R.ffi.throwNonFunApp(L[240],$field573);
}
$ans525 = $field573.app(("field"));
}
break;
case 30: $step522 = 31;
$al526 = L[241];
$field574 = R.getColonFieldLoc(ED12,"text",L[241]);
if(R.isMethod($field574)) {
$ans525 = $field574.full_meth(ED12,("fields"));
} else {
if(!(R.isFunction($field574))) {
R.ffi.throwNonFunApp(L[241],$field574);
}
$ans525 = $field574.app(("fields"));
}
break;
case 31: var anf_array_val582 = $ans525;
var anf_arg584 = [anf_array_val575,anf_array_val576,anf_array_val577,anf_array_val578,anf_array_val579,anf_array_val580,anf_array_val581,anf_array_val582];
$step522 = 32;
$al526 = L[225];
$field585 = R.getColonFieldLoc(anf_method_obj583,"make",L[225]);
if(R.isMethod($field585)) {
$ans525 = $field585.full_meth(anf_method_obj583,anf_arg584);
} else {
if(!(R.isFunction($field585))) {
R.ffi.throwNonFunApp(L[225],$field585);
}
$ans525 = $field585.app(anf_arg584);
}
break;
case 32: var anf_array_val588 = $ans525;
var anf_arg590 = [anf_array_val588];
$step522 = 33;
$al526 = L[203];
$field591 = R.getColonFieldLoc(anf_method_obj589,"make",L[203]);
if(R.isMethod($field591)) {
$ans525 = $field591.full_meth(anf_method_obj589,anf_arg590);
} else {
if(!(R.isFunction($field591))) {
R.ffi.throwNonFunApp(L[203],$field591);
}
$ans525 = $field591.app(anf_arg590);
}
break;
case 33: ++R.GAS;
return $ans525;
default: throw "No case numbered " + $step522 + " in $temp_full523";
}
}
} catch($e593) {
if(R.isCont($e593) && ($step522 !== 33)) {
$e593.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al526,$temp_full523,$step522,[self524],[anf_array_val581,anf_array_val580,anf_array_val579,anf_array_val578,anf_array_val577,anf_array_val576,anf_array_val575,anf_method_obj583,anf_array_val552,anf_array_val551,anf_array_val550,anf_array_val549,anf_array_val548,anf_array_val547,anf_array_val546,anf_method_obj554,anf_method_obj589]);
}
if(R.isPyretException($e593)) {
$e593.pyretStack.push($al526);
}
throw $e593;
}
};
var anf_variant_member1160 = R.makeMethod0($temp_full523);
var $temp_full595 = function($self596) {
var $step594 = 0;
var $ans597 = D;
var $al598 = L[257];
try {
if(R.isActivationRecord($self596)) {
$step594 = $self596.step;
$al598 = $self596.from;
$ans597 = $self596.ans;
self596 = $self596.args[0];
anf_array_val617 = $self596.vars[0];
anf_array_val616 = $self596.vars[1];
anf_method_obj619 = $self596.vars[2];
anf_method_obj623 = $self596.vars[3];
anf_array_val604 = $self596.vars[4];
anf_array_val603 = $self596.vars[5];
anf_method_obj606 = $self596.vars[6];
anf_method_obj610 = $self596.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[257],1,$t);
}
var self596 = $self596;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step594) {
case 0: var anf_arg599 = G(self596,"should-be-singleton",L[244]);
$al598 = L[244];
var anf_if626 = R.checkWrapBoolean(anf_arg599);
if(R.isPyretTrue(anf_if626)) {
$step594 = 1;
} else {
$step594 = 6;
}
break;
case 1: var anf_method_obj610 = G(ED12,"error",L[245]);
var anf_method_obj606 = G(ED12,"para",L[246]);
$step594 = 2;
$al598 = L[247];
$field600 = R.getColonFieldLoc(ED12,"text",L[247]);
if(R.isMethod($field600)) {
$ans597 = $field600.full_meth(ED12,("The cases branch at"));
} else {
if(!(R.isFunction($field600))) {
R.ffi.throwNonFunApp(L[247],$field600);
}
$ans597 = $field600.app(("The cases branch at"));
}
break;
case 2: var anf_array_val603 = $ans597;
var anf_arg601 = G(self596,"branch-loc",L[248]);
$step594 = 3;
$al598 = L[250];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al598,draw$and$highlight33.$var);
}
$ans597 = draw$and$highlight33.$var.app(anf_arg601);
break;
case 3: var anf_array_val604 = $ans597;
$step594 = 4;
$al598 = L[249];
$field602 = R.getColonFieldLoc(ED12,"text",L[249]);
if(R.isMethod($field602)) {
$ans597 = $field602.full_meth(ED12,("has an argument list, but the variant is a singleton."));
} else {
if(!(R.isFunction($field602))) {
R.ffi.throwNonFunApp(L[249],$field602);
}
$ans597 = $field602.app(("has an argument list, but the variant is a singleton."));
}
break;
case 4: var anf_array_val605 = $ans597;
var anf_arg607 = [anf_array_val603,anf_array_val604,anf_array_val605];
$step594 = 5;
$al598 = L[246];
$field608 = R.getColonFieldLoc(anf_method_obj606,"make",L[246]);
if(R.isMethod($field608)) {
$ans597 = $field608.full_meth(anf_method_obj606,anf_arg607);
} else {
if(!(R.isFunction($field608))) {
R.ffi.throwNonFunApp(L[246],$field608);
}
$ans597 = $field608.app(anf_arg607);
}
break;
case 5: var anf_array_val609 = $ans597;
var anf_arg611 = [anf_array_val609];
$step594 = 11;
$al598 = L[245];
$field612 = R.getColonFieldLoc(anf_method_obj610,"make",L[245]);
if(R.isMethod($field612)) {
$ans597 = $field612.full_meth(anf_method_obj610,anf_arg611);
} else {
if(!(R.isFunction($field612))) {
R.ffi.throwNonFunApp(L[245],$field612);
}
$ans597 = $field612.app(anf_arg611);
}
break;
case 6: var anf_method_obj623 = G(ED12,"error",L[251]);
var anf_method_obj619 = G(ED12,"para",L[252]);
$step594 = 7;
$al598 = L[253];
$field613 = R.getColonFieldLoc(ED12,"text",L[253]);
if(R.isMethod($field613)) {
$ans597 = $field613.full_meth(ED12,("The cases branch at"));
} else {
if(!(R.isFunction($field613))) {
R.ffi.throwNonFunApp(L[253],$field613);
}
$ans597 = $field613.app(("The cases branch at"));
}
break;
case 7: var anf_array_val616 = $ans597;
var anf_arg614 = G(self596,"branch-loc",L[254]);
$step594 = 8;
$al598 = L[256];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al598,draw$and$highlight33.$var);
}
$ans597 = draw$and$highlight33.$var.app(anf_arg614);
break;
case 8: var anf_array_val617 = $ans597;
$step594 = 9;
$al598 = L[255];
$field615 = R.getColonFieldLoc(ED12,"text",L[255]);
if(R.isMethod($field615)) {
$ans597 = $field615.full_meth(ED12,("doesn't have an argument list, but the variant is not a singleton."));
} else {
if(!(R.isFunction($field615))) {
R.ffi.throwNonFunApp(L[255],$field615);
}
$ans597 = $field615.app(("doesn't have an argument list, but the variant is not a singleton."));
}
break;
case 9: var anf_array_val618 = $ans597;
var anf_arg620 = [anf_array_val616,anf_array_val617,anf_array_val618];
$step594 = 10;
$al598 = L[252];
$field621 = R.getColonFieldLoc(anf_method_obj619,"make",L[252]);
if(R.isMethod($field621)) {
$ans597 = $field621.full_meth(anf_method_obj619,anf_arg620);
} else {
if(!(R.isFunction($field621))) {
R.ffi.throwNonFunApp(L[252],$field621);
}
$ans597 = $field621.app(anf_arg620);
}
break;
case 10: var anf_array_val622 = $ans597;
var anf_arg624 = [anf_array_val622];
$step594 = 11;
$al598 = L[251];
$field625 = R.getColonFieldLoc(anf_method_obj623,"make",L[251]);
if(R.isMethod($field625)) {
$ans597 = $field625.full_meth(anf_method_obj623,anf_arg624);
} else {
if(!(R.isFunction($field625))) {
R.ffi.throwNonFunApp(L[251],$field625);
}
$ans597 = $field625.app(anf_arg624);
}
break;
case 11: ++R.GAS;
return $ans597;
default: throw "No case numbered " + $step594 + " in $temp_full595";
}
}
} catch($e627) {
if(R.isCont($e627) && ($step594 !== 11)) {
$e627.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al598,$temp_full595,$step594,[self596],[anf_array_val617,anf_array_val616,anf_method_obj619,anf_method_obj623,anf_array_val604,anf_array_val603,anf_method_obj606,anf_method_obj610]);
}
if(R.isPyretException($e627)) {
$e627.pyretStack.push($al598);
}
throw $e627;
}
};
var anf_variant_member1172 = R.makeMethod0($temp_full595);
var $temp_full629 = function($self630) {
var $step628 = 0;
var $ans631 = D;
var $al632 = L[318];
try {
if(R.isActivationRecord($self630)) {
$step628 = $self630.step;
$al632 = $self630.from;
$ans631 = $self630.ans;
self630 = $self630.args[0];
anf_array_val744 = $self630.vars[0];
anf_array_val736 = $self630.vars[1];
anf_array_val735 = $self630.vars[2];
anf_method_obj738 = $self630.vars[3];
anf_array_val743 = $self630.vars[4];
anf_array_val742 = $self630.vars[5];
anf_array_val725 = $self630.vars[6];
anf_array_val724 = $self630.vars[7];
anf_method_obj727 = $self630.vars[8];
anf_method_obj746 = $self630.vars[9];
anf_arg749 = $self630.vars[10];
exp$arg$str651 = $self630.vars[11];
arg$str664 = $self630.vars[12];
this$str660 = $self630.vars[13];
num$args635 = $self630.vars[14];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[318],1,$t);
}
var self630 = $self630;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step628) {
case 0: var anf_method_obj633 = G(self630,"args",L[258]);
$step628 = 1;
$al632 = L[259];
$field634 = R.getColonFieldLoc(anf_method_obj633,"length",L[259]);
if(R.isMethod($field634)) {
$ans631 = $field634.full_meth(anf_method_obj633);
} else {
if(!(R.isFunction($field634))) {
R.ffi.throwNonFunApp(L[259],$field634);
}
$ans631 = $field634.app();
}
break;
case 1: var num$args635 = $ans631;
$step628 = 2;
$al632 = L[260];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al632,equal$always3);
}
$ans631 = equal$always3.app(num$args635,(1));
break;
case 2: var anf_arg636 = $ans631;
$al632 = L[260];
var anf_if754 = R.checkWrapBoolean(anf_arg636);
if(R.isPyretTrue(anf_if754)) {
$step628 = 3;
} else {
$step628 = 4;
}
break;
case 3: $step628 = 5;
$ans631 = ("this");
break;
case 4: $step628 = 5;
$ans631 = ("these");
break;
case 5: var this$str660 = $ans631;
$step628 = 6;
$al632 = L[261];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al632,equal$always3);
}
$ans631 = equal$always3.app(num$args635,(1));
break;
case 6: var anf_arg637 = $ans631;
$al632 = L[261];
var anf_if753 = R.checkWrapBoolean(anf_arg637);
if(R.isPyretTrue(anf_if753)) {
$step628 = 7;
} else {
$step628 = 8;
}
break;
case 7: $step628 = 9;
$ans631 = ("argument:");
break;
case 8: $step628 = 9;
$ans631 = ("arguments:");
break;
case 9: var arg$str664 = $ans631;
var anf_arg638 = G(self630,"expected-arity",L[262]);
$step628 = 10;
$al632 = L[263];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al632,equal$always3);
}
$ans631 = equal$always3.app(anf_arg638,(1));
break;
case 10: var anf_arg639 = $ans631;
$al632 = L[263];
var anf_if752 = R.checkWrapBoolean(anf_arg639);
if(R.isPyretTrue(anf_if752)) {
$step628 = 11;
} else {
$step628 = 12;
}
break;
case 11: $step628 = 13;
$ans631 = ("argument");
break;
case 12: $step628 = 13;
$ans631 = ("arguments");
break;
case 13: var exp$arg$str651 = $ans631;
var $temp_lam641 = function($caller$loc642) {
var $step640 = 0;
var $ans643 = D;
var $al644 = L[300];
try {
if(R.isActivationRecord($caller$loc642)) {
$step640 = $caller$loc642.step;
$al644 = $caller$loc642.from;
$ans643 = $caller$loc642.ans;
caller$loc642 = $caller$loc642.args[0];
anf_array_val712 = $caller$loc642.vars[0];
anf_array_val702 = $caller$loc642.vars[1];
anf_array_val701 = $caller$loc642.vars[2];
anf_method_obj704 = $caller$loc642.vars[3];
anf_array_val711 = $caller$loc642.vars[4];
anf_array_val710 = $caller$loc642.vars[5];
anf_method_obj694 = $caller$loc642.vars[6];
anf_array_val709 = $caller$loc642.vars[7];
anf_array_val708 = $caller$loc642.vars[8];
anf_array_val686 = $caller$loc642.vars[9];
anf_array_val685 = $caller$loc642.vars[10];
anf_method_obj688 = $caller$loc642.vars[11];
anf_method_obj714 = $caller$loc642.vars[12];
anf_array_val675 = $caller$loc642.vars[13];
anf_array_val667 = $caller$loc642.vars[14];
anf_array_val666 = $caller$loc642.vars[15];
anf_method_obj669 = $caller$loc642.vars[16];
anf_array_val674 = $caller$loc642.vars[17];
anf_array_val673 = $caller$loc642.vars[18];
anf_array_val655 = $caller$loc642.vars[19];
anf_array_val654 = $caller$loc642.vars[20];
anf_method_obj657 = $caller$loc642.vars[21];
anf_method_obj677 = $caller$loc642.vars[22];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[300],1,$t);
}
var caller$loc642 = $caller$loc642;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step640) {
case 0: var anf_method_obj645 = G(self630,"fun-loc",L[264]);
$step640 = 1;
$al644 = L[265];
$field646 = R.getColonFieldLoc(anf_method_obj645,"is-builtin",L[265]);
if(R.isMethod($field646)) {
$ans643 = $field646.full_meth(anf_method_obj645);
} else {
if(!(R.isFunction($field646))) {
R.ffi.throwNonFunApp(L[265],$field646);
}
$ans643 = $field646.app();
}
break;
case 1: var anf_arg647 = $ans643;
$al644 = L[265];
var anf_if717 = R.checkWrapBoolean(anf_arg647);
if(R.isPyretTrue(anf_if717)) {
$step640 = 2;
} else {
$step640 = 15;
}
break;
case 2: var anf_method_obj677 = G(ED12,"error",L[266]);
var anf_method_obj657 = G(ED12,"para",L[267]);
$step640 = 3;
$al644 = L[268];
$field648 = R.getColonFieldLoc(ED12,"text",L[268]);
if(R.isMethod($field648)) {
$ans643 = $field648.full_meth(ED12,("Expected to get"));
} else {
if(!(R.isFunction($field648))) {
R.ffi.throwNonFunApp(L[268],$field648);
}
$ans643 = $field648.app(("Expected to get"));
}
break;
case 3: var anf_array_val654 = $ans643;
var anf_arg649 = G(self630,"expected-arity",L[269]);
$step640 = 4;
$al644 = L[270];
$field650 = R.getColonFieldLoc(ED12,"embed",L[270]);
if(R.isMethod($field650)) {
$ans643 = $field650.full_meth(ED12,anf_arg649);
} else {
if(!(R.isFunction($field650))) {
R.ffi.throwNonFunApp(L[270],$field650);
}
$ans643 = $field650.app(anf_arg649);
}
break;
case 4: var anf_array_val655 = $ans643;
$step640 = 5;
$al644 = L[280];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al644,_plus1);
}
$ans643 = _plus1.app(exp$arg$str651,(" at"));
break;
case 5: var anf_arg652 = $ans643;
$step640 = 6;
$al644 = L[271];
$field653 = R.getColonFieldLoc(ED12,"text",L[271]);
if(R.isMethod($field653)) {
$ans643 = $field653.full_meth(ED12,anf_arg652);
} else {
if(!(R.isFunction($field653))) {
R.ffi.throwNonFunApp(L[271],$field653);
}
$ans643 = $field653.app(anf_arg652);
}
break;
case 6: var anf_array_val656 = $ans643;
var anf_arg658 = [anf_array_val654,anf_array_val655,anf_array_val656];
$step640 = 7;
$al644 = L[267];
$field659 = R.getColonFieldLoc(anf_method_obj657,"make",L[267]);
if(R.isMethod($field659)) {
$ans643 = $field659.full_meth(anf_method_obj657,anf_arg658);
} else {
if(!(R.isFunction($field659))) {
R.ffi.throwNonFunApp(L[267],$field659);
}
$ans643 = $field659.app(anf_arg658);
}
break;
case 7: var anf_array_val673 = $ans643;
$step640 = 8;
$al644 = L[279];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al644,draw$and$highlight33.$var);
}
$ans643 = draw$and$highlight33.$var.app(caller$loc642);
break;
case 8: var anf_array_val674 = $ans643;
var anf_method_obj669 = G(ED12,"para",L[272]);
$step640 = 9;
$al644 = L[278];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al644,_plus1);
}
$ans643 = _plus1.app(("but got "),this$str660);
break;
case 9: var anf_arg661 = $ans643;
$step640 = 10;
$al644 = L[273];
$field662 = R.getColonFieldLoc(ED12,"text",L[273]);
if(R.isMethod($field662)) {
$ans643 = $field662.full_meth(ED12,anf_arg661);
} else {
if(!(R.isFunction($field662))) {
R.ffi.throwNonFunApp(L[273],$field662);
}
$ans643 = $field662.app(anf_arg661);
}
break;
case 10: var anf_array_val666 = $ans643;
$step640 = 11;
$al644 = L[274];
$field663 = R.getColonFieldLoc(ED12,"embed",L[274]);
if(R.isMethod($field663)) {
$ans643 = $field663.full_meth(ED12,num$args635);
} else {
if(!(R.isFunction($field663))) {
R.ffi.throwNonFunApp(L[274],$field663);
}
$ans643 = $field663.app(num$args635);
}
break;
case 11: var anf_array_val667 = $ans643;
$step640 = 12;
$al644 = L[275];
$field665 = R.getColonFieldLoc(ED12,"text",L[275]);
if(R.isMethod($field665)) {
$ans643 = $field665.full_meth(ED12,arg$str664);
} else {
if(!(R.isFunction($field665))) {
R.ffi.throwNonFunApp(L[275],$field665);
}
$ans643 = $field665.app(arg$str664);
}
break;
case 12: var anf_array_val668 = $ans643;
var anf_arg670 = [anf_array_val666,anf_array_val667,anf_array_val668];
$step640 = 13;
$al644 = L[272];
$field671 = R.getColonFieldLoc(anf_method_obj669,"make",L[272]);
if(R.isMethod($field671)) {
$ans643 = $field671.full_meth(anf_method_obj669,anf_arg670);
} else {
if(!(R.isFunction($field671))) {
R.ffi.throwNonFunApp(L[272],$field671);
}
$ans643 = $field671.app(anf_arg670);
}
break;
case 13: var anf_array_val675 = $ans643;
var anf_arg672 = G(self630,"args",L[276]);
$step640 = 14;
$al644 = L[277];
if(!(R.isFunction(vert$list$values56.$var))) {
R.ffi.throwNonFunApp($al644,vert$list$values56.$var);
}
$ans643 = vert$list$values56.$var.app(anf_arg672);
break;
case 14: var anf_array_val676 = $ans643;
var anf_arg678 = [anf_array_val673,anf_array_val674,anf_array_val675,anf_array_val676];
$step640 = 31;
$al644 = L[266];
$field679 = R.getColonFieldLoc(anf_method_obj677,"make",L[266]);
if(R.isMethod($field679)) {
$ans643 = $field679.full_meth(anf_method_obj677,anf_arg678);
} else {
if(!(R.isFunction($field679))) {
R.ffi.throwNonFunApp(L[266],$field679);
}
$ans643 = $field679.app(anf_arg678);
}
break;
case 15: var anf_method_obj714 = G(ED12,"error",L[281]);
var anf_method_obj688 = G(ED12,"para",L[282]);
$step640 = 16;
$al644 = L[283];
$field680 = R.getColonFieldLoc(ED12,"text",L[283]);
if(R.isMethod($field680)) {
$ans643 = $field680.full_meth(ED12,("Expected to get"));
} else {
if(!(R.isFunction($field680))) {
R.ffi.throwNonFunApp(L[283],$field680);
}
$ans643 = $field680.app(("Expected to get"));
}
break;
case 16: var anf_array_val685 = $ans643;
var anf_arg681 = G(self630,"expected-arity",L[284]);
$step640 = 17;
$al644 = L[285];
$field682 = R.getColonFieldLoc(ED12,"embed",L[285]);
if(R.isMethod($field682)) {
$ans643 = $field682.full_meth(ED12,anf_arg681);
} else {
if(!(R.isFunction($field682))) {
R.ffi.throwNonFunApp(L[285],$field682);
}
$ans643 = $field682.app(anf_arg681);
}
break;
case 17: var anf_array_val686 = $ans643;
$step640 = 18;
$al644 = L[299];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al644,_plus1);
}
$ans643 = _plus1.app(exp$arg$str651,(" when calling the function at"));
break;
case 18: var anf_arg683 = $ans643;
$step640 = 19;
$al644 = L[286];
$field684 = R.getColonFieldLoc(ED12,"text",L[286]);
if(R.isMethod($field684)) {
$ans643 = $field684.full_meth(ED12,anf_arg683);
} else {
if(!(R.isFunction($field684))) {
R.ffi.throwNonFunApp(L[286],$field684);
}
$ans643 = $field684.app(anf_arg683);
}
break;
case 19: var anf_array_val687 = $ans643;
var anf_arg689 = [anf_array_val685,anf_array_val686,anf_array_val687];
$step640 = 20;
$al644 = L[282];
$field690 = R.getColonFieldLoc(anf_method_obj688,"make",L[282]);
if(R.isMethod($field690)) {
$ans643 = $field690.full_meth(anf_method_obj688,anf_arg689);
} else {
if(!(R.isFunction($field690))) {
R.ffi.throwNonFunApp(L[282],$field690);
}
$ans643 = $field690.app(anf_arg689);
}
break;
case 20: var anf_array_val708 = $ans643;
var anf_arg691 = G(self630,"fun-loc",L[287]);
$step640 = 21;
$al644 = L[298];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al644,draw$and$highlight33.$var);
}
$ans643 = draw$and$highlight33.$var.app(anf_arg691);
break;
case 21: var anf_array_val709 = $ans643;
var anf_method_obj694 = G(ED12,"para",L[288]);
$step640 = 22;
$al644 = L[289];
$field692 = R.getColonFieldLoc(ED12,"text",L[289]);
if(R.isMethod($field692)) {
$ans643 = $field692.full_meth(ED12,("from"));
} else {
if(!(R.isFunction($field692))) {
R.ffi.throwNonFunApp(L[289],$field692);
}
$ans643 = $field692.app(("from"));
}
break;
case 22: var anf_array_val693 = $ans643;
var anf_arg695 = [anf_array_val693];
$step640 = 23;
$al644 = L[288];
$field696 = R.getColonFieldLoc(anf_method_obj694,"make",L[288]);
if(R.isMethod($field696)) {
$ans643 = $field696.full_meth(anf_method_obj694,anf_arg695);
} else {
if(!(R.isFunction($field696))) {
R.ffi.throwNonFunApp(L[288],$field696);
}
$ans643 = $field696.app(anf_arg695);
}
break;
case 23: var anf_array_val710 = $ans643;
$step640 = 24;
$al644 = L[297];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al644,draw$and$highlight33.$var);
}
$ans643 = draw$and$highlight33.$var.app(caller$loc642);
break;
case 24: var anf_array_val711 = $ans643;
var anf_method_obj704 = G(ED12,"para",L[290]);
$step640 = 25;
$al644 = L[296];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al644,_plus1);
}
$ans643 = _plus1.app(("but got "),this$str660);
break;
case 25: var anf_arg697 = $ans643;
$step640 = 26;
$al644 = L[291];
$field698 = R.getColonFieldLoc(ED12,"text",L[291]);
if(R.isMethod($field698)) {
$ans643 = $field698.full_meth(ED12,anf_arg697);
} else {
if(!(R.isFunction($field698))) {
R.ffi.throwNonFunApp(L[291],$field698);
}
$ans643 = $field698.app(anf_arg697);
}
break;
case 26: var anf_array_val701 = $ans643;
$step640 = 27;
$al644 = L[292];
$field699 = R.getColonFieldLoc(ED12,"embed",L[292]);
if(R.isMethod($field699)) {
$ans643 = $field699.full_meth(ED12,num$args635);
} else {
if(!(R.isFunction($field699))) {
R.ffi.throwNonFunApp(L[292],$field699);
}
$ans643 = $field699.app(num$args635);
}
break;
case 27: var anf_array_val702 = $ans643;
$step640 = 28;
$al644 = L[293];
$field700 = R.getColonFieldLoc(ED12,"text",L[293]);
if(R.isMethod($field700)) {
$ans643 = $field700.full_meth(ED12,arg$str664);
} else {
if(!(R.isFunction($field700))) {
R.ffi.throwNonFunApp(L[293],$field700);
}
$ans643 = $field700.app(arg$str664);
}
break;
case 28: var anf_array_val703 = $ans643;
var anf_arg705 = [anf_array_val701,anf_array_val702,anf_array_val703];
$step640 = 29;
$al644 = L[290];
$field706 = R.getColonFieldLoc(anf_method_obj704,"make",L[290]);
if(R.isMethod($field706)) {
$ans643 = $field706.full_meth(anf_method_obj704,anf_arg705);
} else {
if(!(R.isFunction($field706))) {
R.ffi.throwNonFunApp(L[290],$field706);
}
$ans643 = $field706.app(anf_arg705);
}
break;
case 29: var anf_array_val712 = $ans643;
var anf_arg707 = G(self630,"args",L[294]);
$step640 = 30;
$al644 = L[295];
if(!(R.isFunction(vert$list$values56.$var))) {
R.ffi.throwNonFunApp($al644,vert$list$values56.$var);
}
$ans643 = vert$list$values56.$var.app(anf_arg707);
break;
case 30: var anf_array_val713 = $ans643;
var anf_arg715 = [anf_array_val708,anf_array_val709,anf_array_val710,anf_array_val711,anf_array_val712,anf_array_val713];
$step640 = 31;
$al644 = L[281];
$field716 = R.getColonFieldLoc(anf_method_obj714,"make",L[281]);
if(R.isMethod($field716)) {
$ans643 = $field716.full_meth(anf_method_obj714,anf_arg715);
} else {
if(!(R.isFunction($field716))) {
R.ffi.throwNonFunApp(L[281],$field716);
}
$ans643 = $field716.app(anf_arg715);
}
break;
case 31: ++R.GAS;
return $ans643;
default: throw "No case numbered " + $step640 + " in $temp_lam641";
}
}
} catch($e718) {
if(R.isCont($e718) && ($step640 !== 31)) {
$e718.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al644,$temp_lam641,$step640,[caller$loc642],[anf_array_val712,anf_array_val702,anf_array_val701,anf_method_obj704,anf_array_val711,anf_array_val710,anf_method_obj694,anf_array_val709,anf_array_val708,anf_array_val686,anf_array_val685,anf_method_obj688,anf_method_obj714,anf_array_val675,anf_array_val667,anf_array_val666,anf_method_obj669,anf_array_val674,anf_array_val673,anf_array_val655,anf_array_val654,anf_method_obj657,anf_method_obj677]);
}
if(R.isPyretException($e718)) {
$e718.pyretStack.push($al644);
}
throw $e718;
}
};
var anf_arg749 = R.makeFunction($temp_lam641);
var anf_method_obj746 = G(ED12,"error",L[301]);
var anf_method_obj727 = G(ED12,"para",L[302]);
$step628 = 14;
$al632 = L[303];
$field719 = R.getColonFieldLoc(ED12,"text",L[303]);
if(R.isMethod($field719)) {
$ans631 = $field719.full_meth(ED12,("Expected to get"));
} else {
if(!(R.isFunction($field719))) {
R.ffi.throwNonFunApp(L[303],$field719);
}
$ans631 = $field719.app(("Expected to get"));
}
break;
case 14: var anf_array_val724 = $ans631;
var anf_arg720 = G(self630,"expected-arity",L[304]);
$step628 = 15;
$al632 = L[305];
$field721 = R.getColonFieldLoc(ED12,"embed",L[305]);
if(R.isMethod($field721)) {
$ans631 = $field721.full_meth(ED12,anf_arg720);
} else {
if(!(R.isFunction($field721))) {
R.ffi.throwNonFunApp(L[305],$field721);
}
$ans631 = $field721.app(anf_arg720);
}
break;
case 15: var anf_array_val725 = $ans631;
$step628 = 16;
$al632 = L[317];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al632,_plus1);
}
$ans631 = _plus1.app(exp$arg$str651,(" at"));
break;
case 16: var anf_arg722 = $ans631;
$step628 = 17;
$al632 = L[306];
$field723 = R.getColonFieldLoc(ED12,"text",L[306]);
if(R.isMethod($field723)) {
$ans631 = $field723.full_meth(ED12,anf_arg722);
} else {
if(!(R.isFunction($field723))) {
R.ffi.throwNonFunApp(L[306],$field723);
}
$ans631 = $field723.app(anf_arg722);
}
break;
case 17: var anf_array_val726 = $ans631;
var anf_arg728 = [anf_array_val724,anf_array_val725,anf_array_val726];
$step628 = 18;
$al632 = L[302];
$field729 = R.getColonFieldLoc(anf_method_obj727,"make",L[302]);
if(R.isMethod($field729)) {
$ans631 = $field729.full_meth(anf_method_obj727,anf_arg728);
} else {
if(!(R.isFunction($field729))) {
R.ffi.throwNonFunApp(L[302],$field729);
}
$ans631 = $field729.app(anf_arg728);
}
break;
case 18: var anf_array_val742 = $ans631;
var anf_arg730 = G(self630,"fun-loc",L[307]);
$step628 = 19;
$al632 = L[316];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al632,draw$and$highlight33.$var);
}
$ans631 = draw$and$highlight33.$var.app(anf_arg730);
break;
case 19: var anf_array_val743 = $ans631;
var anf_method_obj738 = G(ED12,"para",L[308]);
$step628 = 20;
$al632 = L[315];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al632,_plus1);
}
$ans631 = _plus1.app(("but got "),this$str660);
break;
case 20: var anf_arg731 = $ans631;
$step628 = 21;
$al632 = L[309];
$field732 = R.getColonFieldLoc(ED12,"text",L[309]);
if(R.isMethod($field732)) {
$ans631 = $field732.full_meth(ED12,anf_arg731);
} else {
if(!(R.isFunction($field732))) {
R.ffi.throwNonFunApp(L[309],$field732);
}
$ans631 = $field732.app(anf_arg731);
}
break;
case 21: var anf_array_val735 = $ans631;
$step628 = 22;
$al632 = L[310];
$field733 = R.getColonFieldLoc(ED12,"embed",L[310]);
if(R.isMethod($field733)) {
$ans631 = $field733.full_meth(ED12,num$args635);
} else {
if(!(R.isFunction($field733))) {
R.ffi.throwNonFunApp(L[310],$field733);
}
$ans631 = $field733.app(num$args635);
}
break;
case 22: var anf_array_val736 = $ans631;
$step628 = 23;
$al632 = L[311];
$field734 = R.getColonFieldLoc(ED12,"text",L[311]);
if(R.isMethod($field734)) {
$ans631 = $field734.full_meth(ED12,arg$str664);
} else {
if(!(R.isFunction($field734))) {
R.ffi.throwNonFunApp(L[311],$field734);
}
$ans631 = $field734.app(arg$str664);
}
break;
case 23: var anf_array_val737 = $ans631;
var anf_arg739 = [anf_array_val735,anf_array_val736,anf_array_val737];
$step628 = 24;
$al632 = L[308];
$field740 = R.getColonFieldLoc(anf_method_obj738,"make",L[308]);
if(R.isMethod($field740)) {
$ans631 = $field740.full_meth(anf_method_obj738,anf_arg739);
} else {
if(!(R.isFunction($field740))) {
R.ffi.throwNonFunApp(L[308],$field740);
}
$ans631 = $field740.app(anf_arg739);
}
break;
case 24: var anf_array_val744 = $ans631;
var anf_arg741 = G(self630,"args",L[312]);
$step628 = 25;
$al632 = L[314];
if(!(R.isFunction(vert$list$values56.$var))) {
R.ffi.throwNonFunApp($al632,vert$list$values56.$var);
}
$ans631 = vert$list$values56.$var.app(anf_arg741);
break;
case 25: var anf_array_val745 = $ans631;
var anf_arg747 = [anf_array_val742,anf_array_val743,anf_array_val744,anf_array_val745];
$step628 = 26;
$al632 = L[301];
$field748 = R.getColonFieldLoc(anf_method_obj746,"make",L[301]);
if(R.isMethod($field748)) {
$ans631 = $field748.full_meth(anf_method_obj746,anf_arg747);
} else {
if(!(R.isFunction($field748))) {
R.ffi.throwNonFunApp(L[301],$field748);
}
$ans631 = $field748.app(anf_arg747);
}
break;
case 26: var anf_arg750 = $ans631;
$step628 = 27;
$al632 = L[313];
$field751 = R.getColonFieldLoc(ED12,"maybe-stack-loc",L[313]);
if(R.isMethod($field751)) {
$ans631 = $field751.full_meth(ED12,(0),(true),anf_arg749,anf_arg750);
} else {
if(!(R.isFunction($field751))) {
R.ffi.throwNonFunApp(L[313],$field751);
}
$ans631 = $field751.app((0),(true),anf_arg749,anf_arg750);
}
break;
case 27: ++R.GAS;
return $ans631;
default: throw "No case numbered " + $step628 + " in $temp_full629";
}
}
} catch($e755) {
if(R.isCont($e755) && ($step628 !== 27)) {
$e755.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al632,$temp_full629,$step628,[self630],[anf_array_val744,anf_array_val736,anf_array_val735,anf_method_obj738,anf_array_val743,anf_array_val742,anf_array_val725,anf_array_val724,anf_method_obj727,anf_method_obj746,anf_arg749,exp$arg$str651,arg$str664,this$str660,num$args635]);
}
if(R.isPyretException($e755)) {
$e755.pyretStack.push($al632);
}
throw $e755;
}
};
var anf_variant_member1183 = R.makeMethod0($temp_full629);
var $temp_full757 = function($self758) {
var $step756 = 0;
var $ans759 = D;
var $al760 = L[327];
try {
if(R.isActivationRecord($self758)) {
$step756 = $self758.step;
$al760 = $self758.from;
$ans759 = $self758.ans;
self758 = $self758.args[0];
anf_array_val772 = $self758.vars[0];
anf_array_val765 = $self758.vars[1];
anf_array_val764 = $self758.vars[2];
anf_method_obj767 = $self758.vars[3];
anf_method_obj774 = $self758.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[327],1,$t);
}
var self758 = $self758;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step756) {
case 0: var anf_method_obj774 = G(ED12,"error",L[319]);
var anf_method_obj767 = G(ED12,"para",L[320]);
$step756 = 1;
$al760 = L[321];
$field761 = R.getColonFieldLoc(ED12,"text",L[321]);
if(R.isMethod($field761)) {
$ans759 = $field761.full_meth(ED12,("Expected a function in the application expression at"));
} else {
if(!(R.isFunction($field761))) {
R.ffi.throwNonFunApp(L[321],$field761);
}
$ans759 = $field761.app(("Expected a function in the application expression at"));
}
break;
case 1: var anf_array_val764 = $ans759;
var anf_arg762 = G(self758,"loc",L[322]);
$step756 = 2;
$al760 = L[326];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al760,draw$and$highlight33.$var);
}
$ans759 = draw$and$highlight33.$var.app(anf_arg762);
break;
case 2: var anf_array_val765 = $ans759;
$step756 = 3;
$al760 = L[323];
$field763 = R.getColonFieldLoc(ED12,"text",L[323]);
if(R.isMethod($field763)) {
$ans759 = $field763.full_meth(ED12,(" but got:"));
} else {
if(!(R.isFunction($field763))) {
R.ffi.throwNonFunApp(L[323],$field763);
}
$ans759 = $field763.app((" but got:"));
}
break;
case 3: var anf_array_val766 = $ans759;
var anf_arg768 = [anf_array_val764,anf_array_val765,anf_array_val766];
$step756 = 4;
$al760 = L[320];
$field769 = R.getColonFieldLoc(anf_method_obj767,"make",L[320]);
if(R.isMethod($field769)) {
$ans759 = $field769.full_meth(anf_method_obj767,anf_arg768);
} else {
if(!(R.isFunction($field769))) {
R.ffi.throwNonFunApp(L[320],$field769);
}
$ans759 = $field769.app(anf_arg768);
}
break;
case 4: var anf_array_val772 = $ans759;
var anf_arg770 = G(self758,"non-fun-val",L[324]);
$step756 = 5;
$al760 = L[325];
$field771 = R.getColonFieldLoc(ED12,"embed",L[325]);
if(R.isMethod($field771)) {
$ans759 = $field771.full_meth(ED12,anf_arg770);
} else {
if(!(R.isFunction($field771))) {
R.ffi.throwNonFunApp(L[325],$field771);
}
$ans759 = $field771.app(anf_arg770);
}
break;
case 5: var anf_array_val773 = $ans759;
var anf_arg775 = [anf_array_val772,anf_array_val773];
$step756 = 6;
$al760 = L[319];
$field776 = R.getColonFieldLoc(anf_method_obj774,"make",L[319]);
if(R.isMethod($field776)) {
$ans759 = $field776.full_meth(anf_method_obj774,anf_arg775);
} else {
if(!(R.isFunction($field776))) {
R.ffi.throwNonFunApp(L[319],$field776);
}
$ans759 = $field776.app(anf_arg775);
}
break;
case 6: ++R.GAS;
return $ans759;
default: throw "No case numbered " + $step756 + " in $temp_full757";
}
}
} catch($e777) {
if(R.isCont($e777) && ($step756 !== 6)) {
$e777.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al760,$temp_full757,$step756,[self758],[anf_array_val772,anf_array_val765,anf_array_val764,anf_method_obj767,anf_method_obj774]);
}
if(R.isPyretException($e777)) {
$e777.pyretStack.push($al760);
}
throw $e777;
}
};
var anf_variant_member1195 = R.makeMethod0($temp_full757);
var $temp_full779 = function($self780) {
var $step778 = 0;
var $ans781 = D;
var $al782 = L[331];
try {
if(R.isActivationRecord($self780)) {
$step778 = $self780.step;
$al782 = $self780.from;
$ans781 = $self780.ans;
self780 = $self780.args[0];
anf_method_obj786 = $self780.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[331],1,$t);
}
var self780 = $self780;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step778) {
case 0: var anf_method_obj786 = G(ED12,"error",L[328]);
$step778 = 1;
$al782 = L[330];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al782,tostring4);
}
$ans781 = tostring4.app(self780);
break;
case 1: var anf_arg783 = $ans781;
$step778 = 2;
$al782 = L[329];
$field784 = R.getColonFieldLoc(ED12,"text",L[329]);
if(R.isMethod($field784)) {
$ans781 = $field784.full_meth(ED12,anf_arg783);
} else {
if(!(R.isFunction($field784))) {
R.ffi.throwNonFunApp(L[329],$field784);
}
$ans781 = $field784.app(anf_arg783);
}
break;
case 2: var anf_array_val785 = $ans781;
var anf_arg787 = [anf_array_val785];
$step778 = 3;
$al782 = L[328];
$field788 = R.getColonFieldLoc(anf_method_obj786,"make",L[328]);
if(R.isMethod($field788)) {
$ans781 = $field788.full_meth(anf_method_obj786,anf_arg787);
} else {
if(!(R.isFunction($field788))) {
R.ffi.throwNonFunApp(L[328],$field788);
}
$ans781 = $field788.app(anf_arg787);
}
break;
case 3: ++R.GAS;
return $ans781;
default: throw "No case numbered " + $step778 + " in $temp_full779";
}
}
} catch($e789) {
if(R.isCont($e789) && ($step778 !== 3)) {
$e789.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al782,$temp_full779,$step778,[self780],[anf_method_obj786]);
}
if(R.isPyretException($e789)) {
$e789.pyretStack.push($al782);
}
throw $e789;
}
};
var anf_variant_member1206 = R.makeMethod0($temp_full779);
var $temp_full791 = function($self792) {
var $step790 = 0;
var $ans793 = D;
var $al794 = L[342];
try {
if(R.isActivationRecord($self792)) {
$step790 = $self792.step;
$al794 = $self792.from;
$ans793 = $self792.ans;
self792 = $self792.args[0];
anf_array_val806 = $self792.vars[0];
anf_array_val805 = $self792.vars[1];
anf_array_val804 = $self792.vars[2];
anf_array_val803 = $self792.vars[3];
anf_method_obj808 = $self792.vars[4];
anf_method_obj812 = $self792.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[342],1,$t);
}
var self792 = $self792;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step790) {
case 0: var anf_method_obj812 = G(ED12,"error",L[332]);
var anf_method_obj808 = G(ED12,"para",L[333]);
$step790 = 1;
$al794 = L[334];
$field795 = R.getColonFieldLoc(ED12,"text",L[334]);
if(R.isMethod($field795)) {
$ans793 = $field795.full_meth(ED12,("The name"));
} else {
if(!(R.isFunction($field795))) {
R.ffi.throwNonFunApp(L[334],$field795);
}
$ans793 = $field795.app(("The name"));
}
break;
case 1: var anf_array_val803 = $ans793;
var anf_arg796 = G(self792,"name",L[335]);
$step790 = 2;
$al794 = L[336];
$field797 = R.getColonFieldLoc(ED12,"text",L[336]);
if(R.isMethod($field797)) {
$ans793 = $field797.full_meth(ED12,anf_arg796);
} else {
if(!(R.isFunction($field797))) {
R.ffi.throwNonFunApp(L[336],$field797);
}
$ans793 = $field797.app(anf_arg796);
}
break;
case 2: var anf_arg798 = $ans793;
$step790 = 3;
$al794 = L[337];
$field799 = R.getColonFieldLoc(ED12,"code",L[337]);
if(R.isMethod($field799)) {
$ans793 = $field799.full_meth(ED12,anf_arg798);
} else {
if(!(R.isFunction($field799))) {
R.ffi.throwNonFunApp(L[337],$field799);
}
$ans793 = $field799.app(anf_arg798);
}
break;
case 3: var anf_array_val804 = $ans793;
$step790 = 4;
$al794 = L[338];
$field800 = R.getColonFieldLoc(ED12,"text",L[338]);
if(R.isMethod($field800)) {
$ans793 = $field800.full_meth(ED12,("was used at"));
} else {
if(!(R.isFunction($field800))) {
R.ffi.throwNonFunApp(L[338],$field800);
}
$ans793 = $field800.app(("was used at"));
}
break;
case 4: var anf_array_val805 = $ans793;
var anf_arg801 = G(self792,"loc",L[339]);
$step790 = 5;
$al794 = L[341];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al794,draw$and$highlight33.$var);
}
$ans793 = draw$and$highlight33.$var.app(anf_arg801);
break;
case 5: var anf_array_val806 = $ans793;
$step790 = 6;
$al794 = L[340];
$field802 = R.getColonFieldLoc(ED12,"text",L[340]);
if(R.isMethod($field802)) {
$ans793 = $field802.full_meth(ED12,("before it was defined."));
} else {
if(!(R.isFunction($field802))) {
R.ffi.throwNonFunApp(L[340],$field802);
}
$ans793 = $field802.app(("before it was defined."));
}
break;
case 6: var anf_array_val807 = $ans793;
var anf_arg809 = [anf_array_val803,anf_array_val804,anf_array_val805,anf_array_val806,anf_array_val807];
$step790 = 7;
$al794 = L[333];
$field810 = R.getColonFieldLoc(anf_method_obj808,"make",L[333]);
if(R.isMethod($field810)) {
$ans793 = $field810.full_meth(anf_method_obj808,anf_arg809);
} else {
if(!(R.isFunction($field810))) {
R.ffi.throwNonFunApp(L[333],$field810);
}
$ans793 = $field810.app(anf_arg809);
}
break;
case 7: var anf_array_val811 = $ans793;
var anf_arg813 = [anf_array_val811];
$step790 = 8;
$al794 = L[332];
$field814 = R.getColonFieldLoc(anf_method_obj812,"make",L[332]);
if(R.isMethod($field814)) {
$ans793 = $field814.full_meth(anf_method_obj812,anf_arg813);
} else {
if(!(R.isFunction($field814))) {
R.ffi.throwNonFunApp(L[332],$field814);
}
$ans793 = $field814.app(anf_arg813);
}
break;
case 8: ++R.GAS;
return $ans793;
default: throw "No case numbered " + $step790 + " in $temp_full791";
}
}
} catch($e815) {
if(R.isCont($e815) && ($step790 !== 8)) {
$e815.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al794,$temp_full791,$step790,[self792],[anf_array_val806,anf_array_val805,anf_array_val804,anf_array_val803,anf_method_obj808,anf_method_obj812]);
}
if(R.isPyretException($e815)) {
$e815.pyretStack.push($al794);
}
throw $e815;
}
};
var anf_variant_member1220 = R.makeMethod0($temp_full791);
var $temp_full817 = function($self818) {
var $step816 = 0;
var $ans819 = D;
var $al820 = L[354];
try {
if(R.isActivationRecord($self818)) {
$step816 = $self818.step;
$al820 = $self818.from;
$ans819 = $self818.ans;
self818 = $self818.args[0];
anf_array_val836 = $self818.vars[0];
anf_method_obj828 = $self818.vars[1];
anf_method_obj838 = $self818.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[354],1,$t);
}
var self818 = $self818;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step816) {
case 0: var anf_method_obj838 = G(ED12,"error",L[343]);
var anf_method_obj828 = G(ED12,"para",L[344]);
var anf_method_obj821 = G(self818,"names",L[345]);
$step816 = 1;
$al820 = L[346];
$field822 = R.getColonFieldLoc(anf_method_obj821,"length",L[346]);
if(R.isMethod($field822)) {
$ans819 = $field822.full_meth(anf_method_obj821);
} else {
if(!(R.isFunction($field822))) {
R.ffi.throwNonFunApp(L[346],$field822);
}
$ans819 = $field822.app();
}
break;
case 1: var anf_arg823 = $ans819;
$step816 = 2;
$al820 = L[347];
if(!(R.isFunction(equal$always3))) {
R.ffi.throwNonFunApp($al820,equal$always3);
}
$ans819 = equal$always3.app(anf_arg823,(1));
break;
case 2: var anf_arg824 = $ans819;
$al820 = L[347];
var anf_if841 = R.checkWrapBoolean(anf_arg824);
if(R.isPyretTrue(anf_if841)) {
$step816 = 3;
} else {
$step816 = 4;
}
break;
case 3: $step816 = 5;
$al820 = L[348];
$field825 = R.getColonFieldLoc(ED12,"text",L[348]);
if(R.isMethod($field825)) {
$ans819 = $field825.full_meth(ED12,("The following module failed to load:"));
} else {
if(!(R.isFunction($field825))) {
R.ffi.throwNonFunApp(L[348],$field825);
}
$ans819 = $field825.app(("The following module failed to load:"));
}
break;
case 4: $step816 = 5;
$al820 = L[349];
$field826 = R.getColonFieldLoc(ED12,"text",L[349]);
if(R.isMethod($field826)) {
$ans819 = $field826.full_meth(ED12,("The following modules failed to load:"));
} else {
if(!(R.isFunction($field826))) {
R.ffi.throwNonFunApp(L[349],$field826);
}
$ans819 = $field826.app(("The following modules failed to load:"));
}
break;
case 5: var anf_array_val827 = $ans819;
var anf_arg829 = [anf_array_val827];
$step816 = 6;
$al820 = L[344];
$field830 = R.getColonFieldLoc(anf_method_obj828,"make",L[344]);
if(R.isMethod($field830)) {
$ans819 = $field830.full_meth(anf_method_obj828,anf_arg829);
} else {
if(!(R.isFunction($field830))) {
R.ffi.throwNonFunApp(L[344],$field830);
}
$ans819 = $field830.app(anf_arg829);
}
break;
case 6: var anf_array_val836 = $ans819;
var anf_method_obj831 = G(self818,"names",L[350]);
var anf_arg832 = G(ED12,"text",L[351]);
$step816 = 7;
$al820 = L[352];
$field833 = R.getColonFieldLoc(anf_method_obj831,"map",L[352]);
if(R.isMethod($field833)) {
$ans819 = $field833.full_meth(anf_method_obj831,anf_arg832);
} else {
if(!(R.isFunction($field833))) {
R.ffi.throwNonFunApp(L[352],$field833);
}
$ans819 = $field833.app(anf_arg832);
}
break;
case 7: var anf_arg834 = $ans819;
$step816 = 8;
$al820 = L[353];
$field835 = R.getColonFieldLoc(ED12,"h-sequence",L[353]);
if(R.isMethod($field835)) {
$ans819 = $field835.full_meth(ED12,anf_arg834,(", "));
} else {
if(!(R.isFunction($field835))) {
R.ffi.throwNonFunApp(L[353],$field835);
}
$ans819 = $field835.app(anf_arg834,(", "));
}
break;
case 8: var anf_array_val837 = $ans819;
var anf_arg839 = [anf_array_val836,anf_array_val837];
$step816 = 9;
$al820 = L[343];
$field840 = R.getColonFieldLoc(anf_method_obj838,"make",L[343]);
if(R.isMethod($field840)) {
$ans819 = $field840.full_meth(anf_method_obj838,anf_arg839);
} else {
if(!(R.isFunction($field840))) {
R.ffi.throwNonFunApp(L[343],$field840);
}
$ans819 = $field840.app(anf_arg839);
}
break;
case 9: ++R.GAS;
return $ans819;
default: throw "No case numbered " + $step816 + " in $temp_full817";
}
}
} catch($e842) {
if(R.isCont($e842) && ($step816 !== 9)) {
$e842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al820,$temp_full817,$step816,[self818],[anf_array_val836,anf_method_obj828,anf_method_obj838]);
}
if(R.isPyretException($e842)) {
$e842.pyretStack.push($al820);
}
throw $e842;
}
};
var anf_variant_member1231 = R.makeMethod0($temp_full817);
var $temp_full844 = function($self845) {
var $step843 = 0;
var $ans846 = D;
var $al847 = L[377];
try {
if(R.isActivationRecord($self845)) {
$step843 = $self845.step;
$al847 = $self845.from;
$ans846 = $self845.ans;
self845 = $self845.args[0];
anf_array_val886 = $self845.vars[0];
anf_array_val885 = $self845.vars[1];
anf_array_val884 = $self845.vars[2];
anf_method_obj888 = $self845.vars[3];
anf_method_obj892 = $self845.vars[4];
anf_arg895 = $self845.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[377],1,$t);
}
var self845 = $self845;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step843) {
case 0: var $temp_lam849 = function($loc850) {
var $step848 = 0;
var $ans851 = D;
var $al852 = L[366];
try {
if(R.isActivationRecord($loc850)) {
$step848 = $loc850.step;
$al852 = $loc850.from;
$ans851 = $loc850.ans;
loc850 = $loc850.args[0];
anf_array_val866 = $loc850.vars[0];
anf_array_val865 = $loc850.vars[1];
anf_array_val864 = $loc850.vars[2];
anf_array_val863 = $loc850.vars[3];
anf_array_val862 = $loc850.vars[4];
anf_method_obj868 = $loc850.vars[5];
anf_method_obj872 = $loc850.vars[6];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[366],1,$t);
}
var loc850 = $loc850;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step848) {
case 0: var anf_method_obj872 = G(ED12,"error",L[355]);
var anf_method_obj868 = G(ED12,"para",L[356]);
$step848 = 1;
$al852 = L[357];
$field853 = R.getColonFieldLoc(ED12,"text",L[357]);
if(R.isMethod($field853)) {
$ans851 = $field853.full_meth(ED12,("Invalid array index"));
} else {
if(!(R.isFunction($field853))) {
R.ffi.throwNonFunApp(L[357],$field853);
}
$ans851 = $field853.app(("Invalid array index"));
}
break;
case 1: var anf_array_val862 = $ans851;
var anf_arg854 = G(self845,"index",L[358]);
$step848 = 2;
$al852 = L[359];
$field855 = R.getColonFieldLoc(ED12,"embed",L[359]);
if(R.isMethod($field855)) {
$ans851 = $field855.full_meth(ED12,anf_arg854);
} else {
if(!(R.isFunction($field855))) {
R.ffi.throwNonFunApp(L[359],$field855);
}
$ans851 = $field855.app(anf_arg854);
}
break;
case 2: var anf_arg856 = $ans851;
$step848 = 3;
$al852 = L[360];
$field857 = R.getColonFieldLoc(ED12,"code",L[360]);
if(R.isMethod($field857)) {
$ans851 = $field857.full_meth(ED12,anf_arg856);
} else {
if(!(R.isFunction($field857))) {
R.ffi.throwNonFunApp(L[360],$field857);
}
$ans851 = $field857.app(anf_arg856);
}
break;
case 3: var anf_array_val863 = $ans851;
$step848 = 4;
$al852 = L[361];
$field858 = R.getColonFieldLoc(ED12,"text",L[361]);
if(R.isMethod($field858)) {
$ans851 = $field858.full_meth(ED12,("around the function call at"));
} else {
if(!(R.isFunction($field858))) {
R.ffi.throwNonFunApp(L[361],$field858);
}
$ans851 = $field858.app(("around the function call at"));
}
break;
case 4: var anf_array_val864 = $ans851;
$step848 = 5;
$al852 = L[365];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al852,draw$and$highlight33.$var);
}
$ans851 = draw$and$highlight33.$var.app(loc850);
break;
case 5: var anf_array_val865 = $ans851;
$step848 = 6;
$al852 = L[362];
$field859 = R.getColonFieldLoc(ED12,"text",L[362]);
if(R.isMethod($field859)) {
$ans851 = $field859.full_meth(ED12,("because:"));
} else {
if(!(R.isFunction($field859))) {
R.ffi.throwNonFunApp(L[362],$field859);
}
$ans851 = $field859.app(("because:"));
}
break;
case 6: var anf_array_val866 = $ans851;
var anf_arg860 = G(self845,"reason",L[363]);
$step848 = 7;
$al852 = L[364];
$field861 = R.getColonFieldLoc(ED12,"text",L[364]);
if(R.isMethod($field861)) {
$ans851 = $field861.full_meth(ED12,anf_arg860);
} else {
if(!(R.isFunction($field861))) {
R.ffi.throwNonFunApp(L[364],$field861);
}
$ans851 = $field861.app(anf_arg860);
}
break;
case 7: var anf_array_val867 = $ans851;
var anf_arg869 = [anf_array_val862,anf_array_val863,anf_array_val864,anf_array_val865,anf_array_val866,anf_array_val867];
$step848 = 8;
$al852 = L[356];
$field870 = R.getColonFieldLoc(anf_method_obj868,"make",L[356]);
if(R.isMethod($field870)) {
$ans851 = $field870.full_meth(anf_method_obj868,anf_arg869);
} else {
if(!(R.isFunction($field870))) {
R.ffi.throwNonFunApp(L[356],$field870);
}
$ans851 = $field870.app(anf_arg869);
}
break;
case 8: var anf_array_val871 = $ans851;
var anf_arg873 = [anf_array_val871];
$step848 = 9;
$al852 = L[355];
$field874 = R.getColonFieldLoc(anf_method_obj872,"make",L[355]);
if(R.isMethod($field874)) {
$ans851 = $field874.full_meth(anf_method_obj872,anf_arg873);
} else {
if(!(R.isFunction($field874))) {
R.ffi.throwNonFunApp(L[355],$field874);
}
$ans851 = $field874.app(anf_arg873);
}
break;
case 9: ++R.GAS;
return $ans851;
default: throw "No case numbered " + $step848 + " in $temp_lam849";
}
}
} catch($e875) {
if(R.isCont($e875) && ($step848 !== 9)) {
$e875.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al852,$temp_lam849,$step848,[loc850],[anf_array_val866,anf_array_val865,anf_array_val864,anf_array_val863,anf_array_val862,anf_method_obj868,anf_method_obj872]);
}
if(R.isPyretException($e875)) {
$e875.pyretStack.push($al852);
}
throw $e875;
}
};
var anf_arg895 = R.makeFunction($temp_lam849);
var anf_method_obj892 = G(ED12,"error",L[367]);
var anf_method_obj888 = G(ED12,"para",L[368]);
$step843 = 1;
$al847 = L[369];
$field876 = R.getColonFieldLoc(ED12,"text",L[369]);
if(R.isMethod($field876)) {
$ans846 = $field876.full_meth(ED12,("Invalid array index"));
} else {
if(!(R.isFunction($field876))) {
R.ffi.throwNonFunApp(L[369],$field876);
}
$ans846 = $field876.app(("Invalid array index"));
}
break;
case 1: var anf_array_val884 = $ans846;
var anf_arg877 = G(self845,"index",L[370]);
$step843 = 2;
$al847 = L[371];
$field878 = R.getColonFieldLoc(ED12,"embed",L[371]);
if(R.isMethod($field878)) {
$ans846 = $field878.full_meth(ED12,anf_arg877);
} else {
if(!(R.isFunction($field878))) {
R.ffi.throwNonFunApp(L[371],$field878);
}
$ans846 = $field878.app(anf_arg877);
}
break;
case 2: var anf_arg879 = $ans846;
$step843 = 3;
$al847 = L[372];
$field880 = R.getColonFieldLoc(ED12,"code",L[372]);
if(R.isMethod($field880)) {
$ans846 = $field880.full_meth(ED12,anf_arg879);
} else {
if(!(R.isFunction($field880))) {
R.ffi.throwNonFunApp(L[372],$field880);
}
$ans846 = $field880.app(anf_arg879);
}
break;
case 3: var anf_array_val885 = $ans846;
$step843 = 4;
$al847 = L[373];
$field881 = R.getColonFieldLoc(ED12,"text",L[373]);
if(R.isMethod($field881)) {
$ans846 = $field881.full_meth(ED12,("because:"));
} else {
if(!(R.isFunction($field881))) {
R.ffi.throwNonFunApp(L[373],$field881);
}
$ans846 = $field881.app(("because:"));
}
break;
case 4: var anf_array_val886 = $ans846;
var anf_arg882 = G(self845,"reason",L[374]);
$step843 = 5;
$al847 = L[375];
$field883 = R.getColonFieldLoc(ED12,"text",L[375]);
if(R.isMethod($field883)) {
$ans846 = $field883.full_meth(ED12,anf_arg882);
} else {
if(!(R.isFunction($field883))) {
R.ffi.throwNonFunApp(L[375],$field883);
}
$ans846 = $field883.app(anf_arg882);
}
break;
case 5: var anf_array_val887 = $ans846;
var anf_arg889 = [anf_array_val884,anf_array_val885,anf_array_val886,anf_array_val887];
$step843 = 6;
$al847 = L[368];
$field890 = R.getColonFieldLoc(anf_method_obj888,"make",L[368]);
if(R.isMethod($field890)) {
$ans846 = $field890.full_meth(anf_method_obj888,anf_arg889);
} else {
if(!(R.isFunction($field890))) {
R.ffi.throwNonFunApp(L[368],$field890);
}
$ans846 = $field890.app(anf_arg889);
}
break;
case 6: var anf_array_val891 = $ans846;
var anf_arg893 = [anf_array_val891];
$step843 = 7;
$al847 = L[367];
$field894 = R.getColonFieldLoc(anf_method_obj892,"make",L[367]);
if(R.isMethod($field894)) {
$ans846 = $field894.full_meth(anf_method_obj892,anf_arg893);
} else {
if(!(R.isFunction($field894))) {
R.ffi.throwNonFunApp(L[367],$field894);
}
$ans846 = $field894.app(anf_arg893);
}
break;
case 7: var anf_arg896 = $ans846;
$step843 = 8;
$al847 = L[376];
$field897 = R.getColonFieldLoc(ED12,"maybe-stack-loc",L[376]);
if(R.isMethod($field897)) {
$ans846 = $field897.full_meth(ED12,(0),(true),anf_arg895,anf_arg896);
} else {
if(!(R.isFunction($field897))) {
R.ffi.throwNonFunApp(L[376],$field897);
}
$ans846 = $field897.app((0),(true),anf_arg895,anf_arg896);
}
break;
case 8: ++R.GAS;
return $ans846;
default: throw "No case numbered " + $step843 + " in $temp_full844";
}
}
} catch($e898) {
if(R.isCont($e898) && ($step843 !== 8)) {
$e898.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al847,$temp_full844,$step843,[self845],[anf_array_val886,anf_array_val885,anf_array_val884,anf_method_obj888,anf_method_obj892,anf_arg895]);
}
if(R.isPyretException($e898)) {
$e898.pyretStack.push($al847);
}
throw $e898;
}
};
var anf_variant_member1241 = R.makeMethod0($temp_full844);
var $temp_full900 = function($self901) {
var $step899 = 0;
var $ans902 = D;
var $al903 = L[417];
try {
if(R.isActivationRecord($self901)) {
$step899 = $self901.step;
$al903 = $self901.from;
$ans902 = $self901.ans;
self901 = $self901.args[0];
anf_method_obj973 = $self901.vars[0];
anf_array_val977 = $self901.vars[1];
anf_method_obj967 = $self901.vars[2];
anf_array_val976 = $self901.vars[3];
anf_method_obj961 = $self901.vars[4];
anf_method_obj979 = $self901.vars[5];
within$error949 = $self901.vars[6];
value2906 = $self901.vars[7];
value1904 = $self901.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[417],1,$t);
}
var self901 = $self901;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step899) {
case 0: var value1904 = G(self901,"value1",L[378]);
var value2906 = G(self901,"value2",L[379]);
$step899 = 1;
$al903 = L[416];
if(!(R.isFunction(is$number5))) {
R.ffi.throwNonFunApp($al903,is$number5);
}
$ans902 = is$number5.app(value1904);
break;
case 1: var anf_arg905 = $ans902;
$al903 = L[380];
var anf_if983 = R.checkWrapBoolean(anf_arg905);
if(R.isPyretTrue(anf_if983)) {
$step899 = 2;
} else {
$step899 = 4;
}
break;
case 2: $step899 = 3;
$al903 = L[381];
if(!(R.isFunction(is$number5))) {
R.ffi.throwNonFunApp($al903,is$number5);
}
$ans902 = is$number5.app(value2906);
break;
case 3: var anf_arg907 = $ans902;
$step899 = 5;
$al903 = L[380];
$ans902 = R.checkWrapBoolean(anf_arg907);
break;
case 4: $step899 = 5;
$ans902 = (false);
break;
case 5: var anf_arg908 = $ans902;
$al903 = L[382];
var anf_if982 = R.checkWrapBoolean(anf_arg908);
if(R.isPyretTrue(anf_if982)) {
$step899 = 6;
} else {
$step899 = 20;
}
break;
case 6: var within$error949 = {"$var":D};
var $temp_lam910 = function($message911) {
var $step909 = 0;
var $ans912 = D;
var $al913 = L[395];
try {
if(R.isActivationRecord($message911)) {
$step909 = $message911.step;
$al913 = $message911.from;
$ans912 = $message911.ans;
message911 = $message911.args[0];
anf_array_val935 = $message911.vars[0];
anf_array_val934 = $message911.vars[1];
anf_method_obj937 = $message911.vars[2];
anf_array_val942 = $message911.vars[3];
anf_method_obj926 = $message911.vars[4];
anf_array_val941 = $message911.vars[5];
anf_method_obj921 = $message911.vars[6];
anf_array_val940 = $message911.vars[7];
anf_method_obj916 = $message911.vars[8];
anf_method_obj944 = $message911.vars[9];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[395],1,$t);
}
var message911 = $message911;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step909) {
case 0: var anf_method_obj944 = G(ED12,"error",L[383]);
var anf_method_obj916 = G(ED12,"para",L[384]);
$step909 = 1;
$al913 = L[385];
$field914 = R.getColonFieldLoc(ED12,"text",L[385]);
if(R.isMethod($field914)) {
$ans912 = $field914.full_meth(ED12,message911);
} else {
if(!(R.isFunction($field914))) {
R.ffi.throwNonFunApp(L[385],$field914);
}
$ans912 = $field914.app(message911);
}
break;
case 1: var anf_array_val915 = $ans912;
var anf_arg917 = [anf_array_val915];
$step909 = 2;
$al913 = L[384];
$field918 = R.getColonFieldLoc(anf_method_obj916,"make",L[384]);
if(R.isMethod($field918)) {
$ans912 = $field918.full_meth(anf_method_obj916,anf_arg917);
} else {
if(!(R.isFunction($field918))) {
R.ffi.throwNonFunApp(L[384],$field918);
}
$ans912 = $field918.app(anf_arg917);
}
break;
case 2: var anf_array_val940 = $ans912;
var anf_method_obj921 = G(ED12,"para",L[386]);
$step909 = 3;
$al913 = L[387];
$field919 = R.getColonFieldLoc(ED12,"embed",L[387]);
if(R.isMethod($field919)) {
$ans912 = $field919.full_meth(ED12,value1904);
} else {
if(!(R.isFunction($field919))) {
R.ffi.throwNonFunApp(L[387],$field919);
}
$ans912 = $field919.app(value1904);
}
break;
case 3: var anf_array_val920 = $ans912;
var anf_arg922 = [anf_array_val920];
$step909 = 4;
$al913 = L[386];
$field923 = R.getColonFieldLoc(anf_method_obj921,"make",L[386]);
if(R.isMethod($field923)) {
$ans912 = $field923.full_meth(anf_method_obj921,anf_arg922);
} else {
if(!(R.isFunction($field923))) {
R.ffi.throwNonFunApp(L[386],$field923);
}
$ans912 = $field923.app(anf_arg922);
}
break;
case 4: var anf_array_val941 = $ans912;
var anf_method_obj926 = G(ED12,"para",L[388]);
$step909 = 5;
$al913 = L[389];
$field924 = R.getColonFieldLoc(ED12,"embed",L[389]);
if(R.isMethod($field924)) {
$ans912 = $field924.full_meth(ED12,value2906);
} else {
if(!(R.isFunction($field924))) {
R.ffi.throwNonFunApp(L[389],$field924);
}
$ans912 = $field924.app(value2906);
}
break;
case 5: var anf_array_val925 = $ans912;
var anf_arg927 = [anf_array_val925];
$step909 = 6;
$al913 = L[388];
$field928 = R.getColonFieldLoc(anf_method_obj926,"make",L[388]);
if(R.isMethod($field928)) {
$ans912 = $field928.full_meth(anf_method_obj926,anf_arg927);
} else {
if(!(R.isFunction($field928))) {
R.ffi.throwNonFunApp(L[388],$field928);
}
$ans912 = $field928.app(anf_arg927);
}
break;
case 6: var anf_array_val942 = $ans912;
var anf_method_obj937 = G(ED12,"para",L[390]);
$step909 = 7;
$al913 = L[391];
$field929 = R.getColonFieldLoc(ED12,"text",L[391]);
if(R.isMethod($field929)) {
$ans912 = $field929.full_meth(ED12,("Consider using the "));
} else {
if(!(R.isFunction($field929))) {
R.ffi.throwNonFunApp(L[391],$field929);
}
$ans912 = $field929.app(("Consider using the "));
}
break;
case 7: var anf_array_val934 = $ans912;
$step909 = 8;
$al913 = L[392];
$field930 = R.getColonFieldLoc(ED12,"text",L[392]);
if(R.isMethod($field930)) {
$ans912 = $field930.full_meth(ED12,("within"));
} else {
if(!(R.isFunction($field930))) {
R.ffi.throwNonFunApp(L[392],$field930);
}
$ans912 = $field930.app(("within"));
}
break;
case 8: var anf_arg931 = $ans912;
$step909 = 9;
$al913 = L[393];
$field932 = R.getColonFieldLoc(ED12,"code",L[393]);
if(R.isMethod($field932)) {
$ans912 = $field932.full_meth(ED12,anf_arg931);
} else {
if(!(R.isFunction($field932))) {
R.ffi.throwNonFunApp(L[393],$field932);
}
$ans912 = $field932.app(anf_arg931);
}
break;
case 9: var anf_array_val935 = $ans912;
$step909 = 10;
$al913 = L[394];
$field933 = R.getColonFieldLoc(ED12,"text",L[394]);
if(R.isMethod($field933)) {
$ans912 = $field933.full_meth(ED12,(" function to compare them instead."));
} else {
if(!(R.isFunction($field933))) {
R.ffi.throwNonFunApp(L[394],$field933);
}
$ans912 = $field933.app((" function to compare them instead."));
}
break;
case 10: var anf_array_val936 = $ans912;
var anf_arg938 = [anf_array_val934,anf_array_val935,anf_array_val936];
$step909 = 11;
$al913 = L[390];
$field939 = R.getColonFieldLoc(anf_method_obj937,"make",L[390]);
if(R.isMethod($field939)) {
$ans912 = $field939.full_meth(anf_method_obj937,anf_arg938);
} else {
if(!(R.isFunction($field939))) {
R.ffi.throwNonFunApp(L[390],$field939);
}
$ans912 = $field939.app(anf_arg938);
}
break;
case 11: var anf_array_val943 = $ans912;
var anf_arg945 = [anf_array_val940,anf_array_val941,anf_array_val942,anf_array_val943];
$step909 = 12;
$al913 = L[383];
$field946 = R.getColonFieldLoc(anf_method_obj944,"make",L[383]);
if(R.isMethod($field946)) {
$ans912 = $field946.full_meth(anf_method_obj944,anf_arg945);
} else {
if(!(R.isFunction($field946))) {
R.ffi.throwNonFunApp(L[383],$field946);
}
$ans912 = $field946.app(anf_arg945);
}
break;
case 12: ++R.GAS;
return $ans912;
default: throw "No case numbered " + $step909 + " in $temp_lam910";
}
}
} catch($e947) {
if(R.isCont($e947) && ($step909 !== 12)) {
$e947.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al913,$temp_lam910,$step909,[message911],[anf_array_val935,anf_array_val934,anf_method_obj937,anf_array_val942,anf_method_obj926,anf_array_val941,anf_method_obj921,anf_array_val940,anf_method_obj916,anf_method_obj944]);
}
if(R.isPyretException($e947)) {
$e947.pyretStack.push($al913);
}
throw $e947;
}
};
var anf_assign948 = R.makeFunction($temp_lam910);
within$error949.$var = anf_assign948;
$step899 = 7;
$al903 = L[406];
if(!(R.isFunction(num$is$roughnum6))) {
R.ffi.throwNonFunApp($al903,num$is$roughnum6);
}
$ans902 = num$is$roughnum6.app(value1904);
break;
case 7: var anf_arg950 = $ans902;
$al903 = L[396];
var anf_if958 = R.checkWrapBoolean(anf_arg950);
if(R.isPyretTrue(anf_if958)) {
$step899 = 8;
} else {
$step899 = 10;
}
break;
case 8: $step899 = 9;
$al903 = L[397];
if(!(R.isFunction(num$is$roughnum6))) {
R.ffi.throwNonFunApp($al903,num$is$roughnum6);
}
$ans902 = num$is$roughnum6.app(value2906);
break;
case 9: var anf_arg951 = $ans902;
$step899 = 11;
$al903 = L[396];
$ans902 = R.checkWrapBoolean(anf_arg951);
break;
case 10: $step899 = 11;
$ans902 = (false);
break;
case 11: var anf_arg952 = $ans902;
$al903 = L[396];
var anf_if957 = R.checkWrapBoolean(anf_arg952);
if(R.isPyretTrue(anf_if957)) {
$step899 = 12;
} else {
$step899 = 13;
}
break;
case 12: $step899 = 27;
$al903 = L[398];
if(!(R.isFunction(within$error949.$var))) {
R.ffi.throwNonFunApp($al903,within$error949.$var);
}
$ans902 = within$error949.$var.app(("Attempted to compare two Roughnums for equality, which is not allowed:"));
break;
case 13: $step899 = 14;
$al903 = L[405];
if(!(R.isFunction(num$is$roughnum6))) {
R.ffi.throwNonFunApp($al903,num$is$roughnum6);
}
$ans902 = num$is$roughnum6.app(value1904);
break;
case 14: var anf_arg953 = $ans902;
$al903 = L[399];
var anf_if956 = R.checkWrapBoolean(anf_arg953);
if(R.isPyretTrue(anf_if956)) {
$step899 = 15;
} else {
$step899 = 16;
}
break;
case 15: $step899 = 27;
$al903 = L[400];
if(!(R.isFunction(within$error949.$var))) {
R.ffi.throwNonFunApp($al903,within$error949.$var);
}
$ans902 = within$error949.$var.app(("Attempted to compare a Roughnum to an Exactnum for equality, which is not allowed:"));
break;
case 16: $step899 = 17;
$al903 = L[404];
if(!(R.isFunction(num$is$roughnum6))) {
R.ffi.throwNonFunApp($al903,num$is$roughnum6);
}
$ans902 = num$is$roughnum6.app(value2906);
break;
case 17: var anf_arg954 = $ans902;
$al903 = L[401];
var anf_if955 = R.checkWrapBoolean(anf_arg954);
if(R.isPyretTrue(anf_if955)) {
$step899 = 18;
} else {
$step899 = 19;
}
break;
case 18: $step899 = 27;
$al903 = L[402];
if(!(R.isFunction(within$error949.$var))) {
R.ffi.throwNonFunApp($al903,within$error949.$var);
}
$ans902 = within$error949.$var.app(("Attempted to compare an Exactnum to a Roughnum for equality, which is not allowed:"));
break;
case 19: $step899 = 27;
$al903 = L[403];
$ans902 = R.throwNoBranchesMatched(L[403],("if"));
break;
case 20: var anf_method_obj979 = G(ED12,"error",L[407]);
var anf_method_obj961 = G(ED12,"para",L[408]);
$step899 = 21;
$al903 = L[409];
$field959 = R.getColonFieldLoc(ED12,"text",L[409]);
if(R.isMethod($field959)) {
$ans902 = $field959.full_meth(ED12,("Attempted to compare two incomparable values: "));
} else {
if(!(R.isFunction($field959))) {
R.ffi.throwNonFunApp(L[409],$field959);
}
$ans902 = $field959.app(("Attempted to compare two incomparable values: "));
}
break;
case 21: var anf_array_val960 = $ans902;
var anf_arg962 = [anf_array_val960];
$step899 = 22;
$al903 = L[408];
$field963 = R.getColonFieldLoc(anf_method_obj961,"make",L[408]);
if(R.isMethod($field963)) {
$ans902 = $field963.full_meth(anf_method_obj961,anf_arg962);
} else {
if(!(R.isFunction($field963))) {
R.ffi.throwNonFunApp(L[408],$field963);
}
$ans902 = $field963.app(anf_arg962);
}
break;
case 22: var anf_array_val976 = $ans902;
var anf_method_obj967 = G(ED12,"para",L[410]);
var anf_arg964 = G(self901,"value1",L[411]);
$step899 = 23;
$al903 = L[412];
$field965 = R.getColonFieldLoc(ED12,"embed",L[412]);
if(R.isMethod($field965)) {
$ans902 = $field965.full_meth(ED12,anf_arg964);
} else {
if(!(R.isFunction($field965))) {
R.ffi.throwNonFunApp(L[412],$field965);
}
$ans902 = $field965.app(anf_arg964);
}
break;
case 23: var anf_array_val966 = $ans902;
var anf_arg968 = [anf_array_val966];
$step899 = 24;
$al903 = L[410];
$field969 = R.getColonFieldLoc(anf_method_obj967,"make",L[410]);
if(R.isMethod($field969)) {
$ans902 = $field969.full_meth(anf_method_obj967,anf_arg968);
} else {
if(!(R.isFunction($field969))) {
R.ffi.throwNonFunApp(L[410],$field969);
}
$ans902 = $field969.app(anf_arg968);
}
break;
case 24: var anf_array_val977 = $ans902;
var anf_method_obj973 = G(ED12,"para",L[413]);
var anf_arg970 = G(self901,"value2",L[414]);
$step899 = 25;
$al903 = L[415];
$field971 = R.getColonFieldLoc(ED12,"embed",L[415]);
if(R.isMethod($field971)) {
$ans902 = $field971.full_meth(ED12,anf_arg970);
} else {
if(!(R.isFunction($field971))) {
R.ffi.throwNonFunApp(L[415],$field971);
}
$ans902 = $field971.app(anf_arg970);
}
break;
case 25: var anf_array_val972 = $ans902;
var anf_arg974 = [anf_array_val972];
$step899 = 26;
$al903 = L[413];
$field975 = R.getColonFieldLoc(anf_method_obj973,"make",L[413]);
if(R.isMethod($field975)) {
$ans902 = $field975.full_meth(anf_method_obj973,anf_arg974);
} else {
if(!(R.isFunction($field975))) {
R.ffi.throwNonFunApp(L[413],$field975);
}
$ans902 = $field975.app(anf_arg974);
}
break;
case 26: var anf_array_val978 = $ans902;
var anf_arg980 = [anf_array_val976,anf_array_val977,anf_array_val978];
$step899 = 27;
$al903 = L[407];
$field981 = R.getColonFieldLoc(anf_method_obj979,"make",L[407]);
if(R.isMethod($field981)) {
$ans902 = $field981.full_meth(anf_method_obj979,anf_arg980);
} else {
if(!(R.isFunction($field981))) {
R.ffi.throwNonFunApp(L[407],$field981);
}
$ans902 = $field981.app(anf_arg980);
}
break;
case 27: ++R.GAS;
return $ans902;
default: throw "No case numbered " + $step899 + " in $temp_full900";
}
}
} catch($e984) {
if(R.isCont($e984) && ($step899 !== 27)) {
$e984.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al903,$temp_full900,$step899,[self901],[anf_method_obj973,anf_array_val977,anf_method_obj967,anf_array_val976,anf_method_obj961,anf_method_obj979,within$error949,value2906,value1904]);
}
if(R.isPyretException($e984)) {
$e984.pyretStack.push($al903);
}
throw $e984;
}
};
var anf_variant_member1254 = R.makeMethod0($temp_full900);
var $temp_full986 = function($self987) {
var $step985 = 0;
var $ans988 = D;
var $al989 = L[420];
try {
if(R.isActivationRecord($self987)) {
$step985 = $self987.step;
$al989 = $self987.from;
$ans988 = $self987.ans;
self987 = $self987.args[0];
anf_method_obj992 = $self987.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[420],1,$t);
}
var self987 = $self987;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step985) {
case 0: var anf_method_obj992 = G(ED12,"error",L[418]);
$step985 = 1;
$al989 = L[419];
$field990 = R.getColonFieldLoc(ED12,"text",L[419]);
if(R.isMethod($field990)) {
$ans988 = $field990.full_meth(ED12,("Program stopped by user"));
} else {
if(!(R.isFunction($field990))) {
R.ffi.throwNonFunApp(L[419],$field990);
}
$ans988 = $field990.app(("Program stopped by user"));
}
break;
case 1: var anf_array_val991 = $ans988;
var anf_arg993 = [anf_array_val991];
$step985 = 2;
$al989 = L[418];
$field994 = R.getColonFieldLoc(anf_method_obj992,"make",L[418]);
if(R.isMethod($field994)) {
$ans988 = $field994.full_meth(anf_method_obj992,anf_arg993);
} else {
if(!(R.isFunction($field994))) {
R.ffi.throwNonFunApp(L[418],$field994);
}
$ans988 = $field994.app(anf_arg993);
}
break;
case 2: ++R.GAS;
return $ans988;
default: throw "No case numbered " + $step985 + " in $temp_full986";
}
}
} catch($e995) {
if(R.isCont($e995) && ($step985 !== 2)) {
$e995.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al989,$temp_full986,$step985,[self987],[anf_method_obj992]);
}
if(R.isPyretException($e995)) {
$e995.pyretStack.push($al989);
}
throw $e995;
}
};
var anf_singleton_variant_member1266 = R.makeMethod0($temp_full986);
var $temp_full997 = function($self998) {
var $step996 = 0;
var $ans999 = D;
var $al1000 = L[423];
try {
if(R.isActivationRecord($self998)) {
$step996 = $self998.step;
$al1000 = $self998.from;
$ans999 = $self998.ans;
self998 = $self998.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[423],1,$t);
}
var self998 = $self998;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step996) {
case 0: var anf_arg1001 = G(self998,"value",L[421]);
$step996 = 1;
$al1000 = L[422];
$field1002 = R.getColonFieldLoc(ED12,"embed",L[422]);
if(R.isMethod($field1002)) {
$ans999 = $field1002.full_meth(ED12,anf_arg1001);
} else {
if(!(R.isFunction($field1002))) {
R.ffi.throwNonFunApp(L[422],$field1002);
}
$ans999 = $field1002.app(anf_arg1001);
}
break;
case 1: ++R.GAS;
return $ans999;
default: throw "No case numbered " + $step996 + " in $temp_full997";
}
}
} catch($e1003) {
if(R.isCont($e1003) && ($step996 !== 1)) {
$e1003.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1000,$temp_full997,$step996,[self998],[]);
}
if(R.isPyretException($e1003)) {
$e1003.pyretStack.push($al1000);
}
throw $e1003;
}
};
var anf_variant_member1274 = R.makeMethod0($temp_full997);
var $message$exception_getfields1010 = function(f) {
return f(this.dict["message"]);
};
var $message$exception_getfieldsref1008 = function(f,refmask) {
return f(R.derefField(this.dict["message"],false,refmask[0]));
};
var $message$exception_mutablemask1009 = [false];
var $message$exception$base1004 = {"$fieldNames":["message"],
"render-reason":anf_variant_member1007,
"_match":R.makeMatch("message-exception",1)};
var $message$exception$brands1006 = {"$brand$message$exception":true};
$message$exception$brands1006[RuntimeError21._brand] = true;
var message$exception1012 = R.makeVariantConstructor(L[426],function() {
return [$type$String7];
},["message1013"],[L[425]],[false],["message1013"],$message$exception_mutablemask1009,$message$exception$base1004,$message$exception$brands1006,"message-exception",$message$exception_getfieldsref1008,$message$exception_getfields1010,$message$exception$base1004);
var $no$cases$matched_getfields1020 = function(f) {
return f(this.dict["loc"],this.dict["val"]);
};
var $no$cases$matched_getfieldsref1018 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["val"],false,refmask[1]));
};
var $no$cases$matched_mutablemask1019 = [false,false];
var $no$cases$matched$base1014 = {"$fieldNames":["loc","val"],
"render-reason":anf_variant_member1017,
"_match":R.makeMatch("no-cases-matched",2)};
var $no$cases$matched$brands1016 = {"$brand$no$cases$matched":true};
$no$cases$matched$brands1016[RuntimeError21._brand] = true;
var no$cases$matched1022 = R.makeVariantConstructor(L[428],function() {
return [];
},[],[],[false,false],["loc1023","val1024"],$no$cases$matched_mutablemask1019,$no$cases$matched$base1014,$no$cases$matched$brands1016,"no-cases-matched",$no$cases$matched_getfieldsref1018,$no$cases$matched_getfields1020,$no$cases$matched$base1014);
var $no$branches$matched_getfields1031 = function(f) {
return f(this.dict["loc"],this.dict["expression"]);
};
var $no$branches$matched_getfieldsref1029 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["expression"],false,refmask[1]));
};
var $no$branches$matched_mutablemask1030 = [false,false];
var $no$branches$matched$base1025 = {"$fieldNames":["loc","expression"],
"render-reason":anf_variant_member1028,
"_match":R.makeMatch("no-branches-matched",2)};
var $no$branches$matched$brands1027 = {"$brand$no$branches$matched":true};
$no$branches$matched$brands1027[RuntimeError21._brand] = true;
var no$branches$matched1033 = R.makeVariantConstructor(L[431],function() {
return [$type$String7];
},["expression1034"],[L[430]],[false,false],["loc1035","expression1034"],$no$branches$matched_mutablemask1030,$no$branches$matched$base1025,$no$branches$matched$brands1027,"no-branches-matched",$no$branches$matched_getfieldsref1029,$no$branches$matched_getfields1031,$no$branches$matched$base1025);
var $internal$error_getfields1042 = function(f) {
return f(this.dict["message"],this.dict["info-args"]);
};
var $internal$error_getfieldsref1040 = function(f,refmask) {
return f(R.derefField(this.dict["message"],false,refmask[0]),R.derefField(this.dict["info-args"],false,refmask[1]));
};
var $internal$error_mutablemask1041 = [false,false];
var $internal$error$base1036 = {"$fieldNames":["message","info-args"],
"render-reason":anf_variant_member1039,
"_match":R.makeMatch("internal-error",2)};
var $internal$error$brands1038 = {"$brand$internal$error":true};
$internal$error$brands1038[RuntimeError21._brand] = true;
var internal$error1044 = R.makeVariantConstructor(L[433],function() {
return [];
},[],[],[false,false],["message1045","info$args1046"],$internal$error_mutablemask1041,$internal$error$base1036,$internal$error$brands1038,"internal-error",$internal$error_getfieldsref1040,$internal$error_getfields1042,$internal$error$base1036);
var $field$not$found_getfields1053 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["field"]);
};
var $field$not$found_getfieldsref1051 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["field"],false,refmask[2]));
};
var $field$not$found_mutablemask1052 = [false,false,false];
var $field$not$found$base1047 = {"$fieldNames":["loc","obj","field"],
"render-reason":anf_variant_member1050,
"_match":R.makeMatch("field-not-found",3)};
var $field$not$found$brands1049 = {"$brand$field$not$found":true};
$field$not$found$brands1049[RuntimeError21._brand] = true;
var field$not$found1055 = R.makeVariantConstructor(L[436],function() {
return [$type$String7];
},["field1056"],[L[435]],[false,false,false],["loc1057","obj1058","field1056"],$field$not$found_mutablemask1052,$field$not$found$base1047,$field$not$found$brands1049,"field-not-found",$field$not$found_getfieldsref1051,$field$not$found_getfields1053,$field$not$found$base1047);
var $lookup$non$object_getfields1065 = function(f) {
return f(this.dict["loc"],this.dict["non-obj"],this.dict["field"]);
};
var $lookup$non$object_getfieldsref1063 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-obj"],false,refmask[1]),R.derefField(this.dict["field"],false,refmask[2]));
};
var $lookup$non$object_mutablemask1064 = [false,false,false];
var $lookup$non$object$base1059 = {"$fieldNames":["loc","non-obj","field"],
"render-reason":anf_variant_member1062,
"_match":R.makeMatch("lookup-non-object",3)};
var $lookup$non$object$brands1061 = {"$brand$lookup$non$object":true};
$lookup$non$object$brands1061[RuntimeError21._brand] = true;
var lookup$non$object1067 = R.makeVariantConstructor(L[439],function() {
return [$type$String7];
},["field1068"],[L[438]],[false,false,false],["loc1069","non$obj1070","field1068"],$lookup$non$object_mutablemask1064,$lookup$non$object$base1059,$lookup$non$object$brands1061,"lookup-non-object",$lookup$non$object_getfieldsref1063,$lookup$non$object_getfields1065,$lookup$non$object$base1059);
var $extend$non$object_getfields1077 = function(f) {
return f(this.dict["loc"],this.dict["non-obj"]);
};
var $extend$non$object_getfieldsref1075 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-obj"],false,refmask[1]));
};
var $extend$non$object_mutablemask1076 = [false,false];
var $extend$non$object$base1071 = {"$fieldNames":["loc","non-obj"],
"render-reason":anf_variant_member1074,
"_match":R.makeMatch("extend-non-object",2)};
var $extend$non$object$brands1073 = {"$brand$extend$non$object":true};
$extend$non$object$brands1073[RuntimeError21._brand] = true;
var extend$non$object1079 = R.makeVariantConstructor(L[441],function() {
return [];
},[],[],[false,false],["loc1080","non$obj1081"],$extend$non$object_mutablemask1076,$extend$non$object$base1071,$extend$non$object$brands1073,"extend-non-object",$extend$non$object_getfieldsref1075,$extend$non$object_getfields1077,$extend$non$object$base1071);
var $non$boolean$condition_getfields1088 = function(f) {
return f(this.dict["loc"],this.dict["typ"],this.dict["value"]);
};
var $non$boolean$condition_getfieldsref1086 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["typ"],false,refmask[1]),R.derefField(this.dict["value"],false,refmask[2]));
};
var $non$boolean$condition_mutablemask1087 = [false,false,false];
var $non$boolean$condition$base1082 = {"$fieldNames":["loc","typ","value"],
"render-reason":anf_variant_member1085,
"_match":R.makeMatch("non-boolean-condition",3)};
var $non$boolean$condition$brands1084 = {"$brand$non$boolean$condition":true};
$non$boolean$condition$brands1084[RuntimeError21._brand] = true;
var non$boolean$condition1090 = R.makeVariantConstructor(L[443],function() {
return [];
},[],[],[false,false,false],["loc1091","typ1092","value1093"],$non$boolean$condition_mutablemask1087,$non$boolean$condition$base1082,$non$boolean$condition$brands1084,"non-boolean-condition",$non$boolean$condition_getfieldsref1086,$non$boolean$condition_getfields1088,$non$boolean$condition$base1082);
var $non$boolean$op_getfields1100 = function(f) {
return f(this.dict["loc"],this.dict["position"],this.dict["typ"],this.dict["value"]);
};
var $non$boolean$op_getfieldsref1098 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["position"],false,refmask[1]),R.derefField(this.dict["typ"],false,refmask[2]),R.derefField(this.dict["value"],false,refmask[3]));
};
var $non$boolean$op_mutablemask1099 = [false,false,false,false];
var $non$boolean$op$base1094 = {"$fieldNames":["loc","position","typ","value"],
"render-reason":anf_variant_member1097,
"_match":R.makeMatch("non-boolean-op",4)};
var $non$boolean$op$brands1096 = {"$brand$non$boolean$op":true};
$non$boolean$op$brands1096[RuntimeError21._brand] = true;
var non$boolean$op1102 = R.makeVariantConstructor(L[445],function() {
return [];
},[],[],[false,false,false,false],["loc1103","position1104","typ1105","value1106"],$non$boolean$op_mutablemask1099,$non$boolean$op$base1094,$non$boolean$op$brands1096,"non-boolean-op",$non$boolean$op_getfieldsref1098,$non$boolean$op_getfields1100,$non$boolean$op$base1094);
var $generic$type$mismatch_getfields1113 = function(f) {
return f(this.dict["val"],this.dict["typ"]);
};
var $generic$type$mismatch_getfieldsref1111 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["typ"],false,refmask[1]));
};
var $generic$type$mismatch_mutablemask1112 = [false,false];
var $generic$type$mismatch$base1107 = {"$fieldNames":["val","typ"],
"render-reason":anf_variant_member1110,
"_match":R.makeMatch("generic-type-mismatch",2)};
var $generic$type$mismatch$brands1109 = {"$brand$generic$type$mismatch":true};
$generic$type$mismatch$brands1109[RuntimeError21._brand] = true;
var generic$type$mismatch1115 = R.makeVariantConstructor(L[448],function() {
return [$type$String7];
},["typ1116"],[L[447]],[false,false],["val1117","typ1116"],$generic$type$mismatch_mutablemask1112,$generic$type$mismatch$base1107,$generic$type$mismatch$brands1109,"generic-type-mismatch",$generic$type$mismatch_getfieldsref1111,$generic$type$mismatch_getfields1113,$generic$type$mismatch$base1107);
var $outside$numeric$range_getfields1124 = function(f) {
return f(this.dict["val"],this.dict["low"],this.dict["high"]);
};
var $outside$numeric$range_getfieldsref1122 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["low"],false,refmask[1]),R.derefField(this.dict["high"],false,refmask[2]));
};
var $outside$numeric$range_mutablemask1123 = [false,false,false];
var $outside$numeric$range$base1118 = {"$fieldNames":["val","low","high"],
"render-reason":anf_variant_member1121,
"_match":R.makeMatch("outside-numeric-range",3)};
var $outside$numeric$range$brands1120 = {"$brand$outside$numeric$range":true};
$outside$numeric$range$brands1120[RuntimeError21._brand] = true;
var outside$numeric$range1126 = R.makeVariantConstructor(L[450],function() {
return [];
},[],[],[false,false,false],["val1127","low1128","high1129"],$outside$numeric$range_mutablemask1123,$outside$numeric$range$base1118,$outside$numeric$range$brands1120,"outside-numeric-range",$outside$numeric$range_getfieldsref1122,$outside$numeric$range_getfields1124,$outside$numeric$range$base1118);
var $num$string$binop$error_getfields1136 = function(f) {
return f(this.dict["val1"],this.dict["val2"],this.dict["opname"],this.dict["opdesc"],this.dict["methodname"]);
};
var $num$string$binop$error_getfieldsref1134 = function(f,refmask) {
return f(R.derefField(this.dict["val1"],false,refmask[0]),R.derefField(this.dict["val2"],false,refmask[1]),R.derefField(this.dict["opname"],false,refmask[2]),R.derefField(this.dict["opdesc"],false,refmask[3]),R.derefField(this.dict["methodname"],false,refmask[4]));
};
var $num$string$binop$error_mutablemask1135 = [false,false,false,false,false];
var $num$string$binop$error$base1130 = {"$fieldNames":["val1","val2","opname","opdesc","methodname"],
"render-reason":anf_variant_member1133,
"_match":R.makeMatch("num-string-binop-error",5)};
var $num$string$binop$error$brands1132 = {"$brand$num$string$binop$error":true};
$num$string$binop$error$brands1132[RuntimeError21._brand] = true;
var num$string$binop$error1138 = R.makeVariantConstructor(L[452],function() {
return [];
},[],[],[false,false,false,false,false],["val11139","val21140","opname1141","opdesc1142","methodname1143"],$num$string$binop$error_mutablemask1135,$num$string$binop$error$base1130,$num$string$binop$error$brands1132,"num-string-binop-error",$num$string$binop$error_getfieldsref1134,$num$string$binop$error_getfields1136,$num$string$binop$error$base1130);
var $numeric$binop$error_getfields1150 = function(f) {
return f(this.dict["val1"],this.dict["val2"],this.dict["opname"],this.dict["methodname"]);
};
var $numeric$binop$error_getfieldsref1148 = function(f,refmask) {
return f(R.derefField(this.dict["val1"],false,refmask[0]),R.derefField(this.dict["val2"],false,refmask[1]),R.derefField(this.dict["opname"],false,refmask[2]),R.derefField(this.dict["methodname"],false,refmask[3]));
};
var $numeric$binop$error_mutablemask1149 = [false,false,false,false];
var $numeric$binop$error$base1144 = {"$fieldNames":["val1","val2","opname","methodname"],
"render-reason":anf_variant_member1147,
"_match":R.makeMatch("numeric-binop-error",4)};
var $numeric$binop$error$brands1146 = {"$brand$numeric$binop$error":true};
$numeric$binop$error$brands1146[RuntimeError21._brand] = true;
var numeric$binop$error1152 = R.makeVariantConstructor(L[454],function() {
return [];
},[],[],[false,false,false,false],["val11153","val21154","opname1155","methodname1156"],$numeric$binop$error_mutablemask1149,$numeric$binop$error$base1144,$numeric$binop$error$brands1146,"numeric-binop-error",$numeric$binop$error_getfieldsref1148,$numeric$binop$error_getfields1150,$numeric$binop$error$base1144);
var $cases$arity$mismatch_getfields1163 = function(f) {
return f(this.dict["branch-loc"],this.dict["num-args"],this.dict["actual-arity"]);
};
var $cases$arity$mismatch_getfieldsref1161 = function(f,refmask) {
return f(R.derefField(this.dict["branch-loc"],false,refmask[0]),R.derefField(this.dict["num-args"],false,refmask[1]),R.derefField(this.dict["actual-arity"],false,refmask[2]));
};
var $cases$arity$mismatch_mutablemask1162 = [false,false,false];
var $cases$arity$mismatch$base1157 = {"$fieldNames":["branch-loc","num-args","actual-arity"],
"render-reason":anf_variant_member1160,
"_match":R.makeMatch("cases-arity-mismatch",3)};
var $cases$arity$mismatch$brands1159 = {"$brand$cases$arity$mismatch":true};
$cases$arity$mismatch$brands1159[RuntimeError21._brand] = true;
var cases$arity$mismatch1165 = R.makeVariantConstructor(L[456],function() {
return [];
},[],[],[false,false,false],["branch$loc1166","num$args1167","actual$arity1168"],$cases$arity$mismatch_mutablemask1162,$cases$arity$mismatch$base1157,$cases$arity$mismatch$brands1159,"cases-arity-mismatch",$cases$arity$mismatch_getfieldsref1161,$cases$arity$mismatch_getfields1163,$cases$arity$mismatch$base1157);
var $cases$singleton$mismatch_getfields1175 = function(f) {
return f(this.dict["branch-loc"],this.dict["should-be-singleton"]);
};
var $cases$singleton$mismatch_getfieldsref1173 = function(f,refmask) {
return f(R.derefField(this.dict["branch-loc"],false,refmask[0]),R.derefField(this.dict["should-be-singleton"],false,refmask[1]));
};
var $cases$singleton$mismatch_mutablemask1174 = [false,false];
var $cases$singleton$mismatch$base1169 = {"$fieldNames":["branch-loc","should-be-singleton"],
"render-reason":anf_variant_member1172,
"_match":R.makeMatch("cases-singleton-mismatch",2)};
var $cases$singleton$mismatch$brands1171 = {"$brand$cases$singleton$mismatch":true};
$cases$singleton$mismatch$brands1171[RuntimeError21._brand] = true;
var cases$singleton$mismatch1177 = R.makeVariantConstructor(L[459],function() {
return [$type$Boolean9];
},["should$be$singleton1178"],[L[458]],[false,false],["branch$loc1179","should$be$singleton1178"],$cases$singleton$mismatch_mutablemask1174,$cases$singleton$mismatch$base1169,$cases$singleton$mismatch$brands1171,"cases-singleton-mismatch",$cases$singleton$mismatch_getfieldsref1173,$cases$singleton$mismatch_getfields1175,$cases$singleton$mismatch$base1169);
var $arity$mismatch_getfields1186 = function(f) {
return f(this.dict["fun-loc"],this.dict["expected-arity"],this.dict["args"]);
};
var $arity$mismatch_getfieldsref1184 = function(f,refmask) {
return f(R.derefField(this.dict["fun-loc"],false,refmask[0]),R.derefField(this.dict["expected-arity"],false,refmask[1]),R.derefField(this.dict["args"],false,refmask[2]));
};
var $arity$mismatch_mutablemask1185 = [false,false,false];
var $arity$mismatch$base1180 = {"$fieldNames":["fun-loc","expected-arity","args"],
"render-reason":anf_variant_member1183,
"_match":R.makeMatch("arity-mismatch",3)};
var $arity$mismatch$brands1182 = {"$brand$arity$mismatch":true};
$arity$mismatch$brands1182[RuntimeError21._brand] = true;
var arity$mismatch1188 = R.makeVariantConstructor(L[461],function() {
return [];
},[],[],[false,false,false],["fun$loc1189","expected$arity1190","args1191"],$arity$mismatch_mutablemask1185,$arity$mismatch$base1180,$arity$mismatch$brands1182,"arity-mismatch",$arity$mismatch_getfieldsref1184,$arity$mismatch_getfields1186,$arity$mismatch$base1180);
var $non$function$app_getfields1198 = function(f) {
return f(this.dict["loc"],this.dict["non-fun-val"]);
};
var $non$function$app_getfieldsref1196 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-fun-val"],false,refmask[1]));
};
var $non$function$app_mutablemask1197 = [false,false];
var $non$function$app$base1192 = {"$fieldNames":["loc","non-fun-val"],
"render-reason":anf_variant_member1195,
"_match":R.makeMatch("non-function-app",2)};
var $non$function$app$brands1194 = {"$brand$non$function$app":true};
$non$function$app$brands1194[RuntimeError21._brand] = true;
var non$function$app1200 = R.makeVariantConstructor(L[463],function() {
return [];
},[],[],[false,false],["loc1201","non$fun$val1202"],$non$function$app_mutablemask1197,$non$function$app$base1192,$non$function$app$brands1194,"non-function-app",$non$function$app_getfieldsref1196,$non$function$app_getfields1198,$non$function$app$base1192);
var $bad$app_getfields1209 = function(f) {
return f(this.dict["loc"],this.dict["fun-name"],this.dict["message"],this.dict["arg-position"],this.dict["arg-val"]);
};
var $bad$app_getfieldsref1207 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["fun-name"],false,refmask[1]),R.derefField(this.dict["message"],false,refmask[2]),R.derefField(this.dict["arg-position"],false,refmask[3]),R.derefField(this.dict["arg-val"],false,refmask[4]));
};
var $bad$app_mutablemask1208 = [false,false,false,false,false];
var $bad$app$base1203 = {"$fieldNames":["loc","fun-name","message","arg-position","arg-val"],
"render-reason":anf_variant_member1206,
"_match":R.makeMatch("bad-app",5)};
var $bad$app$brands1205 = {"$brand$bad$app":true};
$bad$app$brands1205[RuntimeError21._brand] = true;
var bad$app1211 = R.makeVariantConstructor(L[468],function() {
return [$type$String7,$type$String7,$type$Number8];
},["fun$name1212","message1213","arg$position1214"],[L[465],L[466],L[467]],[false,false,false,false,false],["loc1215","fun$name1212","message1213","arg$position1214","arg$val1216"],$bad$app_mutablemask1208,$bad$app$base1203,$bad$app$brands1205,"bad-app",$bad$app_getfieldsref1207,$bad$app_getfields1209,$bad$app$base1203);
var $uninitialized$id_getfields1223 = function(f) {
return f(this.dict["loc"],this.dict["name"]);
};
var $uninitialized$id_getfieldsref1221 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["name"],false,refmask[1]));
};
var $uninitialized$id_mutablemask1222 = [false,false];
var $uninitialized$id$base1217 = {"$fieldNames":["loc","name"],
"render-reason":anf_variant_member1220,
"_match":R.makeMatch("uninitialized-id",2)};
var $uninitialized$id$brands1219 = {"$brand$uninitialized$id":true};
$uninitialized$id$brands1219[RuntimeError21._brand] = true;
var uninitialized$id1225 = R.makeVariantConstructor(L[471],function() {
return [$type$String7];
},["name1226"],[L[470]],[false,false],["loc1227","name1226"],$uninitialized$id_mutablemask1222,$uninitialized$id$base1217,$uninitialized$id$brands1219,"uninitialized-id",$uninitialized$id_getfieldsref1221,$uninitialized$id_getfields1223,$uninitialized$id$base1217);
var $module$load$failure_getfields1234 = function(f) {
return f(this.dict["names"]);
};
var $module$load$failure_getfieldsref1232 = function(f,refmask) {
return f(R.derefField(this.dict["names"],false,refmask[0]));
};
var $module$load$failure_mutablemask1233 = [false];
var $module$load$failure$base1228 = {"$fieldNames":["names"],
"render-reason":anf_variant_member1231,
"_match":R.makeMatch("module-load-failure",1)};
var $module$load$failure$brands1230 = {"$brand$module$load$failure":true};
$module$load$failure$brands1230[RuntimeError21._brand] = true;
var module$load$failure1236 = R.makeVariantConstructor(L[473],function() {
return [];
},[],[],[false],["names1237"],$module$load$failure_mutablemask1233,$module$load$failure$base1228,$module$load$failure$brands1230,"module-load-failure",$module$load$failure_getfieldsref1232,$module$load$failure_getfields1234,$module$load$failure$base1228);
var $invalid$array$index_getfields1244 = function(f) {
return f(this.dict["method-name"],this.dict["array"],this.dict["index"],this.dict["reason"]);
};
var $invalid$array$index_getfieldsref1242 = function(f,refmask) {
return f(R.derefField(this.dict["method-name"],false,refmask[0]),R.derefField(this.dict["array"],false,refmask[1]),R.derefField(this.dict["index"],false,refmask[2]),R.derefField(this.dict["reason"],false,refmask[3]));
};
var $invalid$array$index_mutablemask1243 = [false,false,false,false];
var $invalid$array$index$base1238 = {"$fieldNames":["method-name","array","index","reason"],
"render-reason":anf_variant_member1241,
"_match":R.makeMatch("invalid-array-index",4)};
var $invalid$array$index$brands1240 = {"$brand$invalid$array$index":true};
$invalid$array$index$brands1240[RuntimeError21._brand] = true;
var invalid$array$index1246 = R.makeVariantConstructor(L[478],function() {
return [$type$String7,$type$Number8,$type$String7];
},["method$name1247","index1248","reason1249"],[L[475],L[476],L[477]],[false,false,false,false],["method$name1247","array1250","index1248","reason1249"],$invalid$array$index_mutablemask1243,$invalid$array$index$base1238,$invalid$array$index$brands1240,"invalid-array-index",$invalid$array$index_getfieldsref1242,$invalid$array$index_getfields1244,$invalid$array$index$base1238);
var $equality$failure_getfields1257 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $equality$failure_getfieldsref1255 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $equality$failure_mutablemask1256 = [false,false,false];
var $equality$failure$base1251 = {"$fieldNames":["reason","value1","value2"],
"render-reason":anf_variant_member1254,
"_match":R.makeMatch("equality-failure",3)};
var $equality$failure$brands1253 = {"$brand$equality$failure":true};
$equality$failure$brands1253[RuntimeError21._brand] = true;
var equality$failure1259 = R.makeVariantConstructor(L[481],function() {
return [$type$String7];
},["reason1260"],[L[480]],[false,false,false],["reason1260","value11261","value21262"],$equality$failure_mutablemask1256,$equality$failure$base1251,$equality$failure$brands1253,"equality-failure",$equality$failure_getfieldsref1255,$equality$failure_getfields1257,$equality$failure$base1251);
var $user$break_getfields1269 = function(f) {
return f();
};
var $user$break_getfieldsref1267 = function(f) {
return f();
};
var $user$break_mutablemask1268 = [];
var $user$break$base1263 = {"render-reason":anf_singleton_variant_member1266,
"_match":R.makeMatch("user-break",0)};
var $user$break$brands1265 = {"$brand$user$break":true};
$user$break$brands1265[RuntimeError21._brand] = true;
var $user$exception_getfields1277 = function(f) {
return f(this.dict["value"]);
};
var $user$exception_getfieldsref1275 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]));
};
var $user$exception_mutablemask1276 = [false];
var $user$exception$base1271 = {"$fieldNames":["value"],
"render-reason":anf_variant_member1274,
"_match":R.makeMatch("user-exception",1)};
var $user$exception$brands1273 = {"$brand$user$exception":true};
$user$exception$brands1273[RuntimeError21._brand] = true;
var user$exception1279 = R.makeVariantConstructor(L[484],function() {
return [];
},[],[],[false],["value1280"],$user$exception_mutablemask1276,$user$exception$base1271,$user$exception$brands1273,"user-exception",$user$exception_getfieldsref1275,$user$exception_getfields1277,$user$exception$base1271);
var anf_assign1282 = R.makeObject({"RuntimeError":R.makeFunction(function($val1281) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[485],1,$t);
}
return R.makeBoolean(R.hasBrand($val1281,RuntimeError21._brand));
}),
"is-message-exception":R.makeFunction(function($val1011) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[424],1,$t);
}
return R.makeBoolean(R.hasBrand($val1011,"$brand$message$exception"));
}),
"message-exception":message$exception1012,
"is-no-cases-matched":R.makeFunction(function($val1021) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[427],1,$t);
}
return R.makeBoolean(R.hasBrand($val1021,"$brand$no$cases$matched"));
}),
"no-cases-matched":no$cases$matched1022,
"is-no-branches-matched":R.makeFunction(function($val1032) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[429],1,$t);
}
return R.makeBoolean(R.hasBrand($val1032,"$brand$no$branches$matched"));
}),
"no-branches-matched":no$branches$matched1033,
"is-internal-error":R.makeFunction(function($val1043) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[432],1,$t);
}
return R.makeBoolean(R.hasBrand($val1043,"$brand$internal$error"));
}),
"internal-error":internal$error1044,
"is-field-not-found":R.makeFunction(function($val1054) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[434],1,$t);
}
return R.makeBoolean(R.hasBrand($val1054,"$brand$field$not$found"));
}),
"field-not-found":field$not$found1055,
"is-lookup-non-object":R.makeFunction(function($val1066) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[437],1,$t);
}
return R.makeBoolean(R.hasBrand($val1066,"$brand$lookup$non$object"));
}),
"lookup-non-object":lookup$non$object1067,
"is-extend-non-object":R.makeFunction(function($val1078) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[440],1,$t);
}
return R.makeBoolean(R.hasBrand($val1078,"$brand$extend$non$object"));
}),
"extend-non-object":extend$non$object1079,
"is-non-boolean-condition":R.makeFunction(function($val1089) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[442],1,$t);
}
return R.makeBoolean(R.hasBrand($val1089,"$brand$non$boolean$condition"));
}),
"non-boolean-condition":non$boolean$condition1090,
"is-non-boolean-op":R.makeFunction(function($val1101) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[444],1,$t);
}
return R.makeBoolean(R.hasBrand($val1101,"$brand$non$boolean$op"));
}),
"non-boolean-op":non$boolean$op1102,
"is-generic-type-mismatch":R.makeFunction(function($val1114) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[446],1,$t);
}
return R.makeBoolean(R.hasBrand($val1114,"$brand$generic$type$mismatch"));
}),
"generic-type-mismatch":generic$type$mismatch1115,
"is-outside-numeric-range":R.makeFunction(function($val1125) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[449],1,$t);
}
return R.makeBoolean(R.hasBrand($val1125,"$brand$outside$numeric$range"));
}),
"outside-numeric-range":outside$numeric$range1126,
"is-num-string-binop-error":R.makeFunction(function($val1137) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[451],1,$t);
}
return R.makeBoolean(R.hasBrand($val1137,"$brand$num$string$binop$error"));
}),
"num-string-binop-error":num$string$binop$error1138,
"is-numeric-binop-error":R.makeFunction(function($val1151) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[453],1,$t);
}
return R.makeBoolean(R.hasBrand($val1151,"$brand$numeric$binop$error"));
}),
"numeric-binop-error":numeric$binop$error1152,
"is-cases-arity-mismatch":R.makeFunction(function($val1164) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[455],1,$t);
}
return R.makeBoolean(R.hasBrand($val1164,"$brand$cases$arity$mismatch"));
}),
"cases-arity-mismatch":cases$arity$mismatch1165,
"is-cases-singleton-mismatch":R.makeFunction(function($val1176) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[457],1,$t);
}
return R.makeBoolean(R.hasBrand($val1176,"$brand$cases$singleton$mismatch"));
}),
"cases-singleton-mismatch":cases$singleton$mismatch1177,
"is-arity-mismatch":R.makeFunction(function($val1187) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[460],1,$t);
}
return R.makeBoolean(R.hasBrand($val1187,"$brand$arity$mismatch"));
}),
"arity-mismatch":arity$mismatch1188,
"is-non-function-app":R.makeFunction(function($val1199) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[462],1,$t);
}
return R.makeBoolean(R.hasBrand($val1199,"$brand$non$function$app"));
}),
"non-function-app":non$function$app1200,
"is-bad-app":R.makeFunction(function($val1210) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[464],1,$t);
}
return R.makeBoolean(R.hasBrand($val1210,"$brand$bad$app"));
}),
"bad-app":bad$app1211,
"is-uninitialized-id":R.makeFunction(function($val1224) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[469],1,$t);
}
return R.makeBoolean(R.hasBrand($val1224,"$brand$uninitialized$id"));
}),
"uninitialized-id":uninitialized$id1225,
"is-module-load-failure":R.makeFunction(function($val1235) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[472],1,$t);
}
return R.makeBoolean(R.hasBrand($val1235,"$brand$module$load$failure"));
}),
"module-load-failure":module$load$failure1236,
"is-invalid-array-index":R.makeFunction(function($val1245) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[474],1,$t);
}
return R.makeBoolean(R.hasBrand($val1245,"$brand$invalid$array$index"));
}),
"invalid-array-index":invalid$array$index1246,
"is-equality-failure":R.makeFunction(function($val1258) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[479],1,$t);
}
return R.makeBoolean(R.hasBrand($val1258,"$brand$equality$failure"));
}),
"equality-failure":equality$failure1259,
"is-user-break":R.makeFunction(function($val1270) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[482],1,$t);
}
return R.makeBoolean(R.hasBrand($val1270,"$brand$user$break"));
}),
"user-break":R.makeDataValue($user$break$base1263,$user$break$brands1265,"user-break",$user$break_getfieldsref1267,$user$break_getfields1269,-1,$user$break_mutablemask1268,$user$break$base1263),
"is-user-exception":R.makeFunction(function($val1278) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[483],1,$t);
}
return R.makeBoolean(R.hasBrand($val1278,"$brand$user$exception"));
}),
"user-exception":user$exception1279});
RuntimeError1283.$var = anf_assign1282;
var anf_assign1284 = G(RuntimeError1283.$var,"RuntimeError",L[485]);
RuntimeError1285.$var = anf_assign1284;
var anf_assign1286 = G(RuntimeError1283.$var,"RuntimeError",L[485]);
is$RuntimeError1287.$var = anf_assign1286;
var anf_assign1288 = G(RuntimeError1283.$var,"is-message-exception",L[424]);
is$message$exception1289.$var = anf_assign1288;
var anf_assign1290 = G(RuntimeError1283.$var,"message-exception",L[424]);
message$exception1291.$var = anf_assign1290;
var anf_assign1292 = G(RuntimeError1283.$var,"is-no-cases-matched",L[427]);
is$no$cases$matched1293.$var = anf_assign1292;
var anf_assign1294 = G(RuntimeError1283.$var,"no-cases-matched",L[427]);
no$cases$matched1295.$var = anf_assign1294;
var anf_assign1296 = G(RuntimeError1283.$var,"is-no-branches-matched",L[429]);
is$no$branches$matched1297.$var = anf_assign1296;
var anf_assign1298 = G(RuntimeError1283.$var,"no-branches-matched",L[429]);
no$branches$matched1299.$var = anf_assign1298;
var anf_assign1300 = G(RuntimeError1283.$var,"is-internal-error",L[432]);
is$internal$error1301.$var = anf_assign1300;
var anf_assign1302 = G(RuntimeError1283.$var,"internal-error",L[432]);
internal$error1303.$var = anf_assign1302;
var anf_assign1304 = G(RuntimeError1283.$var,"is-field-not-found",L[434]);
is$field$not$found1305.$var = anf_assign1304;
var anf_assign1306 = G(RuntimeError1283.$var,"field-not-found",L[434]);
field$not$found1307.$var = anf_assign1306;
var anf_assign1308 = G(RuntimeError1283.$var,"is-lookup-non-object",L[437]);
is$lookup$non$object1309.$var = anf_assign1308;
var anf_assign1310 = G(RuntimeError1283.$var,"lookup-non-object",L[437]);
lookup$non$object1311.$var = anf_assign1310;
var anf_assign1312 = G(RuntimeError1283.$var,"is-extend-non-object",L[440]);
is$extend$non$object1313.$var = anf_assign1312;
var anf_assign1314 = G(RuntimeError1283.$var,"extend-non-object",L[440]);
extend$non$object1315.$var = anf_assign1314;
var anf_assign1316 = G(RuntimeError1283.$var,"is-non-boolean-condition",L[442]);
is$non$boolean$condition1317.$var = anf_assign1316;
var anf_assign1318 = G(RuntimeError1283.$var,"non-boolean-condition",L[442]);
non$boolean$condition1319.$var = anf_assign1318;
var anf_assign1320 = G(RuntimeError1283.$var,"is-non-boolean-op",L[444]);
is$non$boolean$op1321.$var = anf_assign1320;
var anf_assign1322 = G(RuntimeError1283.$var,"non-boolean-op",L[444]);
non$boolean$op1323.$var = anf_assign1322;
var anf_assign1324 = G(RuntimeError1283.$var,"is-generic-type-mismatch",L[446]);
is$generic$type$mismatch1325.$var = anf_assign1324;
var anf_assign1326 = G(RuntimeError1283.$var,"generic-type-mismatch",L[446]);
generic$type$mismatch1327.$var = anf_assign1326;
var anf_assign1328 = G(RuntimeError1283.$var,"is-outside-numeric-range",L[449]);
is$outside$numeric$range1329.$var = anf_assign1328;
var anf_assign1330 = G(RuntimeError1283.$var,"outside-numeric-range",L[449]);
outside$numeric$range1331.$var = anf_assign1330;
var anf_assign1332 = G(RuntimeError1283.$var,"is-num-string-binop-error",L[451]);
is$num$string$binop$error1333.$var = anf_assign1332;
var anf_assign1334 = G(RuntimeError1283.$var,"num-string-binop-error",L[451]);
num$string$binop$error1335.$var = anf_assign1334;
var anf_assign1336 = G(RuntimeError1283.$var,"is-numeric-binop-error",L[453]);
is$numeric$binop$error1337.$var = anf_assign1336;
var anf_assign1338 = G(RuntimeError1283.$var,"numeric-binop-error",L[453]);
numeric$binop$error1339.$var = anf_assign1338;
var anf_assign1340 = G(RuntimeError1283.$var,"is-cases-arity-mismatch",L[455]);
is$cases$arity$mismatch1341.$var = anf_assign1340;
var anf_assign1342 = G(RuntimeError1283.$var,"cases-arity-mismatch",L[455]);
cases$arity$mismatch1343.$var = anf_assign1342;
var anf_assign1344 = G(RuntimeError1283.$var,"is-cases-singleton-mismatch",L[457]);
is$cases$singleton$mismatch1345.$var = anf_assign1344;
var anf_assign1346 = G(RuntimeError1283.$var,"cases-singleton-mismatch",L[457]);
cases$singleton$mismatch1347.$var = anf_assign1346;
var anf_assign1348 = G(RuntimeError1283.$var,"is-arity-mismatch",L[460]);
is$arity$mismatch1349.$var = anf_assign1348;
var anf_assign1350 = G(RuntimeError1283.$var,"arity-mismatch",L[460]);
arity$mismatch1351.$var = anf_assign1350;
var anf_assign1352 = G(RuntimeError1283.$var,"is-non-function-app",L[462]);
is$non$function$app1353.$var = anf_assign1352;
var anf_assign1354 = G(RuntimeError1283.$var,"non-function-app",L[462]);
non$function$app1355.$var = anf_assign1354;
var anf_assign1356 = G(RuntimeError1283.$var,"is-bad-app",L[464]);
is$bad$app1357.$var = anf_assign1356;
var anf_assign1358 = G(RuntimeError1283.$var,"bad-app",L[464]);
bad$app1359.$var = anf_assign1358;
var anf_assign1360 = G(RuntimeError1283.$var,"is-uninitialized-id",L[469]);
is$uninitialized$id1361.$var = anf_assign1360;
var anf_assign1362 = G(RuntimeError1283.$var,"uninitialized-id",L[469]);
uninitialized$id1363.$var = anf_assign1362;
var anf_assign1364 = G(RuntimeError1283.$var,"is-module-load-failure",L[472]);
is$module$load$failure1365.$var = anf_assign1364;
var anf_assign1366 = G(RuntimeError1283.$var,"module-load-failure",L[472]);
module$load$failure1367.$var = anf_assign1366;
var anf_assign1368 = G(RuntimeError1283.$var,"is-invalid-array-index",L[474]);
is$invalid$array$index1369.$var = anf_assign1368;
var anf_assign1370 = G(RuntimeError1283.$var,"invalid-array-index",L[474]);
invalid$array$index1371.$var = anf_assign1370;
var anf_assign1372 = G(RuntimeError1283.$var,"is-equality-failure",L[479]);
is$equality$failure1373.$var = anf_assign1372;
var anf_assign1374 = G(RuntimeError1283.$var,"equality-failure",L[479]);
equality$failure1375.$var = anf_assign1374;
var anf_assign1376 = G(RuntimeError1283.$var,"is-user-break",L[482]);
is$user$break1377.$var = anf_assign1376;
var anf_assign1378 = G(RuntimeError1283.$var,"user-break",L[482]);
user$break1379.$var = anf_assign1378;
var anf_assign1380 = G(RuntimeError1283.$var,"is-user-exception",L[483]);
is$user$exception1381.$var = anf_assign1380;
var anf_assign1382 = G(RuntimeError1283.$var,"user-exception",L[483]);
user$exception1383.$var = anf_assign1382;
var $temp_full1385 = function($self1386) {
var $step1384 = 0;
var $ans1387 = D;
var $al1388 = L[488];
try {
if(R.isActivationRecord($self1386)) {
$step1384 = $self1386.step;
$al1388 = $self1386.from;
$ans1387 = $self1386.ans;
self1386 = $self1386.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[488],1,$t);
}
var self1386 = $self1386;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1384) {
case 0: $step1384 = 1;
$al1388 = L[486];
$field1389 = R.getColonFieldLoc(self1386,"_tostring",L[486]);
if(R.isMethod($field1389)) {
$ans1387 = $field1389.full_meth(self1386,tostring4);
} else {
if(!(R.isFunction($field1389))) {
R.ffi.throwNonFunApp(L[486],$field1389);
}
$ans1387 = $field1389.app(tostring4);
}
break;
case 1: var anf_arg1390 = $ans1387;
$step1384 = 2;
$al1388 = L[487];
$field1391 = R.getColonFieldLoc(ED12,"text",L[487]);
if(R.isMethod($field1391)) {
$ans1387 = $field1391.full_meth(ED12,anf_arg1390);
} else {
if(!(R.isFunction($field1391))) {
R.ffi.throwNonFunApp(L[487],$field1391);
}
$ans1387 = $field1391.app(anf_arg1390);
}
break;
case 2: ++R.GAS;
return $ans1387;
default: throw "No case numbered " + $step1384 + " in $temp_full1385";
}
}
} catch($e1392) {
if(R.isCont($e1392) && ($step1384 !== 2)) {
$e1392.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1388,$temp_full1385,$step1384,[self1386],[]);
}
if(R.isPyretException($e1392)) {
$e1392.pyretStack.push($al1388);
}
throw $e1392;
}
};
var anf_shared1652 = R.makeMethod0($temp_full1385);
var $temp_full1394 = function($self1395) {
var $step1393 = 0;
var $ans1396 = D;
var $al1397 = L[532];
try {
if(R.isActivationRecord($self1395)) {
$step1393 = $self1395.step;
$al1397 = $self1395.from;
$ans1396 = $self1395.ans;
self1395 = $self1395.args[0];
anf_array_val1497 = $self1395.vars[0];
anf_method_obj1489 = $self1395.vars[1];
anf_method_obj1499 = $self1395.vars[2];
anf_array_val1502 = $self1395.vars[3];
anf_array_val1482 = $self1395.vars[4];
anf_method_obj1484 = $self1395.vars[5];
anf_method_obj1504 = $self1395.vars[6];
extra1493 = $self1395.vars[7];
anf_array_val1469 = $self1395.vars[8];
anf_method_obj1471 = $self1395.vars[9];
anf_array_val1475 = $self1395.vars[10];
anf_array_val1460 = $self1395.vars[11];
anf_array_val1459 = $self1395.vars[12];
anf_array_val1458 = $self1395.vars[13];
anf_method_obj1462 = $self1395.vars[14];
anf_array_val1474 = $self1395.vars[15];
anf_method_obj1449 = $self1395.vars[16];
anf_method_obj1477 = $self1395.vars[17];
missing1492 = $self1395.vars[18];
anf_method_obj1438 = $self1395.vars[19];
anf_array_val1442 = $self1395.vars[20];
anf_array_val1429 = $self1395.vars[21];
anf_array_val1428 = $self1395.vars[22];
anf_array_val1427 = $self1395.vars[23];
anf_array_val1426 = $self1395.vars[24];
anf_array_val1425 = $self1395.vars[25];
anf_array_val1424 = $self1395.vars[26];
anf_array_val1423 = $self1395.vars[27];
anf_array_val1422 = $self1395.vars[28];
anf_array_val1421 = $self1395.vars[29];
anf_method_obj1431 = $self1395.vars[30];
anf_array_val1441 = $self1395.vars[31];
anf_method_obj1400 = $self1395.vars[32];
anf_method_obj1444 = $self1395.vars[33];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[532],1,$t);
}
var self1395 = $self1395;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1393) {
case 0: var anf_method_obj1444 = G(ED12,"error",L[489]);
var anf_method_obj1400 = G(ED12,"para",L[490]);
$step1393 = 1;
$al1397 = L[491];
$field1398 = R.getColonFieldLoc(ED12,"text",L[491]);
if(R.isMethod($field1398)) {
$ans1396 = $field1398.full_meth(ED12,("The program is missing something"));
} else {
if(!(R.isFunction($field1398))) {
R.ffi.throwNonFunApp(L[491],$field1398);
}
$ans1396 = $field1398.app(("The program is missing something"));
}
break;
case 1: var anf_array_val1399 = $ans1396;
var anf_arg1401 = [anf_array_val1399];
$step1393 = 2;
$al1397 = L[490];
$field1402 = R.getColonFieldLoc(anf_method_obj1400,"make",L[490]);
if(R.isMethod($field1402)) {
$ans1396 = $field1402.full_meth(anf_method_obj1400,anf_arg1401);
} else {
if(!(R.isFunction($field1402))) {
R.ffi.throwNonFunApp(L[490],$field1402);
}
$ans1396 = $field1402.app(anf_arg1401);
}
break;
case 2: var anf_array_val1441 = $ans1396;
var anf_method_obj1431 = G(ED12,"para-nospace",L[492]);
$step1393 = 3;
$al1397 = L[493];
$field1403 = R.getColonFieldLoc(ED12,"text",L[493]);
if(R.isMethod($field1403)) {
$ans1396 = $field1403.full_meth(ED12,("Look carefully before the "));
} else {
if(!(R.isFunction($field1403))) {
R.ffi.throwNonFunApp(L[493],$field1403);
}
$ans1396 = $field1403.app(("Look carefully before the "));
}
break;
case 3: var anf_array_val1421 = $ans1396;
$step1393 = 4;
$al1397 = L[494];
$field1404 = R.getColonFieldLoc(ED12,"text",L[494]);
if(R.isMethod($field1404)) {
$ans1396 = $field1404.full_meth(ED12,("highlighted text"));
} else {
if(!(R.isFunction($field1404))) {
R.ffi.throwNonFunApp(L[494],$field1404);
}
$ans1396 = $field1404.app(("highlighted text"));
}
break;
case 4: var anf_arg1405 = $ans1396;
$step1393 = 5;
$al1397 = L[495];
$field1406 = R.getColonFieldLoc(ED12,"styled",L[495]);
if(R.isMethod($field1406)) {
$ans1396 = $field1406.full_meth(ED12,anf_arg1405,("error-highlight"));
} else {
if(!(R.isFunction($field1406))) {
R.ffi.throwNonFunApp(L[495],$field1406);
}
$ans1396 = $field1406.app(anf_arg1405,("error-highlight"));
}
break;
case 5: var anf_array_val1422 = $ans1396;
$step1393 = 6;
$al1397 = L[496];
$field1407 = R.getColonFieldLoc(ED12,"text",L[496]);
if(R.isMethod($field1407)) {
$ans1396 = $field1407.full_meth(ED12,(".  Is something missing just before it?"));
} else {
if(!(R.isFunction($field1407))) {
R.ffi.throwNonFunApp(L[496],$field1407);
}
$ans1396 = $field1407.app((".  Is something missing just before it?"));
}
break;
case 6: var anf_array_val1423 = $ans1396;
$step1393 = 7;
$al1397 = L[497];
$field1408 = R.getColonFieldLoc(ED12,"text",L[497]);
if(R.isMethod($field1408)) {
$ans1396 = $field1408.full_meth(ED12,("  Common missing items are colons ("));
} else {
if(!(R.isFunction($field1408))) {
R.ffi.throwNonFunApp(L[497],$field1408);
}
$ans1396 = $field1408.app(("  Common missing items are colons ("));
}
break;
case 7: var anf_array_val1424 = $ans1396;
$step1393 = 8;
$al1397 = L[498];
$field1409 = R.getColonFieldLoc(ED12,"text",L[498]);
if(R.isMethod($field1409)) {
$ans1396 = $field1409.full_meth(ED12,(":"));
} else {
if(!(R.isFunction($field1409))) {
R.ffi.throwNonFunApp(L[498],$field1409);
}
$ans1396 = $field1409.app((":"));
}
break;
case 8: var anf_arg1410 = $ans1396;
$step1393 = 9;
$al1397 = L[499];
$field1411 = R.getColonFieldLoc(ED12,"code",L[499]);
if(R.isMethod($field1411)) {
$ans1396 = $field1411.full_meth(ED12,anf_arg1410);
} else {
if(!(R.isFunction($field1411))) {
R.ffi.throwNonFunApp(L[499],$field1411);
}
$ans1396 = $field1411.app(anf_arg1410);
}
break;
case 9: var anf_array_val1425 = $ans1396;
$step1393 = 10;
$al1397 = L[500];
$field1412 = R.getColonFieldLoc(ED12,"text",L[500]);
if(R.isMethod($field1412)) {
$ans1396 = $field1412.full_meth(ED12,("), commas ("));
} else {
if(!(R.isFunction($field1412))) {
R.ffi.throwNonFunApp(L[500],$field1412);
}
$ans1396 = $field1412.app(("), commas ("));
}
break;
case 10: var anf_array_val1426 = $ans1396;
$step1393 = 11;
$al1397 = L[501];
$field1413 = R.getColonFieldLoc(ED12,"text",L[501]);
if(R.isMethod($field1413)) {
$ans1396 = $field1413.full_meth(ED12,(","));
} else {
if(!(R.isFunction($field1413))) {
R.ffi.throwNonFunApp(L[501],$field1413);
}
$ans1396 = $field1413.app((","));
}
break;
case 11: var anf_arg1414 = $ans1396;
$step1393 = 12;
$al1397 = L[502];
$field1415 = R.getColonFieldLoc(ED12,"code",L[502]);
if(R.isMethod($field1415)) {
$ans1396 = $field1415.full_meth(ED12,anf_arg1414);
} else {
if(!(R.isFunction($field1415))) {
R.ffi.throwNonFunApp(L[502],$field1415);
}
$ans1396 = $field1415.app(anf_arg1414);
}
break;
case 12: var anf_array_val1427 = $ans1396;
$step1393 = 13;
$al1397 = L[503];
$field1416 = R.getColonFieldLoc(ED12,"text",L[503]);
if(R.isMethod($field1416)) {
$ans1396 = $field1416.full_meth(ED12,("), string markers ("));
} else {
if(!(R.isFunction($field1416))) {
R.ffi.throwNonFunApp(L[503],$field1416);
}
$ans1396 = $field1416.app(("), string markers ("));
}
break;
case 13: var anf_array_val1428 = $ans1396;
$step1393 = 14;
$al1397 = L[504];
$field1417 = R.getColonFieldLoc(ED12,"text",L[504]);
if(R.isMethod($field1417)) {
$ans1396 = $field1417.full_meth(ED12,("\""));
} else {
if(!(R.isFunction($field1417))) {
R.ffi.throwNonFunApp(L[504],$field1417);
}
$ans1396 = $field1417.app(("\""));
}
break;
case 14: var anf_arg1418 = $ans1396;
$step1393 = 15;
$al1397 = L[505];
$field1419 = R.getColonFieldLoc(ED12,"code",L[505]);
if(R.isMethod($field1419)) {
$ans1396 = $field1419.full_meth(ED12,anf_arg1418);
} else {
if(!(R.isFunction($field1419))) {
R.ffi.throwNonFunApp(L[505],$field1419);
}
$ans1396 = $field1419.app(anf_arg1418);
}
break;
case 15: var anf_array_val1429 = $ans1396;
$step1393 = 16;
$al1397 = L[506];
$field1420 = R.getColonFieldLoc(ED12,"text",L[506]);
if(R.isMethod($field1420)) {
$ans1396 = $field1420.full_meth(ED12,("), and keywords."));
} else {
if(!(R.isFunction($field1420))) {
R.ffi.throwNonFunApp(L[506],$field1420);
}
$ans1396 = $field1420.app(("), and keywords."));
}
break;
case 16: var anf_array_val1430 = $ans1396;
var anf_arg1432 = [anf_array_val1421,anf_array_val1422,anf_array_val1423,anf_array_val1424,anf_array_val1425,anf_array_val1426,anf_array_val1427,anf_array_val1428,anf_array_val1429,anf_array_val1430];
$step1393 = 17;
$al1397 = L[492];
$field1433 = R.getColonFieldLoc(anf_method_obj1431,"make",L[492]);
if(R.isMethod($field1433)) {
$ans1396 = $field1433.full_meth(anf_method_obj1431,anf_arg1432);
} else {
if(!(R.isFunction($field1433))) {
R.ffi.throwNonFunApp(L[492],$field1433);
}
$ans1396 = $field1433.app(anf_arg1432);
}
break;
case 17: var anf_array_val1442 = $ans1396;
var anf_method_obj1438 = G(ED12,"para",L[507]);
$step1393 = 18;
$al1397 = L[508];
$field1434 = R.getColonFieldLoc(ED12,"text",L[508]);
if(R.isMethod($field1434)) {
$ans1396 = $field1434.full_meth(ED12,("Usually, inserting the missing item will fix this error."));
} else {
if(!(R.isFunction($field1434))) {
R.ffi.throwNonFunApp(L[508],$field1434);
}
$ans1396 = $field1434.app(("Usually, inserting the missing item will fix this error."));
}
break;
case 18: var anf_arg1435 = $ans1396;
$step1393 = 19;
$al1397 = L[509];
$field1436 = R.getColonFieldLoc(ED12,"styled",L[509]);
if(R.isMethod($field1436)) {
$ans1396 = $field1436.full_meth(ED12,anf_arg1435,("hint"));
} else {
if(!(R.isFunction($field1436))) {
R.ffi.throwNonFunApp(L[509],$field1436);
}
$ans1396 = $field1436.app(anf_arg1435,("hint"));
}
break;
case 19: var anf_array_val1437 = $ans1396;
var anf_arg1439 = [anf_array_val1437];
$step1393 = 20;
$al1397 = L[507];
$field1440 = R.getColonFieldLoc(anf_method_obj1438,"make",L[507]);
if(R.isMethod($field1440)) {
$ans1396 = $field1440.full_meth(anf_method_obj1438,anf_arg1439);
} else {
if(!(R.isFunction($field1440))) {
R.ffi.throwNonFunApp(L[507],$field1440);
}
$ans1396 = $field1440.app(anf_arg1439);
}
break;
case 20: var anf_array_val1443 = $ans1396;
var anf_arg1445 = [anf_array_val1441,anf_array_val1442,anf_array_val1443];
$step1393 = 21;
$al1397 = L[489];
$field1446 = R.getColonFieldLoc(anf_method_obj1444,"make",L[489]);
if(R.isMethod($field1446)) {
$ans1396 = $field1446.full_meth(anf_method_obj1444,anf_arg1445);
} else {
if(!(R.isFunction($field1446))) {
R.ffi.throwNonFunApp(L[489],$field1446);
}
$ans1396 = $field1446.app(anf_arg1445);
}
break;
case 21: var missing1492 = $ans1396;
var anf_method_obj1477 = G(ED12,"error",L[510]);
var anf_method_obj1449 = G(ED12,"para",L[511]);
$step1393 = 22;
$al1397 = L[512];
$field1447 = R.getColonFieldLoc(ED12,"text",L[512]);
if(R.isMethod($field1447)) {
$ans1396 = $field1447.full_meth(ED12,("The program contains something extra"));
} else {
if(!(R.isFunction($field1447))) {
R.ffi.throwNonFunApp(L[512],$field1447);
}
$ans1396 = $field1447.app(("The program contains something extra"));
}
break;
case 22: var anf_array_val1448 = $ans1396;
var anf_arg1450 = [anf_array_val1448];
$step1393 = 23;
$al1397 = L[511];
$field1451 = R.getColonFieldLoc(anf_method_obj1449,"make",L[511]);
if(R.isMethod($field1451)) {
$ans1396 = $field1451.full_meth(anf_method_obj1449,anf_arg1450);
} else {
if(!(R.isFunction($field1451))) {
R.ffi.throwNonFunApp(L[511],$field1451);
}
$ans1396 = $field1451.app(anf_arg1450);
}
break;
case 23: var anf_array_val1474 = $ans1396;
var anf_method_obj1462 = G(ED12,"para-nospace",L[513]);
$step1393 = 24;
$al1397 = L[514];
$field1452 = R.getColonFieldLoc(ED12,"text",L[514]);
if(R.isMethod($field1452)) {
$ans1396 = $field1452.full_meth(ED12,("Look carefully before the "));
} else {
if(!(R.isFunction($field1452))) {
R.ffi.throwNonFunApp(L[514],$field1452);
}
$ans1396 = $field1452.app(("Look carefully before the "));
}
break;
case 24: var anf_array_val1458 = $ans1396;
$step1393 = 25;
$al1397 = L[515];
$field1453 = R.getColonFieldLoc(ED12,"text",L[515]);
if(R.isMethod($field1453)) {
$ans1396 = $field1453.full_meth(ED12,("highlighted text"));
} else {
if(!(R.isFunction($field1453))) {
R.ffi.throwNonFunApp(L[515],$field1453);
}
$ans1396 = $field1453.app(("highlighted text"));
}
break;
case 25: var anf_arg1454 = $ans1396;
$step1393 = 26;
$al1397 = L[516];
$field1455 = R.getColonFieldLoc(ED12,"styled",L[516]);
if(R.isMethod($field1455)) {
$ans1396 = $field1455.full_meth(ED12,anf_arg1454,("error-highlight"));
} else {
if(!(R.isFunction($field1455))) {
R.ffi.throwNonFunApp(L[516],$field1455);
}
$ans1396 = $field1455.app(anf_arg1454,("error-highlight"));
}
break;
case 26: var anf_array_val1459 = $ans1396;
$step1393 = 27;
$al1397 = L[517];
$field1456 = R.getColonFieldLoc(ED12,"text",L[517]);
if(R.isMethod($field1456)) {
$ans1396 = $field1456.full_meth(ED12,(".  Does it contains something extra?"));
} else {
if(!(R.isFunction($field1456))) {
R.ffi.throwNonFunApp(L[517],$field1456);
}
$ans1396 = $field1456.app((".  Does it contains something extra?"));
}
break;
case 27: var anf_array_val1460 = $ans1396;
$step1393 = 28;
$al1397 = L[518];
$field1457 = R.getColonFieldLoc(ED12,"text",L[518]);
if(R.isMethod($field1457)) {
$ans1396 = $field1457.full_meth(ED12,("  A common source of errors is typing too much text or in the wrong order."));
} else {
if(!(R.isFunction($field1457))) {
R.ffi.throwNonFunApp(L[518],$field1457);
}
$ans1396 = $field1457.app(("  A common source of errors is typing too much text or in the wrong order."));
}
break;
case 28: var anf_array_val1461 = $ans1396;
var anf_arg1463 = [anf_array_val1458,anf_array_val1459,anf_array_val1460,anf_array_val1461];
$step1393 = 29;
$al1397 = L[513];
$field1464 = R.getColonFieldLoc(anf_method_obj1462,"make",L[513]);
if(R.isMethod($field1464)) {
$ans1396 = $field1464.full_meth(anf_method_obj1462,anf_arg1463);
} else {
if(!(R.isFunction($field1464))) {
R.ffi.throwNonFunApp(L[513],$field1464);
}
$ans1396 = $field1464.app(anf_arg1463);
}
break;
case 29: var anf_array_val1475 = $ans1396;
var anf_method_obj1471 = G(ED12,"para",L[519]);
$step1393 = 30;
$al1397 = L[520];
$field1465 = R.getColonFieldLoc(ED12,"text",L[520]);
if(R.isMethod($field1465)) {
$ans1396 = $field1465.full_meth(ED12,("Usually, removing the extra item will fix this error."));
} else {
if(!(R.isFunction($field1465))) {
R.ffi.throwNonFunApp(L[520],$field1465);
}
$ans1396 = $field1465.app(("Usually, removing the extra item will fix this error."));
}
break;
case 30: var anf_arg1466 = $ans1396;
$step1393 = 31;
$al1397 = L[521];
$field1467 = R.getColonFieldLoc(ED12,"styled",L[521]);
if(R.isMethod($field1467)) {
$ans1396 = $field1467.full_meth(ED12,anf_arg1466,("hint"));
} else {
if(!(R.isFunction($field1467))) {
R.ffi.throwNonFunApp(L[521],$field1467);
}
$ans1396 = $field1467.app(anf_arg1466,("hint"));
}
break;
case 31: var anf_array_val1469 = $ans1396;
$step1393 = 32;
$al1397 = L[522];
$field1468 = R.getColonFieldLoc(ED12,"text",L[522]);
if(R.isMethod($field1468)) {
$ans1396 = $field1468.full_meth(ED12,("However, you may have meant to keep this text, so think before you delete!"));
} else {
if(!(R.isFunction($field1468))) {
R.ffi.throwNonFunApp(L[522],$field1468);
}
$ans1396 = $field1468.app(("However, you may have meant to keep this text, so think before you delete!"));
}
break;
case 32: var anf_array_val1470 = $ans1396;
var anf_arg1472 = [anf_array_val1469,anf_array_val1470];
$step1393 = 33;
$al1397 = L[519];
$field1473 = R.getColonFieldLoc(anf_method_obj1471,"make",L[519]);
if(R.isMethod($field1473)) {
$ans1396 = $field1473.full_meth(anf_method_obj1471,anf_arg1472);
} else {
if(!(R.isFunction($field1473))) {
R.ffi.throwNonFunApp(L[519],$field1473);
}
$ans1396 = $field1473.app(anf_arg1472);
}
break;
case 33: var anf_array_val1476 = $ans1396;
var anf_arg1478 = [anf_array_val1474,anf_array_val1475,anf_array_val1476];
$step1393 = 34;
$al1397 = L[510];
$field1479 = R.getColonFieldLoc(anf_method_obj1477,"make",L[510]);
if(R.isMethod($field1479)) {
$ans1396 = $field1479.full_meth(anf_method_obj1477,anf_arg1478);
} else {
if(!(R.isFunction($field1479))) {
R.ffi.throwNonFunApp(L[510],$field1479);
}
$ans1396 = $field1479.app(anf_arg1478);
}
break;
case 34: var extra1493 = $ans1396;
var anf_method_obj1504 = G(ED12,"error",L[523]);
var anf_method_obj1484 = G(ED12,"para",L[524]);
$step1393 = 35;
$al1397 = L[525];
$field1480 = R.getColonFieldLoc(ED12,"text",L[525]);
if(R.isMethod($field1480)) {
$ans1396 = $field1480.full_meth(ED12,("Pyret didn't understand your program around"));
} else {
if(!(R.isFunction($field1480))) {
R.ffi.throwNonFunApp(L[525],$field1480);
}
$ans1396 = $field1480.app(("Pyret didn't understand your program around"));
}
break;
case 35: var anf_array_val1482 = $ans1396;
var anf_arg1481 = G(self1395,"loc",L[526]);
$step1393 = 36;
$al1397 = L[531];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al1397,draw$and$highlight33.$var);
}
$ans1396 = draw$and$highlight33.$var.app(anf_arg1481);
break;
case 36: var anf_array_val1483 = $ans1396;
var anf_arg1485 = [anf_array_val1482,anf_array_val1483];
$step1393 = 37;
$al1397 = L[524];
$field1486 = R.getColonFieldLoc(anf_method_obj1484,"make",L[524]);
if(R.isMethod($field1486)) {
$ans1396 = $field1486.full_meth(anf_method_obj1484,anf_arg1485);
} else {
if(!(R.isFunction($field1486))) {
R.ffi.throwNonFunApp(L[524],$field1486);
}
$ans1396 = $field1486.app(anf_arg1485);
}
break;
case 37: var anf_array_val1502 = $ans1396;
var anf_method_obj1499 = G(ED12,"opt",L[527]);
var anf_method_obj1489 = G(ED12,"para",L[528]);
$step1393 = 38;
$al1397 = L[529];
$field1487 = R.getColonFieldLoc(ED12,"text",L[529]);
if(R.isMethod($field1487)) {
$ans1396 = $field1487.full_meth(ED12,("Typical reasons for getting this error are"));
} else {
if(!(R.isFunction($field1487))) {
R.ffi.throwNonFunApp(L[529],$field1487);
}
$ans1396 = $field1487.app(("Typical reasons for getting this error are"));
}
break;
case 38: var anf_array_val1488 = $ans1396;
var anf_arg1490 = [anf_array_val1488];
$step1393 = 39;
$al1397 = L[528];
$field1491 = R.getColonFieldLoc(anf_method_obj1489,"make",L[528]);
if(R.isMethod($field1491)) {
$ans1396 = $field1491.full_meth(anf_method_obj1489,anf_arg1490);
} else {
if(!(R.isFunction($field1491))) {
R.ffi.throwNonFunApp(L[528],$field1491);
}
$ans1396 = $field1491.app(anf_arg1490);
}
break;
case 39: var anf_array_val1497 = $ans1396;
var anf_method_obj1494 = G(ED12,"bulleted",L[530]);
var anf_arg1495 = [missing1492,extra1493];
$step1393 = 40;
$al1397 = L[530];
$field1496 = R.getColonFieldLoc(anf_method_obj1494,"make",L[530]);
if(R.isMethod($field1496)) {
$ans1396 = $field1496.full_meth(anf_method_obj1494,anf_arg1495);
} else {
if(!(R.isFunction($field1496))) {
R.ffi.throwNonFunApp(L[530],$field1496);
}
$ans1396 = $field1496.app(anf_arg1495);
}
break;
case 40: var anf_array_val1498 = $ans1396;
var anf_arg1500 = [anf_array_val1497,anf_array_val1498];
$step1393 = 41;
$al1397 = L[527];
$field1501 = R.getColonFieldLoc(anf_method_obj1499,"make",L[527]);
if(R.isMethod($field1501)) {
$ans1396 = $field1501.full_meth(anf_method_obj1499,anf_arg1500);
} else {
if(!(R.isFunction($field1501))) {
R.ffi.throwNonFunApp(L[527],$field1501);
}
$ans1396 = $field1501.app(anf_arg1500);
}
break;
case 41: var anf_array_val1503 = $ans1396;
var anf_arg1505 = [anf_array_val1502,anf_array_val1503];
$step1393 = 42;
$al1397 = L[523];
$field1506 = R.getColonFieldLoc(anf_method_obj1504,"make",L[523]);
if(R.isMethod($field1506)) {
$ans1396 = $field1506.full_meth(anf_method_obj1504,anf_arg1505);
} else {
if(!(R.isFunction($field1506))) {
R.ffi.throwNonFunApp(L[523],$field1506);
}
$ans1396 = $field1506.app(anf_arg1505);
}
break;
case 42: ++R.GAS;
return $ans1396;
default: throw "No case numbered " + $step1393 + " in $temp_full1394";
}
}
} catch($e1507) {
if(R.isCont($e1507) && ($step1393 !== 42)) {
$e1507.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1397,$temp_full1394,$step1393,[self1395],[anf_array_val1497,anf_method_obj1489,anf_method_obj1499,anf_array_val1502,anf_array_val1482,anf_method_obj1484,anf_method_obj1504,extra1493,anf_array_val1469,anf_method_obj1471,anf_array_val1475,anf_array_val1460,anf_array_val1459,anf_array_val1458,anf_method_obj1462,anf_array_val1474,anf_method_obj1449,anf_method_obj1477,missing1492,anf_method_obj1438,anf_array_val1442,anf_array_val1429,anf_array_val1428,anf_array_val1427,anf_array_val1426,anf_array_val1425,anf_array_val1424,anf_array_val1423,anf_array_val1422,anf_array_val1421,anf_method_obj1431,anf_array_val1441,anf_method_obj1400,anf_method_obj1444]);
}
if(R.isPyretException($e1507)) {
$e1507.pyretStack.push($al1397);
}
throw $e1507;
}
};
var anf_variant_member1656 = R.makeMethod0($temp_full1394);
var $temp_full1509 = function($self1510) {
var $step1508 = 0;
var $ans1511 = D;
var $al1512 = L[537];
try {
if(R.isActivationRecord($self1510)) {
$step1508 = $self1510.step;
$al1512 = $self1510.from;
$ans1511 = $self1510.ans;
self1510 = $self1510.args[0];
anf_array_val1515 = $self1510.vars[0];
anf_method_obj1517 = $self1510.vars[1];
anf_method_obj1521 = $self1510.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[537],1,$t);
}
var self1510 = $self1510;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1508) {
case 0: var anf_method_obj1521 = G(ED12,"error",L[533]);
var anf_method_obj1517 = G(ED12,"para",L[534]);
$step1508 = 1;
$al1512 = L[535];
$field1513 = R.getColonFieldLoc(ED12,"text",L[535]);
if(R.isMethod($field1513)) {
$ans1511 = $field1513.full_meth(ED12,("Pyret didn't understand the very end of your program."));
} else {
if(!(R.isFunction($field1513))) {
R.ffi.throwNonFunApp(L[535],$field1513);
}
$ans1511 = $field1513.app(("Pyret didn't understand the very end of your program."));
}
break;
case 1: var anf_array_val1515 = $ans1511;
$step1508 = 2;
$al1512 = L[536];
$field1514 = R.getColonFieldLoc(ED12,"text",L[536]);
if(R.isMethod($field1514)) {
$ans1511 = $field1514.full_meth(ED12,("You may be missing an \"end\", or closing punctuation like \")\" or \"]\" right at the end."));
} else {
if(!(R.isFunction($field1514))) {
R.ffi.throwNonFunApp(L[536],$field1514);
}
$ans1511 = $field1514.app(("You may be missing an \"end\", or closing punctuation like \")\" or \"]\" right at the end."));
}
break;
case 2: var anf_array_val1516 = $ans1511;
var anf_arg1518 = [anf_array_val1515,anf_array_val1516];
$step1508 = 3;
$al1512 = L[534];
$field1519 = R.getColonFieldLoc(anf_method_obj1517,"make",L[534]);
if(R.isMethod($field1519)) {
$ans1511 = $field1519.full_meth(anf_method_obj1517,anf_arg1518);
} else {
if(!(R.isFunction($field1519))) {
R.ffi.throwNonFunApp(L[534],$field1519);
}
$ans1511 = $field1519.app(anf_arg1518);
}
break;
case 3: var anf_array_val1520 = $ans1511;
var anf_arg1522 = [anf_array_val1520];
$step1508 = 4;
$al1512 = L[533];
$field1523 = R.getColonFieldLoc(anf_method_obj1521,"make",L[533]);
if(R.isMethod($field1523)) {
$ans1511 = $field1523.full_meth(anf_method_obj1521,anf_arg1522);
} else {
if(!(R.isFunction($field1523))) {
R.ffi.throwNonFunApp(L[533],$field1523);
}
$ans1511 = $field1523.app(anf_arg1522);
}
break;
case 4: ++R.GAS;
return $ans1511;
default: throw "No case numbered " + $step1508 + " in $temp_full1509";
}
}
} catch($e1524) {
if(R.isCont($e1524) && ($step1508 !== 4)) {
$e1524.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1512,$temp_full1509,$step1508,[self1510],[anf_array_val1515,anf_method_obj1517,anf_method_obj1521]);
}
if(R.isPyretException($e1524)) {
$e1524.pyretStack.push($al1512);
}
throw $e1524;
}
};
var anf_variant_member1667 = R.makeMethod0($temp_full1509);
var $temp_full1526 = function($self1527) {
var $step1525 = 0;
var $ans1528 = D;
var $al1529 = L[544];
try {
if(R.isActivationRecord($self1527)) {
$step1525 = $self1527.step;
$al1529 = $self1527.from;
$ans1528 = $self1527.ans;
self1527 = $self1527.args[0];
anf_array_val1534 = $self1527.vars[0];
anf_array_val1533 = $self1527.vars[1];
anf_method_obj1536 = $self1527.vars[2];
anf_method_obj1540 = $self1527.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[544],1,$t);
}
var self1527 = $self1527;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1525) {
case 0: var anf_method_obj1540 = G(ED12,"error",L[538]);
var anf_method_obj1536 = G(ED12,"para-nospace",L[539]);
$step1525 = 1;
$al1529 = L[540];
$field1530 = R.getColonFieldLoc(ED12,"text",L[540]);
if(R.isMethod($field1530)) {
$ans1528 = $field1530.full_meth(ED12,("Pyret thinks your program has an incomplete string literal around "));
} else {
if(!(R.isFunction($field1530))) {
R.ffi.throwNonFunApp(L[540],$field1530);
}
$ans1528 = $field1530.app(("Pyret thinks your program has an incomplete string literal around "));
}
break;
case 1: var anf_array_val1533 = $ans1528;
var anf_arg1531 = G(self1527,"loc",L[541]);
$step1525 = 2;
$al1529 = L[543];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al1529,draw$and$highlight33.$var);
}
$ans1528 = draw$and$highlight33.$var.app(anf_arg1531);
break;
case 2: var anf_array_val1534 = $ans1528;
$step1525 = 3;
$al1529 = L[542];
$field1532 = R.getColonFieldLoc(ED12,"text",L[542]);
if(R.isMethod($field1532)) {
$ans1528 = $field1532.full_meth(ED12,("; you may be missing closing punctuation."));
} else {
if(!(R.isFunction($field1532))) {
R.ffi.throwNonFunApp(L[542],$field1532);
}
$ans1528 = $field1532.app(("; you may be missing closing punctuation."));
}
break;
case 3: var anf_array_val1535 = $ans1528;
var anf_arg1537 = [anf_array_val1533,anf_array_val1534,anf_array_val1535];
$step1525 = 4;
$al1529 = L[539];
$field1538 = R.getColonFieldLoc(anf_method_obj1536,"make",L[539]);
if(R.isMethod($field1538)) {
$ans1528 = $field1538.full_meth(anf_method_obj1536,anf_arg1537);
} else {
if(!(R.isFunction($field1538))) {
R.ffi.throwNonFunApp(L[539],$field1538);
}
$ans1528 = $field1538.app(anf_arg1537);
}
break;
case 4: var anf_array_val1539 = $ans1528;
var anf_arg1541 = [anf_array_val1539];
$step1525 = 5;
$al1529 = L[538];
$field1542 = R.getColonFieldLoc(anf_method_obj1540,"make",L[538]);
if(R.isMethod($field1542)) {
$ans1528 = $field1542.full_meth(anf_method_obj1540,anf_arg1541);
} else {
if(!(R.isFunction($field1542))) {
R.ffi.throwNonFunApp(L[538],$field1542);
}
$ans1528 = $field1542.app(anf_arg1541);
}
break;
case 5: ++R.GAS;
return $ans1528;
default: throw "No case numbered " + $step1525 + " in $temp_full1526";
}
}
} catch($e1543) {
if(R.isCont($e1543) && ($step1525 !== 5)) {
$e1543.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1529,$temp_full1526,$step1525,[self1527],[anf_array_val1534,anf_array_val1533,anf_method_obj1536,anf_method_obj1540]);
}
if(R.isPyretException($e1543)) {
$e1543.pyretStack.push($al1529);
}
throw $e1543;
}
};
var anf_variant_member1677 = R.makeMethod0($temp_full1526);
var $temp_full1545 = function($self1546) {
var $step1544 = 0;
var $ans1547 = D;
var $al1548 = L[551];
try {
if(R.isActivationRecord($self1546)) {
$step1544 = $self1546.step;
$al1548 = $self1546.from;
$ans1547 = $self1546.ans;
self1546 = $self1546.args[0];
anf_array_val1553 = $self1546.vars[0];
anf_array_val1552 = $self1546.vars[1];
anf_method_obj1555 = $self1546.vars[2];
anf_method_obj1559 = $self1546.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[551],1,$t);
}
var self1546 = $self1546;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1544) {
case 0: var anf_method_obj1559 = G(ED12,"error",L[545]);
var anf_method_obj1555 = G(ED12,"para-nospace",L[546]);
$step1544 = 1;
$al1548 = L[547];
$field1549 = R.getColonFieldLoc(ED12,"text",L[547]);
if(R.isMethod($field1549)) {
$ans1547 = $field1549.full_meth(ED12,("The operator at "));
} else {
if(!(R.isFunction($field1549))) {
R.ffi.throwNonFunApp(L[547],$field1549);
}
$ans1547 = $field1549.app(("The operator at "));
}
break;
case 1: var anf_array_val1552 = $ans1547;
var anf_arg1550 = G(self1546,"loc",L[548]);
$step1544 = 2;
$al1548 = L[550];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al1548,draw$and$highlight33.$var);
}
$ans1547 = draw$and$highlight33.$var.app(anf_arg1550);
break;
case 2: var anf_array_val1553 = $ans1547;
$step1544 = 3;
$al1548 = L[549];
$field1551 = R.getColonFieldLoc(ED12,"text",L[549]);
if(R.isMethod($field1551)) {
$ans1547 = $field1551.full_meth(ED12,(" has no surrounding whitespace."));
} else {
if(!(R.isFunction($field1551))) {
R.ffi.throwNonFunApp(L[549],$field1551);
}
$ans1547 = $field1551.app((" has no surrounding whitespace."));
}
break;
case 3: var anf_array_val1554 = $ans1547;
var anf_arg1556 = [anf_array_val1552,anf_array_val1553,anf_array_val1554];
$step1544 = 4;
$al1548 = L[546];
$field1557 = R.getColonFieldLoc(anf_method_obj1555,"make",L[546]);
if(R.isMethod($field1557)) {
$ans1547 = $field1557.full_meth(anf_method_obj1555,anf_arg1556);
} else {
if(!(R.isFunction($field1557))) {
R.ffi.throwNonFunApp(L[546],$field1557);
}
$ans1547 = $field1557.app(anf_arg1556);
}
break;
case 4: var anf_array_val1558 = $ans1547;
var anf_arg1560 = [anf_array_val1558];
$step1544 = 5;
$al1548 = L[545];
$field1561 = R.getColonFieldLoc(anf_method_obj1559,"make",L[545]);
if(R.isMethod($field1561)) {
$ans1547 = $field1561.full_meth(anf_method_obj1559,anf_arg1560);
} else {
if(!(R.isFunction($field1561))) {
R.ffi.throwNonFunApp(L[545],$field1561);
}
$ans1547 = $field1561.app(anf_arg1560);
}
break;
case 5: ++R.GAS;
return $ans1547;
default: throw "No case numbered " + $step1544 + " in $temp_full1545";
}
}
} catch($e1562) {
if(R.isCont($e1562) && ($step1544 !== 5)) {
$e1562.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1548,$temp_full1545,$step1544,[self1546],[anf_array_val1553,anf_array_val1552,anf_method_obj1555,anf_method_obj1559]);
}
if(R.isPyretException($e1562)) {
$e1562.pyretStack.push($al1548);
}
throw $e1562;
}
};
var anf_variant_member1687 = R.makeMethod0($temp_full1545);
var $temp_full1564 = function($self1565) {
var $step1563 = 0;
var $ans1566 = D;
var $al1567 = L[558];
try {
if(R.isActivationRecord($self1565)) {
$step1563 = $self1565.step;
$al1567 = $self1565.from;
$ans1566 = $self1565.ans;
self1565 = $self1565.args[0];
anf_array_val1572 = $self1565.vars[0];
anf_array_val1571 = $self1565.vars[1];
anf_method_obj1574 = $self1565.vars[2];
anf_method_obj1578 = $self1565.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[558],1,$t);
}
var self1565 = $self1565;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1563) {
case 0: var anf_method_obj1578 = G(ED12,"error",L[552]);
var anf_method_obj1574 = G(ED12,"para-nospace",L[553]);
$step1563 = 1;
$al1567 = L[554];
$field1568 = R.getColonFieldLoc(ED12,"text",L[554]);
if(R.isMethod($field1568)) {
$ans1566 = $field1568.full_meth(ED12,("Pyret thinks your program probably has a number at "));
} else {
if(!(R.isFunction($field1568))) {
R.ffi.throwNonFunApp(L[554],$field1568);
}
$ans1566 = $field1568.app(("Pyret thinks your program probably has a number at "));
}
break;
case 1: var anf_array_val1571 = $ans1566;
var anf_arg1569 = G(self1565,"loc",L[555]);
$step1563 = 2;
$al1567 = L[557];
if(!(R.isFunction(draw$and$highlight33.$var))) {
R.ffi.throwNonFunApp($al1567,draw$and$highlight33.$var);
}
$ans1566 = draw$and$highlight33.$var.app(anf_arg1569);
break;
case 2: var anf_array_val1572 = $ans1566;
$step1563 = 3;
$al1567 = L[556];
$field1570 = R.getColonFieldLoc(ED12,"text",L[556]);
if(R.isMethod($field1570)) {
$ans1566 = $field1570.full_meth(ED12,("; number literals in Pyret require at least one digit before the decimal point."));
} else {
if(!(R.isFunction($field1570))) {
R.ffi.throwNonFunApp(L[556],$field1570);
}
$ans1566 = $field1570.app(("; number literals in Pyret require at least one digit before the decimal point."));
}
break;
case 3: var anf_array_val1573 = $ans1566;
var anf_arg1575 = [anf_array_val1571,anf_array_val1572,anf_array_val1573];
$step1563 = 4;
$al1567 = L[553];
$field1576 = R.getColonFieldLoc(anf_method_obj1574,"make",L[553]);
if(R.isMethod($field1576)) {
$ans1566 = $field1576.full_meth(anf_method_obj1574,anf_arg1575);
} else {
if(!(R.isFunction($field1576))) {
R.ffi.throwNonFunApp(L[553],$field1576);
}
$ans1566 = $field1576.app(anf_arg1575);
}
break;
case 4: var anf_array_val1577 = $ans1566;
var anf_arg1579 = [anf_array_val1577];
$step1563 = 5;
$al1567 = L[552];
$field1580 = R.getColonFieldLoc(anf_method_obj1578,"make",L[552]);
if(R.isMethod($field1580)) {
$ans1566 = $field1580.full_meth(anf_method_obj1578,anf_arg1579);
} else {
if(!(R.isFunction($field1580))) {
R.ffi.throwNonFunApp(L[552],$field1580);
}
$ans1566 = $field1580.app(anf_arg1579);
}
break;
case 5: ++R.GAS;
return $ans1566;
default: throw "No case numbered " + $step1563 + " in $temp_full1564";
}
}
} catch($e1581) {
if(R.isCont($e1581) && ($step1563 !== 5)) {
$e1581.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1567,$temp_full1564,$step1563,[self1565],[anf_array_val1572,anf_array_val1571,anf_method_obj1574,anf_method_obj1578]);
}
if(R.isPyretException($e1581)) {
$e1581.pyretStack.push($al1567);
}
throw $e1581;
}
};
var anf_variant_member1697 = R.makeMethod0($temp_full1564);
var $temp_full1583 = function($self1584,$tostring1585) {
var $step1582 = 0;
var $ans1586 = D;
var $al1587 = L[562];
try {
if(R.isActivationRecord($self1584)) {
$step1582 = $self1584.step;
$al1587 = $self1584.from;
$ans1586 = $self1584.ans;
self1584 = $self1584.args[0];
tostring1585 = $self1584.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[562],2,$t);
}
var self1584 = $self1584;
var tostring1585 = $tostring1585;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1582) {
case 0: var anf_method_obj1588 = G(self1584,"loc",L[559]);
$step1582 = 1;
$al1587 = L[560];
$field1589 = R.getColonFieldLoc(anf_method_obj1588,"format",L[560]);
if(R.isMethod($field1589)) {
$ans1586 = $field1589.full_meth(anf_method_obj1588,(true));
} else {
if(!(R.isFunction($field1589))) {
R.ffi.throwNonFunApp(L[560],$field1589);
}
$ans1586 = $field1589.app((true));
}
break;
case 1: var anf_arg1590 = $ans1586;
$step1582 = 2;
$al1587 = L[561];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1587,_plus1);
}
$ans1586 = _plus1.app(("Empty block at "),anf_arg1590);
break;
case 2: ++R.GAS;
return $ans1586;
default: throw "No case numbered " + $step1582 + " in $temp_full1583";
}
}
} catch($e1591) {
if(R.isCont($e1591) && ($step1582 !== 2)) {
$e1591.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1587,$temp_full1583,$step1582,[self1584,tostring1585],[]);
}
if(R.isPyretException($e1591)) {
$e1591.pyretStack.push($al1587);
}
throw $e1591;
}
};
var anf_variant_member1707 = R.makeMethod1($temp_full1583);
var $temp_full1593 = function($self1594,$tostring1595) {
var $step1592 = 0;
var $ans1596 = D;
var $al1597 = L[566];
try {
if(R.isActivationRecord($self1594)) {
$step1592 = $self1594.step;
$al1597 = $self1594.from;
$ans1596 = $self1594.ans;
self1594 = $self1594.args[0];
tostring1595 = $self1594.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[566],2,$t);
}
var self1594 = $self1594;
var tostring1595 = $tostring1595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1592) {
case 0: var anf_method_obj1598 = G(self1594,"loc",L[563]);
$step1592 = 1;
$al1597 = L[564];
$field1599 = R.getColonFieldLoc(anf_method_obj1598,"format",L[564]);
if(R.isMethod($field1599)) {
$ans1596 = $field1599.full_meth(anf_method_obj1598,(true));
} else {
if(!(R.isFunction($field1599))) {
R.ffi.throwNonFunApp(L[564],$field1599);
}
$ans1596 = $field1599.app((true));
}
break;
case 1: var anf_arg1600 = $ans1596;
$step1592 = 2;
$al1597 = L[565];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1597,_plus1);
}
$ans1596 = _plus1.app(("Expected a val binding or an expression, but got something else "),anf_arg1600);
break;
case 2: ++R.GAS;
return $ans1596;
default: throw "No case numbered " + $step1592 + " in $temp_full1593";
}
}
} catch($e1601) {
if(R.isCont($e1601) && ($step1592 !== 2)) {
$e1601.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1597,$temp_full1593,$step1592,[self1594,tostring1595],[]);
}
if(R.isPyretException($e1601)) {
$e1601.pyretStack.push($al1597);
}
throw $e1601;
}
};
var anf_variant_member1717 = R.makeMethod1($temp_full1593);
var $temp_full1603 = function($self1604,$tostring1605) {
var $step1602 = 0;
var $ans1606 = D;
var $al1607 = L[570];
try {
if(R.isActivationRecord($self1604)) {
$step1602 = $self1604.step;
$al1607 = $self1604.from;
$ans1606 = $self1604.ans;
self1604 = $self1604.args[0];
tostring1605 = $self1604.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[570],2,$t);
}
var self1604 = $self1604;
var tostring1605 = $tostring1605;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1602) {
case 0: var anf_method_obj1608 = G(self1604,"loc",L[567]);
$step1602 = 1;
$al1607 = L[568];
$field1609 = R.getColonFieldLoc(anf_method_obj1608,"format",L[568]);
if(R.isMethod($field1609)) {
$ans1606 = $field1609.full_meth(anf_method_obj1608,(true));
} else {
if(!(R.isFunction($field1609))) {
R.ffi.throwNonFunApp(L[568],$field1609);
}
$ans1606 = $field1609.app((true));
}
break;
case 1: var anf_arg1610 = $ans1606;
$step1602 = 2;
$al1607 = L[569];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1607,_plus1);
}
$ans1606 = _plus1.app(("Expected a val binding or an expression, but got something else "),anf_arg1610);
break;
case 2: ++R.GAS;
return $ans1606;
default: throw "No case numbered " + $step1602 + " in $temp_full1603";
}
}
} catch($e1611) {
if(R.isCont($e1611) && ($step1602 !== 2)) {
$e1611.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1607,$temp_full1603,$step1602,[self1604,tostring1605],[]);
}
if(R.isPyretException($e1611)) {
$e1611.pyretStack.push($al1607);
}
throw $e1611;
}
};
var anf_variant_member1727 = R.makeMethod1($temp_full1603);
var $temp_full1613 = function($self1614,$tostring1615) {
var $step1612 = 0;
var $ans1616 = D;
var $al1617 = L[574];
try {
if(R.isActivationRecord($self1614)) {
$step1612 = $self1614.step;
$al1617 = $self1614.from;
$ans1616 = $self1614.ans;
self1614 = $self1614.args[0];
tostring1615 = $self1614.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[574],2,$t);
}
var self1614 = $self1614;
var tostring1615 = $tostring1615;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1612) {
case 0: var anf_method_obj1618 = G(self1614,"loc",L[571]);
$step1612 = 1;
$al1617 = L[572];
$field1619 = R.getColonFieldLoc(anf_method_obj1618,"format",L[572]);
if(R.isMethod($field1619)) {
$ans1616 = $field1619.full_meth(anf_method_obj1618,(true));
} else {
if(!(R.isFunction($field1619))) {
R.ffi.throwNonFunApp(L[572],$field1619);
}
$ans1616 = $field1619.app((true));
}
break;
case 1: var anf_arg1620 = $ans1616;
$step1612 = 2;
$al1617 = L[573];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1617,_plus1);
}
$ans1616 = _plus1.app(("fun-missing-colon: "),anf_arg1620);
break;
case 2: ++R.GAS;
return $ans1616;
default: throw "No case numbered " + $step1612 + " in $temp_full1613";
}
}
} catch($e1621) {
if(R.isCont($e1621) && ($step1612 !== 2)) {
$e1621.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1617,$temp_full1613,$step1612,[self1614,tostring1615],[]);
}
if(R.isPyretException($e1621)) {
$e1621.pyretStack.push($al1617);
}
throw $e1621;
}
};
var anf_variant_member1737 = R.makeMethod1($temp_full1613);
var $temp_full1623 = function($self1624,$tostring1625) {
var $step1622 = 0;
var $ans1626 = D;
var $al1627 = L[578];
try {
if(R.isActivationRecord($self1624)) {
$step1622 = $self1624.step;
$al1627 = $self1624.from;
$ans1626 = $self1624.ans;
self1624 = $self1624.args[0];
tostring1625 = $self1624.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[578],2,$t);
}
var self1624 = $self1624;
var tostring1625 = $tostring1625;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1622) {
case 0: var anf_method_obj1628 = G(self1624,"loc",L[575]);
$step1622 = 1;
$al1627 = L[576];
$field1629 = R.getColonFieldLoc(anf_method_obj1628,"format",L[576]);
if(R.isMethod($field1629)) {
$ans1626 = $field1629.full_meth(anf_method_obj1628,(true));
} else {
if(!(R.isFunction($field1629))) {
R.ffi.throwNonFunApp(L[576],$field1629);
}
$ans1626 = $field1629.app((true));
}
break;
case 1: var anf_arg1630 = $ans1626;
$step1622 = 2;
$al1627 = L[577];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1627,_plus1);
}
$ans1626 = _plus1.app(("fun-missing-end: "),anf_arg1630);
break;
case 2: ++R.GAS;
return $ans1626;
default: throw "No case numbered " + $step1622 + " in $temp_full1623";
}
}
} catch($e1631) {
if(R.isCont($e1631) && ($step1622 !== 2)) {
$e1631.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1627,$temp_full1623,$step1622,[self1624,tostring1625],[]);
}
if(R.isPyretException($e1631)) {
$e1631.pyretStack.push($al1627);
}
throw $e1631;
}
};
var anf_variant_member1747 = R.makeMethod1($temp_full1623);
var $temp_full1633 = function($self1634,$tostring1635) {
var $step1632 = 0;
var $ans1636 = D;
var $al1637 = L[582];
try {
if(R.isActivationRecord($self1634)) {
$step1632 = $self1634.step;
$al1637 = $self1634.from;
$ans1636 = $self1634.ans;
self1634 = $self1634.args[0];
tostring1635 = $self1634.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[582],2,$t);
}
var self1634 = $self1634;
var tostring1635 = $tostring1635;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1632) {
case 0: var anf_method_obj1638 = G(self1634,"loc",L[579]);
$step1632 = 1;
$al1637 = L[580];
$field1639 = R.getColonFieldLoc(anf_method_obj1638,"format",L[580]);
if(R.isMethod($field1639)) {
$ans1636 = $field1639.full_meth(anf_method_obj1638,(true));
} else {
if(!(R.isFunction($field1639))) {
R.ffi.throwNonFunApp(L[580],$field1639);
}
$ans1636 = $field1639.app((true));
}
break;
case 1: var anf_arg1640 = $ans1636;
$step1632 = 2;
$al1637 = L[581];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1637,_plus1);
}
$ans1636 = _plus1.app(("args-missing-comma: "),anf_arg1640);
break;
case 2: ++R.GAS;
return $ans1636;
default: throw "No case numbered " + $step1632 + " in $temp_full1633";
}
}
} catch($e1641) {
if(R.isCont($e1641) && ($step1632 !== 2)) {
$e1641.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1637,$temp_full1633,$step1632,[self1634,tostring1635],[]);
}
if(R.isPyretException($e1641)) {
$e1641.pyretStack.push($al1637);
}
throw $e1641;
}
};
var anf_variant_member1757 = R.makeMethod1($temp_full1633);
var $temp_full1643 = function($self1644,$tostring1645) {
var $step1642 = 0;
var $ans1646 = D;
var $al1647 = L[586];
try {
if(R.isActivationRecord($self1644)) {
$step1642 = $self1644.step;
$al1647 = $self1644.from;
$ans1646 = $self1644.ans;
self1644 = $self1644.args[0];
tostring1645 = $self1644.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[586],2,$t);
}
var self1644 = $self1644;
var tostring1645 = $tostring1645;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1642) {
case 0: var anf_method_obj1648 = G(self1644,"loc",L[583]);
$step1642 = 1;
$al1647 = L[584];
$field1649 = R.getColonFieldLoc(anf_method_obj1648,"format",L[584]);
if(R.isMethod($field1649)) {
$ans1646 = $field1649.full_meth(anf_method_obj1648,(true));
} else {
if(!(R.isFunction($field1649))) {
R.ffi.throwNonFunApp(L[584],$field1649);
}
$ans1646 = $field1649.app((true));
}
break;
case 1: var anf_arg1650 = $ans1646;
$step1642 = 2;
$al1647 = L[585];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1647,_plus1);
}
$ans1646 = _plus1.app(("app-args-missing-comma: "),anf_arg1650);
break;
case 2: ++R.GAS;
return $ans1646;
default: throw "No case numbered " + $step1642 + " in $temp_full1643";
}
}
} catch($e1651) {
if(R.isCont($e1651) && ($step1642 !== 2)) {
$e1651.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1647,$temp_full1643,$step1642,[self1644,tostring1645],[]);
}
if(R.isPyretException($e1651)) {
$e1651.pyretStack.push($al1647);
}
throw $e1651;
}
};
var anf_variant_member1767 = R.makeMethod1($temp_full1643);
var $parse$error$next$token_getfields1659 = function(f) {
return f(this.dict["loc"],this.dict["next-token"]);
};
var $parse$error$next$token_getfieldsref1657 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["next-token"],false,refmask[1]));
};
var $parse$error$next$token_mutablemask1658 = [false,false];
var $parse$error$next$token$base1653 = {"$fieldNames":["loc","next-token"],
"render-reason":anf_shared1652,
"render-reason":anf_variant_member1656,
"_match":R.makeMatch("parse-error-next-token",2)};
var $parse$error$next$token$brands1655 = {"$brand$parse$error$next$token":true};
$parse$error$next$token$brands1655[ParseError22._brand] = true;
var parse$error$next$token1661 = R.makeVariantConstructor(L[589],function() {
return [$type$String7];
},["next$token1662"],[L[588]],[false,false],["loc1663","next$token1662"],$parse$error$next$token_mutablemask1658,$parse$error$next$token$base1653,$parse$error$next$token$brands1655,"parse-error-next-token",$parse$error$next$token_getfieldsref1657,$parse$error$next$token_getfields1659,$parse$error$next$token$base1653);
var $parse$error$eof_getfields1670 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$eof_getfieldsref1668 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$eof_mutablemask1669 = [false];
var $parse$error$eof$base1664 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"render-reason":anf_variant_member1667,
"_match":R.makeMatch("parse-error-eof",1)};
var $parse$error$eof$brands1666 = {"$brand$parse$error$eof":true};
$parse$error$eof$brands1666[ParseError22._brand] = true;
var parse$error$eof1672 = R.makeVariantConstructor(L[591],function() {
return [];
},[],[],[false],["loc1673"],$parse$error$eof_mutablemask1669,$parse$error$eof$base1664,$parse$error$eof$brands1666,"parse-error-eof",$parse$error$eof_getfieldsref1668,$parse$error$eof_getfields1670,$parse$error$eof$base1664);
var $parse$error$unterminated$string_getfields1680 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$unterminated$string_getfieldsref1678 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$unterminated$string_mutablemask1679 = [false];
var $parse$error$unterminated$string$base1674 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"render-reason":anf_variant_member1677,
"_match":R.makeMatch("parse-error-unterminated-string",1)};
var $parse$error$unterminated$string$brands1676 = {"$brand$parse$error$unterminated$string":true};
$parse$error$unterminated$string$brands1676[ParseError22._brand] = true;
var parse$error$unterminated$string1682 = R.makeVariantConstructor(L[593],function() {
return [];
},[],[],[false],["loc1683"],$parse$error$unterminated$string_mutablemask1679,$parse$error$unterminated$string$base1674,$parse$error$unterminated$string$brands1676,"parse-error-unterminated-string",$parse$error$unterminated$string_getfieldsref1678,$parse$error$unterminated$string_getfields1680,$parse$error$unterminated$string$base1674);
var $parse$error$bad$operator_getfields1690 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$bad$operator_getfieldsref1688 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$bad$operator_mutablemask1689 = [false];
var $parse$error$bad$operator$base1684 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"render-reason":anf_variant_member1687,
"_match":R.makeMatch("parse-error-bad-operator",1)};
var $parse$error$bad$operator$brands1686 = {"$brand$parse$error$bad$operator":true};
$parse$error$bad$operator$brands1686[ParseError22._brand] = true;
var parse$error$bad$operator1692 = R.makeVariantConstructor(L[595],function() {
return [];
},[],[],[false],["loc1693"],$parse$error$bad$operator_mutablemask1689,$parse$error$bad$operator$base1684,$parse$error$bad$operator$brands1686,"parse-error-bad-operator",$parse$error$bad$operator_getfieldsref1688,$parse$error$bad$operator_getfields1690,$parse$error$bad$operator$base1684);
var $parse$error$bad$number_getfields1700 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$bad$number_getfieldsref1698 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$bad$number_mutablemask1699 = [false];
var $parse$error$bad$number$base1694 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"render-reason":anf_variant_member1697,
"_match":R.makeMatch("parse-error-bad-number",1)};
var $parse$error$bad$number$brands1696 = {"$brand$parse$error$bad$number":true};
$parse$error$bad$number$brands1696[ParseError22._brand] = true;
var parse$error$bad$number1702 = R.makeVariantConstructor(L[597],function() {
return [];
},[],[],[false],["loc1703"],$parse$error$bad$number_mutablemask1699,$parse$error$bad$number$base1694,$parse$error$bad$number$brands1696,"parse-error-bad-number",$parse$error$bad$number_getfieldsref1698,$parse$error$bad$number_getfields1700,$parse$error$bad$number$base1694);
var $empty$block_getfields1710 = function(f) {
return f(this.dict["loc"]);
};
var $empty$block_getfieldsref1708 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $empty$block_mutablemask1709 = [false];
var $empty$block$base1704 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1707,
"_match":R.makeMatch("empty-block",1)};
var $empty$block$brands1706 = {"$brand$empty$block":true};
$empty$block$brands1706[ParseError22._brand] = true;
var empty$block1712 = R.makeVariantConstructor(L[599],function() {
return [];
},[],[],[false],["loc1713"],$empty$block_mutablemask1709,$empty$block$base1704,$empty$block$brands1706,"empty-block",$empty$block_getfieldsref1708,$empty$block_getfields1710,$empty$block$base1704);
var $bad$block$stmt_getfields1720 = function(f) {
return f(this.dict["loc"]);
};
var $bad$block$stmt_getfieldsref1718 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $bad$block$stmt_mutablemask1719 = [false];
var $bad$block$stmt$base1714 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1717,
"_match":R.makeMatch("bad-block-stmt",1)};
var $bad$block$stmt$brands1716 = {"$brand$bad$block$stmt":true};
$bad$block$stmt$brands1716[ParseError22._brand] = true;
var bad$block$stmt1722 = R.makeVariantConstructor(L[601],function() {
return [];
},[],[],[false],["loc1723"],$bad$block$stmt_mutablemask1719,$bad$block$stmt$base1714,$bad$block$stmt$brands1716,"bad-block-stmt",$bad$block$stmt_getfieldsref1718,$bad$block$stmt_getfields1720,$bad$block$stmt$base1714);
var $bad$check$block$stmt_getfields1730 = function(f) {
return f(this.dict["loc"]);
};
var $bad$check$block$stmt_getfieldsref1728 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $bad$check$block$stmt_mutablemask1729 = [false];
var $bad$check$block$stmt$base1724 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1727,
"_match":R.makeMatch("bad-check-block-stmt",1)};
var $bad$check$block$stmt$brands1726 = {"$brand$bad$check$block$stmt":true};
$bad$check$block$stmt$brands1726[ParseError22._brand] = true;
var bad$check$block$stmt1732 = R.makeVariantConstructor(L[603],function() {
return [];
},[],[],[false],["loc1733"],$bad$check$block$stmt_mutablemask1729,$bad$check$block$stmt$base1724,$bad$check$block$stmt$brands1726,"bad-check-block-stmt",$bad$check$block$stmt_getfieldsref1728,$bad$check$block$stmt_getfields1730,$bad$check$block$stmt$base1724);
var $fun$missing$colon_getfields1740 = function(f) {
return f(this.dict["loc"]);
};
var $fun$missing$colon_getfieldsref1738 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $fun$missing$colon_mutablemask1739 = [false];
var $fun$missing$colon$base1734 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1737,
"_match":R.makeMatch("fun-missing-colon",1)};
var $fun$missing$colon$brands1736 = {"$brand$fun$missing$colon":true};
$fun$missing$colon$brands1736[ParseError22._brand] = true;
var fun$missing$colon1742 = R.makeVariantConstructor(L[605],function() {
return [];
},[],[],[false],["loc1743"],$fun$missing$colon_mutablemask1739,$fun$missing$colon$base1734,$fun$missing$colon$brands1736,"fun-missing-colon",$fun$missing$colon_getfieldsref1738,$fun$missing$colon_getfields1740,$fun$missing$colon$base1734);
var $fun$missing$end_getfields1750 = function(f) {
return f(this.dict["loc"]);
};
var $fun$missing$end_getfieldsref1748 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $fun$missing$end_mutablemask1749 = [false];
var $fun$missing$end$base1744 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1747,
"_match":R.makeMatch("fun-missing-end",1)};
var $fun$missing$end$brands1746 = {"$brand$fun$missing$end":true};
$fun$missing$end$brands1746[ParseError22._brand] = true;
var fun$missing$end1752 = R.makeVariantConstructor(L[607],function() {
return [];
},[],[],[false],["loc1753"],$fun$missing$end_mutablemask1749,$fun$missing$end$base1744,$fun$missing$end$brands1746,"fun-missing-end",$fun$missing$end_getfieldsref1748,$fun$missing$end_getfields1750,$fun$missing$end$base1744);
var $args$missing$comma_getfields1760 = function(f) {
return f(this.dict["loc"]);
};
var $args$missing$comma_getfieldsref1758 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $args$missing$comma_mutablemask1759 = [false];
var $args$missing$comma$base1754 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1757,
"_match":R.makeMatch("args-missing-comma",1)};
var $args$missing$comma$brands1756 = {"$brand$args$missing$comma":true};
$args$missing$comma$brands1756[ParseError22._brand] = true;
var args$missing$comma1762 = R.makeVariantConstructor(L[609],function() {
return [];
},[],[],[false],["loc1763"],$args$missing$comma_mutablemask1759,$args$missing$comma$base1754,$args$missing$comma$brands1756,"args-missing-comma",$args$missing$comma_getfieldsref1758,$args$missing$comma_getfields1760,$args$missing$comma$base1754);
var $app$args$missing$comma_getfields1770 = function(f) {
return f(this.dict["loc"]);
};
var $app$args$missing$comma_getfieldsref1768 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $app$args$missing$comma_mutablemask1769 = [false];
var $app$args$missing$comma$base1764 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_tostring":anf_variant_member1767,
"_match":R.makeMatch("app-args-missing-comma",1)};
var $app$args$missing$comma$brands1766 = {"$brand$app$args$missing$comma":true};
$app$args$missing$comma$brands1766[ParseError22._brand] = true;
var app$args$missing$comma1772 = R.makeVariantConstructor(L[611],function() {
return [];
},[],[],[false],["loc1773"],$app$args$missing$comma_mutablemask1769,$app$args$missing$comma$base1764,$app$args$missing$comma$brands1766,"app-args-missing-comma",$app$args$missing$comma_getfieldsref1768,$app$args$missing$comma_getfields1770,$app$args$missing$comma$base1764);
var $missing$end_getfields1779 = function(f) {
return f(this.dict["loc"]);
};
var $missing$end_getfieldsref1777 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $missing$end_mutablemask1778 = [false];
var $missing$end$base1774 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_match":R.makeMatch("missing-end",1)};
var $missing$end$brands1776 = {"$brand$missing$end":true};
$missing$end$brands1776[ParseError22._brand] = true;
var missing$end1781 = R.makeVariantConstructor(L[613],function() {
return [];
},[],[],[false],["loc1782"],$missing$end_mutablemask1778,$missing$end$base1774,$missing$end$brands1776,"missing-end",$missing$end_getfieldsref1777,$missing$end_getfields1779,$missing$end$base1774);
var $missing$comma_getfields1788 = function(f) {
return f(this.dict["loc"]);
};
var $missing$comma_getfieldsref1786 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $missing$comma_mutablemask1787 = [false];
var $missing$comma$base1783 = {"$fieldNames":["loc"],
"render-reason":anf_shared1652,
"_match":R.makeMatch("missing-comma",1)};
var $missing$comma$brands1785 = {"$brand$missing$comma":true};
$missing$comma$brands1785[ParseError22._brand] = true;
var missing$comma1790 = R.makeVariantConstructor(L[615],function() {
return [];
},[],[],[false],["loc1791"],$missing$comma_mutablemask1787,$missing$comma$base1783,$missing$comma$brands1785,"missing-comma",$missing$comma_getfieldsref1786,$missing$comma_getfields1788,$missing$comma$base1783);
var anf_assign1793 = R.makeObject({"ParseError":R.makeFunction(function($val1792) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[616],1,$t);
}
return R.makeBoolean(R.hasBrand($val1792,ParseError22._brand));
}),
"is-parse-error-next-token":R.makeFunction(function($val1660) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[587],1,$t);
}
return R.makeBoolean(R.hasBrand($val1660,"$brand$parse$error$next$token"));
}),
"parse-error-next-token":parse$error$next$token1661,
"is-parse-error-eof":R.makeFunction(function($val1671) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[590],1,$t);
}
return R.makeBoolean(R.hasBrand($val1671,"$brand$parse$error$eof"));
}),
"parse-error-eof":parse$error$eof1672,
"is-parse-error-unterminated-string":R.makeFunction(function($val1681) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[592],1,$t);
}
return R.makeBoolean(R.hasBrand($val1681,"$brand$parse$error$unterminated$string"));
}),
"parse-error-unterminated-string":parse$error$unterminated$string1682,
"is-parse-error-bad-operator":R.makeFunction(function($val1691) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[594],1,$t);
}
return R.makeBoolean(R.hasBrand($val1691,"$brand$parse$error$bad$operator"));
}),
"parse-error-bad-operator":parse$error$bad$operator1692,
"is-parse-error-bad-number":R.makeFunction(function($val1701) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[596],1,$t);
}
return R.makeBoolean(R.hasBrand($val1701,"$brand$parse$error$bad$number"));
}),
"parse-error-bad-number":parse$error$bad$number1702,
"is-empty-block":R.makeFunction(function($val1711) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[598],1,$t);
}
return R.makeBoolean(R.hasBrand($val1711,"$brand$empty$block"));
}),
"empty-block":empty$block1712,
"is-bad-block-stmt":R.makeFunction(function($val1721) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[600],1,$t);
}
return R.makeBoolean(R.hasBrand($val1721,"$brand$bad$block$stmt"));
}),
"bad-block-stmt":bad$block$stmt1722,
"is-bad-check-block-stmt":R.makeFunction(function($val1731) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[602],1,$t);
}
return R.makeBoolean(R.hasBrand($val1731,"$brand$bad$check$block$stmt"));
}),
"bad-check-block-stmt":bad$check$block$stmt1732,
"is-fun-missing-colon":R.makeFunction(function($val1741) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[604],1,$t);
}
return R.makeBoolean(R.hasBrand($val1741,"$brand$fun$missing$colon"));
}),
"fun-missing-colon":fun$missing$colon1742,
"is-fun-missing-end":R.makeFunction(function($val1751) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[606],1,$t);
}
return R.makeBoolean(R.hasBrand($val1751,"$brand$fun$missing$end"));
}),
"fun-missing-end":fun$missing$end1752,
"is-args-missing-comma":R.makeFunction(function($val1761) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[608],1,$t);
}
return R.makeBoolean(R.hasBrand($val1761,"$brand$args$missing$comma"));
}),
"args-missing-comma":args$missing$comma1762,
"is-app-args-missing-comma":R.makeFunction(function($val1771) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[610],1,$t);
}
return R.makeBoolean(R.hasBrand($val1771,"$brand$app$args$missing$comma"));
}),
"app-args-missing-comma":app$args$missing$comma1772,
"is-missing-end":R.makeFunction(function($val1780) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[612],1,$t);
}
return R.makeBoolean(R.hasBrand($val1780,"$brand$missing$end"));
}),
"missing-end":missing$end1781,
"is-missing-comma":R.makeFunction(function($val1789) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[614],1,$t);
}
return R.makeBoolean(R.hasBrand($val1789,"$brand$missing$comma"));
}),
"missing-comma":missing$comma1790});
ParseError1794.$var = anf_assign1793;
var anf_assign1795 = G(ParseError1794.$var,"ParseError",L[616]);
ParseError1796.$var = anf_assign1795;
var anf_assign1797 = G(ParseError1794.$var,"ParseError",L[616]);
is$ParseError1798.$var = anf_assign1797;
var anf_assign1799 = G(ParseError1794.$var,"is-parse-error-next-token",L[587]);
is$parse$error$next$token1800.$var = anf_assign1799;
var anf_assign1801 = G(ParseError1794.$var,"parse-error-next-token",L[587]);
parse$error$next$token1802.$var = anf_assign1801;
var anf_assign1803 = G(ParseError1794.$var,"is-parse-error-eof",L[590]);
is$parse$error$eof1804.$var = anf_assign1803;
var anf_assign1805 = G(ParseError1794.$var,"parse-error-eof",L[590]);
parse$error$eof1806.$var = anf_assign1805;
var anf_assign1807 = G(ParseError1794.$var,"is-parse-error-unterminated-string",L[592]);
is$parse$error$unterminated$string1808.$var = anf_assign1807;
var anf_assign1809 = G(ParseError1794.$var,"parse-error-unterminated-string",L[592]);
parse$error$unterminated$string1810.$var = anf_assign1809;
var anf_assign1811 = G(ParseError1794.$var,"is-parse-error-bad-operator",L[594]);
is$parse$error$bad$operator1812.$var = anf_assign1811;
var anf_assign1813 = G(ParseError1794.$var,"parse-error-bad-operator",L[594]);
parse$error$bad$operator1814.$var = anf_assign1813;
var anf_assign1815 = G(ParseError1794.$var,"is-parse-error-bad-number",L[596]);
is$parse$error$bad$number1816.$var = anf_assign1815;
var anf_assign1817 = G(ParseError1794.$var,"parse-error-bad-number",L[596]);
parse$error$bad$number1818.$var = anf_assign1817;
var anf_assign1819 = G(ParseError1794.$var,"is-empty-block",L[598]);
is$empty$block1820.$var = anf_assign1819;
var anf_assign1821 = G(ParseError1794.$var,"empty-block",L[598]);
empty$block1822.$var = anf_assign1821;
var anf_assign1823 = G(ParseError1794.$var,"is-bad-block-stmt",L[600]);
is$bad$block$stmt1824.$var = anf_assign1823;
var anf_assign1825 = G(ParseError1794.$var,"bad-block-stmt",L[600]);
bad$block$stmt1826.$var = anf_assign1825;
var anf_assign1827 = G(ParseError1794.$var,"is-bad-check-block-stmt",L[602]);
is$bad$check$block$stmt1828.$var = anf_assign1827;
var anf_assign1829 = G(ParseError1794.$var,"bad-check-block-stmt",L[602]);
bad$check$block$stmt1830.$var = anf_assign1829;
var anf_assign1831 = G(ParseError1794.$var,"is-fun-missing-colon",L[604]);
is$fun$missing$colon1832.$var = anf_assign1831;
var anf_assign1833 = G(ParseError1794.$var,"fun-missing-colon",L[604]);
fun$missing$colon1834.$var = anf_assign1833;
var anf_assign1835 = G(ParseError1794.$var,"is-fun-missing-end",L[606]);
is$fun$missing$end1836.$var = anf_assign1835;
var anf_assign1837 = G(ParseError1794.$var,"fun-missing-end",L[606]);
fun$missing$end1838.$var = anf_assign1837;
var anf_assign1839 = G(ParseError1794.$var,"is-args-missing-comma",L[608]);
is$args$missing$comma1840.$var = anf_assign1839;
var anf_assign1841 = G(ParseError1794.$var,"args-missing-comma",L[608]);
args$missing$comma1842.$var = anf_assign1841;
var anf_assign1843 = G(ParseError1794.$var,"is-app-args-missing-comma",L[610]);
is$app$args$missing$comma1844.$var = anf_assign1843;
var anf_assign1845 = G(ParseError1794.$var,"app-args-missing-comma",L[610]);
app$args$missing$comma1846.$var = anf_assign1845;
var anf_assign1847 = G(ParseError1794.$var,"is-missing-end",L[612]);
is$missing$end1848.$var = anf_assign1847;
var anf_assign1849 = G(ParseError1794.$var,"missing-end",L[612]);
missing$end1850.$var = anf_assign1849;
var anf_assign1851 = G(ParseError1794.$var,"is-missing-comma",L[614]);
is$missing$comma1852.$var = anf_assign1851;
var anf_assign1853 = G(ParseError1794.$var,"missing-comma",L[614]);
missing$comma1854.$var = anf_assign1853;
var provides1860 = R.makeObject({"draw-and-highlight":draw$and$highlight33.$var,
"vert-list-values":vert$list$values56.$var,
"RuntimeError":RuntimeError1285.$var,
"is-RuntimeError":is$RuntimeError1287.$var,
"message-exception":message$exception1291.$var,
"is-message-exception":is$message$exception1289.$var,
"no-cases-matched":no$cases$matched1295.$var,
"is-no-cases-matched":is$no$cases$matched1293.$var,
"no-branches-matched":no$branches$matched1299.$var,
"is-no-branches-matched":is$no$branches$matched1297.$var,
"internal-error":internal$error1303.$var,
"is-internal-error":is$internal$error1301.$var,
"field-not-found":field$not$found1307.$var,
"is-field-not-found":is$field$not$found1305.$var,
"lookup-non-object":lookup$non$object1311.$var,
"is-lookup-non-object":is$lookup$non$object1309.$var,
"extend-non-object":extend$non$object1315.$var,
"is-extend-non-object":is$extend$non$object1313.$var,
"non-boolean-condition":non$boolean$condition1319.$var,
"is-non-boolean-condition":is$non$boolean$condition1317.$var,
"non-boolean-op":non$boolean$op1323.$var,
"is-non-boolean-op":is$non$boolean$op1321.$var,
"generic-type-mismatch":generic$type$mismatch1327.$var,
"is-generic-type-mismatch":is$generic$type$mismatch1325.$var,
"outside-numeric-range":outside$numeric$range1331.$var,
"is-outside-numeric-range":is$outside$numeric$range1329.$var,
"num-string-binop-error":num$string$binop$error1335.$var,
"is-num-string-binop-error":is$num$string$binop$error1333.$var,
"numeric-binop-error":numeric$binop$error1339.$var,
"is-numeric-binop-error":is$numeric$binop$error1337.$var,
"cases-arity-mismatch":cases$arity$mismatch1343.$var,
"is-cases-arity-mismatch":is$cases$arity$mismatch1341.$var,
"cases-singleton-mismatch":cases$singleton$mismatch1347.$var,
"is-cases-singleton-mismatch":is$cases$singleton$mismatch1345.$var,
"arity-mismatch":arity$mismatch1351.$var,
"is-arity-mismatch":is$arity$mismatch1349.$var,
"non-function-app":non$function$app1355.$var,
"is-non-function-app":is$non$function$app1353.$var,
"bad-app":bad$app1359.$var,
"is-bad-app":is$bad$app1357.$var,
"uninitialized-id":uninitialized$id1363.$var,
"is-uninitialized-id":is$uninitialized$id1361.$var,
"module-load-failure":module$load$failure1367.$var,
"is-module-load-failure":is$module$load$failure1365.$var,
"invalid-array-index":invalid$array$index1371.$var,
"is-invalid-array-index":is$invalid$array$index1369.$var,
"equality-failure":equality$failure1375.$var,
"is-equality-failure":is$equality$failure1373.$var,
"user-break":user$break1379.$var,
"is-user-break":is$user$break1377.$var,
"user-exception":user$exception1383.$var,
"is-user-exception":is$user$exception1381.$var,
"ParseError":ParseError1796.$var,
"is-ParseError":is$ParseError1798.$var,
"parse-error-next-token":parse$error$next$token1802.$var,
"is-parse-error-next-token":is$parse$error$next$token1800.$var,
"parse-error-eof":parse$error$eof1806.$var,
"is-parse-error-eof":is$parse$error$eof1804.$var,
"parse-error-unterminated-string":parse$error$unterminated$string1810.$var,
"is-parse-error-unterminated-string":is$parse$error$unterminated$string1808.$var,
"parse-error-bad-operator":parse$error$bad$operator1814.$var,
"is-parse-error-bad-operator":is$parse$error$bad$operator1812.$var,
"parse-error-bad-number":parse$error$bad$number1818.$var,
"is-parse-error-bad-number":is$parse$error$bad$number1816.$var,
"empty-block":empty$block1822.$var,
"is-empty-block":is$empty$block1820.$var,
"bad-block-stmt":bad$block$stmt1826.$var,
"is-bad-block-stmt":is$bad$block$stmt1824.$var,
"bad-check-block-stmt":bad$check$block$stmt1830.$var,
"is-bad-check-block-stmt":is$bad$check$block$stmt1828.$var,
"fun-missing-colon":fun$missing$colon1834.$var,
"is-fun-missing-colon":is$fun$missing$colon1832.$var,
"fun-missing-end":fun$missing$end1838.$var,
"is-fun-missing-end":is$fun$missing$end1836.$var,
"args-missing-comma":args$missing$comma1842.$var,
"is-args-missing-comma":is$args$missing$comma1840.$var,
"app-args-missing-comma":app$args$missing$comma1846.$var,
"is-app-args-missing-comma":is$app$args$missing$comma1844.$var,
"missing-end":missing$end1850.$var,
"is-missing-end":is$missing$end1848.$var,
"missing-comma":missing$comma1854.$var,
"is-missing-comma":is$missing$comma1852.$var});
$step16 = 1;
$al20 = L[485];
$field1855 = R.getColonFieldLoc(builtins10,"current-checker",L[485]);
if(R.isMethod($field1855)) {
$ans19 = $field1855.full_meth(builtins10);
} else {
if(!(R.isFunction($field1855))) {
R.ffi.throwNonFunApp(L[485],$field1855);
}
$ans19 = $field1855.app();
}
break;
case 1: var anf_method_obj1856 = $ans19;
$step16 = 2;
$al20 = L[485];
$field1857 = R.getColonFieldLoc(anf_method_obj1856,"results",L[485]);
if(R.isMethod($field1857)) {
$ans19 = $field1857.full_meth(anf_method_obj1856);
} else {
if(!(R.isFunction($field1857))) {
R.ffi.throwNonFunApp(L[485],$field1857);
}
$ans19 = $field1857.app();
}
break;
case 2: var checks1861 = $ans19;
$step16 = 3;
$ans19 = R.makeObject({"answer":nothing11,
"namespace":NAMESPACE,
"defined-values":{"missing-comma":missing$comma1854.$var,
"is-missing-comma":is$missing$comma1852.$var,
"missing-end":missing$end1850.$var,
"is-missing-end":is$missing$end1848.$var,
"app-args-missing-comma":app$args$missing$comma1846.$var,
"is-app-args-missing-comma":is$app$args$missing$comma1844.$var,
"args-missing-comma":args$missing$comma1842.$var,
"is-args-missing-comma":is$args$missing$comma1840.$var,
"fun-missing-end":fun$missing$end1838.$var,
"is-fun-missing-end":is$fun$missing$end1836.$var,
"fun-missing-colon":fun$missing$colon1834.$var,
"is-fun-missing-colon":is$fun$missing$colon1832.$var,
"bad-check-block-stmt":bad$check$block$stmt1830.$var,
"is-bad-check-block-stmt":is$bad$check$block$stmt1828.$var,
"bad-block-stmt":bad$block$stmt1826.$var,
"is-bad-block-stmt":is$bad$block$stmt1824.$var,
"empty-block":empty$block1822.$var,
"is-empty-block":is$empty$block1820.$var,
"parse-error-bad-number":parse$error$bad$number1818.$var,
"is-parse-error-bad-number":is$parse$error$bad$number1816.$var,
"parse-error-bad-operator":parse$error$bad$operator1814.$var,
"is-parse-error-bad-operator":is$parse$error$bad$operator1812.$var,
"parse-error-unterminated-string":parse$error$unterminated$string1810.$var,
"is-parse-error-unterminated-string":is$parse$error$unterminated$string1808.$var,
"parse-error-eof":parse$error$eof1806.$var,
"is-parse-error-eof":is$parse$error$eof1804.$var,
"parse-error-next-token":parse$error$next$token1802.$var,
"is-parse-error-next-token":is$parse$error$next$token1800.$var,
"is-ParseError":is$ParseError1798.$var,
"ParseError":ParseError1796.$var,
"user-exception":user$exception1383.$var,
"is-user-exception":is$user$exception1381.$var,
"user-break":user$break1379.$var,
"is-user-break":is$user$break1377.$var,
"equality-failure":equality$failure1375.$var,
"is-equality-failure":is$equality$failure1373.$var,
"invalid-array-index":invalid$array$index1371.$var,
"is-invalid-array-index":is$invalid$array$index1369.$var,
"module-load-failure":module$load$failure1367.$var,
"is-module-load-failure":is$module$load$failure1365.$var,
"uninitialized-id":uninitialized$id1363.$var,
"is-uninitialized-id":is$uninitialized$id1361.$var,
"bad-app":bad$app1359.$var,
"is-bad-app":is$bad$app1357.$var,
"non-function-app":non$function$app1355.$var,
"is-non-function-app":is$non$function$app1353.$var,
"arity-mismatch":arity$mismatch1351.$var,
"is-arity-mismatch":is$arity$mismatch1349.$var,
"cases-singleton-mismatch":cases$singleton$mismatch1347.$var,
"is-cases-singleton-mismatch":is$cases$singleton$mismatch1345.$var,
"cases-arity-mismatch":cases$arity$mismatch1343.$var,
"is-cases-arity-mismatch":is$cases$arity$mismatch1341.$var,
"numeric-binop-error":numeric$binop$error1339.$var,
"is-numeric-binop-error":is$numeric$binop$error1337.$var,
"num-string-binop-error":num$string$binop$error1335.$var,
"is-num-string-binop-error":is$num$string$binop$error1333.$var,
"outside-numeric-range":outside$numeric$range1331.$var,
"is-outside-numeric-range":is$outside$numeric$range1329.$var,
"generic-type-mismatch":generic$type$mismatch1327.$var,
"is-generic-type-mismatch":is$generic$type$mismatch1325.$var,
"non-boolean-op":non$boolean$op1323.$var,
"is-non-boolean-op":is$non$boolean$op1321.$var,
"non-boolean-condition":non$boolean$condition1319.$var,
"is-non-boolean-condition":is$non$boolean$condition1317.$var,
"extend-non-object":extend$non$object1315.$var,
"is-extend-non-object":is$extend$non$object1313.$var,
"lookup-non-object":lookup$non$object1311.$var,
"is-lookup-non-object":is$lookup$non$object1309.$var,
"field-not-found":field$not$found1307.$var,
"is-field-not-found":is$field$not$found1305.$var,
"internal-error":internal$error1303.$var,
"is-internal-error":is$internal$error1301.$var,
"no-branches-matched":no$branches$matched1299.$var,
"is-no-branches-matched":is$no$branches$matched1297.$var,
"no-cases-matched":no$cases$matched1295.$var,
"is-no-cases-matched":is$no$cases$matched1293.$var,
"message-exception":message$exception1291.$var,
"is-message-exception":is$message$exception1289.$var,
"is-RuntimeError":is$RuntimeError1287.$var,
"RuntimeError":RuntimeError1285.$var,
"vert-list-values":vert$list$values56.$var,
"draw-and-highlight":draw$and$highlight33.$var,
"ED":ED12},
"defined-types":{"ParseError":ParseError1859,
"RuntimeError":RuntimeError1858,
"ED":ED13},
"provide-plus-types":R.makeObject({"values":provides1860,
"types":{"RuntimeError":RuntimeError1858,
"ParseError":ParseError1859}}),
"checks":checks1861});
break;
case 3: ++R.GAS;
return $ans19;
default: throw "No case numbered " + $step16 + " in $toplevel17";
}
}
} catch($e1863) {
if(R.isCont($e1863) && ($step16 !== 3)) {
$e1863.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al20,$toplevel17,$step16,[],[provides1860,missing$comma1854,is$missing$comma1852,missing$end1850,is$missing$end1848,app$args$missing$comma1846,is$app$args$missing$comma1844,args$missing$comma1842,is$args$missing$comma1840,fun$missing$end1838,is$fun$missing$end1836,fun$missing$colon1834,is$fun$missing$colon1832,bad$check$block$stmt1830,is$bad$check$block$stmt1828,bad$block$stmt1826,is$bad$block$stmt1824,empty$block1822,is$empty$block1820,parse$error$bad$number1818,is$parse$error$bad$number1816,parse$error$bad$operator1814,is$parse$error$bad$operator1812,parse$error$unterminated$string1810,is$parse$error$unterminated$string1808,parse$error$eof1806,is$parse$error$eof1804,parse$error$next$token1802,is$parse$error$next$token1800,is$ParseError1798,ParseError1796,user$exception1383,is$user$exception1381,user$break1379,is$user$break1377,equality$failure1375,is$equality$failure1373,invalid$array$index1371,is$invalid$array$index1369,module$load$failure1367,is$module$load$failure1365,uninitialized$id1363,is$uninitialized$id1361,bad$app1359,is$bad$app1357,non$function$app1355,is$non$function$app1353,arity$mismatch1351,is$arity$mismatch1349,cases$singleton$mismatch1347,is$cases$singleton$mismatch1345,cases$arity$mismatch1343,is$cases$arity$mismatch1341,numeric$binop$error1339,is$numeric$binop$error1337,num$string$binop$error1335,is$num$string$binop$error1333,outside$numeric$range1331,is$outside$numeric$range1329,generic$type$mismatch1327,is$generic$type$mismatch1325,non$boolean$op1323,is$non$boolean$op1321,non$boolean$condition1319,is$non$boolean$condition1317,extend$non$object1315,is$extend$non$object1313,lookup$non$object1311,is$lookup$non$object1309,field$not$found1307,is$field$not$found1305,internal$error1303,is$internal$error1301,no$branches$matched1299,is$no$branches$matched1297,no$cases$matched1295,is$no$cases$matched1293,message$exception1291,is$message$exception1289,is$RuntimeError1287,RuntimeError1285,vert$list$values56,draw$and$highlight33,ParseError1859,RuntimeError1858]);
}
if(R.isPyretException($e1863)) {
$e1863.pyretStack.push($al20);
}
throw $e1863;
}
};
return R.safeCall($toplevel17,function(moduleVal) {
R.modules["$src/arr/base/error.arr14"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://error-display": ({
"requires":[],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE, M) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,7,2,61,7,50,109],
[M,7,4,63,7,50,109],
[M,8,2,112,8,57,167],
[M,8,4,114,8,57,167],
[M,9,2,170,9,57,225],
[M,9,4,172,9,57,225],
[M,10,2,228,10,65,291],
[M,10,58,284,10,64,290],
[M,10,4,230,10,65,291],
[M,11,2,294,11,21,313],
[M,11,4,296,11,21,313],
[M,12,2,316,12,23,337],
[M,12,16,330,12,22,336],
[M,12,4,318,12,23,337],
[M,13,2,340,13,28,366],
[M,13,4,342,13,28,366],
[M,14,2,369,16,43,529],
[M,14,25,392,14,31,398],
[M,14,53,420,14,60,427],
[M,16,30,516,16,42,528],
[M,14,4,371,16,43,529],
[M,17,2,532,17,34,564],
[M,17,21,551,17,33,563],
[M,17,4,534,17,34,564],
[M,18,2,567,18,53,618],
[M,18,23,588,18,35,600],
[M,18,46,611,18,52,617],
[M,18,4,569,18,53,618],
[M,19,2,621,19,79,698],
[M,19,46,665,19,52,671],
[M,19,66,685,19,78,697],
[M,19,4,623,19,79,698],
[M,20,2,701,20,38,737],
[M,20,25,724,20,37,736],
[M,20,4,703,20,38,737],
[M,6,0,40,21,3,741],
[M,25,29,790,25,63,824],
[M,25,40,801,25,62,823],
[M,25,9,770,25,67,828],
[M,26,59,889,26,68,898],
[M,26,29,859,26,73,903],
[M,26,40,870,26,72,902],
[M,26,9,839,26,77,907],
[M,27,59,968,27,68,977],
[M,27,29,938,27,74,983],
[M,27,40,949,27,73,982],
[M,27,9,918,27,78,987],
[M,28,59,1048,28,68,1057],
[M,28,29,1018,28,77,1066],
[M,28,40,1029,28,76,1065],
[M,28,9,998,28,81,1070],
[M,29,59,1131,29,68,1140],
[M,29,29,1101,29,80,1152],
[M,29,40,1112,29,79,1151],
[M,29,9,1081,29,84,1156],
[M,30,59,1217,30,68,1226],
[M,30,29,1187,30,83,1241],
[M,30,40,1198,30,82,1240],
[M,30,9,1167,30,87,1245],
[M,31,59,1306,31,68,1315],
[M,31,29,1276,31,86,1333],
[M,31,40,1287,31,85,1332],
[M,31,9,1256,31,90,1337],
[M,34,29,1378,34,68,1417],
[M,34,40,1389,34,62,1411],
[M,34,9,1358,34,72,1421],
[M,35,59,1482,35,68,1491],
[M,35,29,1452,35,78,1501],
[M,35,40,1463,35,72,1495],
[M,35,9,1432,35,82,1505],
[M,36,59,1566,36,68,1575],
[M,36,29,1536,36,79,1586],
[M,36,40,1547,36,73,1580],
[M,36,9,1516,36,83,1590],
[M,37,59,1651,37,68,1660],
[M,37,29,1621,37,82,1674],
[M,37,40,1632,37,76,1668],
[M,37,9,1601,37,86,1678],
[M,38,59,1739,38,68,1748],
[M,38,29,1709,38,85,1765],
[M,38,40,1720,38,79,1759],
[M,38,9,1689,38,89,1769],
[M,39,59,1830,39,68,1839],
[M,39,29,1800,39,88,1859],
[M,39,40,1811,39,82,1853],
[M,39,9,1780,39,92,1863],
[M,40,59,1924,40,68,1933],
[M,40,29,1894,40,91,1956],
[M,40,40,1905,40,85,1950],
[M,40,9,1874,40,95,1960],
[M,43,29,2009,43,67,2047],
[M,43,40,2020,43,62,2042],
[M,43,9,1989,43,71,2051],
[M,44,59,2112,44,68,2121],
[M,44,29,2082,44,77,2130],
[M,44,40,2093,44,72,2125],
[M,44,9,2062,44,81,2134],
[M,45,59,2195,45,68,2204],
[M,45,29,2165,45,78,2214],
[M,45,40,2176,45,73,2209],
[M,45,9,2145,45,82,2218],
[M,46,59,2279,46,68,2288],
[M,46,29,2249,46,81,2301],
[M,46,40,2260,46,76,2296],
[M,46,9,2229,46,85,2305],
[M,47,59,2366,47,68,2375],
[M,47,29,2336,47,84,2391],
[M,47,40,2347,47,79,2386],
[M,47,9,2316,47,88,2395],
[M,48,59,2456,48,68,2465],
[M,48,29,2426,48,87,2484],
[M,48,40,2437,48,82,2479],
[M,48,9,2406,48,91,2488],
[M,49,59,2549,49,68,2558],
[M,49,29,2519,49,90,2580],
[M,49,40,2530,49,85,2575],
[M,49,9,2499,49,94,2584],
[M,52,29,2629,52,70,2670],
[M,52,47,2647,52,69,2669],
[M,52,9,2609,52,74,2674],
[M,53,66,2742,53,75,2751],
[M,53,29,2705,53,80,2756],
[M,53,47,2723,53,79,2755],
[M,53,9,2685,53,84,2760],
[M,54,66,2828,54,75,2837],
[M,54,29,2791,54,81,2843],
[M,54,47,2809,54,80,2842],
[M,54,9,2771,54,85,2847],
[M,55,66,2915,55,75,2924],
[M,55,29,2878,55,84,2933],
[M,55,47,2896,55,83,2932],
[M,55,9,2858,55,88,2937],
[M,56,66,3005,56,75,3014],
[M,56,29,2968,56,87,3026],
[M,56,47,2986,56,86,3025],
[M,56,9,2948,56,91,3030],
[M,57,66,3098,57,75,3107],
[M,57,29,3061,57,90,3122],
[M,57,47,3079,57,89,3121],
[M,57,9,3041,57,94,3126],
[M,58,66,3194,58,75,3203],
[M,58,29,3157,58,93,3221],
[M,58,47,3175,58,92,3220],
[M,58,9,3137,58,97,3225],
[M,61,29,3270,61,70,3311],
[M,61,47,3288,61,69,3310],
[M,61,9,3250,61,74,3315],
[M,62,66,3383,62,75,3392],
[M,62,29,3346,62,80,3397],
[M,62,47,3364,62,79,3396],
[M,62,9,3326,62,84,3401],
[M,63,66,3469,63,75,3478],
[M,63,29,3432,63,81,3484],
[M,63,47,3450,63,80,3483],
[M,63,9,3412,63,85,3488],
[M,64,66,3556,64,75,3565],
[M,64,29,3519,64,84,3574],
[M,64,47,3537,64,83,3573],
[M,64,9,3499,64,88,3578],
[M,65,66,3646,65,75,3655],
[M,65,29,3609,65,87,3667],
[M,65,47,3627,65,86,3666],
[M,65,9,3589,65,91,3671],
[M,66,66,3739,66,75,3748],
[M,66,29,3702,66,90,3763],
[M,66,47,3720,66,89,3762],
[M,66,9,3682,66,94,3767],
[M,67,66,3835,67,75,3844],
[M,67,29,3798,67,93,3862],
[M,67,47,3816,67,92,3861],
[M,67,9,3778,67,97,3866],
[M,70,29,3906,70,73,3950],
[M,70,38,3915,70,72,3949],
[M,70,49,3926,70,71,3948],
[M,70,9,3886,70,77,3954],
[M,71,68,4024,71,77,4033],
[M,71,29,3985,71,83,4039],
[M,71,38,3994,71,82,4038],
[M,71,49,4005,71,81,4037],
[M,71,9,3965,71,87,4043],
[M,72,68,4113,72,77,4122],
[M,72,29,4074,72,84,4129],
[M,72,38,4083,72,83,4128],
[M,72,49,4094,72,82,4127],
[M,72,9,4054,72,88,4133],
[M,73,68,4203,73,77,4212],
[M,73,29,4164,73,87,4222],
[M,73,38,4173,73,86,4221],
[M,73,49,4184,73,85,4220],
[M,73,9,4144,73,91,4226],
[M,74,68,4296,74,77,4305],
[M,74,29,4257,74,90,4318],
[M,74,38,4266,74,89,4317],
[M,74,49,4277,74,88,4316],
[M,74,9,4237,74,94,4322],
[M,75,68,4392,75,77,4401],
[M,75,29,4353,75,93,4417],
[M,75,38,4362,75,92,4416],
[M,75,49,4373,75,91,4415],
[M,75,9,4333,75,97,4421],
[M,76,68,4491,76,77,4500],
[M,76,29,4452,76,96,4519],
[M,76,38,4461,76,95,4518],
[M,76,49,4472,76,94,4517],
[M,76,9,4432,76,100,4523],
[M,3,0,13,77,1,4525]];
var $type$String1 = NAMESPACE.get("$type$String");
var $type$Boolean2 = NAMESPACE.get("$type$Boolean");
var $type$Number3 = NAMESPACE.get("$type$Number");
var raw$array$to$list4 = NAMESPACE.get("raw-array-to-list");
var raw$array5 = NAMESPACE.get("raw-array");
var builtins6 = NAMESPACE.get("builtins");
var nothing7 = NAMESPACE.get("nothing");
var $toplevel10 = function($$resumer195) {
var $step9 = 0;
var $ans12 = D;
var $al13 = L[205];
try {
if(R.isActivationRecord($$resumer195)) {
$step9 = $$resumer195.step;
$al13 = $$resumer195.from;
$ans12 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
provides701 = $$resumer195.vars[0];
opt697 = $$resumer195.vars[1];
numbered696 = $$resumer195.vars[2];
bulleted695 = $$resumer195.vars[3];
para$nospace694 = $$resumer195.vars[4];
para693 = $$resumer195.vars[5];
error692 = $$resumer195.vars[6];
optional185 = $$resumer195.vars[7];
is$optional183 = $$resumer195.vars[8];
loc$display181 = $$resumer195.vars[9];
is$loc$display179 = $$resumer195.vars[10];
styled177 = $$resumer195.vars[11];
is$styled175 = $$resumer195.vars[12];
code173 = $$resumer195.vars[13];
is$code171 = $$resumer195.vars[14];
maybe$stack$loc169 = $$resumer195.vars[15];
is$maybe$stack$loc167 = $$resumer195.vars[16];
loc165 = $$resumer195.vars[17];
is$loc163 = $$resumer195.vars[18];
text161 = $$resumer195.vars[19];
is$text159 = $$resumer195.vars[20];
embed157 = $$resumer195.vars[21];
is$embed155 = $$resumer195.vars[22];
h$sequence153 = $$resumer195.vars[23];
is$h$sequence151 = $$resumer195.vars[24];
numbered$sequence149 = $$resumer195.vars[25];
is$numbered$sequence147 = $$resumer195.vars[26];
bulleted$sequence145 = $$resumer195.vars[27];
is$bulleted$sequence143 = $$resumer195.vars[28];
v$sequence141 = $$resumer195.vars[29];
is$v$sequence139 = $$resumer195.vars[30];
is$ErrorDisplay137 = $$resumer195.vars[31];
ErrorDisplay135 = $$resumer195.vars[32];
ErrorDisplay87 = $$resumer195.vars[33];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step9) {
case 0: var ErrorDisplay14 = R.namedBrander("ErrorDisplay");
var ErrorDisplay87 = R.makeBranderAnn(ErrorDisplay14,"ErrorDisplay");
var ErrorDisplay133 = {"$var":D};
var ErrorDisplay135 = {"$var":D};
var is$ErrorDisplay137 = {"$var":D};
var is$v$sequence139 = {"$var":D};
var v$sequence141 = {"$var":D};
var is$bulleted$sequence143 = {"$var":D};
var bulleted$sequence145 = {"$var":D};
var is$numbered$sequence147 = {"$var":D};
var numbered$sequence149 = {"$var":D};
var is$h$sequence151 = {"$var":D};
var h$sequence153 = {"$var":D};
var is$embed155 = {"$var":D};
var embed157 = {"$var":D};
var is$text159 = {"$var":D};
var text161 = {"$var":D};
var is$loc163 = {"$var":D};
var loc165 = {"$var":D};
var is$maybe$stack$loc167 = {"$var":D};
var maybe$stack$loc169 = {"$var":D};
var is$code171 = {"$var":D};
var code173 = {"$var":D};
var is$styled175 = {"$var":D};
var styled177 = {"$var":D};
var is$loc$display179 = {"$var":D};
var loc$display181 = {"$var":D};
var is$optional183 = {"$var":D};
var optional185 = {"$var":D};
var $v$sequence_getfields20 = function(f) {
return f(this.dict["contents"]);
};
var $v$sequence_getfieldsref18 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $v$sequence_mutablemask19 = [false];
var $v$sequence$base15 = {"$fieldNames":["contents"],
"_match":R.makeMatch("v-sequence",1)};
var $v$sequence$brands17 = {"$brand$v$sequence":true};
$v$sequence$brands17[ErrorDisplay14._brand] = true;
var v$sequence22 = R.makeVariantConstructor(L[1],function() {
return [];
},[],[],[false],["contents23"],$v$sequence_mutablemask19,$v$sequence$base15,$v$sequence$brands17,"v-sequence",$v$sequence_getfieldsref18,$v$sequence_getfields20,$v$sequence$base15);
var $bulleted$sequence_getfields29 = function(f) {
return f(this.dict["contents"]);
};
var $bulleted$sequence_getfieldsref27 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $bulleted$sequence_mutablemask28 = [false];
var $bulleted$sequence$base24 = {"$fieldNames":["contents"],
"_match":R.makeMatch("bulleted-sequence",1)};
var $bulleted$sequence$brands26 = {"$brand$bulleted$sequence":true};
$bulleted$sequence$brands26[ErrorDisplay14._brand] = true;
var bulleted$sequence31 = R.makeVariantConstructor(L[3],function() {
return [];
},[],[],[false],["contents32"],$bulleted$sequence_mutablemask28,$bulleted$sequence$base24,$bulleted$sequence$brands26,"bulleted-sequence",$bulleted$sequence_getfieldsref27,$bulleted$sequence_getfields29,$bulleted$sequence$base24);
var $numbered$sequence_getfields38 = function(f) {
return f(this.dict["contents"]);
};
var $numbered$sequence_getfieldsref36 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $numbered$sequence_mutablemask37 = [false];
var $numbered$sequence$base33 = {"$fieldNames":["contents"],
"_match":R.makeMatch("numbered-sequence",1)};
var $numbered$sequence$brands35 = {"$brand$numbered$sequence":true};
$numbered$sequence$brands35[ErrorDisplay14._brand] = true;
var numbered$sequence40 = R.makeVariantConstructor(L[5],function() {
return [];
},[],[],[false],["contents41"],$numbered$sequence_mutablemask37,$numbered$sequence$base33,$numbered$sequence$brands35,"numbered-sequence",$numbered$sequence_getfieldsref36,$numbered$sequence_getfields38,$numbered$sequence$base33);
var $h$sequence_getfields47 = function(f) {
return f(this.dict["contents"],this.dict["sep"]);
};
var $h$sequence_getfieldsref45 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]),R.derefField(this.dict["sep"],false,refmask[1]));
};
var $h$sequence_mutablemask46 = [false,false];
var $h$sequence$base42 = {"$fieldNames":["contents","sep"],
"_match":R.makeMatch("h-sequence",2)};
var $h$sequence$brands44 = {"$brand$h$sequence":true};
$h$sequence$brands44[ErrorDisplay14._brand] = true;
var h$sequence49 = R.makeVariantConstructor(L[8],function() {
return [$type$String1];
},["sep50"],[L[7]],[false,false],["contents51","sep50"],$h$sequence_mutablemask46,$h$sequence$base42,$h$sequence$brands44,"h-sequence",$h$sequence_getfieldsref45,$h$sequence_getfields47,$h$sequence$base42);
var $embed_getfields57 = function(f) {
return f(this.dict["val"]);
};
var $embed_getfieldsref55 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]));
};
var $embed_mutablemask56 = [false];
var $embed$base52 = {"$fieldNames":["val"],
"_match":R.makeMatch("embed",1)};
var $embed$brands54 = {"$brand$embed":true};
$embed$brands54[ErrorDisplay14._brand] = true;
var embed59 = R.makeVariantConstructor(L[10],function() {
return [];
},[],[],[false],["val60"],$embed_mutablemask56,$embed$base52,$embed$brands54,"embed",$embed_getfieldsref55,$embed_getfields57,$embed$base52);
var $text_getfields66 = function(f) {
return f(this.dict["str"]);
};
var $text_getfieldsref64 = function(f,refmask) {
return f(R.derefField(this.dict["str"],false,refmask[0]));
};
var $text_mutablemask65 = [false];
var $text$base61 = {"$fieldNames":["str"],
"_match":R.makeMatch("text",1)};
var $text$brands63 = {"$brand$text":true};
$text$brands63[ErrorDisplay14._brand] = true;
var text68 = R.makeVariantConstructor(L[13],function() {
return [$type$String1];
},["str69"],[L[12]],[false],["str69"],$text_mutablemask65,$text$base61,$text$brands63,"text",$text_getfieldsref64,$text_getfields66,$text$base61);
var $loc_getfields75 = function(f) {
return f(this.dict["loc"]);
};
var $loc_getfieldsref73 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $loc_mutablemask74 = [false];
var $loc$base70 = {"$fieldNames":["loc"],
"_match":R.makeMatch("loc",1)};
var $loc$brands72 = {"$brand$loc":true};
$loc$brands72[ErrorDisplay14._brand] = true;
var loc77 = R.makeVariantConstructor(L[15],function() {
return [];
},[],[],[false],["loc78"],$loc_mutablemask74,$loc$base70,$loc$brands72,"loc",$loc_getfieldsref73,$loc_getfields75,$loc$base70);
var $maybe$stack$loc_getfields84 = function(f) {
return f(this.dict["n"],this.dict["user-frames-only"],this.dict["contents-with-loc"],this.dict["contents-without-loc"]);
};
var $maybe$stack$loc_getfieldsref82 = function(f,refmask) {
return f(R.derefField(this.dict["n"],false,refmask[0]),R.derefField(this.dict["user-frames-only"],false,refmask[1]),R.derefField(this.dict["contents-with-loc"],false,refmask[2]),R.derefField(this.dict["contents-without-loc"],false,refmask[3]));
};
var $maybe$stack$loc_mutablemask83 = [false,false,false,false];
var $maybe$stack$loc$base79 = {"$fieldNames":["n","user-frames-only","contents-with-loc","contents-without-loc"],
"_match":R.makeMatch("maybe-stack-loc",4)};
var $maybe$stack$loc$brands81 = {"$brand$maybe$stack$loc":true};
$maybe$stack$loc$brands81[ErrorDisplay14._brand] = true;
var maybe$stack$loc86 = R.makeVariantConstructor(L[20],function() {
return [$type$Number3,$type$Boolean2,ErrorDisplay87];
},["n88","user$frames$only89","contents$without$loc90"],[L[17],L[18],L[19]],[false,false,false,false],["n88","user$frames$only89","contents$with$loc91","contents$without$loc90"],$maybe$stack$loc_mutablemask83,$maybe$stack$loc$base79,$maybe$stack$loc$brands81,"maybe-stack-loc",$maybe$stack$loc_getfieldsref82,$maybe$stack$loc_getfields84,$maybe$stack$loc$base79);
var $code_getfields97 = function(f) {
return f(this.dict["contents"]);
};
var $code_getfieldsref95 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $code_mutablemask96 = [false];
var $code$base92 = {"$fieldNames":["contents"],
"_match":R.makeMatch("code",1)};
var $code$brands94 = {"$brand$code":true};
$code$brands94[ErrorDisplay14._brand] = true;
var code99 = R.makeVariantConstructor(L[23],function() {
return [ErrorDisplay87];
},["contents100"],[L[22]],[false],["contents100"],$code_mutablemask96,$code$base92,$code$brands94,"code",$code_getfieldsref95,$code_getfields97,$code$base92);
var $styled_getfields106 = function(f) {
return f(this.dict["contents"],this.dict["style"]);
};
var $styled_getfieldsref104 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]),R.derefField(this.dict["style"],false,refmask[1]));
};
var $styled_mutablemask105 = [false,false];
var $styled$base101 = {"$fieldNames":["contents","style"],
"_match":R.makeMatch("styled",2)};
var $styled$brands103 = {"$brand$styled":true};
$styled$brands103[ErrorDisplay14._brand] = true;
var styled108 = R.makeVariantConstructor(L[27],function() {
return [ErrorDisplay87,$type$String1];
},["contents109","style110"],[L[25],L[26]],[false,false],["contents109","style110"],$styled_mutablemask105,$styled$base101,$styled$brands103,"styled",$styled_getfieldsref104,$styled_getfields106,$styled$base101);
var $loc$display_getfields116 = function(f) {
return f(this.dict["loc"],this.dict["style"],this.dict["contents"]);
};
var $loc$display_getfieldsref114 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["style"],false,refmask[1]),R.derefField(this.dict["contents"],false,refmask[2]));
};
var $loc$display_mutablemask115 = [false,false,false];
var $loc$display$base111 = {"$fieldNames":["loc","style","contents"],
"_match":R.makeMatch("loc-display",3)};
var $loc$display$brands113 = {"$brand$loc$display":true};
$loc$display$brands113[ErrorDisplay14._brand] = true;
var loc$display118 = R.makeVariantConstructor(L[31],function() {
return [$type$String1,ErrorDisplay87];
},["style119","contents120"],[L[29],L[30]],[false,false,false],["loc121","style119","contents120"],$loc$display_mutablemask115,$loc$display$base111,$loc$display$brands113,"loc-display",$loc$display_getfieldsref114,$loc$display_getfields116,$loc$display$base111);
var $optional_getfields127 = function(f) {
return f(this.dict["contents"]);
};
var $optional_getfieldsref125 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $optional_mutablemask126 = [false];
var $optional$base122 = {"$fieldNames":["contents"],
"_match":R.makeMatch("optional",1)};
var $optional$brands124 = {"$brand$optional":true};
$optional$brands124[ErrorDisplay14._brand] = true;
var optional129 = R.makeVariantConstructor(L[34],function() {
return [ErrorDisplay87];
},["contents130"],[L[33]],[false],["contents130"],$optional_mutablemask126,$optional$base122,$optional$brands124,"optional",$optional_getfieldsref125,$optional_getfields127,$optional$base122);
var anf_assign132 = R.makeObject({"ErrorDisplay":R.makeFunction(function($val131) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[35],1,$t);
}
return R.makeBoolean(R.hasBrand($val131,ErrorDisplay14._brand));
}),
"is-v-sequence":R.makeFunction(function($val21) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],1,$t);
}
return R.makeBoolean(R.hasBrand($val21,"$brand$v$sequence"));
}),
"v-sequence":v$sequence22,
"is-bulleted-sequence":R.makeFunction(function($val30) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
return R.makeBoolean(R.hasBrand($val30,"$brand$bulleted$sequence"));
}),
"bulleted-sequence":bulleted$sequence31,
"is-numbered-sequence":R.makeFunction(function($val39) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[4],1,$t);
}
return R.makeBoolean(R.hasBrand($val39,"$brand$numbered$sequence"));
}),
"numbered-sequence":numbered$sequence40,
"is-h-sequence":R.makeFunction(function($val48) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[6],1,$t);
}
return R.makeBoolean(R.hasBrand($val48,"$brand$h$sequence"));
}),
"h-sequence":h$sequence49,
"is-embed":R.makeFunction(function($val58) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],1,$t);
}
return R.makeBoolean(R.hasBrand($val58,"$brand$embed"));
}),
"embed":embed59,
"is-text":R.makeFunction(function($val67) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
return R.makeBoolean(R.hasBrand($val67,"$brand$text"));
}),
"text":text68,
"is-loc":R.makeFunction(function($val76) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[14],1,$t);
}
return R.makeBoolean(R.hasBrand($val76,"$brand$loc"));
}),
"loc":loc77,
"is-maybe-stack-loc":R.makeFunction(function($val85) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[16],1,$t);
}
return R.makeBoolean(R.hasBrand($val85,"$brand$maybe$stack$loc"));
}),
"maybe-stack-loc":maybe$stack$loc86,
"is-code":R.makeFunction(function($val98) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],1,$t);
}
return R.makeBoolean(R.hasBrand($val98,"$brand$code"));
}),
"code":code99,
"is-styled":R.makeFunction(function($val107) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[24],1,$t);
}
return R.makeBoolean(R.hasBrand($val107,"$brand$styled"));
}),
"styled":styled108,
"is-loc-display":R.makeFunction(function($val117) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[28],1,$t);
}
return R.makeBoolean(R.hasBrand($val117,"$brand$loc$display"));
}),
"loc-display":loc$display118,
"is-optional":R.makeFunction(function($val128) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
return R.makeBoolean(R.hasBrand($val128,"$brand$optional"));
}),
"optional":optional129});
ErrorDisplay133.$var = anf_assign132;
var anf_assign134 = G(ErrorDisplay133.$var,"ErrorDisplay",L[35]);
ErrorDisplay135.$var = anf_assign134;
var anf_assign136 = G(ErrorDisplay133.$var,"ErrorDisplay",L[35]);
is$ErrorDisplay137.$var = anf_assign136;
var anf_assign138 = G(ErrorDisplay133.$var,"is-v-sequence",L[0]);
is$v$sequence139.$var = anf_assign138;
var anf_assign140 = G(ErrorDisplay133.$var,"v-sequence",L[0]);
v$sequence141.$var = anf_assign140;
var anf_assign142 = G(ErrorDisplay133.$var,"is-bulleted-sequence",L[2]);
is$bulleted$sequence143.$var = anf_assign142;
var anf_assign144 = G(ErrorDisplay133.$var,"bulleted-sequence",L[2]);
bulleted$sequence145.$var = anf_assign144;
var anf_assign146 = G(ErrorDisplay133.$var,"is-numbered-sequence",L[4]);
is$numbered$sequence147.$var = anf_assign146;
var anf_assign148 = G(ErrorDisplay133.$var,"numbered-sequence",L[4]);
numbered$sequence149.$var = anf_assign148;
var anf_assign150 = G(ErrorDisplay133.$var,"is-h-sequence",L[6]);
is$h$sequence151.$var = anf_assign150;
var anf_assign152 = G(ErrorDisplay133.$var,"h-sequence",L[6]);
h$sequence153.$var = anf_assign152;
var anf_assign154 = G(ErrorDisplay133.$var,"is-embed",L[9]);
is$embed155.$var = anf_assign154;
var anf_assign156 = G(ErrorDisplay133.$var,"embed",L[9]);
embed157.$var = anf_assign156;
var anf_assign158 = G(ErrorDisplay133.$var,"is-text",L[11]);
is$text159.$var = anf_assign158;
var anf_assign160 = G(ErrorDisplay133.$var,"text",L[11]);
text161.$var = anf_assign160;
var anf_assign162 = G(ErrorDisplay133.$var,"is-loc",L[14]);
is$loc163.$var = anf_assign162;
var anf_assign164 = G(ErrorDisplay133.$var,"loc",L[14]);
loc165.$var = anf_assign164;
var anf_assign166 = G(ErrorDisplay133.$var,"is-maybe-stack-loc",L[16]);
is$maybe$stack$loc167.$var = anf_assign166;
var anf_assign168 = G(ErrorDisplay133.$var,"maybe-stack-loc",L[16]);
maybe$stack$loc169.$var = anf_assign168;
var anf_assign170 = G(ErrorDisplay133.$var,"is-code",L[21]);
is$code171.$var = anf_assign170;
var anf_assign172 = G(ErrorDisplay133.$var,"code",L[21]);
code173.$var = anf_assign172;
var anf_assign174 = G(ErrorDisplay133.$var,"is-styled",L[24]);
is$styled175.$var = anf_assign174;
var anf_assign176 = G(ErrorDisplay133.$var,"styled",L[24]);
styled177.$var = anf_assign176;
var anf_assign178 = G(ErrorDisplay133.$var,"is-loc-display",L[28]);
is$loc$display179.$var = anf_assign178;
var anf_assign180 = G(ErrorDisplay133.$var,"loc-display",L[28]);
loc$display181.$var = anf_assign180;
var anf_assign182 = G(ErrorDisplay133.$var,"is-optional",L[32]);
is$optional183.$var = anf_assign182;
var anf_assign184 = G(ErrorDisplay133.$var,"optional",L[32]);
optional185.$var = anf_assign184;
var $temp_lam187 = function($arr188) {
var $step186 = 0;
var $ans189 = D;
var $al190 = L[38];
try {
if(R.isActivationRecord($arr188)) {
$step186 = $arr188.step;
$al190 = $arr188.from;
$ans189 = $arr188.ans;
arr188 = $arr188.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var arr188 = $arr188;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step186) {
case 0: $step186 = 1;
$al190 = L[37];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al190,raw$array$to$list4);
}
$ans189 = raw$array$to$list4.app(arr188);
break;
case 1: var anf_arg191 = $ans189;
$step186 = 2;
$al190 = L[36];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al190,v$sequence141.$var);
}
$ans189 = v$sequence141.$var.app(anf_arg191);
break;
case 2: ++R.GAS;
return $ans189;
default: throw "No case numbered " + $step186 + " in $temp_lam187";
}
}
} catch($e192) {
if(R.isCont($e192) && ($step186 !== 2)) {
$e192.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al190,$temp_lam187,$step186,[arr188],[]);
}
if(R.isPyretException($e192)) {
$e192.pyretStack.push($al190);
}
throw $e192;
}
};
var anf_obj263 = R.makeFunction($temp_lam187);
var $temp_lam194 = function($$resumer195) {
var $step193 = 0;
var $ans196 = D;
var $al197 = L[42];
try {
if(R.isActivationRecord($$resumer195)) {
$step193 = $$resumer195.step;
$al197 = $$resumer195.from;
$ans196 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step193) {
case 0: var anf_arg198 = [];
$step193 = 1;
$al197 = L[39];
$field199 = R.getColonFieldLoc(raw$array5,"make",L[39]);
if(R.isMethod($field199)) {
$ans196 = $field199.full_meth(raw$array5,anf_arg198);
} else {
if(!(R.isFunction($field199))) {
R.ffi.throwNonFunApp(L[39],$field199);
}
$ans196 = $field199.app(anf_arg198);
}
break;
case 1: var anf_arg200 = $ans196;
$step193 = 2;
$al197 = L[41];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al197,raw$array$to$list4);
}
$ans196 = raw$array$to$list4.app(anf_arg200);
break;
case 2: var anf_arg201 = $ans196;
$step193 = 3;
$al197 = L[40];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al197,v$sequence141.$var);
}
$ans196 = v$sequence141.$var.app(anf_arg201);
break;
case 3: ++R.GAS;
return $ans196;
default: throw "No case numbered " + $step193 + " in $temp_lam194";
}
}
} catch($e202) {
if(R.isCont($e202) && ($step193 !== 3)) {
$e202.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al197,$temp_lam194,$step193,[],[]);
}
if(R.isPyretException($e202)) {
$e202.pyretStack.push($al197);
}
throw $e202;
}
};
var anf_obj264 = R.makeFunction($temp_lam194);
var $temp_lam204 = function($a205) {
var $step203 = 0;
var $ans206 = D;
var $al207 = L[46];
try {
if(R.isActivationRecord($a205)) {
$step203 = $a205.step;
$al207 = $a205.from;
$ans206 = $a205.ans;
a205 = $a205.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[46],1,$t);
}
var a205 = $a205;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step203) {
case 0: var anf_arg208 = [a205];
$step203 = 1;
$al207 = L[43];
$field209 = R.getColonFieldLoc(raw$array5,"make",L[43]);
if(R.isMethod($field209)) {
$ans206 = $field209.full_meth(raw$array5,anf_arg208);
} else {
if(!(R.isFunction($field209))) {
R.ffi.throwNonFunApp(L[43],$field209);
}
$ans206 = $field209.app(anf_arg208);
}
break;
case 1: var anf_arg210 = $ans206;
$step203 = 2;
$al207 = L[45];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al207,raw$array$to$list4);
}
$ans206 = raw$array$to$list4.app(anf_arg210);
break;
case 2: var anf_arg211 = $ans206;
$step203 = 3;
$al207 = L[44];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al207,v$sequence141.$var);
}
$ans206 = v$sequence141.$var.app(anf_arg211);
break;
case 3: ++R.GAS;
return $ans206;
default: throw "No case numbered " + $step203 + " in $temp_lam204";
}
}
} catch($e212) {
if(R.isCont($e212) && ($step203 !== 3)) {
$e212.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al207,$temp_lam204,$step203,[a205],[]);
}
if(R.isPyretException($e212)) {
$e212.pyretStack.push($al207);
}
throw $e212;
}
};
var anf_obj265 = R.makeFunction($temp_lam204);
var $temp_lam214 = function($a215,$b216) {
var $step213 = 0;
var $ans217 = D;
var $al218 = L[50];
try {
if(R.isActivationRecord($a215)) {
$step213 = $a215.step;
$al218 = $a215.from;
$ans217 = $a215.ans;
a215 = $a215.args[0];
b216 = $a215.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var a215 = $a215;
var b216 = $b216;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step213) {
case 0: var anf_arg219 = [a215,b216];
$step213 = 1;
$al218 = L[47];
$field220 = R.getColonFieldLoc(raw$array5,"make",L[47]);
if(R.isMethod($field220)) {
$ans217 = $field220.full_meth(raw$array5,anf_arg219);
} else {
if(!(R.isFunction($field220))) {
R.ffi.throwNonFunApp(L[47],$field220);
}
$ans217 = $field220.app(anf_arg219);
}
break;
case 1: var anf_arg221 = $ans217;
$step213 = 2;
$al218 = L[49];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al218,raw$array$to$list4);
}
$ans217 = raw$array$to$list4.app(anf_arg221);
break;
case 2: var anf_arg222 = $ans217;
$step213 = 3;
$al218 = L[48];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al218,v$sequence141.$var);
}
$ans217 = v$sequence141.$var.app(anf_arg222);
break;
case 3: ++R.GAS;
return $ans217;
default: throw "No case numbered " + $step213 + " in $temp_lam214";
}
}
} catch($e223) {
if(R.isCont($e223) && ($step213 !== 3)) {
$e223.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al218,$temp_lam214,$step213,[a215,b216],[]);
}
if(R.isPyretException($e223)) {
$e223.pyretStack.push($al218);
}
throw $e223;
}
};
var anf_obj266 = R.makeFunction($temp_lam214);
var $temp_lam225 = function($a226,$b227,$c228) {
var $step224 = 0;
var $ans229 = D;
var $al230 = L[54];
try {
if(R.isActivationRecord($a226)) {
$step224 = $a226.step;
$al230 = $a226.from;
$ans229 = $a226.ans;
a226 = $a226.args[0];
b227 = $a226.args[1];
c228 = $a226.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],3,$t);
}
var a226 = $a226;
var b227 = $b227;
var c228 = $c228;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step224) {
case 0: var anf_arg231 = [a226,b227,c228];
$step224 = 1;
$al230 = L[51];
$field232 = R.getColonFieldLoc(raw$array5,"make",L[51]);
if(R.isMethod($field232)) {
$ans229 = $field232.full_meth(raw$array5,anf_arg231);
} else {
if(!(R.isFunction($field232))) {
R.ffi.throwNonFunApp(L[51],$field232);
}
$ans229 = $field232.app(anf_arg231);
}
break;
case 1: var anf_arg233 = $ans229;
$step224 = 2;
$al230 = L[53];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al230,raw$array$to$list4);
}
$ans229 = raw$array$to$list4.app(anf_arg233);
break;
case 2: var anf_arg234 = $ans229;
$step224 = 3;
$al230 = L[52];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al230,v$sequence141.$var);
}
$ans229 = v$sequence141.$var.app(anf_arg234);
break;
case 3: ++R.GAS;
return $ans229;
default: throw "No case numbered " + $step224 + " in $temp_lam225";
}
}
} catch($e235) {
if(R.isCont($e235) && ($step224 !== 3)) {
$e235.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al230,$temp_lam225,$step224,[a226,b227,c228],[]);
}
if(R.isPyretException($e235)) {
$e235.pyretStack.push($al230);
}
throw $e235;
}
};
var anf_obj267 = R.makeFunction($temp_lam225);
var $temp_lam237 = function($a238,$b239,$c240,$d241) {
var $step236 = 0;
var $ans242 = D;
var $al243 = L[58];
try {
if(R.isActivationRecord($a238)) {
$step236 = $a238.step;
$al243 = $a238.from;
$ans242 = $a238.ans;
a238 = $a238.args[0];
b239 = $a238.args[1];
c240 = $a238.args[2];
d241 = $a238.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[58],4,$t);
}
var a238 = $a238;
var b239 = $b239;
var c240 = $c240;
var d241 = $d241;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step236) {
case 0: var anf_arg244 = [a238,b239,c240,d241];
$step236 = 1;
$al243 = L[55];
$field245 = R.getColonFieldLoc(raw$array5,"make",L[55]);
if(R.isMethod($field245)) {
$ans242 = $field245.full_meth(raw$array5,anf_arg244);
} else {
if(!(R.isFunction($field245))) {
R.ffi.throwNonFunApp(L[55],$field245);
}
$ans242 = $field245.app(anf_arg244);
}
break;
case 1: var anf_arg246 = $ans242;
$step236 = 2;
$al243 = L[57];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al243,raw$array$to$list4);
}
$ans242 = raw$array$to$list4.app(anf_arg246);
break;
case 2: var anf_arg247 = $ans242;
$step236 = 3;
$al243 = L[56];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al243,v$sequence141.$var);
}
$ans242 = v$sequence141.$var.app(anf_arg247);
break;
case 3: ++R.GAS;
return $ans242;
default: throw "No case numbered " + $step236 + " in $temp_lam237";
}
}
} catch($e248) {
if(R.isCont($e248) && ($step236 !== 3)) {
$e248.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al243,$temp_lam237,$step236,[a238,b239,c240,d241],[]);
}
if(R.isPyretException($e248)) {
$e248.pyretStack.push($al243);
}
throw $e248;
}
};
var anf_obj268 = R.makeFunction($temp_lam237);
var $temp_lam250 = function($a251,$b252,$c253,$d254,$e255) {
var $step249 = 0;
var $ans256 = D;
var $al257 = L[62];
try {
if(R.isActivationRecord($a251)) {
$step249 = $a251.step;
$al257 = $a251.from;
$ans256 = $a251.ans;
a251 = $a251.args[0];
b252 = $a251.args[1];
c253 = $a251.args[2];
d254 = $a251.args[3];
e255 = $a251.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[62],5,$t);
}
var a251 = $a251;
var b252 = $b252;
var c253 = $c253;
var d254 = $d254;
var e255 = $e255;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step249) {
case 0: var anf_arg258 = [a251,b252,c253,d254,e255];
$step249 = 1;
$al257 = L[59];
$field259 = R.getColonFieldLoc(raw$array5,"make",L[59]);
if(R.isMethod($field259)) {
$ans256 = $field259.full_meth(raw$array5,anf_arg258);
} else {
if(!(R.isFunction($field259))) {
R.ffi.throwNonFunApp(L[59],$field259);
}
$ans256 = $field259.app(anf_arg258);
}
break;
case 1: var anf_arg260 = $ans256;
$step249 = 2;
$al257 = L[61];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al257,raw$array$to$list4);
}
$ans256 = raw$array$to$list4.app(anf_arg260);
break;
case 2: var anf_arg261 = $ans256;
$step249 = 3;
$al257 = L[60];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al257,v$sequence141.$var);
}
$ans256 = v$sequence141.$var.app(anf_arg261);
break;
case 3: ++R.GAS;
return $ans256;
default: throw "No case numbered " + $step249 + " in $temp_lam250";
}
}
} catch($e262) {
if(R.isCont($e262) && ($step249 !== 3)) {
$e262.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al257,$temp_lam250,$step249,[a251,b252,c253,d254,e255],[]);
}
if(R.isPyretException($e262)) {
$e262.pyretStack.push($al257);
}
throw $e262;
}
};
var anf_obj269 = R.makeFunction($temp_lam250);
var error692 = R.makeObject({"make":anf_obj263,
"make0":anf_obj264,
"make1":anf_obj265,
"make2":anf_obj266,
"make3":anf_obj267,
"make4":anf_obj268,
"make5":anf_obj269});
var $temp_lam271 = function($arr272) {
var $step270 = 0;
var $ans273 = D;
var $al274 = L[65];
try {
if(R.isActivationRecord($arr272)) {
$step270 = $arr272.step;
$al274 = $arr272.from;
$ans273 = $arr272.ans;
arr272 = $arr272.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[65],1,$t);
}
var arr272 = $arr272;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step270) {
case 0: $step270 = 1;
$al274 = L[64];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al274,raw$array$to$list4);
}
$ans273 = raw$array$to$list4.app(arr272);
break;
case 1: var anf_arg275 = $ans273;
$step270 = 2;
$al274 = L[63];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al274,h$sequence153.$var);
}
$ans273 = h$sequence153.$var.app(anf_arg275,(" "));
break;
case 2: ++R.GAS;
return $ans273;
default: throw "No case numbered " + $step270 + " in $temp_lam271";
}
}
} catch($e276) {
if(R.isCont($e276) && ($step270 !== 2)) {
$e276.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al274,$temp_lam271,$step270,[arr272],[]);
}
if(R.isPyretException($e276)) {
$e276.pyretStack.push($al274);
}
throw $e276;
}
};
var anf_obj346 = R.makeFunction($temp_lam271);
var $temp_lam278 = function($$resumer195) {
var $step277 = 0;
var $ans279 = D;
var $al280 = L[69];
try {
if(R.isActivationRecord($$resumer195)) {
$step277 = $$resumer195.step;
$al280 = $$resumer195.from;
$ans279 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[69],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step277) {
case 0: var anf_arg281 = [];
$step277 = 1;
$al280 = L[66];
$field282 = R.getColonFieldLoc(raw$array5,"make",L[66]);
if(R.isMethod($field282)) {
$ans279 = $field282.full_meth(raw$array5,anf_arg281);
} else {
if(!(R.isFunction($field282))) {
R.ffi.throwNonFunApp(L[66],$field282);
}
$ans279 = $field282.app(anf_arg281);
}
break;
case 1: var anf_arg283 = $ans279;
$step277 = 2;
$al280 = L[68];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al280,raw$array$to$list4);
}
$ans279 = raw$array$to$list4.app(anf_arg283);
break;
case 2: var anf_arg284 = $ans279;
$step277 = 3;
$al280 = L[67];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al280,h$sequence153.$var);
}
$ans279 = h$sequence153.$var.app(anf_arg284,(" "));
break;
case 3: ++R.GAS;
return $ans279;
default: throw "No case numbered " + $step277 + " in $temp_lam278";
}
}
} catch($e285) {
if(R.isCont($e285) && ($step277 !== 3)) {
$e285.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al280,$temp_lam278,$step277,[],[]);
}
if(R.isPyretException($e285)) {
$e285.pyretStack.push($al280);
}
throw $e285;
}
};
var anf_obj347 = R.makeFunction($temp_lam278);
var $temp_lam287 = function($a288) {
var $step286 = 0;
var $ans289 = D;
var $al290 = L[73];
try {
if(R.isActivationRecord($a288)) {
$step286 = $a288.step;
$al290 = $a288.from;
$ans289 = $a288.ans;
a288 = $a288.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[73],1,$t);
}
var a288 = $a288;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step286) {
case 0: var anf_arg291 = [a288];
$step286 = 1;
$al290 = L[70];
$field292 = R.getColonFieldLoc(raw$array5,"make",L[70]);
if(R.isMethod($field292)) {
$ans289 = $field292.full_meth(raw$array5,anf_arg291);
} else {
if(!(R.isFunction($field292))) {
R.ffi.throwNonFunApp(L[70],$field292);
}
$ans289 = $field292.app(anf_arg291);
}
break;
case 1: var anf_arg293 = $ans289;
$step286 = 2;
$al290 = L[72];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al290,raw$array$to$list4);
}
$ans289 = raw$array$to$list4.app(anf_arg293);
break;
case 2: var anf_arg294 = $ans289;
$step286 = 3;
$al290 = L[71];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al290,h$sequence153.$var);
}
$ans289 = h$sequence153.$var.app(anf_arg294,(" "));
break;
case 3: ++R.GAS;
return $ans289;
default: throw "No case numbered " + $step286 + " in $temp_lam287";
}
}
} catch($e295) {
if(R.isCont($e295) && ($step286 !== 3)) {
$e295.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al290,$temp_lam287,$step286,[a288],[]);
}
if(R.isPyretException($e295)) {
$e295.pyretStack.push($al290);
}
throw $e295;
}
};
var anf_obj348 = R.makeFunction($temp_lam287);
var $temp_lam297 = function($a298,$b299) {
var $step296 = 0;
var $ans300 = D;
var $al301 = L[77];
try {
if(R.isActivationRecord($a298)) {
$step296 = $a298.step;
$al301 = $a298.from;
$ans300 = $a298.ans;
a298 = $a298.args[0];
b299 = $a298.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[77],2,$t);
}
var a298 = $a298;
var b299 = $b299;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step296) {
case 0: var anf_arg302 = [a298,b299];
$step296 = 1;
$al301 = L[74];
$field303 = R.getColonFieldLoc(raw$array5,"make",L[74]);
if(R.isMethod($field303)) {
$ans300 = $field303.full_meth(raw$array5,anf_arg302);
} else {
if(!(R.isFunction($field303))) {
R.ffi.throwNonFunApp(L[74],$field303);
}
$ans300 = $field303.app(anf_arg302);
}
break;
case 1: var anf_arg304 = $ans300;
$step296 = 2;
$al301 = L[76];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al301,raw$array$to$list4);
}
$ans300 = raw$array$to$list4.app(anf_arg304);
break;
case 2: var anf_arg305 = $ans300;
$step296 = 3;
$al301 = L[75];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al301,h$sequence153.$var);
}
$ans300 = h$sequence153.$var.app(anf_arg305,(" "));
break;
case 3: ++R.GAS;
return $ans300;
default: throw "No case numbered " + $step296 + " in $temp_lam297";
}
}
} catch($e306) {
if(R.isCont($e306) && ($step296 !== 3)) {
$e306.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al301,$temp_lam297,$step296,[a298,b299],[]);
}
if(R.isPyretException($e306)) {
$e306.pyretStack.push($al301);
}
throw $e306;
}
};
var anf_obj349 = R.makeFunction($temp_lam297);
var $temp_lam308 = function($a309,$b310,$c311) {
var $step307 = 0;
var $ans312 = D;
var $al313 = L[81];
try {
if(R.isActivationRecord($a309)) {
$step307 = $a309.step;
$al313 = $a309.from;
$ans312 = $a309.ans;
a309 = $a309.args[0];
b310 = $a309.args[1];
c311 = $a309.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[81],3,$t);
}
var a309 = $a309;
var b310 = $b310;
var c311 = $c311;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step307) {
case 0: var anf_arg314 = [a309,b310,c311];
$step307 = 1;
$al313 = L[78];
$field315 = R.getColonFieldLoc(raw$array5,"make",L[78]);
if(R.isMethod($field315)) {
$ans312 = $field315.full_meth(raw$array5,anf_arg314);
} else {
if(!(R.isFunction($field315))) {
R.ffi.throwNonFunApp(L[78],$field315);
}
$ans312 = $field315.app(anf_arg314);
}
break;
case 1: var anf_arg316 = $ans312;
$step307 = 2;
$al313 = L[80];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al313,raw$array$to$list4);
}
$ans312 = raw$array$to$list4.app(anf_arg316);
break;
case 2: var anf_arg317 = $ans312;
$step307 = 3;
$al313 = L[79];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al313,h$sequence153.$var);
}
$ans312 = h$sequence153.$var.app(anf_arg317,(" "));
break;
case 3: ++R.GAS;
return $ans312;
default: throw "No case numbered " + $step307 + " in $temp_lam308";
}
}
} catch($e318) {
if(R.isCont($e318) && ($step307 !== 3)) {
$e318.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al313,$temp_lam308,$step307,[a309,b310,c311],[]);
}
if(R.isPyretException($e318)) {
$e318.pyretStack.push($al313);
}
throw $e318;
}
};
var anf_obj350 = R.makeFunction($temp_lam308);
var $temp_lam320 = function($a321,$b322,$c323,$d324) {
var $step319 = 0;
var $ans325 = D;
var $al326 = L[85];
try {
if(R.isActivationRecord($a321)) {
$step319 = $a321.step;
$al326 = $a321.from;
$ans325 = $a321.ans;
a321 = $a321.args[0];
b322 = $a321.args[1];
c323 = $a321.args[2];
d324 = $a321.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[85],4,$t);
}
var a321 = $a321;
var b322 = $b322;
var c323 = $c323;
var d324 = $d324;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step319) {
case 0: var anf_arg327 = [a321,b322,c323,d324];
$step319 = 1;
$al326 = L[82];
$field328 = R.getColonFieldLoc(raw$array5,"make",L[82]);
if(R.isMethod($field328)) {
$ans325 = $field328.full_meth(raw$array5,anf_arg327);
} else {
if(!(R.isFunction($field328))) {
R.ffi.throwNonFunApp(L[82],$field328);
}
$ans325 = $field328.app(anf_arg327);
}
break;
case 1: var anf_arg329 = $ans325;
$step319 = 2;
$al326 = L[84];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al326,raw$array$to$list4);
}
$ans325 = raw$array$to$list4.app(anf_arg329);
break;
case 2: var anf_arg330 = $ans325;
$step319 = 3;
$al326 = L[83];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al326,h$sequence153.$var);
}
$ans325 = h$sequence153.$var.app(anf_arg330,(" "));
break;
case 3: ++R.GAS;
return $ans325;
default: throw "No case numbered " + $step319 + " in $temp_lam320";
}
}
} catch($e331) {
if(R.isCont($e331) && ($step319 !== 3)) {
$e331.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al326,$temp_lam320,$step319,[a321,b322,c323,d324],[]);
}
if(R.isPyretException($e331)) {
$e331.pyretStack.push($al326);
}
throw $e331;
}
};
var anf_obj351 = R.makeFunction($temp_lam320);
var $temp_lam333 = function($a334,$b335,$c336,$d337,$e338) {
var $step332 = 0;
var $ans339 = D;
var $al340 = L[89];
try {
if(R.isActivationRecord($a334)) {
$step332 = $a334.step;
$al340 = $a334.from;
$ans339 = $a334.ans;
a334 = $a334.args[0];
b335 = $a334.args[1];
c336 = $a334.args[2];
d337 = $a334.args[3];
e338 = $a334.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[89],5,$t);
}
var a334 = $a334;
var b335 = $b335;
var c336 = $c336;
var d337 = $d337;
var e338 = $e338;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step332) {
case 0: var anf_arg341 = [a334,b335,c336,d337,e338];
$step332 = 1;
$al340 = L[86];
$field342 = R.getColonFieldLoc(raw$array5,"make",L[86]);
if(R.isMethod($field342)) {
$ans339 = $field342.full_meth(raw$array5,anf_arg341);
} else {
if(!(R.isFunction($field342))) {
R.ffi.throwNonFunApp(L[86],$field342);
}
$ans339 = $field342.app(anf_arg341);
}
break;
case 1: var anf_arg343 = $ans339;
$step332 = 2;
$al340 = L[88];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al340,raw$array$to$list4);
}
$ans339 = raw$array$to$list4.app(anf_arg343);
break;
case 2: var anf_arg344 = $ans339;
$step332 = 3;
$al340 = L[87];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al340,h$sequence153.$var);
}
$ans339 = h$sequence153.$var.app(anf_arg344,(" "));
break;
case 3: ++R.GAS;
return $ans339;
default: throw "No case numbered " + $step332 + " in $temp_lam333";
}
}
} catch($e345) {
if(R.isCont($e345) && ($step332 !== 3)) {
$e345.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al340,$temp_lam333,$step332,[a334,b335,c336,d337,e338],[]);
}
if(R.isPyretException($e345)) {
$e345.pyretStack.push($al340);
}
throw $e345;
}
};
var anf_obj352 = R.makeFunction($temp_lam333);
var para693 = R.makeObject({"make":anf_obj346,
"make0":anf_obj347,
"make1":anf_obj348,
"make2":anf_obj349,
"make3":anf_obj350,
"make4":anf_obj351,
"make5":anf_obj352});
var $temp_lam354 = function($arr355) {
var $step353 = 0;
var $ans356 = D;
var $al357 = L[92];
try {
if(R.isActivationRecord($arr355)) {
$step353 = $arr355.step;
$al357 = $arr355.from;
$ans356 = $arr355.ans;
arr355 = $arr355.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[92],1,$t);
}
var arr355 = $arr355;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step353) {
case 0: $step353 = 1;
$al357 = L[91];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al357,raw$array$to$list4);
}
$ans356 = raw$array$to$list4.app(arr355);
break;
case 1: var anf_arg358 = $ans356;
$step353 = 2;
$al357 = L[90];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al357,h$sequence153.$var);
}
$ans356 = h$sequence153.$var.app(anf_arg358,(""));
break;
case 2: ++R.GAS;
return $ans356;
default: throw "No case numbered " + $step353 + " in $temp_lam354";
}
}
} catch($e359) {
if(R.isCont($e359) && ($step353 !== 2)) {
$e359.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al357,$temp_lam354,$step353,[arr355],[]);
}
if(R.isPyretException($e359)) {
$e359.pyretStack.push($al357);
}
throw $e359;
}
};
var anf_obj429 = R.makeFunction($temp_lam354);
var $temp_lam361 = function($$resumer195) {
var $step360 = 0;
var $ans362 = D;
var $al363 = L[96];
try {
if(R.isActivationRecord($$resumer195)) {
$step360 = $$resumer195.step;
$al363 = $$resumer195.from;
$ans362 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[96],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step360) {
case 0: var anf_arg364 = [];
$step360 = 1;
$al363 = L[93];
$field365 = R.getColonFieldLoc(raw$array5,"make",L[93]);
if(R.isMethod($field365)) {
$ans362 = $field365.full_meth(raw$array5,anf_arg364);
} else {
if(!(R.isFunction($field365))) {
R.ffi.throwNonFunApp(L[93],$field365);
}
$ans362 = $field365.app(anf_arg364);
}
break;
case 1: var anf_arg366 = $ans362;
$step360 = 2;
$al363 = L[95];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al363,raw$array$to$list4);
}
$ans362 = raw$array$to$list4.app(anf_arg366);
break;
case 2: var anf_arg367 = $ans362;
$step360 = 3;
$al363 = L[94];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al363,h$sequence153.$var);
}
$ans362 = h$sequence153.$var.app(anf_arg367,(""));
break;
case 3: ++R.GAS;
return $ans362;
default: throw "No case numbered " + $step360 + " in $temp_lam361";
}
}
} catch($e368) {
if(R.isCont($e368) && ($step360 !== 3)) {
$e368.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al363,$temp_lam361,$step360,[],[]);
}
if(R.isPyretException($e368)) {
$e368.pyretStack.push($al363);
}
throw $e368;
}
};
var anf_obj430 = R.makeFunction($temp_lam361);
var $temp_lam370 = function($a371) {
var $step369 = 0;
var $ans372 = D;
var $al373 = L[100];
try {
if(R.isActivationRecord($a371)) {
$step369 = $a371.step;
$al373 = $a371.from;
$ans372 = $a371.ans;
a371 = $a371.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[100],1,$t);
}
var a371 = $a371;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step369) {
case 0: var anf_arg374 = [a371];
$step369 = 1;
$al373 = L[97];
$field375 = R.getColonFieldLoc(raw$array5,"make",L[97]);
if(R.isMethod($field375)) {
$ans372 = $field375.full_meth(raw$array5,anf_arg374);
} else {
if(!(R.isFunction($field375))) {
R.ffi.throwNonFunApp(L[97],$field375);
}
$ans372 = $field375.app(anf_arg374);
}
break;
case 1: var anf_arg376 = $ans372;
$step369 = 2;
$al373 = L[99];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al373,raw$array$to$list4);
}
$ans372 = raw$array$to$list4.app(anf_arg376);
break;
case 2: var anf_arg377 = $ans372;
$step369 = 3;
$al373 = L[98];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al373,h$sequence153.$var);
}
$ans372 = h$sequence153.$var.app(anf_arg377,(""));
break;
case 3: ++R.GAS;
return $ans372;
default: throw "No case numbered " + $step369 + " in $temp_lam370";
}
}
} catch($e378) {
if(R.isCont($e378) && ($step369 !== 3)) {
$e378.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al373,$temp_lam370,$step369,[a371],[]);
}
if(R.isPyretException($e378)) {
$e378.pyretStack.push($al373);
}
throw $e378;
}
};
var anf_obj431 = R.makeFunction($temp_lam370);
var $temp_lam380 = function($a381,$b382) {
var $step379 = 0;
var $ans383 = D;
var $al384 = L[104];
try {
if(R.isActivationRecord($a381)) {
$step379 = $a381.step;
$al384 = $a381.from;
$ans383 = $a381.ans;
a381 = $a381.args[0];
b382 = $a381.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[104],2,$t);
}
var a381 = $a381;
var b382 = $b382;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step379) {
case 0: var anf_arg385 = [a381,b382];
$step379 = 1;
$al384 = L[101];
$field386 = R.getColonFieldLoc(raw$array5,"make",L[101]);
if(R.isMethod($field386)) {
$ans383 = $field386.full_meth(raw$array5,anf_arg385);
} else {
if(!(R.isFunction($field386))) {
R.ffi.throwNonFunApp(L[101],$field386);
}
$ans383 = $field386.app(anf_arg385);
}
break;
case 1: var anf_arg387 = $ans383;
$step379 = 2;
$al384 = L[103];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al384,raw$array$to$list4);
}
$ans383 = raw$array$to$list4.app(anf_arg387);
break;
case 2: var anf_arg388 = $ans383;
$step379 = 3;
$al384 = L[102];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al384,h$sequence153.$var);
}
$ans383 = h$sequence153.$var.app(anf_arg388,(""));
break;
case 3: ++R.GAS;
return $ans383;
default: throw "No case numbered " + $step379 + " in $temp_lam380";
}
}
} catch($e389) {
if(R.isCont($e389) && ($step379 !== 3)) {
$e389.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al384,$temp_lam380,$step379,[a381,b382],[]);
}
if(R.isPyretException($e389)) {
$e389.pyretStack.push($al384);
}
throw $e389;
}
};
var anf_obj432 = R.makeFunction($temp_lam380);
var $temp_lam391 = function($a392,$b393,$c394) {
var $step390 = 0;
var $ans395 = D;
var $al396 = L[108];
try {
if(R.isActivationRecord($a392)) {
$step390 = $a392.step;
$al396 = $a392.from;
$ans395 = $a392.ans;
a392 = $a392.args[0];
b393 = $a392.args[1];
c394 = $a392.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[108],3,$t);
}
var a392 = $a392;
var b393 = $b393;
var c394 = $c394;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step390) {
case 0: var anf_arg397 = [a392,b393,c394];
$step390 = 1;
$al396 = L[105];
$field398 = R.getColonFieldLoc(raw$array5,"make",L[105]);
if(R.isMethod($field398)) {
$ans395 = $field398.full_meth(raw$array5,anf_arg397);
} else {
if(!(R.isFunction($field398))) {
R.ffi.throwNonFunApp(L[105],$field398);
}
$ans395 = $field398.app(anf_arg397);
}
break;
case 1: var anf_arg399 = $ans395;
$step390 = 2;
$al396 = L[107];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al396,raw$array$to$list4);
}
$ans395 = raw$array$to$list4.app(anf_arg399);
break;
case 2: var anf_arg400 = $ans395;
$step390 = 3;
$al396 = L[106];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al396,h$sequence153.$var);
}
$ans395 = h$sequence153.$var.app(anf_arg400,(""));
break;
case 3: ++R.GAS;
return $ans395;
default: throw "No case numbered " + $step390 + " in $temp_lam391";
}
}
} catch($e401) {
if(R.isCont($e401) && ($step390 !== 3)) {
$e401.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al396,$temp_lam391,$step390,[a392,b393,c394],[]);
}
if(R.isPyretException($e401)) {
$e401.pyretStack.push($al396);
}
throw $e401;
}
};
var anf_obj433 = R.makeFunction($temp_lam391);
var $temp_lam403 = function($a404,$b405,$c406,$d407) {
var $step402 = 0;
var $ans408 = D;
var $al409 = L[112];
try {
if(R.isActivationRecord($a404)) {
$step402 = $a404.step;
$al409 = $a404.from;
$ans408 = $a404.ans;
a404 = $a404.args[0];
b405 = $a404.args[1];
c406 = $a404.args[2];
d407 = $a404.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[112],4,$t);
}
var a404 = $a404;
var b405 = $b405;
var c406 = $c406;
var d407 = $d407;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step402) {
case 0: var anf_arg410 = [a404,b405,c406,d407];
$step402 = 1;
$al409 = L[109];
$field411 = R.getColonFieldLoc(raw$array5,"make",L[109]);
if(R.isMethod($field411)) {
$ans408 = $field411.full_meth(raw$array5,anf_arg410);
} else {
if(!(R.isFunction($field411))) {
R.ffi.throwNonFunApp(L[109],$field411);
}
$ans408 = $field411.app(anf_arg410);
}
break;
case 1: var anf_arg412 = $ans408;
$step402 = 2;
$al409 = L[111];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al409,raw$array$to$list4);
}
$ans408 = raw$array$to$list4.app(anf_arg412);
break;
case 2: var anf_arg413 = $ans408;
$step402 = 3;
$al409 = L[110];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al409,h$sequence153.$var);
}
$ans408 = h$sequence153.$var.app(anf_arg413,(""));
break;
case 3: ++R.GAS;
return $ans408;
default: throw "No case numbered " + $step402 + " in $temp_lam403";
}
}
} catch($e414) {
if(R.isCont($e414) && ($step402 !== 3)) {
$e414.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al409,$temp_lam403,$step402,[a404,b405,c406,d407],[]);
}
if(R.isPyretException($e414)) {
$e414.pyretStack.push($al409);
}
throw $e414;
}
};
var anf_obj434 = R.makeFunction($temp_lam403);
var $temp_lam416 = function($a417,$b418,$c419,$d420,$e421) {
var $step415 = 0;
var $ans422 = D;
var $al423 = L[116];
try {
if(R.isActivationRecord($a417)) {
$step415 = $a417.step;
$al423 = $a417.from;
$ans422 = $a417.ans;
a417 = $a417.args[0];
b418 = $a417.args[1];
c419 = $a417.args[2];
d420 = $a417.args[3];
e421 = $a417.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[116],5,$t);
}
var a417 = $a417;
var b418 = $b418;
var c419 = $c419;
var d420 = $d420;
var e421 = $e421;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step415) {
case 0: var anf_arg424 = [a417,b418,c419,d420,e421];
$step415 = 1;
$al423 = L[113];
$field425 = R.getColonFieldLoc(raw$array5,"make",L[113]);
if(R.isMethod($field425)) {
$ans422 = $field425.full_meth(raw$array5,anf_arg424);
} else {
if(!(R.isFunction($field425))) {
R.ffi.throwNonFunApp(L[113],$field425);
}
$ans422 = $field425.app(anf_arg424);
}
break;
case 1: var anf_arg426 = $ans422;
$step415 = 2;
$al423 = L[115];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al423,raw$array$to$list4);
}
$ans422 = raw$array$to$list4.app(anf_arg426);
break;
case 2: var anf_arg427 = $ans422;
$step415 = 3;
$al423 = L[114];
if(!(R.isFunction(h$sequence153.$var))) {
R.ffi.throwNonFunApp($al423,h$sequence153.$var);
}
$ans422 = h$sequence153.$var.app(anf_arg427,(""));
break;
case 3: ++R.GAS;
return $ans422;
default: throw "No case numbered " + $step415 + " in $temp_lam416";
}
}
} catch($e428) {
if(R.isCont($e428) && ($step415 !== 3)) {
$e428.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al423,$temp_lam416,$step415,[a417,b418,c419,d420,e421],[]);
}
if(R.isPyretException($e428)) {
$e428.pyretStack.push($al423);
}
throw $e428;
}
};
var anf_obj435 = R.makeFunction($temp_lam416);
var para$nospace694 = R.makeObject({"make":anf_obj429,
"make0":anf_obj430,
"make1":anf_obj431,
"make2":anf_obj432,
"make3":anf_obj433,
"make4":anf_obj434,
"make5":anf_obj435});
var $temp_lam437 = function($arr438) {
var $step436 = 0;
var $ans439 = D;
var $al440 = L[119];
try {
if(R.isActivationRecord($arr438)) {
$step436 = $arr438.step;
$al440 = $arr438.from;
$ans439 = $arr438.ans;
arr438 = $arr438.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[119],1,$t);
}
var arr438 = $arr438;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step436) {
case 0: $step436 = 1;
$al440 = L[118];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al440,raw$array$to$list4);
}
$ans439 = raw$array$to$list4.app(arr438);
break;
case 1: var anf_arg441 = $ans439;
$step436 = 2;
$al440 = L[117];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al440,bulleted$sequence145.$var);
}
$ans439 = bulleted$sequence145.$var.app(anf_arg441);
break;
case 2: ++R.GAS;
return $ans439;
default: throw "No case numbered " + $step436 + " in $temp_lam437";
}
}
} catch($e442) {
if(R.isCont($e442) && ($step436 !== 2)) {
$e442.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al440,$temp_lam437,$step436,[arr438],[]);
}
if(R.isPyretException($e442)) {
$e442.pyretStack.push($al440);
}
throw $e442;
}
};
var anf_obj512 = R.makeFunction($temp_lam437);
var $temp_lam444 = function($$resumer195) {
var $step443 = 0;
var $ans445 = D;
var $al446 = L[123];
try {
if(R.isActivationRecord($$resumer195)) {
$step443 = $$resumer195.step;
$al446 = $$resumer195.from;
$ans445 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[123],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step443) {
case 0: var anf_arg447 = [];
$step443 = 1;
$al446 = L[120];
$field448 = R.getColonFieldLoc(raw$array5,"make",L[120]);
if(R.isMethod($field448)) {
$ans445 = $field448.full_meth(raw$array5,anf_arg447);
} else {
if(!(R.isFunction($field448))) {
R.ffi.throwNonFunApp(L[120],$field448);
}
$ans445 = $field448.app(anf_arg447);
}
break;
case 1: var anf_arg449 = $ans445;
$step443 = 2;
$al446 = L[122];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al446,raw$array$to$list4);
}
$ans445 = raw$array$to$list4.app(anf_arg449);
break;
case 2: var anf_arg450 = $ans445;
$step443 = 3;
$al446 = L[121];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al446,bulleted$sequence145.$var);
}
$ans445 = bulleted$sequence145.$var.app(anf_arg450);
break;
case 3: ++R.GAS;
return $ans445;
default: throw "No case numbered " + $step443 + " in $temp_lam444";
}
}
} catch($e451) {
if(R.isCont($e451) && ($step443 !== 3)) {
$e451.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al446,$temp_lam444,$step443,[],[]);
}
if(R.isPyretException($e451)) {
$e451.pyretStack.push($al446);
}
throw $e451;
}
};
var anf_obj513 = R.makeFunction($temp_lam444);
var $temp_lam453 = function($a454) {
var $step452 = 0;
var $ans455 = D;
var $al456 = L[127];
try {
if(R.isActivationRecord($a454)) {
$step452 = $a454.step;
$al456 = $a454.from;
$ans455 = $a454.ans;
a454 = $a454.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[127],1,$t);
}
var a454 = $a454;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step452) {
case 0: var anf_arg457 = [a454];
$step452 = 1;
$al456 = L[124];
$field458 = R.getColonFieldLoc(raw$array5,"make",L[124]);
if(R.isMethod($field458)) {
$ans455 = $field458.full_meth(raw$array5,anf_arg457);
} else {
if(!(R.isFunction($field458))) {
R.ffi.throwNonFunApp(L[124],$field458);
}
$ans455 = $field458.app(anf_arg457);
}
break;
case 1: var anf_arg459 = $ans455;
$step452 = 2;
$al456 = L[126];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al456,raw$array$to$list4);
}
$ans455 = raw$array$to$list4.app(anf_arg459);
break;
case 2: var anf_arg460 = $ans455;
$step452 = 3;
$al456 = L[125];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al456,bulleted$sequence145.$var);
}
$ans455 = bulleted$sequence145.$var.app(anf_arg460);
break;
case 3: ++R.GAS;
return $ans455;
default: throw "No case numbered " + $step452 + " in $temp_lam453";
}
}
} catch($e461) {
if(R.isCont($e461) && ($step452 !== 3)) {
$e461.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al456,$temp_lam453,$step452,[a454],[]);
}
if(R.isPyretException($e461)) {
$e461.pyretStack.push($al456);
}
throw $e461;
}
};
var anf_obj514 = R.makeFunction($temp_lam453);
var $temp_lam463 = function($a464,$b465) {
var $step462 = 0;
var $ans466 = D;
var $al467 = L[131];
try {
if(R.isActivationRecord($a464)) {
$step462 = $a464.step;
$al467 = $a464.from;
$ans466 = $a464.ans;
a464 = $a464.args[0];
b465 = $a464.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[131],2,$t);
}
var a464 = $a464;
var b465 = $b465;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step462) {
case 0: var anf_arg468 = [a464,b465];
$step462 = 1;
$al467 = L[128];
$field469 = R.getColonFieldLoc(raw$array5,"make",L[128]);
if(R.isMethod($field469)) {
$ans466 = $field469.full_meth(raw$array5,anf_arg468);
} else {
if(!(R.isFunction($field469))) {
R.ffi.throwNonFunApp(L[128],$field469);
}
$ans466 = $field469.app(anf_arg468);
}
break;
case 1: var anf_arg470 = $ans466;
$step462 = 2;
$al467 = L[130];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al467,raw$array$to$list4);
}
$ans466 = raw$array$to$list4.app(anf_arg470);
break;
case 2: var anf_arg471 = $ans466;
$step462 = 3;
$al467 = L[129];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al467,bulleted$sequence145.$var);
}
$ans466 = bulleted$sequence145.$var.app(anf_arg471);
break;
case 3: ++R.GAS;
return $ans466;
default: throw "No case numbered " + $step462 + " in $temp_lam463";
}
}
} catch($e472) {
if(R.isCont($e472) && ($step462 !== 3)) {
$e472.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al467,$temp_lam463,$step462,[a464,b465],[]);
}
if(R.isPyretException($e472)) {
$e472.pyretStack.push($al467);
}
throw $e472;
}
};
var anf_obj515 = R.makeFunction($temp_lam463);
var $temp_lam474 = function($a475,$b476,$c477) {
var $step473 = 0;
var $ans478 = D;
var $al479 = L[135];
try {
if(R.isActivationRecord($a475)) {
$step473 = $a475.step;
$al479 = $a475.from;
$ans478 = $a475.ans;
a475 = $a475.args[0];
b476 = $a475.args[1];
c477 = $a475.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[135],3,$t);
}
var a475 = $a475;
var b476 = $b476;
var c477 = $c477;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step473) {
case 0: var anf_arg480 = [a475,b476,c477];
$step473 = 1;
$al479 = L[132];
$field481 = R.getColonFieldLoc(raw$array5,"make",L[132]);
if(R.isMethod($field481)) {
$ans478 = $field481.full_meth(raw$array5,anf_arg480);
} else {
if(!(R.isFunction($field481))) {
R.ffi.throwNonFunApp(L[132],$field481);
}
$ans478 = $field481.app(anf_arg480);
}
break;
case 1: var anf_arg482 = $ans478;
$step473 = 2;
$al479 = L[134];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al479,raw$array$to$list4);
}
$ans478 = raw$array$to$list4.app(anf_arg482);
break;
case 2: var anf_arg483 = $ans478;
$step473 = 3;
$al479 = L[133];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al479,bulleted$sequence145.$var);
}
$ans478 = bulleted$sequence145.$var.app(anf_arg483);
break;
case 3: ++R.GAS;
return $ans478;
default: throw "No case numbered " + $step473 + " in $temp_lam474";
}
}
} catch($e484) {
if(R.isCont($e484) && ($step473 !== 3)) {
$e484.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al479,$temp_lam474,$step473,[a475,b476,c477],[]);
}
if(R.isPyretException($e484)) {
$e484.pyretStack.push($al479);
}
throw $e484;
}
};
var anf_obj516 = R.makeFunction($temp_lam474);
var $temp_lam486 = function($a487,$b488,$c489,$d490) {
var $step485 = 0;
var $ans491 = D;
var $al492 = L[139];
try {
if(R.isActivationRecord($a487)) {
$step485 = $a487.step;
$al492 = $a487.from;
$ans491 = $a487.ans;
a487 = $a487.args[0];
b488 = $a487.args[1];
c489 = $a487.args[2];
d490 = $a487.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[139],4,$t);
}
var a487 = $a487;
var b488 = $b488;
var c489 = $c489;
var d490 = $d490;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step485) {
case 0: var anf_arg493 = [a487,b488,c489,d490];
$step485 = 1;
$al492 = L[136];
$field494 = R.getColonFieldLoc(raw$array5,"make",L[136]);
if(R.isMethod($field494)) {
$ans491 = $field494.full_meth(raw$array5,anf_arg493);
} else {
if(!(R.isFunction($field494))) {
R.ffi.throwNonFunApp(L[136],$field494);
}
$ans491 = $field494.app(anf_arg493);
}
break;
case 1: var anf_arg495 = $ans491;
$step485 = 2;
$al492 = L[138];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al492,raw$array$to$list4);
}
$ans491 = raw$array$to$list4.app(anf_arg495);
break;
case 2: var anf_arg496 = $ans491;
$step485 = 3;
$al492 = L[137];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al492,bulleted$sequence145.$var);
}
$ans491 = bulleted$sequence145.$var.app(anf_arg496);
break;
case 3: ++R.GAS;
return $ans491;
default: throw "No case numbered " + $step485 + " in $temp_lam486";
}
}
} catch($e497) {
if(R.isCont($e497) && ($step485 !== 3)) {
$e497.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al492,$temp_lam486,$step485,[a487,b488,c489,d490],[]);
}
if(R.isPyretException($e497)) {
$e497.pyretStack.push($al492);
}
throw $e497;
}
};
var anf_obj517 = R.makeFunction($temp_lam486);
var $temp_lam499 = function($a500,$b501,$c502,$d503,$e504) {
var $step498 = 0;
var $ans505 = D;
var $al506 = L[143];
try {
if(R.isActivationRecord($a500)) {
$step498 = $a500.step;
$al506 = $a500.from;
$ans505 = $a500.ans;
a500 = $a500.args[0];
b501 = $a500.args[1];
c502 = $a500.args[2];
d503 = $a500.args[3];
e504 = $a500.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[143],5,$t);
}
var a500 = $a500;
var b501 = $b501;
var c502 = $c502;
var d503 = $d503;
var e504 = $e504;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step498) {
case 0: var anf_arg507 = [a500,b501,c502,d503,e504];
$step498 = 1;
$al506 = L[140];
$field508 = R.getColonFieldLoc(raw$array5,"make",L[140]);
if(R.isMethod($field508)) {
$ans505 = $field508.full_meth(raw$array5,anf_arg507);
} else {
if(!(R.isFunction($field508))) {
R.ffi.throwNonFunApp(L[140],$field508);
}
$ans505 = $field508.app(anf_arg507);
}
break;
case 1: var anf_arg509 = $ans505;
$step498 = 2;
$al506 = L[142];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al506,raw$array$to$list4);
}
$ans505 = raw$array$to$list4.app(anf_arg509);
break;
case 2: var anf_arg510 = $ans505;
$step498 = 3;
$al506 = L[141];
if(!(R.isFunction(bulleted$sequence145.$var))) {
R.ffi.throwNonFunApp($al506,bulleted$sequence145.$var);
}
$ans505 = bulleted$sequence145.$var.app(anf_arg510);
break;
case 3: ++R.GAS;
return $ans505;
default: throw "No case numbered " + $step498 + " in $temp_lam499";
}
}
} catch($e511) {
if(R.isCont($e511) && ($step498 !== 3)) {
$e511.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al506,$temp_lam499,$step498,[a500,b501,c502,d503,e504],[]);
}
if(R.isPyretException($e511)) {
$e511.pyretStack.push($al506);
}
throw $e511;
}
};
var anf_obj518 = R.makeFunction($temp_lam499);
var bulleted695 = R.makeObject({"make":anf_obj512,
"make0":anf_obj513,
"make1":anf_obj514,
"make2":anf_obj515,
"make3":anf_obj516,
"make4":anf_obj517,
"make5":anf_obj518});
var $temp_lam520 = function($arr521) {
var $step519 = 0;
var $ans522 = D;
var $al523 = L[146];
try {
if(R.isActivationRecord($arr521)) {
$step519 = $arr521.step;
$al523 = $arr521.from;
$ans522 = $arr521.ans;
arr521 = $arr521.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[146],1,$t);
}
var arr521 = $arr521;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step519) {
case 0: $step519 = 1;
$al523 = L[145];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al523,raw$array$to$list4);
}
$ans522 = raw$array$to$list4.app(arr521);
break;
case 1: var anf_arg524 = $ans522;
$step519 = 2;
$al523 = L[144];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al523,numbered$sequence149.$var);
}
$ans522 = numbered$sequence149.$var.app(anf_arg524);
break;
case 2: ++R.GAS;
return $ans522;
default: throw "No case numbered " + $step519 + " in $temp_lam520";
}
}
} catch($e525) {
if(R.isCont($e525) && ($step519 !== 2)) {
$e525.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al523,$temp_lam520,$step519,[arr521],[]);
}
if(R.isPyretException($e525)) {
$e525.pyretStack.push($al523);
}
throw $e525;
}
};
var anf_obj595 = R.makeFunction($temp_lam520);
var $temp_lam527 = function($$resumer195) {
var $step526 = 0;
var $ans528 = D;
var $al529 = L[150];
try {
if(R.isActivationRecord($$resumer195)) {
$step526 = $$resumer195.step;
$al529 = $$resumer195.from;
$ans528 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[150],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step526) {
case 0: var anf_arg530 = [];
$step526 = 1;
$al529 = L[147];
$field531 = R.getColonFieldLoc(raw$array5,"make",L[147]);
if(R.isMethod($field531)) {
$ans528 = $field531.full_meth(raw$array5,anf_arg530);
} else {
if(!(R.isFunction($field531))) {
R.ffi.throwNonFunApp(L[147],$field531);
}
$ans528 = $field531.app(anf_arg530);
}
break;
case 1: var anf_arg532 = $ans528;
$step526 = 2;
$al529 = L[149];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al529,raw$array$to$list4);
}
$ans528 = raw$array$to$list4.app(anf_arg532);
break;
case 2: var anf_arg533 = $ans528;
$step526 = 3;
$al529 = L[148];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al529,numbered$sequence149.$var);
}
$ans528 = numbered$sequence149.$var.app(anf_arg533);
break;
case 3: ++R.GAS;
return $ans528;
default: throw "No case numbered " + $step526 + " in $temp_lam527";
}
}
} catch($e534) {
if(R.isCont($e534) && ($step526 !== 3)) {
$e534.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al529,$temp_lam527,$step526,[],[]);
}
if(R.isPyretException($e534)) {
$e534.pyretStack.push($al529);
}
throw $e534;
}
};
var anf_obj596 = R.makeFunction($temp_lam527);
var $temp_lam536 = function($a537) {
var $step535 = 0;
var $ans538 = D;
var $al539 = L[154];
try {
if(R.isActivationRecord($a537)) {
$step535 = $a537.step;
$al539 = $a537.from;
$ans538 = $a537.ans;
a537 = $a537.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[154],1,$t);
}
var a537 = $a537;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step535) {
case 0: var anf_arg540 = [a537];
$step535 = 1;
$al539 = L[151];
$field541 = R.getColonFieldLoc(raw$array5,"make",L[151]);
if(R.isMethod($field541)) {
$ans538 = $field541.full_meth(raw$array5,anf_arg540);
} else {
if(!(R.isFunction($field541))) {
R.ffi.throwNonFunApp(L[151],$field541);
}
$ans538 = $field541.app(anf_arg540);
}
break;
case 1: var anf_arg542 = $ans538;
$step535 = 2;
$al539 = L[153];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al539,raw$array$to$list4);
}
$ans538 = raw$array$to$list4.app(anf_arg542);
break;
case 2: var anf_arg543 = $ans538;
$step535 = 3;
$al539 = L[152];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al539,numbered$sequence149.$var);
}
$ans538 = numbered$sequence149.$var.app(anf_arg543);
break;
case 3: ++R.GAS;
return $ans538;
default: throw "No case numbered " + $step535 + " in $temp_lam536";
}
}
} catch($e544) {
if(R.isCont($e544) && ($step535 !== 3)) {
$e544.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al539,$temp_lam536,$step535,[a537],[]);
}
if(R.isPyretException($e544)) {
$e544.pyretStack.push($al539);
}
throw $e544;
}
};
var anf_obj597 = R.makeFunction($temp_lam536);
var $temp_lam546 = function($a547,$b548) {
var $step545 = 0;
var $ans549 = D;
var $al550 = L[158];
try {
if(R.isActivationRecord($a547)) {
$step545 = $a547.step;
$al550 = $a547.from;
$ans549 = $a547.ans;
a547 = $a547.args[0];
b548 = $a547.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[158],2,$t);
}
var a547 = $a547;
var b548 = $b548;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step545) {
case 0: var anf_arg551 = [a547,b548];
$step545 = 1;
$al550 = L[155];
$field552 = R.getColonFieldLoc(raw$array5,"make",L[155]);
if(R.isMethod($field552)) {
$ans549 = $field552.full_meth(raw$array5,anf_arg551);
} else {
if(!(R.isFunction($field552))) {
R.ffi.throwNonFunApp(L[155],$field552);
}
$ans549 = $field552.app(anf_arg551);
}
break;
case 1: var anf_arg553 = $ans549;
$step545 = 2;
$al550 = L[157];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al550,raw$array$to$list4);
}
$ans549 = raw$array$to$list4.app(anf_arg553);
break;
case 2: var anf_arg554 = $ans549;
$step545 = 3;
$al550 = L[156];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al550,numbered$sequence149.$var);
}
$ans549 = numbered$sequence149.$var.app(anf_arg554);
break;
case 3: ++R.GAS;
return $ans549;
default: throw "No case numbered " + $step545 + " in $temp_lam546";
}
}
} catch($e555) {
if(R.isCont($e555) && ($step545 !== 3)) {
$e555.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al550,$temp_lam546,$step545,[a547,b548],[]);
}
if(R.isPyretException($e555)) {
$e555.pyretStack.push($al550);
}
throw $e555;
}
};
var anf_obj598 = R.makeFunction($temp_lam546);
var $temp_lam557 = function($a558,$b559,$c560) {
var $step556 = 0;
var $ans561 = D;
var $al562 = L[162];
try {
if(R.isActivationRecord($a558)) {
$step556 = $a558.step;
$al562 = $a558.from;
$ans561 = $a558.ans;
a558 = $a558.args[0];
b559 = $a558.args[1];
c560 = $a558.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[162],3,$t);
}
var a558 = $a558;
var b559 = $b559;
var c560 = $c560;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step556) {
case 0: var anf_arg563 = [a558,b559,c560];
$step556 = 1;
$al562 = L[159];
$field564 = R.getColonFieldLoc(raw$array5,"make",L[159]);
if(R.isMethod($field564)) {
$ans561 = $field564.full_meth(raw$array5,anf_arg563);
} else {
if(!(R.isFunction($field564))) {
R.ffi.throwNonFunApp(L[159],$field564);
}
$ans561 = $field564.app(anf_arg563);
}
break;
case 1: var anf_arg565 = $ans561;
$step556 = 2;
$al562 = L[161];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al562,raw$array$to$list4);
}
$ans561 = raw$array$to$list4.app(anf_arg565);
break;
case 2: var anf_arg566 = $ans561;
$step556 = 3;
$al562 = L[160];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al562,numbered$sequence149.$var);
}
$ans561 = numbered$sequence149.$var.app(anf_arg566);
break;
case 3: ++R.GAS;
return $ans561;
default: throw "No case numbered " + $step556 + " in $temp_lam557";
}
}
} catch($e567) {
if(R.isCont($e567) && ($step556 !== 3)) {
$e567.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al562,$temp_lam557,$step556,[a558,b559,c560],[]);
}
if(R.isPyretException($e567)) {
$e567.pyretStack.push($al562);
}
throw $e567;
}
};
var anf_obj599 = R.makeFunction($temp_lam557);
var $temp_lam569 = function($a570,$b571,$c572,$d573) {
var $step568 = 0;
var $ans574 = D;
var $al575 = L[166];
try {
if(R.isActivationRecord($a570)) {
$step568 = $a570.step;
$al575 = $a570.from;
$ans574 = $a570.ans;
a570 = $a570.args[0];
b571 = $a570.args[1];
c572 = $a570.args[2];
d573 = $a570.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[166],4,$t);
}
var a570 = $a570;
var b571 = $b571;
var c572 = $c572;
var d573 = $d573;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step568) {
case 0: var anf_arg576 = [a570,b571,c572,d573];
$step568 = 1;
$al575 = L[163];
$field577 = R.getColonFieldLoc(raw$array5,"make",L[163]);
if(R.isMethod($field577)) {
$ans574 = $field577.full_meth(raw$array5,anf_arg576);
} else {
if(!(R.isFunction($field577))) {
R.ffi.throwNonFunApp(L[163],$field577);
}
$ans574 = $field577.app(anf_arg576);
}
break;
case 1: var anf_arg578 = $ans574;
$step568 = 2;
$al575 = L[165];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al575,raw$array$to$list4);
}
$ans574 = raw$array$to$list4.app(anf_arg578);
break;
case 2: var anf_arg579 = $ans574;
$step568 = 3;
$al575 = L[164];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al575,numbered$sequence149.$var);
}
$ans574 = numbered$sequence149.$var.app(anf_arg579);
break;
case 3: ++R.GAS;
return $ans574;
default: throw "No case numbered " + $step568 + " in $temp_lam569";
}
}
} catch($e580) {
if(R.isCont($e580) && ($step568 !== 3)) {
$e580.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al575,$temp_lam569,$step568,[a570,b571,c572,d573],[]);
}
if(R.isPyretException($e580)) {
$e580.pyretStack.push($al575);
}
throw $e580;
}
};
var anf_obj600 = R.makeFunction($temp_lam569);
var $temp_lam582 = function($a583,$b584,$c585,$d586,$e587) {
var $step581 = 0;
var $ans588 = D;
var $al589 = L[170];
try {
if(R.isActivationRecord($a583)) {
$step581 = $a583.step;
$al589 = $a583.from;
$ans588 = $a583.ans;
a583 = $a583.args[0];
b584 = $a583.args[1];
c585 = $a583.args[2];
d586 = $a583.args[3];
e587 = $a583.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[170],5,$t);
}
var a583 = $a583;
var b584 = $b584;
var c585 = $c585;
var d586 = $d586;
var e587 = $e587;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step581) {
case 0: var anf_arg590 = [a583,b584,c585,d586,e587];
$step581 = 1;
$al589 = L[167];
$field591 = R.getColonFieldLoc(raw$array5,"make",L[167]);
if(R.isMethod($field591)) {
$ans588 = $field591.full_meth(raw$array5,anf_arg590);
} else {
if(!(R.isFunction($field591))) {
R.ffi.throwNonFunApp(L[167],$field591);
}
$ans588 = $field591.app(anf_arg590);
}
break;
case 1: var anf_arg592 = $ans588;
$step581 = 2;
$al589 = L[169];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al589,raw$array$to$list4);
}
$ans588 = raw$array$to$list4.app(anf_arg592);
break;
case 2: var anf_arg593 = $ans588;
$step581 = 3;
$al589 = L[168];
if(!(R.isFunction(numbered$sequence149.$var))) {
R.ffi.throwNonFunApp($al589,numbered$sequence149.$var);
}
$ans588 = numbered$sequence149.$var.app(anf_arg593);
break;
case 3: ++R.GAS;
return $ans588;
default: throw "No case numbered " + $step581 + " in $temp_lam582";
}
}
} catch($e594) {
if(R.isCont($e594) && ($step581 !== 3)) {
$e594.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al589,$temp_lam582,$step581,[a583,b584,c585,d586,e587],[]);
}
if(R.isPyretException($e594)) {
$e594.pyretStack.push($al589);
}
throw $e594;
}
};
var anf_obj601 = R.makeFunction($temp_lam582);
var numbered696 = R.makeObject({"make":anf_obj595,
"make0":anf_obj596,
"make1":anf_obj597,
"make2":anf_obj598,
"make3":anf_obj599,
"make4":anf_obj600,
"make5":anf_obj601});
var $temp_lam603 = function($arr604) {
var $step602 = 0;
var $ans605 = D;
var $al606 = L[174];
try {
if(R.isActivationRecord($arr604)) {
$step602 = $arr604.step;
$al606 = $arr604.from;
$ans605 = $arr604.ans;
arr604 = $arr604.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[174],1,$t);
}
var arr604 = $arr604;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step602) {
case 0: $step602 = 1;
$al606 = L[173];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al606,raw$array$to$list4);
}
$ans605 = raw$array$to$list4.app(arr604);
break;
case 1: var anf_arg607 = $ans605;
$step602 = 2;
$al606 = L[172];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al606,v$sequence141.$var);
}
$ans605 = v$sequence141.$var.app(anf_arg607);
break;
case 2: var anf_arg608 = $ans605;
$step602 = 3;
$al606 = L[171];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al606,optional185.$var);
}
$ans605 = optional185.$var.app(anf_arg608);
break;
case 3: ++R.GAS;
return $ans605;
default: throw "No case numbered " + $step602 + " in $temp_lam603";
}
}
} catch($e609) {
if(R.isCont($e609) && ($step602 !== 3)) {
$e609.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al606,$temp_lam603,$step602,[arr604],[]);
}
if(R.isPyretException($e609)) {
$e609.pyretStack.push($al606);
}
throw $e609;
}
};
var anf_obj685 = R.makeFunction($temp_lam603);
var $temp_lam611 = function($$resumer195) {
var $step610 = 0;
var $ans612 = D;
var $al613 = L[179];
try {
if(R.isActivationRecord($$resumer195)) {
$step610 = $$resumer195.step;
$al613 = $$resumer195.from;
$ans612 = $$resumer195.ans;
$resumer195 = $$resumer195.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[179],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step610) {
case 0: var anf_arg614 = [];
$step610 = 1;
$al613 = L[175];
$field615 = R.getColonFieldLoc(raw$array5,"make",L[175]);
if(R.isMethod($field615)) {
$ans612 = $field615.full_meth(raw$array5,anf_arg614);
} else {
if(!(R.isFunction($field615))) {
R.ffi.throwNonFunApp(L[175],$field615);
}
$ans612 = $field615.app(anf_arg614);
}
break;
case 1: var anf_arg616 = $ans612;
$step610 = 2;
$al613 = L[178];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al613,raw$array$to$list4);
}
$ans612 = raw$array$to$list4.app(anf_arg616);
break;
case 2: var anf_arg617 = $ans612;
$step610 = 3;
$al613 = L[177];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al613,v$sequence141.$var);
}
$ans612 = v$sequence141.$var.app(anf_arg617);
break;
case 3: var anf_arg618 = $ans612;
$step610 = 4;
$al613 = L[176];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al613,optional185.$var);
}
$ans612 = optional185.$var.app(anf_arg618);
break;
case 4: ++R.GAS;
return $ans612;
default: throw "No case numbered " + $step610 + " in $temp_lam611";
}
}
} catch($e619) {
if(R.isCont($e619) && ($step610 !== 4)) {
$e619.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al613,$temp_lam611,$step610,[],[]);
}
if(R.isPyretException($e619)) {
$e619.pyretStack.push($al613);
}
throw $e619;
}
};
var anf_obj686 = R.makeFunction($temp_lam611);
var $temp_lam621 = function($a622) {
var $step620 = 0;
var $ans623 = D;
var $al624 = L[184];
try {
if(R.isActivationRecord($a622)) {
$step620 = $a622.step;
$al624 = $a622.from;
$ans623 = $a622.ans;
a622 = $a622.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[184],1,$t);
}
var a622 = $a622;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step620) {
case 0: var anf_arg625 = [a622];
$step620 = 1;
$al624 = L[180];
$field626 = R.getColonFieldLoc(raw$array5,"make",L[180]);
if(R.isMethod($field626)) {
$ans623 = $field626.full_meth(raw$array5,anf_arg625);
} else {
if(!(R.isFunction($field626))) {
R.ffi.throwNonFunApp(L[180],$field626);
}
$ans623 = $field626.app(anf_arg625);
}
break;
case 1: var anf_arg627 = $ans623;
$step620 = 2;
$al624 = L[183];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al624,raw$array$to$list4);
}
$ans623 = raw$array$to$list4.app(anf_arg627);
break;
case 2: var anf_arg628 = $ans623;
$step620 = 3;
$al624 = L[182];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al624,v$sequence141.$var);
}
$ans623 = v$sequence141.$var.app(anf_arg628);
break;
case 3: var anf_arg629 = $ans623;
$step620 = 4;
$al624 = L[181];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al624,optional185.$var);
}
$ans623 = optional185.$var.app(anf_arg629);
break;
case 4: ++R.GAS;
return $ans623;
default: throw "No case numbered " + $step620 + " in $temp_lam621";
}
}
} catch($e630) {
if(R.isCont($e630) && ($step620 !== 4)) {
$e630.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al624,$temp_lam621,$step620,[a622],[]);
}
if(R.isPyretException($e630)) {
$e630.pyretStack.push($al624);
}
throw $e630;
}
};
var anf_obj687 = R.makeFunction($temp_lam621);
var $temp_lam632 = function($a633,$b634) {
var $step631 = 0;
var $ans635 = D;
var $al636 = L[189];
try {
if(R.isActivationRecord($a633)) {
$step631 = $a633.step;
$al636 = $a633.from;
$ans635 = $a633.ans;
a633 = $a633.args[0];
b634 = $a633.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],2,$t);
}
var a633 = $a633;
var b634 = $b634;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step631) {
case 0: var anf_arg637 = [a633,b634];
$step631 = 1;
$al636 = L[185];
$field638 = R.getColonFieldLoc(raw$array5,"make",L[185]);
if(R.isMethod($field638)) {
$ans635 = $field638.full_meth(raw$array5,anf_arg637);
} else {
if(!(R.isFunction($field638))) {
R.ffi.throwNonFunApp(L[185],$field638);
}
$ans635 = $field638.app(anf_arg637);
}
break;
case 1: var anf_arg639 = $ans635;
$step631 = 2;
$al636 = L[188];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al636,raw$array$to$list4);
}
$ans635 = raw$array$to$list4.app(anf_arg639);
break;
case 2: var anf_arg640 = $ans635;
$step631 = 3;
$al636 = L[187];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al636,v$sequence141.$var);
}
$ans635 = v$sequence141.$var.app(anf_arg640);
break;
case 3: var anf_arg641 = $ans635;
$step631 = 4;
$al636 = L[186];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al636,optional185.$var);
}
$ans635 = optional185.$var.app(anf_arg641);
break;
case 4: ++R.GAS;
return $ans635;
default: throw "No case numbered " + $step631 + " in $temp_lam632";
}
}
} catch($e642) {
if(R.isCont($e642) && ($step631 !== 4)) {
$e642.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al636,$temp_lam632,$step631,[a633,b634],[]);
}
if(R.isPyretException($e642)) {
$e642.pyretStack.push($al636);
}
throw $e642;
}
};
var anf_obj688 = R.makeFunction($temp_lam632);
var $temp_lam644 = function($a645,$b646,$c647) {
var $step643 = 0;
var $ans648 = D;
var $al649 = L[194];
try {
if(R.isActivationRecord($a645)) {
$step643 = $a645.step;
$al649 = $a645.from;
$ans648 = $a645.ans;
a645 = $a645.args[0];
b646 = $a645.args[1];
c647 = $a645.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[194],3,$t);
}
var a645 = $a645;
var b646 = $b646;
var c647 = $c647;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step643) {
case 0: var anf_arg650 = [a645,b646,c647];
$step643 = 1;
$al649 = L[190];
$field651 = R.getColonFieldLoc(raw$array5,"make",L[190]);
if(R.isMethod($field651)) {
$ans648 = $field651.full_meth(raw$array5,anf_arg650);
} else {
if(!(R.isFunction($field651))) {
R.ffi.throwNonFunApp(L[190],$field651);
}
$ans648 = $field651.app(anf_arg650);
}
break;
case 1: var anf_arg652 = $ans648;
$step643 = 2;
$al649 = L[193];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al649,raw$array$to$list4);
}
$ans648 = raw$array$to$list4.app(anf_arg652);
break;
case 2: var anf_arg653 = $ans648;
$step643 = 3;
$al649 = L[192];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al649,v$sequence141.$var);
}
$ans648 = v$sequence141.$var.app(anf_arg653);
break;
case 3: var anf_arg654 = $ans648;
$step643 = 4;
$al649 = L[191];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al649,optional185.$var);
}
$ans648 = optional185.$var.app(anf_arg654);
break;
case 4: ++R.GAS;
return $ans648;
default: throw "No case numbered " + $step643 + " in $temp_lam644";
}
}
} catch($e655) {
if(R.isCont($e655) && ($step643 !== 4)) {
$e655.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al649,$temp_lam644,$step643,[a645,b646,c647],[]);
}
if(R.isPyretException($e655)) {
$e655.pyretStack.push($al649);
}
throw $e655;
}
};
var anf_obj689 = R.makeFunction($temp_lam644);
var $temp_lam657 = function($a658,$b659,$c660,$d661) {
var $step656 = 0;
var $ans662 = D;
var $al663 = L[199];
try {
if(R.isActivationRecord($a658)) {
$step656 = $a658.step;
$al663 = $a658.from;
$ans662 = $a658.ans;
a658 = $a658.args[0];
b659 = $a658.args[1];
c660 = $a658.args[2];
d661 = $a658.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[199],4,$t);
}
var a658 = $a658;
var b659 = $b659;
var c660 = $c660;
var d661 = $d661;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step656) {
case 0: var anf_arg664 = [a658,b659,c660,d661];
$step656 = 1;
$al663 = L[195];
$field665 = R.getColonFieldLoc(raw$array5,"make",L[195]);
if(R.isMethod($field665)) {
$ans662 = $field665.full_meth(raw$array5,anf_arg664);
} else {
if(!(R.isFunction($field665))) {
R.ffi.throwNonFunApp(L[195],$field665);
}
$ans662 = $field665.app(anf_arg664);
}
break;
case 1: var anf_arg666 = $ans662;
$step656 = 2;
$al663 = L[198];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al663,raw$array$to$list4);
}
$ans662 = raw$array$to$list4.app(anf_arg666);
break;
case 2: var anf_arg667 = $ans662;
$step656 = 3;
$al663 = L[197];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al663,v$sequence141.$var);
}
$ans662 = v$sequence141.$var.app(anf_arg667);
break;
case 3: var anf_arg668 = $ans662;
$step656 = 4;
$al663 = L[196];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al663,optional185.$var);
}
$ans662 = optional185.$var.app(anf_arg668);
break;
case 4: ++R.GAS;
return $ans662;
default: throw "No case numbered " + $step656 + " in $temp_lam657";
}
}
} catch($e669) {
if(R.isCont($e669) && ($step656 !== 4)) {
$e669.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al663,$temp_lam657,$step656,[a658,b659,c660,d661],[]);
}
if(R.isPyretException($e669)) {
$e669.pyretStack.push($al663);
}
throw $e669;
}
};
var anf_obj690 = R.makeFunction($temp_lam657);
var $temp_lam671 = function($a672,$b673,$c674,$d675,$e676) {
var $step670 = 0;
var $ans677 = D;
var $al678 = L[204];
try {
if(R.isActivationRecord($a672)) {
$step670 = $a672.step;
$al678 = $a672.from;
$ans677 = $a672.ans;
a672 = $a672.args[0];
b673 = $a672.args[1];
c674 = $a672.args[2];
d675 = $a672.args[3];
e676 = $a672.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[204],5,$t);
}
var a672 = $a672;
var b673 = $b673;
var c674 = $c674;
var d675 = $d675;
var e676 = $e676;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step670) {
case 0: var anf_arg679 = [a672,b673,c674,d675,e676];
$step670 = 1;
$al678 = L[200];
$field680 = R.getColonFieldLoc(raw$array5,"make",L[200]);
if(R.isMethod($field680)) {
$ans677 = $field680.full_meth(raw$array5,anf_arg679);
} else {
if(!(R.isFunction($field680))) {
R.ffi.throwNonFunApp(L[200],$field680);
}
$ans677 = $field680.app(anf_arg679);
}
break;
case 1: var anf_arg681 = $ans677;
$step670 = 2;
$al678 = L[203];
if(!(R.isFunction(raw$array$to$list4))) {
R.ffi.throwNonFunApp($al678,raw$array$to$list4);
}
$ans677 = raw$array$to$list4.app(anf_arg681);
break;
case 2: var anf_arg682 = $ans677;
$step670 = 3;
$al678 = L[202];
if(!(R.isFunction(v$sequence141.$var))) {
R.ffi.throwNonFunApp($al678,v$sequence141.$var);
}
$ans677 = v$sequence141.$var.app(anf_arg682);
break;
case 3: var anf_arg683 = $ans677;
$step670 = 4;
$al678 = L[201];
if(!(R.isFunction(optional185.$var))) {
R.ffi.throwNonFunApp($al678,optional185.$var);
}
$ans677 = optional185.$var.app(anf_arg683);
break;
case 4: ++R.GAS;
return $ans677;
default: throw "No case numbered " + $step670 + " in $temp_lam671";
}
}
} catch($e684) {
if(R.isCont($e684) && ($step670 !== 4)) {
$e684.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al678,$temp_lam671,$step670,[a672,b673,c674,d675,e676],[]);
}
if(R.isPyretException($e684)) {
$e684.pyretStack.push($al678);
}
throw $e684;
}
};
var anf_obj691 = R.makeFunction($temp_lam671);
var opt697 = R.makeObject({"make":anf_obj685,
"make0":anf_obj686,
"make1":anf_obj687,
"make2":anf_obj688,
"make3":anf_obj689,
"make4":anf_obj690,
"make5":anf_obj691});
var provides701 = R.makeObject({"ErrorDisplay":ErrorDisplay135.$var,
"is-ErrorDisplay":is$ErrorDisplay137.$var,
"v-sequence":v$sequence141.$var,
"is-v-sequence":is$v$sequence139.$var,
"bulleted-sequence":bulleted$sequence145.$var,
"is-bulleted-sequence":is$bulleted$sequence143.$var,
"numbered-sequence":numbered$sequence149.$var,
"is-numbered-sequence":is$numbered$sequence147.$var,
"h-sequence":h$sequence153.$var,
"is-h-sequence":is$h$sequence151.$var,
"embed":embed157.$var,
"is-embed":is$embed155.$var,
"text":text161.$var,
"is-text":is$text159.$var,
"loc":loc165.$var,
"is-loc":is$loc163.$var,
"maybe-stack-loc":maybe$stack$loc169.$var,
"is-maybe-stack-loc":is$maybe$stack$loc167.$var,
"code":code173.$var,
"is-code":is$code171.$var,
"styled":styled177.$var,
"is-styled":is$styled175.$var,
"loc-display":loc$display181.$var,
"is-loc-display":is$loc$display179.$var,
"optional":optional185.$var,
"is-optional":is$optional183.$var,
"error":error692,
"para":para693,
"para-nospace":para$nospace694,
"bulleted":bulleted695,
"numbered":numbered696,
"opt":opt697});
$step9 = 1;
$al13 = L[35];
$field698 = R.getColonFieldLoc(builtins6,"current-checker",L[35]);
if(R.isMethod($field698)) {
$ans12 = $field698.full_meth(builtins6);
} else {
if(!(R.isFunction($field698))) {
R.ffi.throwNonFunApp(L[35],$field698);
}
$ans12 = $field698.app();
}
break;
case 1: var anf_method_obj699 = $ans12;
$step9 = 2;
$al13 = L[35];
$field700 = R.getColonFieldLoc(anf_method_obj699,"results",L[35]);
if(R.isMethod($field700)) {
$ans12 = $field700.full_meth(anf_method_obj699);
} else {
if(!(R.isFunction($field700))) {
R.ffi.throwNonFunApp(L[35],$field700);
}
$ans12 = $field700.app();
}
break;
case 2: var checks702 = $ans12;
$step9 = 3;
$ans12 = R.makeObject({"answer":nothing7,
"namespace":NAMESPACE,
"defined-values":{"opt":opt697,
"numbered":numbered696,
"optional":optional185.$var,
"v-sequence":v$sequence141.$var,
"bulleted":bulleted695,
"numbered-sequence":numbered$sequence149.$var,
"para-nospace":para$nospace694,
"bulleted-sequence":bulleted$sequence145.$var,
"para":para693,
"h-sequence":h$sequence153.$var,
"error":error692,
"loc":loc165.$var,
"is-optional":is$optional183.$var,
"loc-display":loc$display181.$var,
"is-loc-display":is$loc$display179.$var,
"styled":styled177.$var,
"is-styled":is$styled175.$var,
"code":code173.$var,
"is-code":is$code171.$var,
"maybe-stack-loc":maybe$stack$loc169.$var,
"is-maybe-stack-loc":is$maybe$stack$loc167.$var,
"is-loc":is$loc163.$var,
"text":text161.$var,
"is-text":is$text159.$var,
"embed":embed157.$var,
"is-embed":is$embed155.$var,
"is-h-sequence":is$h$sequence151.$var,
"is-numbered-sequence":is$numbered$sequence147.$var,
"is-bulleted-sequence":is$bulleted$sequence143.$var,
"is-v-sequence":is$v$sequence139.$var,
"is-ErrorDisplay":is$ErrorDisplay137.$var,
"ErrorDisplay":ErrorDisplay135.$var},
"defined-types":{"ErrorDisplay":ErrorDisplay87},
"provide-plus-types":R.makeObject({"values":provides701,
"types":{"ErrorDisplay":ErrorDisplay87}}),
"checks":checks702});
break;
case 3: ++R.GAS;
return $ans12;
default: throw "No case numbered " + $step9 + " in $toplevel10";
}
}
} catch($e703) {
if(R.isCont($e703) && ($step9 !== 3)) {
$e703.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al13,$toplevel10,$step9,[],[provides701,opt697,numbered696,bulleted695,para$nospace694,para693,error692,optional185,is$optional183,loc$display181,is$loc$display179,styled177,is$styled175,code173,is$code171,maybe$stack$loc169,is$maybe$stack$loc167,loc165,is$loc163,text161,is$text159,embed157,is$embed155,h$sequence153,is$h$sequence151,numbered$sequence149,is$numbered$sequence147,bulleted$sequence145,is$bulleted$sequence143,v$sequence141,is$v$sequence139,is$ErrorDisplay137,ErrorDisplay135,ErrorDisplay87]);
}
if(R.isPyretException($e703)) {
$e703.pyretStack.push($al13);
}
throw $e703;
}
};
return R.safeCall($toplevel10,function(moduleVal) {
R.modules["$src/arr/base/error$display.arr8"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://lists": ({"name":"$src/arr/base/lists.arr32",
"requires":[{"import-type":"builtin",
"name":"either"},
{"import-type":"builtin",
"name":"equality"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":function(R, NAMESPACE, M, $E33,$equality34,$O35,$VS36) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,10,7,148,10,13,154],
[M,11,10,165,11,19,174],
[M,12,7,182,12,13,188],
[M,13,10,199,13,19,208],
[M,16,7,240,16,13,246],
[M,17,8,255,17,15,262],
[M,259,82,9780,259,93,9791],
[M,259,73,9771,259,94,9792],
[M,259,48,9746,259,95,9793],
[M,259,30,9728,259,46,9744],
[M,259,18,9716,259,25,9723],
[M,259,2,9700,259,99,9797],
[M,262,4,9861,262,22,9879],
[M,261,46,9848,261,53,9855],
[M,261,16,9818,261,23,9825],
[M,261,34,9836,261,41,9843],
[M,261,2,9804,263,5,9885],
[M,267,4,10012,267,8,10016],
[M,265,37,9925,265,44,9932],
[M,267,4,10012,267,19,10027],
[M,265,15,9903,265,22,9910],
[M,265,31,9919,265,32,9920],
[M,265,2,9890,268,5,10033],
[M,271,4,10240,271,12,10248],
[M,269,46,10081,269,63,10098],
[M,269,65,10100,269,82,10117],
[M,269,44,10079,269,84,10119],
[M,271,4,10240,271,21,10257],
[M,269,19,10054,269,26,10061],
[M,269,33,10068,269,39,10074],
[M,269,2,10037,272,5,10263],
[M,275,4,10371,275,12,10379],
[M,275,4,10371,275,28,10395],
[M,273,40,10305,273,47,10312],
[M,275,4,10371,275,21,10388],
[M,273,15,10280,273,22,10287],
[M,273,29,10294,273,35,10300],
[M,273,2,10267,276,5,10401],
[M,279,4,10517,279,12,10525],
[M,279,4,10517,279,28,10541],
[M,277,40,10443,277,47,10450],
[M,279,4,10517,279,21,10534],
[M,277,15,10418,277,22,10425],
[M,277,29,10432,277,35,10438],
[M,277,2,10405,280,5,10547],
[M,284,4,10685,284,7,10688],
[M,282,39,10589,282,40,10590],
[M,284,4,10685,284,16,10697],
[M,282,14,10564,282,21,10571],
[M,282,28,10578,282,34,10584],
[M,282,2,10552,285,5,10703],
[M,288,4,10880,288,7,10883],
[M,286,47,10752,286,54,10759],
[M,288,4,10880,288,19,10895],
[M,286,14,10719,286,21,10726],
[M,286,28,10733,286,34,10739],
[M,286,41,10746,286,42,10747],
[M,286,2,10707,289,5,10901],
[M,292,4,11042,292,10,11048],
[M,290,37,10940,290,44,10947],
[M,292,4,11042,292,19,11057],
[M,290,17,10920,290,24,10927],
[M,290,31,10934,290,32,10935],
[M,290,2,10905,293,5,11063],
[M,23,31,349,23,37,355],
[M,23,19,337,23,26,344],
[M,23,4,322,26,7,454],
[M,28,50,507,28,57,514],
[M,28,17,474,28,24,481],
[M,28,31,488,28,45,502],
[M,28,4,461,31,7,637],
[M,35,6,806,35,11,811],
[M,33,35,675,33,42,682],
[M,33,22,662,33,30,670],
[M,33,4,644,36,7,819],
[M,40,6,1011,40,11,1016],
[M,38,52,874,38,59,881],
[M,38,19,841,38,26,848],
[M,38,33,855,38,47,869],
[M,38,4,826,41,7,1024],
[M,43,50,1077,43,58,1085],
[M,43,50,1077,43,61,1088],
[M,43,17,1044,43,24,1051],
[M,43,31,1058,43,45,1072],
[M,43,4,1031,46,7,1242],
[M,52,17,1644,52,22,1649],
[M,52,34,1661,52,39,1666],
[M,48,56,1301,48,74,1319],
[M,48,76,1321,48,95,1340],
[M,48,55,1300,48,96,1341],
[M,48,22,1267,48,29,1274],
[M,48,36,1281,48,50,1295],
[M,48,4,1249,53,7,1676],
[M,55,62,1741,55,63,1742],
[M,55,21,1700,55,28,1707],
[M,55,35,1714,55,46,1725],
[M,55,56,1735,55,57,1736],
[M,55,4,1683,59,7,1913],
[M,61,62,1978,61,63,1979],
[M,61,21,1937,61,28,1944],
[M,61,35,1951,61,46,1962],
[M,61,56,1972,61,57,1973],
[M,61,4,1920,65,7,2149],
[M,67,49,2201,67,56,2208],
[M,67,16,2168,67,23,2175],
[M,67,30,2182,67,44,2196],
[M,67,4,2156,70,7,2320],
[M,72,49,2372,72,56,2379],
[M,72,16,2339,72,23,2346],
[M,72,30,2353,72,44,2367],
[M,72,4,2327,75,7,2490],
[M,77,41,2534,77,48,2541],
[M,77,19,2512,77,26,2519],
[M,77,35,2528,77,36,2529],
[M,77,4,2497,80,7,2645],
[M,82,49,2697,82,56,2704],
[M,82,19,2667,82,26,2674],
[M,82,37,2685,82,44,2692],
[M,82,4,2652,85,7,2815],
[M,87,29,2847,87,30,2848],
[M,89,6,2948,89,44,2986],
[M,87,17,2835,87,24,2842],
[M,87,4,2822,90,7,2994],
[M,92,32,3029,92,39,3036],
[M,92,20,3017,92,27,3024],
[M,92,4,3001,95,7,3148],
[M,97,70,3221,97,76,3227],
[M,97,22,3173,97,29,3180],
[M,97,50,3201,97,65,3216],
[M,97,4,3155,97,92,3243],
[M,99,66,3312,99,72,3318],
[M,99,20,3266,99,27,3273],
[M,99,46,3292,99,61,3307],
[M,99,4,3250,99,88,3334],
[M,101,83,3420,101,90,3427],
[M,101,20,3357,101,27,3364],
[M,101,36,3373,101,53,3390],
[M,101,61,3398,101,78,3415],
[M,101,4,3341,106,7,3710],
[M,108,29,3742,108,36,3749],
[M,108,17,3730,108,24,3737],
[M,108,4,3717,112,7,3912],
[M,114,48,3963,114,54,3969],
[M,114,21,3936,114,28,3943],
[M,114,37,3952,114,43,3958],
[M,114,4,3919,118,7,4135],
[M,124,10,4313,124,19,4322],
[M,124,10,4313,124,28,4331],
[M,122,31,4213,122,37,4219],
[M,124,6,4309,124,28,4331],
[M,122,19,4201,122,26,4208],
[M,122,4,4186,125,7,4339],
[M,129,8,4509,129,18,4519],
[M,130,6,4527,130,15,4536],
[M,130,6,4527,130,23,4544],
[M,127,50,4392,127,57,4399],
[M,129,6,4507,129,19,4520],
[M,127,17,4359,127,24,4366],
[M,127,31,4373,127,45,4387],
[M,127,4,4346,131,7,4552],
[M,135,8,4723,135,18,4733],
[M,135,30,4745,135,39,4754],
[M,135,30,4745,135,46,4761],
[M,135,22,4737,135,26,4741],
[M,133,35,4590,133,42,4597],
[M,135,22,4737,135,47,4762],
[M,135,6,4721,135,19,4734],
[M,133,22,4577,133,30,4585],
[M,133,4,4559,136,7,4770],
[M,140,11,4967,140,21,4977],
[M,140,9,4965,140,22,4978],
[M,140,24,4980,140,34,4990],
[M,140,45,5001,140,54,5010],
[M,140,45,5001,140,64,5020],
[M,140,37,4993,140,41,4997],
[M,140,37,4993,140,65,5021],
[M,141,24,5046,141,33,5055],
[M,141,24,5046,141,43,5065],
[M,138,52,4825,138,59,4832],
[M,138,19,4792,138,26,4799],
[M,138,33,4806,138,47,4820],
[M,138,4,4777,143,7,5083],
[M,149,6,5474,149,15,5483],
[M,145,56,5142,145,74,5160],
[M,145,76,5162,145,95,5181],
[M,145,55,5141,145,96,5182],
[M,149,6,5474,149,24,5492],
[M,145,22,5108,145,29,5115],
[M,145,36,5122,145,50,5136],
[M,145,4,5090,150,7,5500],
[M,154,6,5706,154,10,5710],
[M,152,50,5553,152,58,5561],
[M,152,50,5553,152,61,5564],
[M,154,6,5706,154,19,5719],
[M,152,17,5520,152,24,5527],
[M,152,31,5534,152,45,5548],
[M,152,4,5507,155,7,5727],
[M,159,14,5877,159,24,5887],
[M,159,6,5869,159,50,5913],
[M,159,29,5892,159,38,5901],
[M,159,29,5892,159,50,5913],
[M,157,41,5771,157,48,5778],
[M,159,7,5870,159,24,5887],
[M,157,19,5749,157,26,5756],
[M,157,35,5765,157,36,5766],
[M,157,4,5734,160,7,5921],
[M,165,8,6151,165,18,6161],
[M,165,20,6163,165,29,6172],
[M,165,20,6163,165,44,6187],
[M,162,62,5986,162,63,5987],
[M,165,6,6149,165,45,6188],
[M,162,21,5945,162,28,5952],
[M,162,35,5959,162,46,5970],
[M,162,56,5980,162,57,5981],
[M,162,4,5928,166,7,6196],
[M,171,6,6423,171,15,6432],
[M,171,27,6444,171,37,6454],
[M,171,6,6423,171,45,6462],
[M,168,62,6261,168,63,6262],
[M,171,25,6442,171,44,6461],
[M,168,21,6220,168,28,6227],
[M,168,35,6234,168,46,6245],
[M,168,56,6255,168,57,6256],
[M,168,4,6203,172,7,6470],
[M,176,8,6631,176,18,6641],
[M,176,6,6629,176,40,6663],
[M,176,24,6647,176,33,6656],
[M,176,24,6647,176,40,6663],
[M,174,49,6522,174,56,6529],
[M,176,6,6629,176,19,6642],
[M,174,16,6489,174,23,6496],
[M,174,30,6503,174,44,6517],
[M,174,4,6477,177,7,6671],
[M,181,8,6830,181,18,6840],
[M,181,6,6828,181,39,6861],
[M,181,23,6845,181,32,6854],
[M,181,23,6845,181,39,6861],
[M,179,49,6723,179,56,6730],
[M,181,6,6828,181,19,6841],
[M,179,16,6690,179,23,6697],
[M,179,30,6704,179,44,6718],
[M,179,4,6678,182,7,6869],
[M,186,6,7026,186,16,7036],
[M,186,27,7047,186,36,7056],
[M,186,27,7047,186,50,7070],
[M,186,19,7039,186,23,7043],
[M,184,49,6921,184,56,6928],
[M,186,19,7039,186,51,7071],
[M,184,19,6891,184,26,6898],
[M,184,37,6909,184,44,6916],
[M,184,4,6876,187,7,7079],
[M,191,18,7224,191,27,7233],
[M,191,9,7215,191,17,7223],
[M,191,9,7215,191,28,7234],
[M,191,30,7236,191,40,7246],
[M,192,12,7259,192,21,7268],
[M,192,12,7259,192,28,7275],
[M,189,29,7111,189,30,7112],
[M,189,17,7099,189,24,7106],
[M,189,4,7086,194,7,7293],
[M,198,6,7435,198,18,7447],
[M,198,25,7454,198,30,7459],
[M,196,32,7328,196,39,7335],
[M,198,6,7435,198,31,7460],
[M,196,20,7316,196,27,7323],
[M,196,4,7300,199,7,7468],
[M,204,10,7651,204,41,7682],
[M,204,28,7669,204,41,7682],
[M,203,8,7575,205,11,7694],
[M,203,40,7607,203,50,7617],
[M,203,62,7629,203,71,7638],
[M,203,12,7579,203,16,7583],
[M,201,70,7541,201,76,7547],
[M,202,6,7555,206,11,7706],
[M,203,31,7598,203,51,7618],
[M,201,22,7493,201,29,7500],
[M,201,50,7521,201,65,7536],
[M,201,4,7475,207,7,7714],
[M,212,10,7891,212,39,7920],
[M,212,28,7909,212,39,7920],
[M,211,8,7817,213,11,7932],
[M,211,38,7847,211,48,7857],
[M,211,60,7869,211,69,7878],
[M,211,12,7821,211,16,7825],
[M,209,66,7783,209,72,7789],
[M,210,6,7797,214,11,7944],
[M,211,31,7840,211,49,7858],
[M,209,20,7737,209,27,7744],
[M,209,46,7763,209,61,7778],
[M,209,4,7721,215,7,7952],
[M,221,14,8324,221,24,8334],
[M,231,13,8717,231,26,8730],
[M,231,46,8750,231,50,8754],
[M,231,46,8750,231,61,8765],
[M,232,10,8776,232,61,8827],
[M,232,46,8812,232,50,8816],
[M,232,46,8812,232,61,8827],
[M,233,46,8874,233,50,8878],
[M,233,46,8874,233,61,8889],
[M,232,18,8784,232,30,8796],
[M,230,16,8696,235,11,8915],
[M,230,6,8686,235,12,8916],
[M,236,16,8933,236,39,8956],
[M,238,16,8996,238,39,9019],
[M,239,18,9038,239,39,9059],
[M,239,6,9026,239,40,9060],
[M,217,83,8038,217,90,8045],
[M,229,19,8674,229,24,8679],
[M,228,19,8649,228,24,8654],
[M,227,19,8624,227,24,8629],
[M,217,20,7975,217,27,7982],
[M,217,36,7991,217,53,8008],
[M,217,61,8016,217,78,8033],
[M,217,4,7959,240,7,9068],
[M,245,31,9283,245,38,9290],
[M,245,19,9271,245,42,9294],
[M,245,56,9308,245,64,9316],
[M,245,44,9296,245,68,9320],
[M,245,6,9258,245,69,9321],
[M,242,29,9100,242,36,9107],
[M,242,17,9088,242,24,9095],
[M,242,4,9075,246,7,9329],
[M,251,17,9553,251,26,9562],
[M,251,9,9545,251,16,9552],
[M,251,9,9545,251,27,9563],
[M,252,18,9583,252,28,9593],
[M,252,38,9603,252,47,9612],
[M,252,38,9603,252,61,9626],
[M,252,9,9574,252,61,9626],
[M,252,9,9574,252,29,9594],
[M,254,18,9657,254,28,9667],
[M,254,9,9648,254,29,9668],
[M,248,48,9380,248,54,9386],
[M,248,21,9353,248,28,9360],
[M,248,37,9369,248,43,9375],
[M,248,4,9336,256,7,9686],
[M,21,2,303,118,7,4135],
[M,120,2,4139,256,8,9687],
[M,120,18,4155,120,19,4156],
[M,120,29,4166,120,36,4173],
[M,120,4,4141,120,37,4174],
[M,20,0,287,294,3,11067],
[M,299,7,11234,299,18,11245],
[M,299,20,11247,299,60,11287],
[M,299,26,11253,299,59,11286],
[M,299,48,11275,299,59,11286],
[M,300,4,11292,300,29,11317],
[M,300,22,11310,300,29,11317],
[M,301,15,11333,301,21,11339],
[M,301,10,11328,301,31,11349],
[M,301,23,11341,301,30,11348],
[M,300,12,11300,300,20,11308],
[M,298,2,11209,303,5,11363],
[M,304,5,11369,304,10,11374],
[M,304,12,11376,304,58,11422],
[M,304,18,11382,304,57,11421],
[M,304,46,11410,304,57,11421],
[M,305,8,11431,305,20,11443],
[M,296,43,11112,296,44,11113],
[M,296,18,11087,296,25,11094],
[M,296,32,11101,296,38,11107],
[M,296,0,11069,307,3,11453],
[M,313,7,11699,313,18,11710],
[M,313,20,11712,313,60,11752],
[M,313,26,11718,313,59,11751],
[M,313,48,11740,313,59,11751],
[M,314,4,11757,314,41,11794],
[M,314,34,11787,314,40,11793],
[M,314,26,11779,314,41,11794],
[M,315,10,11805,315,17,11812],
[M,315,33,11828,315,39,11834],
[M,315,20,11815,315,50,11845],
[M,315,28,11823,315,49,11844],
[M,315,41,11836,315,48,11843],
[M,314,12,11765,314,20,11773],
[M,312,2,11674,317,5,11859],
[M,318,5,11865,318,10,11870],
[M,318,12,11872,318,58,11918],
[M,318,18,11878,318,57,11917],
[M,318,46,11906,318,57,11917],
[M,319,8,11927,319,20,11939],
[M,309,46,11501,309,47,11502],
[M,309,18,11473,309,25,11480],
[M,309,32,11487,309,38,11493],
[M,309,0,11455,321,3,11949],
[M,326,6,12128,326,11,12133],
[M,327,27,12168,327,67,12208],
[M,327,54,12195,327,66,12207],
[M,327,6,12147,327,23,12164],
[M,325,2,12105,328,5,12214],
[M,323,55,12006,323,62,12013],
[M,325,8,12111,325,12,12115],
[M,323,27,11978,323,34,11985],
[M,323,43,11994,323,50,12001],
[M,323,0,11951,332,3,12327],
[M,334,34,12363,334,41,12370],
[M,334,43,12372,334,67,12396],
[M,334,22,12351,334,29,12358],
[M,334,0,12329,334,71,12400],
[M,338,5,12543,338,17,12555],
[M,338,25,12563,338,60,12598],
[M,338,37,12575,338,59,12597],
[M,338,43,12581,338,52,12590],
[M,339,2,12601,339,30,12629],
[M,340,9,12639,344,39,12861],
[M,340,15,12645,344,38,12860],
[M,343,35,12807,343,49,12821],
[M,341,35,12716,341,50,12731],
[M,339,10,12609,339,23,12622],
[M,336,46,12448,336,58,12460],
[M,336,19,12421,336,25,12427],
[M,336,35,12437,336,41,12443],
[M,336,0,12402,346,3,12871],
[M,351,5,13092,351,15,13102],
[M,352,7,13111,352,20,13124],
[M,353,10,13142,353,76,13208],
[M,355,2,13219,358,7,13333],
[M,356,7,13245,356,20,13258],
[M,357,10,13276,357,59,13325],
[M,357,22,13288,357,58,13324],
[M,357,31,13297,357,44,13310],
[M,360,7,13349,360,20,13362],
[M,361,10,13380,361,59,13429],
[M,361,22,13392,361,58,13428],
[M,361,31,13401,361,44,13414],
[M,355,10,13227,355,19,13236],
[M,348,66,12939,348,78,12951],
[M,348,22,12895,348,28,12901],
[M,348,38,12911,348,44,12917],
[M,348,55,12928,348,61,12934],
[M,348,0,12873,364,3,13447],
[M,368,5,13544,368,10,13549],
[M,368,18,13557,368,43,13582],
[M,368,26,13565,368,42,13581],
[M,368,33,13572,368,38,13577],
[M,369,2,13585,369,23,13606],
[M,370,18,13625,370,66,13673],
[M,369,10,13593,369,16,13599],
[M,366,38,13487,366,45,13494],
[M,366,19,13468,366,25,13474],
[M,366,32,13481,366,33,13482],
[M,366,0,13449,372,3,13683],
[M,376,5,13814,376,18,13827],
[M,379,9,13856,379,18,13865],
[M,379,7,13854,379,19,13866],
[M,380,6,13874,380,15,13883],
[M,380,36,13904,380,44,13912],
[M,380,18,13886,380,46,13914],
[M,380,26,13894,380,45,13913],
[M,382,16,13941,382,24,13949],
[M,382,6,13931,382,25,13950],
[M,374,54,13739,374,61,13746],
[M,374,19,13704,374,33,13718],
[M,374,42,13727,374,49,13734],
[M,374,0,13685,385,3,13968],
[M,392,7,14252,392,26,14271],
[M,394,11,14302,394,25,14316],
[M,395,11,14329,395,26,14344],
[M,395,9,14327,395,27,14345],
[M,396,19,14366,396,34,14381],
[M,396,37,14384,396,53,14400],
[M,398,20,14433,398,35,14448],
[M,398,38,14451,398,55,14468],
[M,394,6,14297,394,26,14317],
[M,391,2,14224,401,5,14492],
[M,387,58,14028,387,76,14046],
[M,387,78,14048,387,97,14067],
[M,387,57,14027,387,98,14068],
[M,402,2,14495,402,11,14504],
[M,387,22,13992,387,36,14006],
[M,387,45,14015,387,52,14022],
[M,387,0,13970,404,3,14551],
[M,408,5,14701,408,18,14714],
[M,411,14,14748,411,23,14757],
[M,411,7,14741,411,23,14757],
[M,412,13,14772,412,21,14780],
[M,412,6,14765,412,27,14786],
[M,414,11,14808,414,20,14817],
[M,414,29,14826,414,37,14834],
[M,414,6,14803,414,44,14841],
[M,414,22,14819,414,43,14840],
[M,406,43,14596,406,50,14603],
[M,406,21,14574,406,28,14581],
[M,406,37,14590,406,38,14591],
[M,406,0,14553,417,3,14859],
[M,422,5,15057,422,18,15070],
[M,425,9,15098,425,18,15107],
[M,425,7,15096,425,19,15108],
[M,426,11,15121,426,20,15130],
[M,426,6,15116,426,21,15131],
[M,428,14,15156,428,22,15164],
[M,428,6,15148,428,23,15165],
[M,419,52,14913,419,60,14921],
[M,419,52,14913,419,63,14924],
[M,419,17,14878,419,31,14892],
[M,419,40,14901,419,47,14908],
[M,419,0,14861,431,3,15183],
[M,435,2,15389,437,5,15433],
[M,436,4,15405,436,26,15427],
[M,441,7,15503,441,15,15511],
[M,444,19,15575,444,43,15599],
[M,444,10,15566,444,15,15571],
[M,447,26,15683,447,41,15698],
[M,446,10,15638,446,28,15656],
[M,446,15,15643,446,22,15650],
[M,445,10,15610,445,24,15624],
[M,443,6,15541,448,9,15708],
[M,443,12,15547,443,16,15551],
[M,440,2,15478,450,5,15722],
[M,433,50,15235,433,67,15252],
[M,433,69,15254,433,86,15271],
[M,433,48,15233,433,88,15273],
[M,451,2,15725,451,14,15737],
[M,435,7,15394,435,12,15399],
[M,433,21,15206,433,27,15212],
[M,433,36,15221,433,43,15228],
[M,433,0,15185,453,3,15778],
[M,457,2,15908,457,12,15918],
[M,455,51,15831,455,58,15838],
[M,455,16,15796,455,30,15810],
[M,455,39,15819,455,46,15826],
[M,455,0,15780,458,3,15922],
[M,462,2,16053,462,12,16063],
[M,460,51,15975,460,58,15982],
[M,460,16,15940,460,30,15954],
[M,460,39,15963,460,46,15970],
[M,460,0,15924,463,3,16067],
[M,469,7,16333,469,35,16361],
[M,469,23,16349,469,35,16361],
[M,470,12,16380,470,20,16388],
[M,470,22,16390,470,30,16398],
[M,470,10,16378,470,58,16426],
[M,470,41,16409,470,48,16416],
[M,470,50,16418,470,57,16425],
[M,470,36,16404,470,58,16426],
[M,470,10,16378,470,31,16399],
[M,469,7,16333,469,19,16345],
[M,468,2,16308,472,5,16440],
[M,465,76,16145,465,83,16152],
[M,473,2,16443,473,18,16459],
[M,465,20,16089,465,37,16106],
[M,465,47,16116,465,54,16123],
[M,465,64,16133,465,71,16140],
[M,465,0,16069,474,3,16463],
[M,478,5,16591,478,18,16604],
[M,481,6,16630,481,15,16639],
[M,481,34,16658,481,42,16666],
[M,481,19,16643,481,44,16668],
[M,481,27,16651,481,43,16667],
[M,481,4,16628,481,16,16640],
[M,476,48,16513,476,55,16520],
[M,476,19,16484,476,27,16492],
[M,476,36,16501,476,43,16508],
[M,476,0,16465,483,3,16678],
[M,487,5,16848,487,33,16876],
[M,487,21,16864,487,33,16876],
[M,490,6,16902,490,14,16910],
[M,490,16,16912,490,24,16920],
[M,490,44,16940,490,51,16947],
[M,490,53,16949,490,60,16956],
[M,490,28,16924,490,62,16958],
[M,490,36,16932,490,61,16957],
[M,490,4,16900,490,25,16921],
[M,485,69,16749,485,76,16756],
[M,487,5,16848,487,17,16860],
[M,485,23,16703,485,34,16714],
[M,485,42,16722,485,49,16729],
[M,485,57,16737,485,64,16744],
[M,485,0,16680,492,3,16968],
[M,496,5,17161,496,49,17205],
[M,496,37,17193,496,49,17205],
[M,496,21,17177,496,33,17189],
[M,499,6,17231,499,14,17239],
[M,499,16,17241,499,24,17249],
[M,499,26,17251,499,34,17259],
[M,499,54,17279,499,61,17286],
[M,499,63,17288,499,70,17295],
[M,499,72,17297,499,79,17304],
[M,499,38,17263,499,81,17306],
[M,499,46,17271,499,80,17305],
[M,499,4,17229,499,35,17260],
[M,494,90,17060,494,97,17067],
[M,496,5,17161,496,17,17173],
[M,494,26,16996,494,40,17010],
[M,494,48,17018,494,55,17025],
[M,494,63,17033,494,70,17040],
[M,494,78,17048,494,85,17055],
[M,494,0,16970,501,3,17316],
[M,505,5,17544,505,65,17604],
[M,505,53,17592,505,65,17604],
[M,505,37,17576,505,49,17588],
[M,505,21,17560,505,33,17572],
[M,508,6,17630,508,14,17638],
[M,508,16,17640,508,24,17648],
[M,508,26,17650,508,34,17658],
[M,508,36,17660,508,44,17668],
[M,508,64,17688,508,71,17695],
[M,508,73,17697,508,80,17704],
[M,508,82,17706,508,89,17713],
[M,508,91,17715,508,98,17722],
[M,508,48,17672,508,100,17724],
[M,508,56,17680,508,99,17723],
[M,508,4,17628,508,45,17669],
[M,503,111,17429,503,118,17436],
[M,505,5,17544,505,17,17556],
[M,503,29,17347,503,46,17364],
[M,503,54,17372,503,61,17379],
[M,503,69,17387,503,76,17394],
[M,503,84,17402,503,91,17409],
[M,503,99,17417,503,106,17424],
[M,503,0,17318,510,3,17734],
[M,514,5,17902,514,18,17915],
[M,517,9,17944,517,18,17953],
[M,517,46,17981,517,54,17989],
[M,517,22,17957,517,56,17991],
[M,517,30,17965,517,55,17990],
[M,517,39,17974,517,44,17979],
[M,517,4,17939,517,19,17954],
[M,512,71,17807,512,78,17814],
[M,512,21,17757,512,37,17773],
[M,512,44,17780,512,50,17786],
[M,512,59,17795,512,66,17802],
[M,512,0,17736,519,3,18001],
[M,523,5,18211,523,33,18239],
[M,523,21,18227,523,33,18239],
[M,526,9,18268,526,17,18276],
[M,526,19,18278,526,27,18286],
[M,526,56,18315,526,63,18322],
[M,526,65,18324,526,72,18331],
[M,526,31,18290,526,74,18333],
[M,526,39,18298,526,73,18332],
[M,526,49,18308,526,54,18313],
[M,526,4,18263,526,28,18287],
[M,521,92,18095,521,99,18102],
[M,523,5,18211,523,17,18223],
[M,521,25,18028,521,44,18047],
[M,521,51,18054,521,57,18060],
[M,521,65,18068,521,72,18075],
[M,521,80,18083,521,87,18090],
[M,521,0,18003,528,3,18343],
[M,532,5,18588,532,49,18632],
[M,532,37,18620,532,49,18632],
[M,532,21,18604,532,33,18616],
[M,535,9,18661,535,17,18669],
[M,535,19,18671,535,27,18679],
[M,535,29,18681,535,37,18689],
[M,535,66,18718,535,73,18725],
[M,535,75,18727,535,82,18734],
[M,535,84,18736,535,91,18743],
[M,535,41,18693,535,93,18745],
[M,535,49,18701,535,92,18744],
[M,535,59,18711,535,64,18716],
[M,535,4,18656,535,38,18690],
[M,530,113,18458,530,120,18465],
[M,532,5,18588,532,17,18600],
[M,530,28,18373,530,50,18395],
[M,530,57,18402,530,63,18408],
[M,530,71,18416,530,78,18423],
[M,530,86,18431,530,93,18438],
[M,530,101,18446,530,108,18453],
[M,530,0,18345,537,3,18755],
[M,541,5,19035,541,65,19095],
[M,541,53,19083,541,65,19095],
[M,541,37,19067,541,49,19079],
[M,541,21,19051,541,33,19063],
[M,544,9,19124,544,17,19132],
[M,544,19,19134,544,27,19142],
[M,544,29,19144,544,37,19152],
[M,544,39,19154,544,47,19162],
[M,544,76,19191,544,83,19198],
[M,544,85,19200,544,92,19207],
[M,544,94,19209,544,101,19216],
[M,544,103,19218,544,110,19225],
[M,544,51,19166,544,112,19227],
[M,544,59,19174,544,111,19226],
[M,544,69,19184,544,74,19189],
[M,544,4,19119,544,48,19163],
[M,539,134,18891,539,141,18898],
[M,541,5,19035,541,17,19047],
[M,539,31,18788,539,56,18813],
[M,539,63,18820,539,69,18826],
[M,539,77,18834,539,84,18841],
[M,539,92,18849,539,99,18856],
[M,539,107,18864,539,114,18871],
[M,539,122,18879,539,129,18886],
[M,539,0,18757,546,3,19237],
[M,551,7,19381,551,18,19392],
[M,554,8,19426,554,15,19433],
[M,555,11,19446,555,17,19452],
[M,555,6,19441,555,18,19453],
[M,554,6,19424,554,16,19434],
[M,550,2,19361,557,5,19467],
[M,548,52,19291,548,59,19298],
[M,558,2,19470,558,11,19479],
[M,548,17,19256,548,31,19270],
[M,548,40,19279,548,47,19286],
[M,548,0,19239,559,3,19483],
[M,564,7,19720,564,35,19748],
[M,564,23,19736,564,35,19748],
[M,567,8,19782,567,16,19790],
[M,567,18,19792,567,26,19800],
[M,568,11,19813,568,18,19820],
[M,568,20,19822,568,27,19829],
[M,568,6,19808,568,28,19830],
[M,567,6,19780,567,27,19801],
[M,564,7,19720,564,19,19732],
[M,563,2,19695,570,5,19844],
[M,561,77,19562,561,84,19569],
[M,571,2,19847,571,18,19863],
[M,561,21,19506,561,38,19523],
[M,561,48,19533,561,55,19540],
[M,561,65,19550,561,72,19557],
[M,561,0,19485,572,3,19867],
[M,577,7,20137,577,51,20181],
[M,577,39,20169,577,51,20181],
[M,577,23,20153,577,35,20165],
[M,580,8,20215,580,16,20223],
[M,580,18,20225,580,26,20233],
[M,580,28,20235,580,36,20243],
[M,581,11,20256,581,18,20263],
[M,581,20,20265,581,27,20272],
[M,581,29,20274,581,36,20281],
[M,581,6,20251,581,37,20282],
[M,580,6,20213,580,37,20244],
[M,577,7,20137,577,19,20149],
[M,576,2,20108,583,5,20296],
[M,574,100,19969,574,107,19976],
[M,584,2,20299,584,24,20321],
[M,574,24,19893,574,44,19913],
[M,574,54,19923,574,61,19930],
[M,574,71,19940,574,78,19947],
[M,574,88,19957,574,95,19964],
[M,574,0,19869,585,3,20325],
[M,590,7,20614,590,67,20674],
[M,590,55,20662,590,67,20674],
[M,590,39,20646,590,51,20658],
[M,590,23,20630,590,35,20642],
[M,593,8,20708,593,16,20716],
[M,593,18,20718,593,26,20726],
[M,593,28,20728,593,36,20736],
[M,593,38,20738,593,46,20746],
[M,594,11,20759,594,18,20766],
[M,594,20,20768,594,27,20775],
[M,594,29,20777,594,36,20784],
[M,594,38,20786,594,45,20793],
[M,594,6,20754,594,46,20794],
[M,593,6,20706,593,47,20747],
[M,590,7,20614,590,19,20626],
[M,589,2,20581,596,5,20808],
[M,597,2,20811,597,30,20839],
[M,587,27,20354,587,50,20377],
[M,587,60,20387,587,67,20394],
[M,587,77,20404,587,84,20411],
[M,587,94,20421,587,101,20428],
[M,587,111,20438,587,118,20445],
[M,587,0,20327,598,3,20843],
[M,603,7,21049,603,18,21060],
[M,606,11,21097,606,18,21104],
[M,607,18,21124,607,24,21130],
[M,607,6,21112,607,25,21131],
[M,607,11,21117,607,16,21122],
[M,606,6,21092,606,19,21105],
[M,602,2,21026,609,5,21145],
[M,600,76,20921,600,83,20928],
[M,610,2,21148,610,16,21162],
[M,600,19,20864,600,41,20886],
[M,600,50,20895,600,56,20901],
[M,600,64,20909,600,71,20916],
[M,600,0,20845,611,3,21166],
[M,616,7,21422,616,35,21450],
[M,616,23,21438,616,35,21450],
[M,619,11,21487,619,19,21495],
[M,619,21,21497,619,29,21505],
[M,620,18,21525,620,25,21532],
[M,620,27,21534,620,34,21541],
[M,620,6,21513,620,35,21542],
[M,620,11,21518,620,16,21523],
[M,619,6,21482,619,30,21506],
[M,616,7,21422,616,19,21434],
[M,615,2,21394,622,5,21556],
[M,613,102,21270,613,109,21277],
[M,623,2,21559,623,23,21580],
[M,613,23,21191,613,48,21216],
[M,613,57,21225,613,63,21231],
[M,613,73,21241,613,80,21248],
[M,613,90,21258,613,97,21265],
[M,613,0,21168,624,3,21584],
[M,629,7,21883,629,51,21927],
[M,629,39,21915,629,51,21927],
[M,629,23,21899,629,35,21911],
[M,632,11,21964,632,19,21972],
[M,632,21,21974,632,29,21982],
[M,632,31,21984,632,39,21992],
[M,633,18,22012,633,25,22019],
[M,633,27,22021,633,34,22028],
[M,633,36,22030,633,43,22037],
[M,633,6,22000,633,44,22038],
[M,633,11,22005,633,16,22010],
[M,632,6,21959,632,40,21993],
[M,629,7,21883,629,19,21895],
[M,628,2,21851,635,5,22052],
[M,626,125,21711,626,132,21718],
[M,636,2,22055,636,29,22082],
[M,626,26,21612,626,54,21640],
[M,626,63,21649,626,69,21655],
[M,626,79,21665,626,86,21672],
[M,626,96,21682,626,103,21689],
[M,626,113,21699,626,120,21706],
[M,626,0,21586,637,3,22086],
[M,642,7,22420,642,67,22480],
[M,642,55,22468,642,67,22480],
[M,642,39,22452,642,51,22464],
[M,642,23,22436,642,35,22448],
[M,645,11,22517,645,19,22525],
[M,645,21,22527,645,29,22535],
[M,645,31,22537,645,39,22545],
[M,645,41,22547,645,49,22555],
[M,646,18,22575,646,25,22582],
[M,646,27,22584,646,34,22591],
[M,646,36,22593,646,43,22600],
[M,646,45,22602,646,52,22609],
[M,646,6,22563,646,53,22610],
[M,646,11,22568,646,16,22573],
[M,645,6,22512,645,50,22556],
[M,642,7,22420,642,19,22432],
[M,641,2,22384,648,5,22624],
[M,639,140,22228,639,147,22235],
[M,649,2,22627,649,35,22660],
[M,639,29,22117,639,52,22140],
[M,639,61,22149,639,67,22155],
[M,639,77,22165,639,84,22172],
[M,639,94,22182,639,101,22189],
[M,639,111,22199,639,118,22206],
[M,639,128,22216,639,135,22223],
[M,639,0,22088,650,3,22664],
[M,657,6,23039,657,11,23044],
[M,660,21,23132,660,40,23151],
[M,660,10,23121,660,17,23128],
[M,661,10,23162,661,18,23170],
[M,659,6,23081,662,9,23185],
[M,659,12,23087,659,20,23095],
[M,659,22,23097,659,34,23109],
[M,658,6,23059,658,18,23071],
[M,658,4,23057,662,9,23185],
[M,656,2,23016,663,5,23191],
[M,652,80,22746,652,81,22747],
[M,656,8,23022,656,12,23026],
[M,652,26,22692,652,48,22714],
[M,652,58,22724,652,59,22725],
[M,652,68,22734,652,75,22741],
[M,652,0,22666,664,3,23195],
[M,669,5,23420,669,18,23433],
[M,672,20,23472,672,29,23481],
[M,672,32,23484,672,40,23492],
[M,672,4,23456,672,41,23493],
[M,672,12,23464,672,30,23482],
[M,666,63,23260,666,64,23261],
[M,666,20,23217,666,31,23228],
[M,666,41,23238,666,42,23239],
[M,666,51,23248,666,58,23255],
[M,666,0,23197,674,3,23503],
[M,681,5,23748,681,18,23761],
[M,684,21,23801,684,29,23809],
[M,684,32,23812,684,41,23821],
[M,684,4,23784,684,42,23822],
[M,684,6,23786,684,30,23810],
[M,678,64,23587,678,65,23588],
[M,678,21,23544,678,32,23555],
[M,678,42,23565,678,43,23566],
[M,678,52,23575,678,59,23582],
[M,678,0,23523,686,3,23832],
[M,691,5,24131,691,33,24159],
[M,691,21,24147,691,33,24159],
[M,694,21,24199,694,29,24207],
[M,694,31,24209,694,39,24217],
[M,694,42,24220,694,49,24227],
[M,694,51,24229,694,58,24236],
[M,694,4,24182,694,59,24237],
[M,694,13,24191,694,40,24218],
[M,688,84,23918,688,85,23919],
[M,691,5,24131,691,17,24143],
[M,688,24,23858,688,38,23872],
[M,688,48,23882,688,49,23883],
[M,688,57,23891,688,64,23898],
[M,688,72,23906,688,79,23913],
[M,688,0,23834,696,3,24247],
[M,701,5,24566,701,49,24610],
[M,701,37,24598,701,49,24610],
[M,701,21,24582,701,33,24594],
[M,704,21,24650,704,29,24658],
[M,704,31,24660,704,39,24668],
[M,704,41,24670,704,49,24678],
[M,704,52,24681,704,59,24688],
[M,704,61,24690,704,68,24697],
[M,704,70,24699,704,77,24706],
[M,704,4,24633,704,78,24707],
[M,704,13,24642,704,50,24679],
[M,698,105,24354,698,106,24355],
[M,701,5,24566,701,17,24578],
[M,698,27,24276,698,44,24293],
[M,698,54,24303,698,55,24304],
[M,698,63,24312,698,70,24319],
[M,698,78,24327,698,85,24334],
[M,698,93,24342,698,100,24349],
[M,698,0,24249,706,3,24717],
[M,711,5,25056,711,65,25116],
[M,711,53,25104,711,65,25116],
[M,711,37,25088,711,49,25100],
[M,711,21,25072,711,33,25084],
[M,714,21,25156,714,29,25164],
[M,714,31,25166,714,39,25174],
[M,714,41,25176,714,49,25184],
[M,714,51,25186,714,59,25194],
[M,714,62,25197,714,69,25204],
[M,714,71,25206,714,78,25213],
[M,714,80,25215,714,87,25222],
[M,714,89,25224,714,96,25231],
[M,714,4,25139,714,97,25232],
[M,714,13,25148,714,60,25195],
[M,708,126,24845,708,127,24846],
[M,711,5,25056,711,17,25068],
[M,708,30,24749,708,50,24769],
[M,708,60,24779,708,61,24780],
[M,708,69,24788,708,76,24795],
[M,708,84,24803,708,91,24810],
[M,708,99,24818,708,106,24825],
[M,708,114,24833,708,121,24840],
[M,708,0,24719,716,3,25242],
[M,722,7,25586,722,29,25608],
[M,725,28,25658,725,46,25676],
[M,725,49,25679,725,66,25696],
[M,725,6,25636,725,67,25697],
[M,725,18,25648,725,47,25677],
[M,725,11,25641,725,16,25646],
[M,721,2,25547,727,5,25711],
[M,718,88,25332,718,89,25333],
[M,728,2,25714,728,22,25734],
[M,718,22,25266,718,41,25285],
[M,718,50,25294,718,56,25300],
[M,718,66,25310,718,67,25311],
[M,718,76,25320,718,83,25327],
[M,718,0,25244,729,3,25738],
[M,733,4,25838,733,61,25895],
[M,733,26,25860,733,61,25895],
[M,734,4,25900,741,9,26170],
[M,735,10,25931,735,19,25940],
[M,736,10,25951,736,18,25959],
[M,739,19,26068,739,33,26082],
[M,739,10,26059,739,15,26064],
[M,740,18,26101,740,77,26160],
[M,740,53,26136,740,76,26159],
[M,738,6,26001,741,9,26170],
[M,738,12,26007,738,35,26030],
[M,737,24,25984,737,34,25994],
[M,732,2,25829,742,5,26176],
[M,734,6,25902,734,18,25914],
[M,733,6,25840,733,19,25853],
[M,731,26,25766,731,33,25773],
[M,731,42,25782,731,43,25783],
[M,731,51,25791,731,84,25824],
[M,731,0,25740,743,3,26180],
[M,745,44,26226,745,67,26249],
[M,746,2,26253,746,38,26289],
[M,745,22,26204,745,29,26211],
[M,745,38,26220,745,39,26221],
[M,745,0,26182,747,3,26293],
[M,750,2,26349,750,40,26387],
[M,749,43,26338,749,50,26345],
[M,750,22,26369,750,39,26386],
[M,749,21,26316,749,28,26323],
[M,749,37,26332,749,38,26333],
[M,749,0,26295,751,3,26391],
[M,756,48,26490,756,71,26513],
[M,757,2,26517,757,35,26550],
[M,756,26,26468,756,33,26475],
[M,756,42,26484,756,43,26485],
[M,756,0,26442,758,3,26554],
[M,761,2,26614,761,44,26656],
[M,760,47,26603,760,54,26610],
[M,761,22,26634,761,43,26655],
[M,760,25,26581,760,32,26588],
[M,760,41,26597,760,42,26598],
[M,760,0,26556,762,3,26660],
[M,764,54,26716,764,77,26739],
[M,765,2,26743,765,35,26776],
[M,764,32,26694,764,39,26701],
[M,764,48,26710,764,49,26711],
[M,764,0,26662,766,3,26780],
[M,769,2,26846,769,50,26894],
[M,768,53,26835,768,60,26842],
[M,769,22,26866,769,49,26893],
[M,768,31,26813,768,38,26820],
[M,768,47,26829,768,48,26830],
[M,768,0,26782,770,3,26898],
[M,773,5,26948,773,18,26961],
[M,778,6,27154,778,31,27179],
[M,777,6,27102,777,51,27147],
[M,777,28,27124,777,50,27146],
[M,776,11,27086,776,20,27095],
[M,775,11,26988,780,7,27197],
[M,775,54,27031,775,63,27040],
[M,775,65,27042,775,77,27054],
[M,775,87,27064,775,95,27072],
[M,781,4,27202,781,27,27225],
[M,775,41,27018,775,78,27055],
[M,772,34,26934,772,41,26941],
[M,772,22,26922,772,29,26929],
[M,772,0,26900,783,3,27235],
[M,789,9,27299,789,25,27315],
[M,790,17,27334,790,31,27348],
[M,790,9,27326,790,35,27352],
[M,791,20,27374,791,43,27397],
[M,791,28,27382,791,42,27396],
[M,791,9,27363,791,47,27401],
[M,792,23,27426,792,55,27458],
[M,792,31,27434,792,54,27457],
[M,792,39,27442,792,53,27456],
[M,792,9,27412,792,59,27462],
[M,793,26,27490,793,67,27531],
[M,793,34,27498,793,66,27530],
[M,793,42,27506,793,65,27529],
[M,793,50,27514,793,64,27528],
[M,793,9,27473,793,71,27535],
[M,794,29,27566,794,79,27616],
[M,794,37,27574,794,78,27615],
[M,794,45,27582,794,77,27614],
[M,794,53,27590,794,76,27613],
[M,794,61,27598,794,75,27612],
[M,794,9,27546,794,83,27620],
[M,18,14,277,18,22,285],
[M,14,14,223,14,22,231],
[M,3,0,21,795,1,27623]];
var $type$Number1 = NAMESPACE.get("$type$Number");
var $type$Nothing2 = NAMESPACE.get("$type$Nothing");
var nothing3 = NAMESPACE.get("nothing");
var $type$Boolean4 = NAMESPACE.get("$type$Boolean");
var raise5 = NAMESPACE.get("raise");
var $type$String6 = NAMESPACE.get("$type$String");
var _plus7 = NAMESPACE.get("_plus");
var equal$always8 = NAMESPACE.get("equal-always");
var _lessthan9 = NAMESPACE.get("_lessthan");
var tostring10 = NAMESPACE.get("tostring");
var _minus11 = NAMESPACE.get("_minus");
var _greaterequal12 = NAMESPACE.get("_greaterequal");
var _lessequal13 = NAMESPACE.get("_lessequal");
var _greaterthan14 = NAMESPACE.get("_greaterthan");
var equal$always315 = NAMESPACE.get("equal-always3");
var equal$now316 = NAMESPACE.get("equal-now3");
var identical317 = NAMESPACE.get("identical3");
var random18 = NAMESPACE.get("random");
var raw$array$get19 = NAMESPACE.get("raw-array-get");
var raw$array$set20 = NAMESPACE.get("raw-array-set");
var raw$array$of21 = NAMESPACE.get("raw-array-of");
var raw$array$to$list22 = NAMESPACE.get("raw-array-to-list");
var builtins23 = NAMESPACE.get("builtins");
var E24 = R.getField($E33,"values");
var equality25 = R.getField($equality34,"values");
var O26 = R.getField($O35,"values");
var VS27 = R.getField($VS36,"values");
var E28 = R.getField($E33,"types");
var equality29 = R.getField($equality34,"types");
var O30 = R.getField($O35,"types");
var VS31 = R.getField($VS36,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$E33);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$equality34);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$O35);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS36);
var $toplevel38 = function($$resumer1729) {
var $step37 = 0;
var $ans40 = D;
var $al41 = L[1031];
try {
if(R.isActivationRecord($$resumer1729)) {
$step37 = $$resumer1729.step;
$al41 = $$resumer1729.from;
$ans40 = $$resumer1729.ans;
$resumer1729 = $$resumer1729.args[0];
provides1802 = $$resumer1729.vars[0];
list1796 = $$resumer1729.vars[1];
index1795 = $$resumer1729.vars[2];
shuffle1726 = $$resumer1729.vars[3];
member$identical1698 = $$resumer1729.vars[4];
member$identical31686 = $$resumer1729.vars[5];
member$now1676 = $$resumer1729.vars[6];
member$now31664 = $$resumer1729.vars[7];
member$always1794 = $$resumer1729.vars[8];
member$always31793 = $$resumer1729.vars[9];
member1654 = $$resumer1729.vars[10];
member31642 = $$resumer1729.vars[11];
member$with1624 = $$resumer1729.vars[12];
fold_n1610 = $$resumer1729.vars[13];
fold41572 = $$resumer1729.vars[14];
fold31541 = $$resumer1729.vars[15];
fold21515 = $$resumer1729.vars[16];
foldr1494 = $$resumer1729.vars[17];
foldl1485 = $$resumer1729.vars[18];
fold467 = $$resumer1729.vars[19];
fold$while1455 = $$resumer1729.vars[20];
each4_n1444 = $$resumer1729.vars[21];
each3_n1400 = $$resumer1729.vars[22];
each2_n1362 = $$resumer1729.vars[23];
each_n1330 = $$resumer1729.vars[24];
each41305 = $$resumer1729.vars[25];
each31265 = $$resumer1729.vars[26];
each21230 = $$resumer1729.vars[27];
each1201 = $$resumer1729.vars[28];
map4_n1167 = $$resumer1729.vars[29];
map3_n1134 = $$resumer1729.vars[30];
map2_n1106 = $$resumer1729.vars[31];
map_n1084 = $$resumer1729.vars[32];
map41063 = $$resumer1729.vars[33];
map31032 = $$resumer1729.vars[34];
map21006 = $$resumer1729.vars[35];
map986 = $$resumer1729.vars[36];
all2977 = $$resumer1729.vars[37];
all945 = $$resumer1729.vars[38];
any934 = $$resumer1729.vars[39];
split$at79 = $$resumer1729.vars[40];
find347 = $$resumer1729.vars[41];
remove125 = $$resumer1729.vars[42];
partition338 = $$resumer1729.vars[43];
filter819 = $$resumer1729.vars[44];
repeat801 = $$resumer1729.vars[45];
range$by781 = $$resumer1729.vars[46];
range754 = $$resumer1729.vars[47];
reverse746 = $$resumer1729.vars[48];
reverse$help448 = $$resumer1729.vars[49];
set116 = $$resumer1729.vars[50];
get106 = $$resumer1729.vars[51];
link70 = $$resumer1729.vars[52];
is$link569 = $$resumer1729.vars[53];
empty149 = $$resumer1729.vars[54];
is$empty435 = $$resumer1729.vars[55];
is$List652 = $$resumer1729.vars[56];
List650 = $$resumer1729.vars[57];
Either1801 = $$resumer1729.vars[58];
right1792 = $$resumer1729.vars[59];
left1791 = $$resumer1729.vars[60];
Option1800 = $$resumer1729.vars[61];
is$some1790 = $$resumer1729.vars[62];
some885 = $$resumer1729.vars[63];
is$none1789 = $$resumer1729.vars[64];
none166 = $$resumer1729.vars[65];
List53 = $$resumer1729.vars[66];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step37) {
case 0: var List42 = R.namedBrander("List");
var List53 = R.makeBranderAnn(List42,"List");
var none166 = G(O26,"none",L[0]);
var is$none1789 = G(O26,"is-none",L[1]);
var some885 = G(O26,"some",L[2]);
var is$some1790 = G(O26,"is-some",L[3]);
var Option1800 = R.getDotAnn(L[1030],"O",O30,"Option");
var left1791 = G(E24,"left",L[4]);
var right1792 = G(E24,"right",L[5]);
var Either1801 = R.getDotAnn(L[1029],"E",E28,"Either");
var List648 = {"$var":D};
var List650 = {"$var":D};
var is$List652 = {"$var":D};
var is$empty435 = {"$var":D};
var empty149 = {"$var":D};
var is$link569 = {"$var":D};
var link70 = {"$var":D};
var get106 = {"$var":D};
var set116 = {"$var":D};
var reverse$help448 = {"$var":D};
var reverse746 = {"$var":D};
var range754 = {"$var":D};
var range$by781 = {"$var":D};
var repeat801 = {"$var":D};
var filter819 = {"$var":D};
var partition338 = {"$var":D};
var remove125 = {"$var":D};
var find347 = {"$var":D};
var split$at79 = {"$var":D};
var any934 = {"$var":D};
var all945 = {"$var":D};
var all2977 = {"$var":D};
var map986 = {"$var":D};
var map21006 = {"$var":D};
var map31032 = {"$var":D};
var map41063 = {"$var":D};
var map_n1084 = {"$var":D};
var map2_n1106 = {"$var":D};
var map3_n1134 = {"$var":D};
var map4_n1167 = {"$var":D};
var each1201 = {"$var":D};
var each21230 = {"$var":D};
var each31265 = {"$var":D};
var each41305 = {"$var":D};
var each_n1330 = {"$var":D};
var each2_n1362 = {"$var":D};
var each3_n1400 = {"$var":D};
var each4_n1444 = {"$var":D};
var fold$while1455 = {"$var":D};
var fold467 = {"$var":D};
var foldl1485 = {"$var":D};
var foldr1494 = {"$var":D};
var fold21515 = {"$var":D};
var fold31541 = {"$var":D};
var fold41572 = {"$var":D};
var fold_n1610 = {"$var":D};
var member$with1624 = {"$var":D};
var member31642 = {"$var":D};
var member1654 = {"$var":D};
var $temp_full44 = function($self45) {
var $step43 = 0;
var $ans46 = D;
var $al47 = L[11];
try {
if(R.isActivationRecord($self45)) {
$step43 = $self45.step;
$al47 = $self45.from;
$ans46 = $self45.ans;
self45 = $self45.args[0];
ann_check_temp52 = $self45.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
var self45 = $self45;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step43) {
case 0: $step43 = 1;
$al47 = L[10];
R._checkAnn(L[10],List53,self45);
break;
case 1: var anf_arg48 = G(VS27,"vs-value",L[6]);
$step43 = 2;
$al47 = L[7];
$field49 = R.getColonFieldLoc(self45,"map",L[7]);
if(R.isMethod($field49)) {
$ans46 = $field49.full_meth(self45,anf_arg48);
} else {
if(!(R.isFunction($field49))) {
R.ffi.throwNonFunApp(L[7],$field49);
}
$ans46 = $field49.app(anf_arg48);
}
break;
case 2: var anf_arg50 = $ans46;
$step43 = 3;
$al47 = L[8];
$field51 = R.getColonFieldLoc(VS27,"vs-collection",L[8]);
if(R.isMethod($field51)) {
$ans46 = $field51.full_meth(VS27,("list"),anf_arg50);
} else {
if(!(R.isFunction($field51))) {
R.ffi.throwNonFunApp(L[8],$field51);
}
$ans46 = $field51.app(("list"),anf_arg50);
}
break;
case 3: var ann_check_temp52 = $ans46;
$step43 = 4;
$al47 = L[9];
R._checkAnn(L[9],R.getDotAnn(L[9],"VS",VS31,"ValueSkeleton"),ann_check_temp52);
break;
case 4: $step43 = 5;
$ans46 = ann_check_temp52;
break;
case 5: ++R.GAS;
return $ans46;
default: throw "No case numbered " + $step43 + " in $temp_full44";
}
}
} catch($e54) {
if(R.isCont($e54) && ($step43 !== 5)) {
$e54.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al47,$temp_full44,$step43,[self45],[ann_check_temp52]);
}
if(R.isPyretException($e54)) {
$e54.pyretStack.push($al47);
}
throw $e54;
}
};
var anf_shared582 = R.makeMethod0($temp_full44);
var $temp_full56 = function($self57,$other58) {
var $step55 = 0;
var $ans59 = D;
var $al60 = L[16];
try {
if(R.isActivationRecord($self57)) {
$step55 = $self57.step;
$al60 = $self57.from;
$ans59 = $self57.ans;
self57 = $self57.args[0];
other58 = $self57.args[1];
ann_check_temp62 = $self57.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[16],2,$t);
}
var self57 = $self57;
var other58 = $other58;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step55) {
case 0: $step55 = 1;
$al60 = L[14];
R._checkAnn(L[14],List53,self57);
break;
case 1: $step55 = 2;
$al60 = L[15];
R._checkAnn(L[15],List53,other58);
break;
case 2: $step55 = 3;
$al60 = L[12];
$field61 = R.getColonFieldLoc(self57,"append",L[12]);
if(R.isMethod($field61)) {
$ans59 = $field61.full_meth(self57,other58);
} else {
if(!(R.isFunction($field61))) {
R.ffi.throwNonFunApp(L[12],$field61);
}
$ans59 = $field61.app(other58);
}
break;
case 3: var ann_check_temp62 = $ans59;
$step55 = 4;
$al60 = L[13];
R._checkAnn(L[13],List53,ann_check_temp62);
break;
case 4: $step55 = 5;
$ans59 = ann_check_temp62;
break;
case 5: ++R.GAS;
return $ans59;
default: throw "No case numbered " + $step55 + " in $temp_full56";
}
}
} catch($e63) {
if(R.isCont($e63) && ($step55 !== 5)) {
$e63.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al60,$temp_full56,$step55,[self57,other58],[ann_check_temp62]);
}
if(R.isPyretException($e63)) {
$e63.pyretStack.push($al60);
}
throw $e63;
}
};
var anf_shared583 = R.makeMethod1($temp_full56);
var $temp_full65 = function($self66,$elt67) {
var $step64 = 0;
var $ans68 = D;
var $al69 = L[22];
try {
if(R.isActivationRecord($self66)) {
$step64 = $self66.step;
$al69 = $self66.from;
$ans68 = $self66.ans;
self66 = $self66.args[0];
elt67 = $self66.args[1];
ann_check_temp71 = $self66.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],2,$t);
}
var self66 = $self66;
var elt67 = $elt67;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step64) {
case 0: $step64 = 1;
$al69 = L[20];
R._checkAnn(L[20],List53,self66);
break;
case 1: $step64 = 2;
$al69 = L[21];
R._checkAnn(L[21],R.Any,elt67);
break;
case 2: $step64 = 3;
$al69 = L[19];
if(!(R.isFunction(link70.$var === D?U(L[17],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al69,link70.$var === D?U(L[17],"link"):link70.$var);
}
$ans68 = link70.$var === D?U(L[17],"link"):link70.$var.app(elt67,self66);
break;
case 3: var ann_check_temp71 = $ans68;
$step64 = 4;
$al69 = L[18];
R._checkAnn(L[18],List53,ann_check_temp71);
break;
case 4: $step64 = 5;
$ans68 = ann_check_temp71;
break;
case 5: ++R.GAS;
return $ans68;
default: throw "No case numbered " + $step64 + " in $temp_full65";
}
}
} catch($e72) {
if(R.isCont($e72) && ($step64 !== 5)) {
$e72.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al69,$temp_full65,$step64,[self66,elt67],[ann_check_temp71]);
}
if(R.isPyretException($e72)) {
$e72.pyretStack.push($al69);
}
throw $e72;
}
};
var anf_shared584 = R.makeMethod1($temp_full65);
var $temp_full74 = function($self75,$n76) {
var $step73 = 0;
var $ans77 = D;
var $al78 = L[30];
try {
if(R.isActivationRecord($self75)) {
$step73 = $self75.step;
$al78 = $self75.from;
$ans77 = $self75.ans;
self75 = $self75.args[0];
n76 = $self75.args[1];
ann_check_temp80 = $self75.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],2,$t);
}
var self75 = $self75;
var n76 = $n76;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step73) {
case 0: $step73 = 1;
$al78 = L[28];
R._checkAnn(L[28],List53,self75);
break;
case 1: $step73 = 2;
$al78 = L[29];
R._checkAnn(L[29],$type$Number1,n76);
break;
case 2: $step73 = 3;
$al78 = L[27];
if(!(R.isFunction(split$at79.$var === D?U(L[23],"split-at"):split$at79.$var))) {
R.ffi.throwNonFunApp($al78,split$at79.$var === D?U(L[23],"split-at"):split$at79.$var);
}
$ans77 = split$at79.$var === D?U(L[23],"split-at"):split$at79.$var.app(n76,self75);
break;
case 3: var ann_check_temp80 = $ans77;
$step73 = 4;
$al78 = L[26];
R._checkAnn(L[26],R.makeRecordAnn(["prefix","suffix"],[L[24],L[25]],{"prefix":List53,
"suffix":List53}),ann_check_temp80);
break;
case 4: $step73 = 5;
$ans77 = ann_check_temp80;
break;
case 5: ++R.GAS;
return $ans77;
default: throw "No case numbered " + $step73 + " in $temp_full74";
}
}
} catch($e81) {
if(R.isCont($e81) && ($step73 !== 5)) {
$e81.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al78,$temp_full74,$step73,[self75,n76],[ann_check_temp80]);
}
if(R.isPyretException($e81)) {
$e81.pyretStack.push($al78);
}
throw $e81;
}
};
var anf_shared585 = R.makeMethod1($temp_full74);
var $temp_full83 = function($self84,$n85) {
var $step82 = 0;
var $ans86 = D;
var $al87 = L[37];
try {
if(R.isActivationRecord($self84)) {
$step82 = $self84.step;
$al87 = $self84.from;
$ans86 = $self84.ans;
self84 = $self84.args[0];
n85 = $self84.args[1];
ann_check_temp89 = $self84.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[37],2,$t);
}
var self84 = $self84;
var n85 = $n85;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step82) {
case 0: $step82 = 1;
$al87 = L[35];
R._checkAnn(L[35],List53,self84);
break;
case 1: $step82 = 2;
$al87 = L[36];
R._checkAnn(L[36],$type$Number1,n85);
break;
case 2: $step82 = 3;
$al87 = L[34];
if(!(R.isFunction(split$at79.$var === D?U(L[31],"split-at"):split$at79.$var))) {
R.ffi.throwNonFunApp($al87,split$at79.$var === D?U(L[31],"split-at"):split$at79.$var);
}
$ans86 = split$at79.$var === D?U(L[31],"split-at"):split$at79.$var.app(n85,self84);
break;
case 3: var anf_bracket88 = $ans86;
var ann_check_temp89 = G(anf_bracket88,"prefix",L[32]);
$step82 = 4;
$al87 = L[33];
R._checkAnn(L[33],List53,ann_check_temp89);
break;
case 4: $step82 = 5;
$ans86 = ann_check_temp89;
break;
case 5: ++R.GAS;
return $ans86;
default: throw "No case numbered " + $step82 + " in $temp_full83";
}
}
} catch($e90) {
if(R.isCont($e90) && ($step82 !== 5)) {
$e90.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al87,$temp_full83,$step82,[self84,n85],[ann_check_temp89]);
}
if(R.isPyretException($e90)) {
$e90.pyretStack.push($al87);
}
throw $e90;
}
};
var anf_shared586 = R.makeMethod1($temp_full83);
var $temp_full92 = function($self93,$n94) {
var $step91 = 0;
var $ans95 = D;
var $al96 = L[44];
try {
if(R.isActivationRecord($self93)) {
$step91 = $self93.step;
$al96 = $self93.from;
$ans95 = $self93.ans;
self93 = $self93.args[0];
n94 = $self93.args[1];
ann_check_temp98 = $self93.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],2,$t);
}
var self93 = $self93;
var n94 = $n94;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step91) {
case 0: $step91 = 1;
$al96 = L[42];
R._checkAnn(L[42],List53,self93);
break;
case 1: $step91 = 2;
$al96 = L[43];
R._checkAnn(L[43],$type$Number1,n94);
break;
case 2: $step91 = 3;
$al96 = L[41];
if(!(R.isFunction(split$at79.$var === D?U(L[38],"split-at"):split$at79.$var))) {
R.ffi.throwNonFunApp($al96,split$at79.$var === D?U(L[38],"split-at"):split$at79.$var);
}
$ans95 = split$at79.$var === D?U(L[38],"split-at"):split$at79.$var.app(n94,self93);
break;
case 3: var anf_bracket97 = $ans95;
var ann_check_temp98 = G(anf_bracket97,"suffix",L[39]);
$step91 = 4;
$al96 = L[40];
R._checkAnn(L[40],List53,ann_check_temp98);
break;
case 4: $step91 = 5;
$ans95 = ann_check_temp98;
break;
case 5: ++R.GAS;
return $ans95;
default: throw "No case numbered " + $step91 + " in $temp_full92";
}
}
} catch($e99) {
if(R.isCont($e99) && ($step91 !== 5)) {
$e99.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al96,$temp_full92,$step91,[self93,n94],[ann_check_temp98]);
}
if(R.isPyretException($e99)) {
$e99.pyretStack.push($al96);
}
throw $e99;
}
};
var anf_shared587 = R.makeMethod1($temp_full92);
var $temp_full101 = function($self102,$n103) {
var $step100 = 0;
var $ans104 = D;
var $al105 = L[50];
try {
if(R.isActivationRecord($self102)) {
$step100 = $self102.step;
$al105 = $self102.from;
$ans104 = $self102.ans;
self102 = $self102.args[0];
n103 = $self102.args[1];
ann_check_temp107 = $self102.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var self102 = $self102;
var n103 = $n103;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step100) {
case 0: $step100 = 1;
$al105 = L[48];
R._checkAnn(L[48],List53,self102);
break;
case 1: $step100 = 2;
$al105 = L[49];
R._checkAnn(L[49],$type$Number1,n103);
break;
case 2: $step100 = 3;
$al105 = L[47];
if(!(R.isFunction(get106.$var === D?U(L[45],"get"):get106.$var))) {
R.ffi.throwNonFunApp($al105,get106.$var === D?U(L[45],"get"):get106.$var);
}
$ans104 = get106.$var === D?U(L[45],"get"):get106.$var.app(self102,n103);
break;
case 3: var ann_check_temp107 = $ans104;
$step100 = 4;
$al105 = L[46];
R._checkAnn(L[46],R.Any,ann_check_temp107);
break;
case 4: $step100 = 5;
$ans104 = ann_check_temp107;
break;
case 5: ++R.GAS;
return $ans104;
default: throw "No case numbered " + $step100 + " in $temp_full101";
}
}
} catch($e108) {
if(R.isCont($e108) && ($step100 !== 5)) {
$e108.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al105,$temp_full101,$step100,[self102,n103],[ann_check_temp107]);
}
if(R.isPyretException($e108)) {
$e108.pyretStack.push($al105);
}
throw $e108;
}
};
var anf_shared588 = R.makeMethod1($temp_full101);
var $temp_full110 = function($self111,$n112,$e113) {
var $step109 = 0;
var $ans114 = D;
var $al115 = L[57];
try {
if(R.isActivationRecord($self111)) {
$step109 = $self111.step;
$al115 = $self111.from;
$ans114 = $self111.ans;
self111 = $self111.args[0];
n112 = $self111.args[1];
e113 = $self111.args[2];
ann_check_temp117 = $self111.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[57],3,$t);
}
var self111 = $self111;
var n112 = $n112;
var e113 = $e113;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step109) {
case 0: $step109 = 1;
$al115 = L[54];
R._checkAnn(L[54],List53,self111);
break;
case 1: $step109 = 2;
$al115 = L[55];
R._checkAnn(L[55],$type$Number1,n112);
break;
case 2: $step109 = 3;
$al115 = L[56];
R._checkAnn(L[56],R.Any,e113);
break;
case 3: $step109 = 4;
$al115 = L[53];
if(!(R.isFunction(set116.$var === D?U(L[51],"set"):set116.$var))) {
R.ffi.throwNonFunApp($al115,set116.$var === D?U(L[51],"set"):set116.$var);
}
$ans114 = set116.$var === D?U(L[51],"set"):set116.$var.app(self111,n112,e113);
break;
case 4: var ann_check_temp117 = $ans114;
$step109 = 5;
$al115 = L[52];
R._checkAnn(L[52],List53,ann_check_temp117);
break;
case 5: $step109 = 6;
$ans114 = ann_check_temp117;
break;
case 6: ++R.GAS;
return $ans114;
default: throw "No case numbered " + $step109 + " in $temp_full110";
}
}
} catch($e118) {
if(R.isCont($e118) && ($step109 !== 6)) {
$e118.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al115,$temp_full110,$step109,[self111,n112,e113],[ann_check_temp117]);
}
if(R.isPyretException($e118)) {
$e118.pyretStack.push($al115);
}
throw $e118;
}
};
var anf_shared589 = R.makeMethod2($temp_full110);
var $temp_full120 = function($self121,$e122) {
var $step119 = 0;
var $ans123 = D;
var $al124 = L[63];
try {
if(R.isActivationRecord($self121)) {
$step119 = $self121.step;
$al124 = $self121.from;
$ans123 = $self121.ans;
self121 = $self121.args[0];
e122 = $self121.args[1];
ann_check_temp126 = $self121.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[63],2,$t);
}
var self121 = $self121;
var e122 = $e122;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step119) {
case 0: $step119 = 1;
$al124 = L[61];
R._checkAnn(L[61],List53,self121);
break;
case 1: $step119 = 2;
$al124 = L[62];
R._checkAnn(L[62],R.Any,e122);
break;
case 2: $step119 = 3;
$al124 = L[60];
if(!(R.isFunction(remove125.$var === D?U(L[58],"remove"):remove125.$var))) {
R.ffi.throwNonFunApp($al124,remove125.$var === D?U(L[58],"remove"):remove125.$var);
}
$ans123 = remove125.$var === D?U(L[58],"remove"):remove125.$var.app(self121,e122);
break;
case 3: var ann_check_temp126 = $ans123;
$step119 = 4;
$al124 = L[59];
R._checkAnn(L[59],List53,ann_check_temp126);
break;
case 4: $step119 = 5;
$ans123 = ann_check_temp126;
break;
case 5: ++R.GAS;
return $ans123;
default: throw "No case numbered " + $step119 + " in $temp_full120";
}
}
} catch($e127) {
if(R.isCont($e127) && ($step119 !== 5)) {
$e127.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al124,$temp_full120,$step119,[self121,e122],[ann_check_temp126]);
}
if(R.isPyretException($e127)) {
$e127.pyretStack.push($al124);
}
throw $e127;
}
};
var anf_shared590 = R.makeMethod1($temp_full120);
var $temp_full129 = function($self130) {
var $step128 = 0;
var $ans131 = D;
var $al132 = L[66];
try {
if(R.isActivationRecord($self130)) {
$step128 = $self130.step;
$al132 = $self130.from;
$ans131 = $self130.ans;
self130 = $self130.args[0];
ann_check_temp133 = $self130.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[66],1,$t);
}
var self130 = $self130;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step128) {
case 0: $step128 = 1;
$al132 = L[65];
R._checkAnn(L[65],List53,self130);
break;
case 1: var ann_check_temp133 = (0);
$step128 = 2;
$al132 = L[64];
R._checkAnn(L[64],$type$Number1,ann_check_temp133);
break;
case 2: $step128 = 3;
$ans131 = ann_check_temp133;
break;
case 3: ++R.GAS;
return $ans131;
default: throw "No case numbered " + $step128 + " in $temp_full129";
}
}
} catch($e134) {
if(R.isCont($e134) && ($step128 !== 3)) {
$e134.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al132,$temp_full129,$step128,[self130],[ann_check_temp133]);
}
if(R.isPyretException($e134)) {
$e134.pyretStack.push($al132);
}
throw $e134;
}
};
var anf_singleton_variant_member594 = R.makeMethod0($temp_full129);
var $temp_full136 = function($self137,$f138) {
var $step135 = 0;
var $ans139 = D;
var $al140 = L[70];
try {
if(R.isActivationRecord($self137)) {
$step135 = $self137.step;
$al140 = $self137.from;
$ans139 = $self137.ans;
self137 = $self137.args[0];
f138 = $self137.args[1];
ann_check_temp141 = $self137.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[70],2,$t);
}
var self137 = $self137;
var f138 = $f138;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step135) {
case 0: $step135 = 1;
$al140 = L[68];
R._checkAnn(L[68],List53,self137);
break;
case 1: $step135 = 2;
$al140 = L[69];
R._checkAnn(L[69],R.Function,f138);
break;
case 2: var ann_check_temp141 = nothing3;
$step135 = 3;
$al140 = L[67];
R._checkAnn(L[67],$type$Nothing2,ann_check_temp141);
break;
case 3: $step135 = 4;
$ans139 = ann_check_temp141;
break;
case 4: ++R.GAS;
return $ans139;
default: throw "No case numbered " + $step135 + " in $temp_full136";
}
}
} catch($e142) {
if(R.isCont($e142) && ($step135 !== 4)) {
$e142.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al140,$temp_full136,$step135,[self137,f138],[ann_check_temp141]);
}
if(R.isPyretException($e142)) {
$e142.pyretStack.push($al140);
}
throw $e142;
}
};
var anf_singleton_variant_member595 = R.makeMethod1($temp_full136);
var $temp_full144 = function($self145,$f146) {
var $step143 = 0;
var $ans147 = D;
var $al148 = L[74];
try {
if(R.isActivationRecord($self145)) {
$step143 = $self145.step;
$al148 = $self145.from;
$ans147 = $self145.ans;
self145 = $self145.args[0];
f146 = $self145.args[1];
ann_check_temp150 = $self145.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[74],2,$t);
}
var self145 = $self145;
var f146 = $f146;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step143) {
case 0: $step143 = 1;
$al148 = L[73];
R._checkAnn(L[73],R.Function,f146);
break;
case 1: var ann_check_temp150 = empty149.$var === D?U(L[71],"empty"):empty149.$var;
$step143 = 2;
$al148 = L[72];
R._checkAnn(L[72],List53,ann_check_temp150);
break;
case 2: $step143 = 3;
$ans147 = ann_check_temp150;
break;
case 3: ++R.GAS;
return $ans147;
default: throw "No case numbered " + $step143 + " in $temp_full144";
}
}
} catch($e151) {
if(R.isCont($e151) && ($step143 !== 3)) {
$e151.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al148,$temp_full144,$step143,[self145,f146],[ann_check_temp150]);
}
if(R.isPyretException($e151)) {
$e151.pyretStack.push($al148);
}
throw $e151;
}
};
var anf_singleton_variant_member596 = R.makeMethod1($temp_full144);
var $temp_full153 = function($self154,$f155) {
var $step152 = 0;
var $ans156 = D;
var $al157 = L[79];
try {
if(R.isActivationRecord($self154)) {
$step152 = $self154.step;
$al157 = $self154.from;
$ans156 = $self154.ans;
self154 = $self154.args[0];
f155 = $self154.args[1];
ann_check_temp158 = $self154.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[79],2,$t);
}
var self154 = $self154;
var f155 = $f155;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step152) {
case 0: $step152 = 1;
$al157 = L[77];
R._checkAnn(L[77],List53,self154);
break;
case 1: $step152 = 2;
$al157 = L[78];
R._checkAnn(L[78],R.Function,f155);
break;
case 2: var ann_check_temp158 = empty149.$var === D?U(L[75],"empty"):empty149.$var;
$step152 = 3;
$al157 = L[76];
R._checkAnn(L[76],List53,ann_check_temp158);
break;
case 3: $step152 = 4;
$ans156 = ann_check_temp158;
break;
case 4: ++R.GAS;
return $ans156;
default: throw "No case numbered " + $step152 + " in $temp_full153";
}
}
} catch($e159) {
if(R.isCont($e159) && ($step152 !== 4)) {
$e159.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al157,$temp_full153,$step152,[self154,f155],[ann_check_temp158]);
}
if(R.isPyretException($e159)) {
$e159.pyretStack.push($al157);
}
throw $e159;
}
};
var anf_singleton_variant_member597 = R.makeMethod1($temp_full153);
var $temp_full161 = function($self162,$f163) {
var $step160 = 0;
var $ans164 = D;
var $al165 = L[84];
try {
if(R.isActivationRecord($self162)) {
$step160 = $self162.step;
$al165 = $self162.from;
$ans164 = $self162.ans;
self162 = $self162.args[0];
f163 = $self162.args[1];
ann_check_temp167 = $self162.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[84],2,$t);
}
var self162 = $self162;
var f163 = $f163;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step160) {
case 0: $step160 = 1;
$al165 = L[82];
R._checkAnn(L[82],List53,self162);
break;
case 1: $step160 = 2;
$al165 = L[83];
R._checkAnn(L[83],R.Function,f163);
break;
case 2: var ann_check_temp167 = none166;
$step160 = 3;
$al165 = L[81];
R._checkAnn(L[81],R.getDotAnn(L[80],"O",O30,"Option"),ann_check_temp167);
break;
case 3: $step160 = 4;
$ans164 = ann_check_temp167;
break;
case 4: ++R.GAS;
return $ans164;
default: throw "No case numbered " + $step160 + " in $temp_full161";
}
}
} catch($e168) {
if(R.isCont($e168) && ($step160 !== 4)) {
$e168.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al165,$temp_full161,$step160,[self162,f163],[ann_check_temp167]);
}
if(R.isPyretException($e168)) {
$e168.pyretStack.push($al165);
}
throw $e168;
}
};
var anf_singleton_variant_member598 = R.makeMethod1($temp_full161);
var $temp_full170 = function($self171,$f172) {
var $step169 = 0;
var $ans173 = D;
var $al174 = L[92];
try {
if(R.isActivationRecord($self171)) {
$step169 = $self171.step;
$al174 = $self171.from;
$ans173 = $self171.ans;
self171 = $self171.args[0];
f172 = $self171.args[1];
ann_check_temp175 = $self171.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[92],2,$t);
}
var self171 = $self171;
var f172 = $f172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step169) {
case 0: $step169 = 1;
$al174 = L[90];
R._checkAnn(L[90],List53,self171);
break;
case 1: $step169 = 2;
$al174 = L[91];
R._checkAnn(L[91],R.Function,f172);
break;
case 2: var ann_check_temp175 = R.makeObject({"is-true":empty149.$var === D?U(L[85],"empty"):empty149.$var,
"is-false":empty149.$var === D?U(L[86],"empty"):empty149.$var});
$step169 = 3;
$al174 = L[89];
R._checkAnn(L[89],R.makeRecordAnn(["is-true","is-false"],[L[87],L[88]],{"is-true":List53,
"is-false":List53}),ann_check_temp175);
break;
case 3: $step169 = 4;
$ans173 = ann_check_temp175;
break;
case 4: ++R.GAS;
return $ans173;
default: throw "No case numbered " + $step169 + " in $temp_full170";
}
}
} catch($e176) {
if(R.isCont($e176) && ($step169 !== 4)) {
$e176.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al174,$temp_full170,$step169,[self171,f172],[ann_check_temp175]);
}
if(R.isPyretException($e176)) {
$e176.pyretStack.push($al174);
}
throw $e176;
}
};
var anf_singleton_variant_member599 = R.makeMethod1($temp_full170);
var $temp_full178 = function($self179,$f180,$base181) {
var $step177 = 0;
var $ans182 = D;
var $al183 = L[97];
try {
if(R.isActivationRecord($self179)) {
$step177 = $self179.step;
$al183 = $self179.from;
$ans182 = $self179.ans;
self179 = $self179.args[0];
f180 = $self179.args[1];
base181 = $self179.args[2];
ann_check_temp184 = $self179.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[97],3,$t);
}
var self179 = $self179;
var f180 = $f180;
var base181 = $base181;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step177) {
case 0: $step177 = 1;
$al183 = L[94];
R._checkAnn(L[94],List53,self179);
break;
case 1: $step177 = 2;
$al183 = L[95];
R._checkAnn(L[95],R.Function,f180);
break;
case 2: $step177 = 3;
$al183 = L[96];
R._checkAnn(L[96],R.Any,base181);
break;
case 3: var ann_check_temp184 = base181;
$step177 = 4;
$al183 = L[93];
R._checkAnn(L[93],R.Any,ann_check_temp184);
break;
case 4: $step177 = 5;
$ans182 = ann_check_temp184;
break;
case 5: ++R.GAS;
return $ans182;
default: throw "No case numbered " + $step177 + " in $temp_full178";
}
}
} catch($e185) {
if(R.isCont($e185) && ($step177 !== 5)) {
$e185.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al183,$temp_full178,$step177,[self179,f180,base181],[ann_check_temp184]);
}
if(R.isPyretException($e185)) {
$e185.pyretStack.push($al183);
}
throw $e185;
}
};
var anf_singleton_variant_member600 = R.makeMethod2($temp_full178);
var $temp_full187 = function($self188,$f189,$base190) {
var $step186 = 0;
var $ans191 = D;
var $al192 = L[102];
try {
if(R.isActivationRecord($self188)) {
$step186 = $self188.step;
$al192 = $self188.from;
$ans191 = $self188.ans;
self188 = $self188.args[0];
f189 = $self188.args[1];
base190 = $self188.args[2];
ann_check_temp193 = $self188.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[102],3,$t);
}
var self188 = $self188;
var f189 = $f189;
var base190 = $base190;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step186) {
case 0: $step186 = 1;
$al192 = L[99];
R._checkAnn(L[99],List53,self188);
break;
case 1: $step186 = 2;
$al192 = L[100];
R._checkAnn(L[100],R.Function,f189);
break;
case 2: $step186 = 3;
$al192 = L[101];
R._checkAnn(L[101],R.Any,base190);
break;
case 3: var ann_check_temp193 = base190;
$step186 = 4;
$al192 = L[98];
R._checkAnn(L[98],R.Any,ann_check_temp193);
break;
case 4: $step186 = 5;
$ans191 = ann_check_temp193;
break;
case 5: ++R.GAS;
return $ans191;
default: throw "No case numbered " + $step186 + " in $temp_full187";
}
}
} catch($e194) {
if(R.isCont($e194) && ($step186 !== 5)) {
$e194.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al192,$temp_full187,$step186,[self188,f189,base190],[ann_check_temp193]);
}
if(R.isPyretException($e194)) {
$e194.pyretStack.push($al192);
}
throw $e194;
}
};
var anf_singleton_variant_member601 = R.makeMethod2($temp_full187);
var $temp_full196 = function($self197,$f198) {
var $step195 = 0;
var $ans199 = D;
var $al200 = L[106];
try {
if(R.isActivationRecord($self197)) {
$step195 = $self197.step;
$al200 = $self197.from;
$ans199 = $self197.ans;
self197 = $self197.args[0];
f198 = $self197.args[1];
ann_check_temp201 = $self197.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[106],2,$t);
}
var self197 = $self197;
var f198 = $f198;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step195) {
case 0: $step195 = 1;
$al200 = L[104];
R._checkAnn(L[104],List53,self197);
break;
case 1: $step195 = 2;
$al200 = L[105];
R._checkAnn(L[105],R.Function,f198);
break;
case 2: var ann_check_temp201 = (true);
$step195 = 3;
$al200 = L[103];
R._checkAnn(L[103],$type$Boolean4,ann_check_temp201);
break;
case 3: $step195 = 4;
$ans199 = ann_check_temp201;
break;
case 4: ++R.GAS;
return $ans199;
default: throw "No case numbered " + $step195 + " in $temp_full196";
}
}
} catch($e202) {
if(R.isCont($e202) && ($step195 !== 4)) {
$e202.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al200,$temp_full196,$step195,[self197,f198],[ann_check_temp201]);
}
if(R.isPyretException($e202)) {
$e202.pyretStack.push($al200);
}
throw $e202;
}
};
var anf_singleton_variant_member602 = R.makeMethod1($temp_full196);
var $temp_full204 = function($self205,$f206) {
var $step203 = 0;
var $ans207 = D;
var $al208 = L[110];
try {
if(R.isActivationRecord($self205)) {
$step203 = $self205.step;
$al208 = $self205.from;
$ans207 = $self205.ans;
self205 = $self205.args[0];
f206 = $self205.args[1];
ann_check_temp209 = $self205.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[110],2,$t);
}
var self205 = $self205;
var f206 = $f206;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step203) {
case 0: $step203 = 1;
$al208 = L[108];
R._checkAnn(L[108],List53,self205);
break;
case 1: $step203 = 2;
$al208 = L[109];
R._checkAnn(L[109],R.Function,f206);
break;
case 2: var ann_check_temp209 = (false);
$step203 = 3;
$al208 = L[107];
R._checkAnn(L[107],$type$Boolean4,ann_check_temp209);
break;
case 3: $step203 = 4;
$ans207 = ann_check_temp209;
break;
case 4: ++R.GAS;
return $ans207;
default: throw "No case numbered " + $step203 + " in $temp_full204";
}
}
} catch($e210) {
if(R.isCont($e210) && ($step203 !== 4)) {
$e210.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al208,$temp_full204,$step203,[self205,f206],[ann_check_temp209]);
}
if(R.isPyretException($e210)) {
$e210.pyretStack.push($al208);
}
throw $e210;
}
};
var anf_singleton_variant_member603 = R.makeMethod1($temp_full204);
var $temp_full212 = function($self213,$elt214) {
var $step211 = 0;
var $ans215 = D;
var $al216 = L[114];
try {
if(R.isActivationRecord($self213)) {
$step211 = $self213.step;
$al216 = $self213.from;
$ans215 = $self213.ans;
self213 = $self213.args[0];
elt214 = $self213.args[1];
ann_check_temp217 = $self213.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[114],2,$t);
}
var self213 = $self213;
var elt214 = $elt214;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step211) {
case 0: $step211 = 1;
$al216 = L[112];
R._checkAnn(L[112],List53,self213);
break;
case 1: $step211 = 2;
$al216 = L[113];
R._checkAnn(L[113],R.Any,elt214);
break;
case 2: var ann_check_temp217 = (false);
$step211 = 3;
$al216 = L[111];
R._checkAnn(L[111],$type$Boolean4,ann_check_temp217);
break;
case 3: $step211 = 4;
$ans215 = ann_check_temp217;
break;
case 4: ++R.GAS;
return $ans215;
default: throw "No case numbered " + $step211 + " in $temp_full212";
}
}
} catch($e218) {
if(R.isCont($e218) && ($step211 !== 4)) {
$e218.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al216,$temp_full212,$step211,[self213,elt214],[ann_check_temp217]);
}
if(R.isPyretException($e218)) {
$e218.pyretStack.push($al216);
}
throw $e218;
}
};
var anf_singleton_variant_member604 = R.makeMethod1($temp_full212);
var $temp_full220 = function($self221,$other222) {
var $step219 = 0;
var $ans223 = D;
var $al224 = L[118];
try {
if(R.isActivationRecord($self221)) {
$step219 = $self221.step;
$al224 = $self221.from;
$ans223 = $self221.ans;
self221 = $self221.args[0];
other222 = $self221.args[1];
ann_check_temp225 = $self221.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[118],2,$t);
}
var self221 = $self221;
var other222 = $other222;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step219) {
case 0: $step219 = 1;
$al224 = L[116];
R._checkAnn(L[116],List53,self221);
break;
case 1: $step219 = 2;
$al224 = L[117];
R._checkAnn(L[117],List53,other222);
break;
case 2: var ann_check_temp225 = other222;
$step219 = 3;
$al224 = L[115];
R._checkAnn(L[115],List53,ann_check_temp225);
break;
case 3: $step219 = 4;
$ans223 = ann_check_temp225;
break;
case 4: ++R.GAS;
return $ans223;
default: throw "No case numbered " + $step219 + " in $temp_full220";
}
}
} catch($e226) {
if(R.isCont($e226) && ($step219 !== 4)) {
$e226.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al224,$temp_full220,$step219,[self221,other222],[ann_check_temp225]);
}
if(R.isPyretException($e226)) {
$e226.pyretStack.push($al224);
}
throw $e226;
}
};
var anf_singleton_variant_member605 = R.makeMethod1($temp_full220);
var $temp_full228 = function($self229) {
var $step227 = 0;
var $ans230 = D;
var $al231 = L[122];
try {
if(R.isActivationRecord($self229)) {
$step227 = $self229.step;
$al231 = $self229.from;
$ans230 = $self229.ans;
self229 = $self229.args[0];
ann_check_temp232 = $self229.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[122],1,$t);
}
var self229 = $self229;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step227) {
case 0: $step227 = 1;
$al231 = L[121];
R._checkAnn(L[121],List53,self229);
break;
case 1: $step227 = 2;
$al231 = L[120];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al231,raise5);
}
$ans230 = raise5.app(("last: took last of empty list"));
break;
case 2: var ann_check_temp232 = $ans230;
$step227 = 3;
$al231 = L[119];
R._checkAnn(L[119],R.Any,ann_check_temp232);
break;
case 3: $step227 = 4;
$ans230 = ann_check_temp232;
break;
case 4: ++R.GAS;
return $ans230;
default: throw "No case numbered " + $step227 + " in $temp_full228";
}
}
} catch($e233) {
if(R.isCont($e233) && ($step227 !== 4)) {
$e233.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al231,$temp_full228,$step227,[self229],[ann_check_temp232]);
}
if(R.isPyretException($e233)) {
$e233.pyretStack.push($al231);
}
throw $e233;
}
};
var anf_singleton_variant_member606 = R.makeMethod0($temp_full228);
var $temp_full235 = function($self236) {
var $step234 = 0;
var $ans237 = D;
var $al238 = L[125];
try {
if(R.isActivationRecord($self236)) {
$step234 = $self236.step;
$al238 = $self236.from;
$ans237 = $self236.ans;
self236 = $self236.args[0];
ann_check_temp239 = $self236.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[125],1,$t);
}
var self236 = $self236;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step234) {
case 0: $step234 = 1;
$al238 = L[124];
R._checkAnn(L[124],List53,self236);
break;
case 1: var ann_check_temp239 = self236;
$step234 = 2;
$al238 = L[123];
R._checkAnn(L[123],List53,ann_check_temp239);
break;
case 2: $step234 = 3;
$ans237 = ann_check_temp239;
break;
case 3: ++R.GAS;
return $ans237;
default: throw "No case numbered " + $step234 + " in $temp_full235";
}
}
} catch($e240) {
if(R.isCont($e240) && ($step234 !== 3)) {
$e240.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al238,$temp_full235,$step234,[self236],[ann_check_temp239]);
}
if(R.isPyretException($e240)) {
$e240.pyretStack.push($al238);
}
throw $e240;
}
};
var anf_singleton_variant_member607 = R.makeMethod0($temp_full235);
var $temp_full242 = function($self243,$tostring244) {
var $step241 = 0;
var $ans245 = D;
var $al246 = L[129];
try {
if(R.isActivationRecord($self243)) {
$step241 = $self243.step;
$al246 = $self243.from;
$ans245 = $self243.ans;
self243 = $self243.args[0];
tostring244 = $self243.args[1];
ann_check_temp247 = $self243.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[129],2,$t);
}
var self243 = $self243;
var tostring244 = $tostring244;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step241) {
case 0: $step241 = 1;
$al246 = L[127];
R._checkAnn(L[127],List53,self243);
break;
case 1: $step241 = 2;
$al246 = L[128];
R._checkAnn(L[128],R.Function,tostring244);
break;
case 2: var ann_check_temp247 = ("[list: ]");
$step241 = 3;
$al246 = L[126];
R._checkAnn(L[126],$type$String6,ann_check_temp247);
break;
case 3: $step241 = 4;
$ans245 = ann_check_temp247;
break;
case 4: ++R.GAS;
return $ans245;
default: throw "No case numbered " + $step241 + " in $temp_full242";
}
}
} catch($e248) {
if(R.isCont($e248) && ($step241 !== 4)) {
$e248.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al246,$temp_full242,$step241,[self243,tostring244],[ann_check_temp247]);
}
if(R.isPyretException($e248)) {
$e248.pyretStack.push($al246);
}
throw $e248;
}
};
var anf_singleton_variant_member608 = R.makeMethod1($temp_full242);
var $temp_full250 = function($self251,$torepr252) {
var $step249 = 0;
var $ans253 = D;
var $al254 = L[133];
try {
if(R.isActivationRecord($self251)) {
$step249 = $self251.step;
$al254 = $self251.from;
$ans253 = $self251.ans;
self251 = $self251.args[0];
torepr252 = $self251.args[1];
ann_check_temp255 = $self251.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[133],2,$t);
}
var self251 = $self251;
var torepr252 = $torepr252;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step249) {
case 0: $step249 = 1;
$al254 = L[131];
R._checkAnn(L[131],List53,self251);
break;
case 1: $step249 = 2;
$al254 = L[132];
R._checkAnn(L[132],R.Function,torepr252);
break;
case 2: var ann_check_temp255 = ("[list: ]");
$step249 = 3;
$al254 = L[130];
R._checkAnn(L[130],$type$String6,ann_check_temp255);
break;
case 3: $step249 = 4;
$ans253 = ann_check_temp255;
break;
case 4: ++R.GAS;
return $ans253;
default: throw "No case numbered " + $step249 + " in $temp_full250";
}
}
} catch($e256) {
if(R.isCont($e256) && ($step249 !== 4)) {
$e256.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al254,$temp_full250,$step249,[self251,torepr252],[ann_check_temp255]);
}
if(R.isPyretException($e256)) {
$e256.pyretStack.push($al254);
}
throw $e256;
}
};
var anf_singleton_variant_member609 = R.makeMethod1($temp_full250);
var $temp_full258 = function($self259,$cmp260,$eq261) {
var $step257 = 0;
var $ans262 = D;
var $al263 = L[138];
try {
if(R.isActivationRecord($self259)) {
$step257 = $self259.step;
$al263 = $self259.from;
$ans262 = $self259.ans;
self259 = $self259.args[0];
cmp260 = $self259.args[1];
eq261 = $self259.args[2];
ann_check_temp264 = $self259.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[138],3,$t);
}
var self259 = $self259;
var cmp260 = $cmp260;
var eq261 = $eq261;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step257) {
case 0: $step257 = 1;
$al263 = L[135];
R._checkAnn(L[135],List53,self259);
break;
case 1: $step257 = 2;
$al263 = L[136];
R._checkAnn(L[136],R.Function,cmp260);
break;
case 2: $step257 = 3;
$al263 = L[137];
R._checkAnn(L[137],R.Function,eq261);
break;
case 3: var ann_check_temp264 = self259;
$step257 = 4;
$al263 = L[134];
R._checkAnn(L[134],List53,ann_check_temp264);
break;
case 4: $step257 = 5;
$ans262 = ann_check_temp264;
break;
case 5: ++R.GAS;
return $ans262;
default: throw "No case numbered " + $step257 + " in $temp_full258";
}
}
} catch($e265) {
if(R.isCont($e265) && ($step257 !== 5)) {
$e265.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al263,$temp_full258,$step257,[self259,cmp260,eq261],[ann_check_temp264]);
}
if(R.isPyretException($e265)) {
$e265.pyretStack.push($al263);
}
throw $e265;
}
};
var anf_singleton_variant_member610 = R.makeMethod2($temp_full258);
var $temp_full267 = function($self268) {
var $step266 = 0;
var $ans269 = D;
var $al270 = L[141];
try {
if(R.isActivationRecord($self268)) {
$step266 = $self268.step;
$al270 = $self268.from;
$ans269 = $self268.ans;
self268 = $self268.args[0];
ann_check_temp271 = $self268.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],1,$t);
}
var self268 = $self268;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step266) {
case 0: $step266 = 1;
$al270 = L[140];
R._checkAnn(L[140],List53,self268);
break;
case 1: var ann_check_temp271 = self268;
$step266 = 2;
$al270 = L[139];
R._checkAnn(L[139],List53,ann_check_temp271);
break;
case 2: $step266 = 3;
$ans269 = ann_check_temp271;
break;
case 3: ++R.GAS;
return $ans269;
default: throw "No case numbered " + $step266 + " in $temp_full267";
}
}
} catch($e272) {
if(R.isCont($e272) && ($step266 !== 3)) {
$e272.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al270,$temp_full267,$step266,[self268],[ann_check_temp271]);
}
if(R.isPyretException($e272)) {
$e272.pyretStack.push($al270);
}
throw $e272;
}
};
var anf_singleton_variant_member611 = R.makeMethod0($temp_full267);
var $temp_full274 = function($self275,$str276) {
var $step273 = 0;
var $ans277 = D;
var $al278 = L[145];
try {
if(R.isActivationRecord($self275)) {
$step273 = $self275.step;
$al278 = $self275.from;
$ans277 = $self275.ans;
self275 = $self275.args[0];
str276 = $self275.args[1];
ann_check_temp279 = $self275.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[145],2,$t);
}
var self275 = $self275;
var str276 = $str276;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step273) {
case 0: $step273 = 1;
$al278 = L[143];
R._checkAnn(L[143],List53,self275);
break;
case 1: $step273 = 2;
$al278 = L[144];
R._checkAnn(L[144],$type$String6,str276);
break;
case 2: var ann_check_temp279 = ("");
$step273 = 3;
$al278 = L[142];
R._checkAnn(L[142],$type$String6,ann_check_temp279);
break;
case 3: $step273 = 4;
$ans277 = ann_check_temp279;
break;
case 4: ++R.GAS;
return $ans277;
default: throw "No case numbered " + $step273 + " in $temp_full274";
}
}
} catch($e280) {
if(R.isCont($e280) && ($step273 !== 4)) {
$e280.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al278,$temp_full274,$step273,[self275,str276],[ann_check_temp279]);
}
if(R.isPyretException($e280)) {
$e280.pyretStack.push($al278);
}
throw $e280;
}
};
var anf_singleton_variant_member612 = R.makeMethod1($temp_full274);
var $temp_full282 = function($self283) {
var $step281 = 0;
var $ans284 = D;
var $al285 = L[151];
try {
if(R.isActivationRecord($self283)) {
$step281 = $self283.step;
$al285 = $self283.from;
$ans284 = $self283.ans;
self283 = $self283.args[0];
ann_check_temp289 = $self283.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[151],1,$t);
}
var self283 = $self283;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step281) {
case 0: $step281 = 1;
$al285 = L[150];
R._checkAnn(L[150],List53,self283);
break;
case 1: var anf_method_obj286 = G(self283,"rest",L[146]);
$step281 = 2;
$al285 = L[147];
$field287 = R.getColonFieldLoc(anf_method_obj286,"length",L[147]);
if(R.isMethod($field287)) {
$ans284 = $field287.full_meth(anf_method_obj286);
} else {
if(!(R.isFunction($field287))) {
R.ffi.throwNonFunApp(L[147],$field287);
}
$ans284 = $field287.app();
}
break;
case 2: var anf_arg288 = $ans284;
$step281 = 3;
$al285 = L[149];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al285,_plus7);
}
$ans284 = _plus7.app((1),anf_arg288);
break;
case 3: var ann_check_temp289 = $ans284;
$step281 = 4;
$al285 = L[148];
R._checkAnn(L[148],$type$Number1,ann_check_temp289);
break;
case 4: $step281 = 5;
$ans284 = ann_check_temp289;
break;
case 5: ++R.GAS;
return $ans284;
default: throw "No case numbered " + $step281 + " in $temp_full282";
}
}
} catch($e290) {
if(R.isCont($e290) && ($step281 !== 5)) {
$e290.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al285,$temp_full282,$step281,[self283],[ann_check_temp289]);
}
if(R.isPyretException($e290)) {
$e290.pyretStack.push($al285);
}
throw $e290;
}
};
var anf_variant_member620 = R.makeMethod0($temp_full282);
var $temp_full292 = function($self293,$f294) {
var $step291 = 0;
var $ans295 = D;
var $al296 = L[159];
try {
if(R.isActivationRecord($self293)) {
$step291 = $self293.step;
$al296 = $self293.from;
$ans295 = $self293.ans;
self293 = $self293.args[0];
f294 = $self293.args[1];
ann_check_temp300 = $self293.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[159],2,$t);
}
var self293 = $self293;
var f294 = $f294;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step291) {
case 0: $step291 = 1;
$al296 = L[157];
R._checkAnn(L[157],List53,self293);
break;
case 1: $step291 = 2;
$al296 = L[158];
R._checkAnn(L[158],R.Function,f294);
break;
case 2: var anf_arg297 = G(self293,"first",L[152]);
$step291 = 3;
$al296 = L[156];
if(!(R.isFunction(f294))) {
R.ffi.throwNonFunApp($al296,f294);
}
$ans295 = f294.app(anf_arg297);
break;
case 3: var anf_method_obj298 = G(self293,"rest",L[153]);
$step291 = 4;
$al296 = L[154];
$field299 = R.getColonFieldLoc(anf_method_obj298,"each",L[154]);
if(R.isMethod($field299)) {
$ans295 = $field299.full_meth(anf_method_obj298,f294);
} else {
if(!(R.isFunction($field299))) {
R.ffi.throwNonFunApp(L[154],$field299);
}
$ans295 = $field299.app(f294);
}
break;
case 4: var ann_check_temp300 = $ans295;
$step291 = 5;
$al296 = L[155];
R._checkAnn(L[155],$type$Nothing2,ann_check_temp300);
break;
case 5: $step291 = 6;
$ans295 = ann_check_temp300;
break;
case 6: ++R.GAS;
return $ans295;
default: throw "No case numbered " + $step291 + " in $temp_full292";
}
}
} catch($e301) {
if(R.isCont($e301) && ($step291 !== 6)) {
$e301.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al296,$temp_full292,$step291,[self293,f294],[ann_check_temp300]);
}
if(R.isPyretException($e301)) {
$e301.pyretStack.push($al296);
}
throw $e301;
}
};
var anf_variant_member621 = R.makeMethod1($temp_full292);
var $temp_full303 = function($self304,$f305) {
var $step302 = 0;
var $ans306 = D;
var $al307 = L[168];
try {
if(R.isActivationRecord($self304)) {
$step302 = $self304.step;
$al307 = $self304.from;
$ans306 = $self304.ans;
self304 = $self304.args[0];
f305 = $self304.args[1];
ann_check_temp313 = $self304.vars[0];
arg_311 = $self304.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[168],2,$t);
}
var self304 = $self304;
var f305 = $f305;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step302) {
case 0: $step302 = 1;
$al307 = L[167];
R._checkAnn(L[167],R.Function,f305);
break;
case 1: var anf_arg308 = G(self304,"first",L[160]);
$step302 = 2;
$al307 = L[166];
if(!(R.isFunction(f305))) {
R.ffi.throwNonFunApp($al307,f305);
}
$ans306 = f305.app(anf_arg308);
break;
case 2: var arg_311 = $ans306;
var anf_method_obj309 = G(self304,"rest",L[161]);
$step302 = 3;
$al307 = L[162];
$field310 = R.getColonFieldLoc(anf_method_obj309,"map",L[162]);
if(R.isMethod($field310)) {
$ans306 = $field310.full_meth(anf_method_obj309,f305);
} else {
if(!(R.isFunction($field310))) {
R.ffi.throwNonFunApp(L[162],$field310);
}
$ans306 = $field310.app(f305);
}
break;
case 3: var anf_arg312 = $ans306;
$step302 = 4;
$al307 = L[165];
if(!(R.isFunction(link70.$var === D?U(L[163],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al307,link70.$var === D?U(L[163],"link"):link70.$var);
}
$ans306 = link70.$var === D?U(L[163],"link"):link70.$var.app(arg_311,anf_arg312);
break;
case 4: var ann_check_temp313 = $ans306;
$step302 = 5;
$al307 = L[164];
R._checkAnn(L[164],List53,ann_check_temp313);
break;
case 5: $step302 = 6;
$ans306 = ann_check_temp313;
break;
case 6: ++R.GAS;
return $ans306;
default: throw "No case numbered " + $step302 + " in $temp_full303";
}
}
} catch($e314) {
if(R.isCont($e314) && ($step302 !== 6)) {
$e314.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al307,$temp_full303,$step302,[self304,f305],[ann_check_temp313,arg_311]);
}
if(R.isPyretException($e314)) {
$e314.pyretStack.push($al307);
}
throw $e314;
}
};
var anf_variant_member622 = R.makeMethod1($temp_full303);
var $temp_full316 = function($self317,$f318) {
var $step315 = 0;
var $ans319 = D;
var $al320 = L[181];
try {
if(R.isActivationRecord($self317)) {
$step315 = $self317.step;
$al320 = $self317.from;
$ans319 = $self317.ans;
self317 = $self317.args[0];
f318 = $self317.args[1];
ann_check_temp329 = $self317.vars[0];
arg_325 = $self317.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[181],2,$t);
}
var self317 = $self317;
var f318 = $f318;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step315) {
case 0: $step315 = 1;
$al320 = L[179];
R._checkAnn(L[179],List53,self317);
break;
case 1: $step315 = 2;
$al320 = L[180];
R._checkAnn(L[180],R.Function,f318);
break;
case 2: var anf_arg321 = G(self317,"first",L[169]);
$step315 = 3;
$al320 = L[170];
if(!(R.isFunction(f318))) {
R.ffi.throwNonFunApp($al320,f318);
}
$ans319 = f318.app(anf_arg321);
break;
case 3: var anf_arg322 = $ans319;
$al320 = L[170];
var anf_if330 = R.checkWrapBoolean(anf_arg322);
if(R.isPyretTrue(anf_if330)) {
$step315 = 4;
} else {
$step315 = 6;
}
break;
case 4: var arg_325 = G(self317,"first",L[171]);
var anf_method_obj323 = G(self317,"rest",L[172]);
$step315 = 5;
$al320 = L[173];
$field324 = R.getColonFieldLoc(anf_method_obj323,"filter",L[173]);
if(R.isMethod($field324)) {
$ans319 = $field324.full_meth(anf_method_obj323,f318);
} else {
if(!(R.isFunction($field324))) {
R.ffi.throwNonFunApp(L[173],$field324);
}
$ans319 = $field324.app(f318);
}
break;
case 5: var anf_arg326 = $ans319;
$step315 = 7;
$al320 = L[175];
if(!(R.isFunction(link70.$var === D?U(L[174],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al320,link70.$var === D?U(L[174],"link"):link70.$var);
}
$ans319 = link70.$var === D?U(L[174],"link"):link70.$var.app(arg_325,anf_arg326);
break;
case 6: var anf_method_obj327 = G(self317,"rest",L[176]);
$step315 = 7;
$al320 = L[177];
$field328 = R.getColonFieldLoc(anf_method_obj327,"filter",L[177]);
if(R.isMethod($field328)) {
$ans319 = $field328.full_meth(anf_method_obj327,f318);
} else {
if(!(R.isFunction($field328))) {
R.ffi.throwNonFunApp(L[177],$field328);
}
$ans319 = $field328.app(f318);
}
break;
case 7: var ann_check_temp329 = $ans319;
$step315 = 8;
$al320 = L[178];
R._checkAnn(L[178],List53,ann_check_temp329);
break;
case 8: $step315 = 9;
$ans319 = ann_check_temp329;
break;
case 9: ++R.GAS;
return $ans319;
default: throw "No case numbered " + $step315 + " in $temp_full316";
}
}
} catch($e331) {
if(R.isCont($e331) && ($step315 !== 9)) {
$e331.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al320,$temp_full316,$step315,[self317,f318],[ann_check_temp329,arg_325]);
}
if(R.isPyretException($e331)) {
$e331.pyretStack.push($al320);
}
throw $e331;
}
};
var anf_variant_member623 = R.makeMethod1($temp_full316);
var $temp_full333 = function($self334,$f335) {
var $step332 = 0;
var $ans336 = D;
var $al337 = L[189];
try {
if(R.isActivationRecord($self334)) {
$step332 = $self334.step;
$al337 = $self334.from;
$ans336 = $self334.ans;
self334 = $self334.args[0];
f335 = $self334.args[1];
ann_check_temp339 = $self334.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],2,$t);
}
var self334 = $self334;
var f335 = $f335;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step332) {
case 0: $step332 = 1;
$al337 = L[187];
R._checkAnn(L[187],List53,self334);
break;
case 1: $step332 = 2;
$al337 = L[188];
R._checkAnn(L[188],R.Function,f335);
break;
case 2: $step332 = 3;
$al337 = L[186];
if(!(R.isFunction(partition338.$var === D?U(L[182],"partition"):partition338.$var))) {
R.ffi.throwNonFunApp($al337,partition338.$var === D?U(L[182],"partition"):partition338.$var);
}
$ans336 = partition338.$var === D?U(L[182],"partition"):partition338.$var.app(f335,self334);
break;
case 3: var ann_check_temp339 = $ans336;
$step332 = 4;
$al337 = L[185];
R._checkAnn(L[185],R.makeRecordAnn(["is-true","is-false"],[L[183],L[184]],{"is-true":List53,
"is-false":List53}),ann_check_temp339);
break;
case 4: $step332 = 5;
$ans336 = ann_check_temp339;
break;
case 5: ++R.GAS;
return $ans336;
default: throw "No case numbered " + $step332 + " in $temp_full333";
}
}
} catch($e340) {
if(R.isCont($e340) && ($step332 !== 5)) {
$e340.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al337,$temp_full333,$step332,[self334,f335],[ann_check_temp339]);
}
if(R.isPyretException($e340)) {
$e340.pyretStack.push($al337);
}
throw $e340;
}
};
var anf_variant_member624 = R.makeMethod1($temp_full333);
var $temp_full342 = function($self343,$f344) {
var $step341 = 0;
var $ans345 = D;
var $al346 = L[196];
try {
if(R.isActivationRecord($self343)) {
$step341 = $self343.step;
$al346 = $self343.from;
$ans345 = $self343.ans;
self343 = $self343.args[0];
f344 = $self343.args[1];
ann_check_temp348 = $self343.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[196],2,$t);
}
var self343 = $self343;
var f344 = $f344;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step341) {
case 0: $step341 = 1;
$al346 = L[194];
R._checkAnn(L[194],List53,self343);
break;
case 1: $step341 = 2;
$al346 = L[195];
R._checkAnn(L[195],R.Function,f344);
break;
case 2: $step341 = 3;
$al346 = L[193];
if(!(R.isFunction(find347.$var === D?U(L[190],"find"):find347.$var))) {
R.ffi.throwNonFunApp($al346,find347.$var === D?U(L[190],"find"):find347.$var);
}
$ans345 = find347.$var === D?U(L[190],"find"):find347.$var.app(f344,self343);
break;
case 3: var ann_check_temp348 = $ans345;
$step341 = 4;
$al346 = L[192];
R._checkAnn(L[192],R.getDotAnn(L[191],"O",O30,"Option"),ann_check_temp348);
break;
case 4: $step341 = 5;
$ans345 = ann_check_temp348;
break;
case 5: ++R.GAS;
return $ans345;
default: throw "No case numbered " + $step341 + " in $temp_full342";
}
}
} catch($e349) {
if(R.isCont($e349) && ($step341 !== 5)) {
$e349.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al346,$temp_full342,$step341,[self343,f344],[ann_check_temp348]);
}
if(R.isPyretException($e349)) {
$e349.pyretStack.push($al346);
}
throw $e349;
}
};
var anf_variant_member625 = R.makeMethod1($temp_full342);
var $temp_full351 = function($self352,$elt353) {
var $step350 = 0;
var $ans354 = D;
var $al355 = L[205];
try {
if(R.isActivationRecord($self352)) {
$step350 = $self352.step;
$al355 = $self352.from;
$ans354 = $self352.ans;
self352 = $self352.args[0];
elt353 = $self352.args[1];
ann_check_temp361 = $self352.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[205],2,$t);
}
var self352 = $self352;
var elt353 = $elt353;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step350) {
case 0: $step350 = 1;
$al355 = L[203];
R._checkAnn(L[203],List53,self352);
break;
case 1: $step350 = 2;
$al355 = L[204];
R._checkAnn(L[204],R.Any,elt353);
break;
case 2: var anf_arg356 = G(self352,"first",L[197]);
$step350 = 3;
$al355 = L[202];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al355,equal$always8);
}
$ans354 = equal$always8.app(elt353,anf_arg356);
break;
case 3: var anf_arg357 = $ans354;
$al355 = L[198];
var anf_if362 = R.checkWrapBoolean(anf_arg357);
if(R.isPyretTrue(anf_if362)) {
$step350 = 4;
} else {
$step350 = 5;
}
break;
case 4: $step350 = 7;
$ans354 = (true);
break;
case 5: var anf_method_obj358 = G(self352,"rest",L[199]);
$step350 = 6;
$al355 = L[200];
$field359 = R.getColonFieldLoc(anf_method_obj358,"member",L[200]);
if(R.isMethod($field359)) {
$ans354 = $field359.full_meth(anf_method_obj358,elt353);
} else {
if(!(R.isFunction($field359))) {
R.ffi.throwNonFunApp(L[200],$field359);
}
$ans354 = $field359.app(elt353);
}
break;
case 6: var anf_arg360 = $ans354;
$step350 = 7;
$al355 = L[198];
$ans354 = R.checkWrapBoolean(anf_arg360);
break;
case 7: var ann_check_temp361 = $ans354;
$step350 = 8;
$al355 = L[201];
R._checkAnn(L[201],$type$Boolean4,ann_check_temp361);
break;
case 8: $step350 = 9;
$ans354 = ann_check_temp361;
break;
case 9: ++R.GAS;
return $ans354;
default: throw "No case numbered " + $step350 + " in $temp_full351";
}
}
} catch($e363) {
if(R.isCont($e363) && ($step350 !== 9)) {
$e363.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al355,$temp_full351,$step350,[self352,elt353],[ann_check_temp361]);
}
if(R.isPyretException($e363)) {
$e363.pyretStack.push($al355);
}
throw $e363;
}
};
var anf_variant_member626 = R.makeMethod1($temp_full351);
var $temp_full365 = function($self366,$f367,$base368) {
var $step364 = 0;
var $ans369 = D;
var $al370 = L[214];
try {
if(R.isActivationRecord($self366)) {
$step364 = $self366.step;
$al370 = $self366.from;
$ans369 = $self366.ans;
self366 = $self366.args[0];
f367 = $self366.args[1];
base368 = $self366.args[2];
ann_check_temp375 = $self366.vars[0];
anf_arg373 = $self366.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[214],3,$t);
}
var self366 = $self366;
var f367 = $f367;
var base368 = $base368;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step364) {
case 0: $step364 = 1;
$al370 = L[211];
R._checkAnn(L[211],List53,self366);
break;
case 1: $step364 = 2;
$al370 = L[212];
R._checkAnn(L[212],R.Function,f367);
break;
case 2: $step364 = 3;
$al370 = L[213];
R._checkAnn(L[213],R.Any,base368);
break;
case 3: var anf_arg373 = G(self366,"first",L[206]);
var anf_method_obj371 = G(self366,"rest",L[207]);
$step364 = 4;
$al370 = L[208];
$field372 = R.getColonFieldLoc(anf_method_obj371,"foldr",L[208]);
if(R.isMethod($field372)) {
$ans369 = $field372.full_meth(anf_method_obj371,f367,base368);
} else {
if(!(R.isFunction($field372))) {
R.ffi.throwNonFunApp(L[208],$field372);
}
$ans369 = $field372.app(f367,base368);
}
break;
case 4: var anf_arg374 = $ans369;
$step364 = 5;
$al370 = L[210];
if(!(R.isFunction(f367))) {
R.ffi.throwNonFunApp($al370,f367);
}
$ans369 = f367.app(anf_arg373,anf_arg374);
break;
case 5: var ann_check_temp375 = $ans369;
$step364 = 6;
$al370 = L[209];
R._checkAnn(L[209],R.Any,ann_check_temp375);
break;
case 6: $step364 = 7;
$ans369 = ann_check_temp375;
break;
case 7: ++R.GAS;
return $ans369;
default: throw "No case numbered " + $step364 + " in $temp_full365";
}
}
} catch($e376) {
if(R.isCont($e376) && ($step364 !== 7)) {
$e376.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al370,$temp_full365,$step364,[self366,f367,base368],[ann_check_temp375,anf_arg373]);
}
if(R.isPyretException($e376)) {
$e376.pyretStack.push($al370);
}
throw $e376;
}
};
var anf_variant_member627 = R.makeMethod2($temp_full365);
var $temp_full378 = function($self379,$f380,$base381) {
var $step377 = 0;
var $ans382 = D;
var $al383 = L[223];
try {
if(R.isActivationRecord($self379)) {
$step377 = $self379.step;
$al383 = $self379.from;
$ans382 = $self379.ans;
self379 = $self379.args[0];
f380 = $self379.args[1];
base381 = $self379.args[2];
ann_check_temp388 = $self379.vars[0];
anf_method_obj385 = $self379.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[223],3,$t);
}
var self379 = $self379;
var f380 = $f380;
var base381 = $base381;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step377) {
case 0: $step377 = 1;
$al383 = L[220];
R._checkAnn(L[220],List53,self379);
break;
case 1: $step377 = 2;
$al383 = L[221];
R._checkAnn(L[221],R.Function,f380);
break;
case 2: $step377 = 3;
$al383 = L[222];
R._checkAnn(L[222],R.Any,base381);
break;
case 3: var anf_method_obj385 = G(self379,"rest",L[215]);
var anf_arg384 = G(self379,"first",L[216]);
$step377 = 4;
$al383 = L[219];
if(!(R.isFunction(f380))) {
R.ffi.throwNonFunApp($al383,f380);
}
$ans382 = f380.app(anf_arg384,base381);
break;
case 4: var anf_arg386 = $ans382;
$step377 = 5;
$al383 = L[217];
$field387 = R.getColonFieldLoc(anf_method_obj385,"foldl",L[217]);
if(R.isMethod($field387)) {
$ans382 = $field387.full_meth(anf_method_obj385,f380,anf_arg386);
} else {
if(!(R.isFunction($field387))) {
R.ffi.throwNonFunApp(L[217],$field387);
}
$ans382 = $field387.app(f380,anf_arg386);
}
break;
case 5: var ann_check_temp388 = $ans382;
$step377 = 6;
$al383 = L[218];
R._checkAnn(L[218],R.Any,ann_check_temp388);
break;
case 6: $step377 = 7;
$ans382 = ann_check_temp388;
break;
case 7: ++R.GAS;
return $ans382;
default: throw "No case numbered " + $step377 + " in $temp_full378";
}
}
} catch($e389) {
if(R.isCont($e389) && ($step377 !== 7)) {
$e389.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al383,$temp_full378,$step377,[self379,f380,base381],[ann_check_temp388,anf_method_obj385]);
}
if(R.isPyretException($e389)) {
$e389.pyretStack.push($al383);
}
throw $e389;
}
};
var anf_variant_member628 = R.makeMethod2($temp_full378);
var $temp_full391 = function($self392,$f393) {
var $step390 = 0;
var $ans394 = D;
var $al395 = L[232];
try {
if(R.isActivationRecord($self392)) {
$step390 = $self392.step;
$al395 = $self392.from;
$ans394 = $self392.ans;
self392 = $self392.args[0];
f393 = $self392.args[1];
ann_check_temp401 = $self392.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[232],2,$t);
}
var self392 = $self392;
var f393 = $f393;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step390) {
case 0: $step390 = 1;
$al395 = L[230];
R._checkAnn(L[230],List53,self392);
break;
case 1: $step390 = 2;
$al395 = L[231];
R._checkAnn(L[231],R.Function,f393);
break;
case 2: var anf_arg396 = G(self392,"first",L[224]);
$step390 = 3;
$al395 = L[229];
if(!(R.isFunction(f393))) {
R.ffi.throwNonFunApp($al395,f393);
}
$ans394 = f393.app(anf_arg396);
break;
case 3: var anf_arg397 = $ans394;
$al395 = L[225];
var anf_if402 = R.checkWrapBoolean(anf_arg397);
if(R.isPyretTrue(anf_if402)) {
$step390 = 4;
} else {
$step390 = 6;
}
break;
case 4: var anf_method_obj398 = G(self392,"rest",L[226]);
$step390 = 5;
$al395 = L[227];
$field399 = R.getColonFieldLoc(anf_method_obj398,"all",L[227]);
if(R.isMethod($field399)) {
$ans394 = $field399.full_meth(anf_method_obj398,f393);
} else {
if(!(R.isFunction($field399))) {
R.ffi.throwNonFunApp(L[227],$field399);
}
$ans394 = $field399.app(f393);
}
break;
case 5: var anf_arg400 = $ans394;
$step390 = 7;
$al395 = L[225];
$ans394 = R.checkWrapBoolean(anf_arg400);
break;
case 6: $step390 = 7;
$ans394 = (false);
break;
case 7: var ann_check_temp401 = $ans394;
$step390 = 8;
$al395 = L[228];
R._checkAnn(L[228],$type$Boolean4,ann_check_temp401);
break;
case 8: $step390 = 9;
$ans394 = ann_check_temp401;
break;
case 9: ++R.GAS;
return $ans394;
default: throw "No case numbered " + $step390 + " in $temp_full391";
}
}
} catch($e403) {
if(R.isCont($e403) && ($step390 !== 9)) {
$e403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al395,$temp_full391,$step390,[self392,f393],[ann_check_temp401]);
}
if(R.isPyretException($e403)) {
$e403.pyretStack.push($al395);
}
throw $e403;
}
};
var anf_variant_member629 = R.makeMethod1($temp_full391);
var $temp_full405 = function($self406,$f407) {
var $step404 = 0;
var $ans408 = D;
var $al409 = L[241];
try {
if(R.isActivationRecord($self406)) {
$step404 = $self406.step;
$al409 = $self406.from;
$ans408 = $self406.ans;
self406 = $self406.args[0];
f407 = $self406.args[1];
ann_check_temp415 = $self406.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[241],2,$t);
}
var self406 = $self406;
var f407 = $f407;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step404) {
case 0: $step404 = 1;
$al409 = L[239];
R._checkAnn(L[239],List53,self406);
break;
case 1: $step404 = 2;
$al409 = L[240];
R._checkAnn(L[240],R.Function,f407);
break;
case 2: var anf_arg410 = G(self406,"first",L[233]);
$step404 = 3;
$al409 = L[238];
if(!(R.isFunction(f407))) {
R.ffi.throwNonFunApp($al409,f407);
}
$ans408 = f407.app(anf_arg410);
break;
case 3: var anf_arg411 = $ans408;
$al409 = L[234];
var anf_if416 = R.checkWrapBoolean(anf_arg411);
if(R.isPyretTrue(anf_if416)) {
$step404 = 4;
} else {
$step404 = 5;
}
break;
case 4: $step404 = 7;
$ans408 = (true);
break;
case 5: var anf_method_obj412 = G(self406,"rest",L[235]);
$step404 = 6;
$al409 = L[236];
$field413 = R.getColonFieldLoc(anf_method_obj412,"any",L[236]);
if(R.isMethod($field413)) {
$ans408 = $field413.full_meth(anf_method_obj412,f407);
} else {
if(!(R.isFunction($field413))) {
R.ffi.throwNonFunApp(L[236],$field413);
}
$ans408 = $field413.app(f407);
}
break;
case 6: var anf_arg414 = $ans408;
$step404 = 7;
$al409 = L[234];
$ans408 = R.checkWrapBoolean(anf_arg414);
break;
case 7: var ann_check_temp415 = $ans408;
$step404 = 8;
$al409 = L[237];
R._checkAnn(L[237],$type$Boolean4,ann_check_temp415);
break;
case 8: $step404 = 9;
$ans408 = ann_check_temp415;
break;
case 9: ++R.GAS;
return $ans408;
default: throw "No case numbered " + $step404 + " in $temp_full405";
}
}
} catch($e417) {
if(R.isCont($e417) && ($step404 !== 9)) {
$e417.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al409,$temp_full405,$step404,[self406,f407],[ann_check_temp415]);
}
if(R.isPyretException($e417)) {
$e417.pyretStack.push($al409);
}
throw $e417;
}
};
var anf_variant_member630 = R.makeMethod1($temp_full405);
var $temp_full419 = function($self420,$other421) {
var $step418 = 0;
var $ans422 = D;
var $al423 = L[250];
try {
if(R.isActivationRecord($self420)) {
$step418 = $self420.step;
$al423 = $self420.from;
$ans422 = $self420.ans;
self420 = $self420.args[0];
other421 = $self420.args[1];
ann_check_temp428 = $self420.vars[0];
arg_426 = $self420.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[250],2,$t);
}
var self420 = $self420;
var other421 = $other421;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step418) {
case 0: $step418 = 1;
$al423 = L[248];
R._checkAnn(L[248],List53,self420);
break;
case 1: $step418 = 2;
$al423 = L[249];
R._checkAnn(L[249],List53,other421);
break;
case 2: var arg_426 = G(self420,"first",L[242]);
var anf_method_obj424 = G(self420,"rest",L[243]);
$step418 = 3;
$al423 = L[244];
$field425 = R.getColonFieldLoc(anf_method_obj424,"append",L[244]);
if(R.isMethod($field425)) {
$ans422 = $field425.full_meth(anf_method_obj424,other421);
} else {
if(!(R.isFunction($field425))) {
R.ffi.throwNonFunApp(L[244],$field425);
}
$ans422 = $field425.app(other421);
}
break;
case 3: var anf_arg427 = $ans422;
$step418 = 4;
$al423 = L[247];
if(!(R.isFunction(link70.$var === D?U(L[245],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al423,link70.$var === D?U(L[245],"link"):link70.$var);
}
$ans422 = link70.$var === D?U(L[245],"link"):link70.$var.app(arg_426,anf_arg427);
break;
case 4: var ann_check_temp428 = $ans422;
$step418 = 5;
$al423 = L[246];
R._checkAnn(L[246],List53,ann_check_temp428);
break;
case 5: $step418 = 6;
$ans422 = ann_check_temp428;
break;
case 6: ++R.GAS;
return $ans422;
default: throw "No case numbered " + $step418 + " in $temp_full419";
}
}
} catch($e429) {
if(R.isCont($e429) && ($step418 !== 6)) {
$e429.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al423,$temp_full419,$step418,[self420,other421],[ann_check_temp428,arg_426]);
}
if(R.isPyretException($e429)) {
$e429.pyretStack.push($al423);
}
throw $e429;
}
};
var anf_variant_member631 = R.makeMethod1($temp_full419);
var $temp_full431 = function($self432) {
var $step430 = 0;
var $ans433 = D;
var $al434 = L[259];
try {
if(R.isActivationRecord($self432)) {
$step430 = $self432.step;
$al434 = $self432.from;
$ans433 = $self432.ans;
self432 = $self432.args[0];
ann_check_temp440 = $self432.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[259],1,$t);
}
var self432 = $self432;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step430) {
case 0: $step430 = 1;
$al434 = L[258];
R._checkAnn(L[258],List53,self432);
break;
case 1: var anf_arg436 = G(self432,"rest",L[251]);
$step430 = 2;
$al434 = L[253];
if(!(R.isFunction(is$empty435.$var === D?U(L[252],"is-empty"):is$empty435.$var))) {
R.ffi.throwNonFunApp($al434,is$empty435.$var === D?U(L[252],"is-empty"):is$empty435.$var);
}
$ans433 = is$empty435.$var === D?U(L[252],"is-empty"):is$empty435.$var.app(anf_arg436);
break;
case 2: var anf_arg437 = $ans433;
$al434 = L[253];
var anf_if441 = R.checkWrapBoolean(anf_arg437);
if(R.isPyretTrue(anf_if441)) {
$step430 = 3;
} else {
$step430 = 4;
}
break;
case 3: $step430 = 5;
$ans433 = G(self432,"first",L[254]);
break;
case 4: var anf_method_obj438 = G(self432,"rest",L[255]);
$step430 = 5;
$al434 = L[256];
$field439 = R.getColonFieldLoc(anf_method_obj438,"last",L[256]);
if(R.isMethod($field439)) {
$ans433 = $field439.full_meth(anf_method_obj438);
} else {
if(!(R.isFunction($field439))) {
R.ffi.throwNonFunApp(L[256],$field439);
}
$ans433 = $field439.app();
}
break;
case 5: var ann_check_temp440 = $ans433;
$step430 = 6;
$al434 = L[257];
R._checkAnn(L[257],R.Any,ann_check_temp440);
break;
case 6: $step430 = 7;
$ans433 = ann_check_temp440;
break;
case 7: ++R.GAS;
return $ans433;
default: throw "No case numbered " + $step430 + " in $temp_full431";
}
}
} catch($e442) {
if(R.isCont($e442) && ($step430 !== 7)) {
$e442.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al434,$temp_full431,$step430,[self432],[ann_check_temp440]);
}
if(R.isPyretException($e442)) {
$e442.pyretStack.push($al434);
}
throw $e442;
}
};
var anf_variant_member632 = R.makeMethod0($temp_full431);
var $temp_full444 = function($self445) {
var $step443 = 0;
var $ans446 = D;
var $al447 = L[265];
try {
if(R.isActivationRecord($self445)) {
$step443 = $self445.step;
$al447 = $self445.from;
$ans446 = $self445.ans;
self445 = $self445.args[0];
ann_check_temp449 = $self445.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[265],1,$t);
}
var self445 = $self445;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step443) {
case 0: $step443 = 1;
$al447 = L[264];
R._checkAnn(L[264],List53,self445);
break;
case 1: $step443 = 2;
$al447 = L[263];
if(!(R.isFunction(reverse$help448.$var === D?U(L[260],"reverse-help"):reverse$help448.$var))) {
R.ffi.throwNonFunApp($al447,reverse$help448.$var === D?U(L[260],"reverse-help"):reverse$help448.$var);
}
$ans446 = reverse$help448.$var === D?U(L[260],"reverse-help"):reverse$help448.$var.app(self445,empty149.$var === D?U(L[261],"empty"):empty149.$var);
break;
case 2: var ann_check_temp449 = $ans446;
$step443 = 3;
$al447 = L[262];
R._checkAnn(L[262],List53,ann_check_temp449);
break;
case 3: $step443 = 4;
$ans446 = ann_check_temp449;
break;
case 4: ++R.GAS;
return $ans446;
default: throw "No case numbered " + $step443 + " in $temp_full444";
}
}
} catch($e450) {
if(R.isCont($e450) && ($step443 !== 4)) {
$e450.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al447,$temp_full444,$step443,[self445],[ann_check_temp449]);
}
if(R.isPyretException($e450)) {
$e450.pyretStack.push($al447);
}
throw $e450;
}
};
var anf_variant_member633 = R.makeMethod0($temp_full444);
var $temp_full452 = function($self453,$tostring454) {
var $step451 = 0;
var $ans455 = D;
var $al456 = L[277];
try {
if(R.isActivationRecord($self453)) {
$step451 = $self453.step;
$al456 = $self453.from;
$ans455 = $self453.ans;
self453 = $self453.args[0];
tostring454 = $self453.args[1];
ann_check_temp473 = $self453.vars[0];
anf_arg468 = $self453.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[277],2,$t);
}
var self453 = $self453;
var tostring454 = $tostring454;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step451) {
case 0: $step451 = 1;
$al456 = L[275];
R._checkAnn(L[275],List53,self453);
break;
case 1: $step451 = 2;
$al456 = L[276];
R._checkAnn(L[276],R.Function,tostring454);
break;
case 2: var $temp_lam458 = function($combined459,$elt460) {
var $step457 = 0;
var $ans461 = D;
var $al462 = L[268];
try {
if(R.isActivationRecord($combined459)) {
$step457 = $combined459.step;
$al462 = $combined459.from;
$ans461 = $combined459.ans;
combined459 = $combined459.args[0];
elt460 = $combined459.args[1];
anf_arg463 = $combined459.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[268],2,$t);
}
var combined459 = $combined459;
var elt460 = $elt460;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step457) {
case 0: $step457 = 1;
$al462 = L[266];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al462,_plus7);
}
$ans461 = _plus7.app(combined459,(", "));
break;
case 1: var anf_arg463 = $ans461;
$step457 = 2;
$al462 = L[267];
if(!(R.isFunction(tostring454))) {
R.ffi.throwNonFunApp($al462,tostring454);
}
$ans461 = tostring454.app(elt460);
break;
case 2: var anf_arg464 = $ans461;
$step457 = 3;
$al462 = L[266];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al462,_plus7);
}
$ans461 = _plus7.app(anf_arg463,anf_arg464);
break;
case 3: ++R.GAS;
return $ans461;
default: throw "No case numbered " + $step457 + " in $temp_lam458";
}
}
} catch($e465) {
if(R.isCont($e465) && ($step457 !== 3)) {
$e465.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al462,$temp_lam458,$step457,[combined459,elt460],[anf_arg463]);
}
if(R.isPyretException($e465)) {
$e465.pyretStack.push($al462);
}
throw $e465;
}
};
var anf_arg468 = R.makeFunction($temp_lam458);
var anf_arg466 = G(self453,"first",L[269]);
$step451 = 3;
$al456 = L[274];
if(!(R.isFunction(tostring454))) {
R.ffi.throwNonFunApp($al456,tostring454);
}
$ans455 = tostring454.app(anf_arg466);
break;
case 3: var anf_arg469 = $ans455;
var anf_arg470 = G(self453,"rest",L[270]);
$step451 = 4;
$al456 = L[268];
if(!(R.isFunction(fold467.$var === D?U(L[271],"fold"):fold467.$var))) {
R.ffi.throwNonFunApp($al456,fold467.$var === D?U(L[271],"fold"):fold467.$var);
}
$ans455 = fold467.$var === D?U(L[271],"fold"):fold467.$var.app(anf_arg468,anf_arg469,anf_arg470);
break;
case 4: var anf_arg471 = $ans455;
$step451 = 5;
$al456 = L[273];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al456,_plus7);
}
$ans455 = _plus7.app(("[list: "),anf_arg471);
break;
case 5: var anf_arg472 = $ans455;
$step451 = 6;
$al456 = L[273];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al456,_plus7);
}
$ans455 = _plus7.app(anf_arg472,("]"));
break;
case 6: var ann_check_temp473 = $ans455;
$step451 = 7;
$al456 = L[272];
R._checkAnn(L[272],$type$String6,ann_check_temp473);
break;
case 7: $step451 = 8;
$ans455 = ann_check_temp473;
break;
case 8: ++R.GAS;
return $ans455;
default: throw "No case numbered " + $step451 + " in $temp_full452";
}
}
} catch($e474) {
if(R.isCont($e474) && ($step451 !== 8)) {
$e474.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al456,$temp_full452,$step451,[self453,tostring454],[ann_check_temp473,anf_arg468]);
}
if(R.isPyretException($e474)) {
$e474.pyretStack.push($al456);
}
throw $e474;
}
};
var anf_variant_member634 = R.makeMethod1($temp_full452);
var $temp_full476 = function($self477,$torepr478) {
var $step475 = 0;
var $ans479 = D;
var $al480 = L[289];
try {
if(R.isActivationRecord($self477)) {
$step475 = $self477.step;
$al480 = $self477.from;
$ans479 = $self477.ans;
self477 = $self477.args[0];
torepr478 = $self477.args[1];
ann_check_temp496 = $self477.vars[0];
anf_arg491 = $self477.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[289],2,$t);
}
var self477 = $self477;
var torepr478 = $torepr478;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step475) {
case 0: $step475 = 1;
$al480 = L[287];
R._checkAnn(L[287],List53,self477);
break;
case 1: $step475 = 2;
$al480 = L[288];
R._checkAnn(L[288],R.Function,torepr478);
break;
case 2: var $temp_lam482 = function($combined483,$elt484) {
var $step481 = 0;
var $ans485 = D;
var $al486 = L[280];
try {
if(R.isActivationRecord($combined483)) {
$step481 = $combined483.step;
$al486 = $combined483.from;
$ans485 = $combined483.ans;
combined483 = $combined483.args[0];
elt484 = $combined483.args[1];
anf_arg487 = $combined483.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[280],2,$t);
}
var combined483 = $combined483;
var elt484 = $elt484;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step481) {
case 0: $step481 = 1;
$al486 = L[278];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al486,_plus7);
}
$ans485 = _plus7.app(combined483,(", "));
break;
case 1: var anf_arg487 = $ans485;
$step481 = 2;
$al486 = L[279];
if(!(R.isFunction(torepr478))) {
R.ffi.throwNonFunApp($al486,torepr478);
}
$ans485 = torepr478.app(elt484);
break;
case 2: var anf_arg488 = $ans485;
$step481 = 3;
$al486 = L[278];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al486,_plus7);
}
$ans485 = _plus7.app(anf_arg487,anf_arg488);
break;
case 3: ++R.GAS;
return $ans485;
default: throw "No case numbered " + $step481 + " in $temp_lam482";
}
}
} catch($e489) {
if(R.isCont($e489) && ($step481 !== 3)) {
$e489.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al486,$temp_lam482,$step481,[combined483,elt484],[anf_arg487]);
}
if(R.isPyretException($e489)) {
$e489.pyretStack.push($al486);
}
throw $e489;
}
};
var anf_arg491 = R.makeFunction($temp_lam482);
var anf_arg490 = G(self477,"first",L[281]);
$step475 = 3;
$al480 = L[286];
if(!(R.isFunction(torepr478))) {
R.ffi.throwNonFunApp($al480,torepr478);
}
$ans479 = torepr478.app(anf_arg490);
break;
case 3: var anf_arg492 = $ans479;
var anf_arg493 = G(self477,"rest",L[282]);
$step475 = 4;
$al480 = L[280];
if(!(R.isFunction(fold467.$var === D?U(L[283],"fold"):fold467.$var))) {
R.ffi.throwNonFunApp($al480,fold467.$var === D?U(L[283],"fold"):fold467.$var);
}
$ans479 = fold467.$var === D?U(L[283],"fold"):fold467.$var.app(anf_arg491,anf_arg492,anf_arg493);
break;
case 4: var anf_arg494 = $ans479;
$step475 = 5;
$al480 = L[285];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al480,_plus7);
}
$ans479 = _plus7.app(("[list: "),anf_arg494);
break;
case 5: var anf_arg495 = $ans479;
$step475 = 6;
$al480 = L[285];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al480,_plus7);
}
$ans479 = _plus7.app(anf_arg495,("]"));
break;
case 6: var ann_check_temp496 = $ans479;
$step475 = 7;
$al480 = L[284];
R._checkAnn(L[284],$type$String6,ann_check_temp496);
break;
case 7: $step475 = 8;
$ans479 = ann_check_temp496;
break;
case 8: ++R.GAS;
return $ans479;
default: throw "No case numbered " + $step475 + " in $temp_full476";
}
}
} catch($e497) {
if(R.isCont($e497) && ($step475 !== 8)) {
$e497.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al480,$temp_full476,$step475,[self477,torepr478],[ann_check_temp496,anf_arg491]);
}
if(R.isPyretException($e497)) {
$e497.pyretStack.push($al480);
}
throw $e497;
}
};
var anf_variant_member635 = R.makeMethod1($temp_full476);
var $temp_full499 = function($self500,$cmp501,$eq502) {
var $step498 = 0;
var $ans503 = D;
var $al504 = L[313];
try {
if(R.isActivationRecord($self500)) {
$step498 = $self500.step;
$al504 = $self500.from;
$ans503 = $self500.ans;
self500 = $self500.args[0];
cmp501 = $self500.args[1];
eq502 = $self500.args[2];
ann_check_temp537 = $self500.vars[0];
equal531 = $self500.vars[1];
less534 = $self500.vars[2];
are$gt520 = $self500.vars[3];
are$eq517 = $self500.vars[4];
are$lt513 = $self500.vars[5];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[313],3,$t);
}
var self500 = $self500;
var cmp501 = $cmp501;
var eq502 = $eq502;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step498) {
case 0: $step498 = 1;
$al504 = L[310];
R._checkAnn(L[310],List53,self500);
break;
case 1: $step498 = 2;
$al504 = L[311];
R._checkAnn(L[311],R.Function,cmp501);
break;
case 2: $step498 = 3;
$al504 = L[312];
R._checkAnn(L[312],R.Function,eq502);
break;
case 3: var pivot510 = G(self500,"first",L[290]);
var are$lt513 = {"$var":empty149.$var === D?U(L[309],"empty"):empty149.$var};
var are$eq517 = {"$var":empty149.$var === D?U(L[308],"empty"):empty149.$var};
var are$gt520 = {"$var":empty149.$var === D?U(L[307],"empty"):empty149.$var};
var $temp_lam506 = function($e507) {
var $step505 = 0;
var $ans508 = D;
var $al509 = L[300];
try {
if(R.isActivationRecord($e507)) {
$step505 = $e507.step;
$al509 = $e507.from;
$ans508 = $e507.ans;
e507 = $e507.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[300],1,$t);
}
var e507 = $e507;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step505) {
case 0: $step505 = 1;
$al509 = L[291];
if(!(R.isFunction(cmp501))) {
R.ffi.throwNonFunApp($al509,cmp501);
}
$ans508 = cmp501.app(e507,pivot510);
break;
case 1: var anf_arg511 = $ans508;
$al509 = L[291];
var anf_if523 = R.checkWrapBoolean(anf_arg511);
if(R.isPyretTrue(anf_if523)) {
$step505 = 2;
} else {
$step505 = 4;
}
break;
case 2: var arg_512 = e507;
$step505 = 3;
$al509 = L[293];
if(!(R.isFunction(link70.$var === D?U(L[292],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al509,link70.$var === D?U(L[292],"link"):link70.$var);
}
$ans508 = link70.$var === D?U(L[292],"link"):link70.$var.app(arg_512,are$lt513.$var);
break;
case 3: var anf_assign514 = $ans508;
$step505 = 10;
$ans508 = are$lt513.$var = anf_assign514;
break;
case 4: $step505 = 5;
$al509 = L[299];
if(!(R.isFunction(eq502))) {
R.ffi.throwNonFunApp($al509,eq502);
}
$ans508 = eq502.app(e507,pivot510);
break;
case 5: var anf_arg515 = $ans508;
$al509 = L[294];
var anf_if522 = R.checkWrapBoolean(anf_arg515);
if(R.isPyretTrue(anf_if522)) {
$step505 = 6;
} else {
$step505 = 8;
}
break;
case 6: var arg_516 = e507;
$step505 = 7;
$al509 = L[296];
if(!(R.isFunction(link70.$var === D?U(L[295],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al509,link70.$var === D?U(L[295],"link"):link70.$var);
}
$ans508 = link70.$var === D?U(L[295],"link"):link70.$var.app(arg_516,are$eq517.$var);
break;
case 7: var anf_assign518 = $ans508;
$step505 = 10;
$ans508 = are$eq517.$var = anf_assign518;
break;
case 8: var arg_519 = e507;
$step505 = 9;
$al509 = L[298];
if(!(R.isFunction(link70.$var === D?U(L[297],"link"):link70.$var))) {
R.ffi.throwNonFunApp($al509,link70.$var === D?U(L[297],"link"):link70.$var);
}
$ans508 = link70.$var === D?U(L[297],"link"):link70.$var.app(arg_519,are$gt520.$var);
break;
case 9: var anf_assign521 = $ans508;
$step505 = 10;
$ans508 = are$gt520.$var = anf_assign521;
break;
case 10: ++R.GAS;
return $ans508;
default: throw "No case numbered " + $step505 + " in $temp_lam506";
}
}
} catch($e524) {
if(R.isCont($e524) && ($step505 !== 10)) {
$e524.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al509,$temp_lam506,$step505,[e507],[]);
}
if(R.isPyretException($e524)) {
$e524.pyretStack.push($al509);
}
throw $e524;
}
};
var anf_arg525 = R.makeFunction($temp_lam506);
$step498 = 4;
$al504 = L[301];
$field526 = R.getColonFieldLoc(self500,"each",L[301]);
if(R.isMethod($field526)) {
$ans503 = $field526.full_meth(self500,anf_arg525);
} else {
if(!(R.isFunction($field526))) {
R.ffi.throwNonFunApp(L[301],$field526);
}
$ans503 = $field526.app(anf_arg525);
}
break;
case 4: $step498 = 5;
$al504 = L[302];
var $obj527 = are$lt513.$var;
var $field528 = R.getColonFieldLoc($obj527,"sort-by",L[302]);
if(R.isMethod($field528)) {
$ans503 = $field528.full_meth($obj527,cmp501,eq502);
} else {
if(!(R.isFunction($field528))) {
R.ffi.throwNonFunApp(L[302],$field528);
}
$ans503 = $field528.app(cmp501,eq502);
}
break;
case 5: var less534 = $ans503;
var equal531 = are$eq517.$var;
$step498 = 6;
$al504 = L[303];
var $obj529 = are$gt520.$var;
var $field530 = R.getColonFieldLoc($obj529,"sort-by",L[303]);
if(R.isMethod($field530)) {
$ans503 = $field530.full_meth($obj529,cmp501,eq502);
} else {
if(!(R.isFunction($field530))) {
R.ffi.throwNonFunApp(L[303],$field530);
}
$ans503 = $field530.app(cmp501,eq502);
}
break;
case 6: var greater532 = $ans503;
$step498 = 7;
$al504 = L[304];
$field533 = R.getColonFieldLoc(equal531,"append",L[304]);
if(R.isMethod($field533)) {
$ans503 = $field533.full_meth(equal531,greater532);
} else {
if(!(R.isFunction($field533))) {
R.ffi.throwNonFunApp(L[304],$field533);
}
$ans503 = $field533.app(greater532);
}
break;
case 7: var anf_arg535 = $ans503;
$step498 = 8;
$al504 = L[305];
$field536 = R.getColonFieldLoc(less534,"append",L[305]);
if(R.isMethod($field536)) {
$ans503 = $field536.full_meth(less534,anf_arg535);
} else {
if(!(R.isFunction($field536))) {
R.ffi.throwNonFunApp(L[305],$field536);
}
$ans503 = $field536.app(anf_arg535);
}
break;
case 8: var ann_check_temp537 = $ans503;
$step498 = 9;
$al504 = L[306];
R._checkAnn(L[306],List53,ann_check_temp537);
break;
case 9: $step498 = 10;
$ans503 = ann_check_temp537;
break;
case 10: ++R.GAS;
return $ans503;
default: throw "No case numbered " + $step498 + " in $temp_full499";
}
}
} catch($e538) {
if(R.isCont($e538) && ($step498 !== 10)) {
$e538.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al504,$temp_full499,$step498,[self500,cmp501,eq502],[ann_check_temp537,equal531,less534,are$gt520,are$eq517,are$lt513]);
}
if(R.isPyretException($e538)) {
$e538.pyretStack.push($al504);
}
throw $e538;
}
};
var anf_variant_member636 = R.makeMethod2($temp_full499);
var $temp_full540 = function($self541) {
var $step539 = 0;
var $ans542 = D;
var $al543 = L[321];
try {
if(R.isActivationRecord($self541)) {
$step539 = $self541.step;
$al543 = $self541.from;
$ans542 = $self541.ans;
self541 = $self541.args[0];
ann_check_temp561 = $self541.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[321],1,$t);
}
var self541 = $self541;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step539) {
case 0: $step539 = 1;
$al543 = L[320];
R._checkAnn(L[320],List53,self541);
break;
case 1: var $temp_lam545 = function($e1546,$e2547) {
var $step544 = 0;
var $ans548 = D;
var $al549 = L[315];
try {
if(R.isActivationRecord($e1546)) {
$step544 = $e1546.step;
$al549 = $e1546.from;
$ans548 = $e1546.ans;
e1546 = $e1546.args[0];
e2547 = $e1546.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[315],2,$t);
}
var e1546 = $e1546;
var e2547 = $e2547;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step544) {
case 0: $step544 = 1;
$al549 = L[314];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al549,_lessthan9);
}
$ans548 = _lessthan9.app(e1546,e2547);
break;
case 1: ++R.GAS;
return $ans548;
default: throw "No case numbered " + $step544 + " in $temp_lam545";
}
}
} catch($e550) {
if(R.isCont($e550) && ($step544 !== 1)) {
$e550.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al549,$temp_lam545,$step544,[e1546,e2547],[]);
}
if(R.isPyretException($e550)) {
$e550.pyretStack.push($al549);
}
throw $e550;
}
};
var anf_arg558 = R.makeFunction($temp_lam545);
var $temp_lam552 = function($e1553,$e2554) {
var $step551 = 0;
var $ans555 = D;
var $al556 = L[317];
try {
if(R.isActivationRecord($e1553)) {
$step551 = $e1553.step;
$al556 = $e1553.from;
$ans555 = $e1553.ans;
e1553 = $e1553.args[0];
e2554 = $e1553.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[317],2,$t);
}
var e1553 = $e1553;
var e2554 = $e2554;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step551) {
case 0: $step551 = 1;
$al556 = L[316];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al556,equal$always8);
}
$ans555 = equal$always8.app(e1553,e2554);
break;
case 1: ++R.GAS;
return $ans555;
default: throw "No case numbered " + $step551 + " in $temp_lam552";
}
}
} catch($e557) {
if(R.isCont($e557) && ($step551 !== 1)) {
$e557.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al556,$temp_lam552,$step551,[e1553,e2554],[]);
}
if(R.isPyretException($e557)) {
$e557.pyretStack.push($al556);
}
throw $e557;
}
};
var anf_arg559 = R.makeFunction($temp_lam552);
$step539 = 2;
$al543 = L[318];
$field560 = R.getColonFieldLoc(self541,"sort-by",L[318]);
if(R.isMethod($field560)) {
$ans542 = $field560.full_meth(self541,anf_arg558,anf_arg559);
} else {
if(!(R.isFunction($field560))) {
R.ffi.throwNonFunApp(L[318],$field560);
}
$ans542 = $field560.app(anf_arg558,anf_arg559);
}
break;
case 2: var ann_check_temp561 = $ans542;
$step539 = 3;
$al543 = L[319];
R._checkAnn(L[319],List53,ann_check_temp561);
break;
case 3: $step539 = 4;
$ans542 = ann_check_temp561;
break;
case 4: ++R.GAS;
return $ans542;
default: throw "No case numbered " + $step539 + " in $temp_full540";
}
}
} catch($e562) {
if(R.isCont($e562) && ($step539 !== 4)) {
$e562.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al543,$temp_full540,$step539,[self541],[ann_check_temp561]);
}
if(R.isPyretException($e562)) {
$e562.pyretStack.push($al543);
}
throw $e562;
}
};
var anf_variant_member637 = R.makeMethod0($temp_full540);
var $temp_full564 = function($self565,$str566) {
var $step563 = 0;
var $ans567 = D;
var $al568 = L[335];
try {
if(R.isActivationRecord($self565)) {
$step563 = $self565.step;
$al568 = $self565.from;
$ans567 = $self565.ans;
self565 = $self565.args[0];
str566 = $self565.args[1];
ann_check_temp579 = $self565.vars[0];
anf_arg576 = $self565.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[335],2,$t);
}
var self565 = $self565;
var str566 = $str566;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step563) {
case 0: $step563 = 1;
$al568 = L[333];
R._checkAnn(L[333],List53,self565);
break;
case 1: $step563 = 2;
$al568 = L[334];
R._checkAnn(L[334],$type$String6,str566);
break;
case 2: var anf_arg570 = G(self565,"rest",L[322]);
$step563 = 3;
$al568 = L[324];
if(!(R.isFunction(is$link569.$var === D?U(L[323],"is-link"):is$link569.$var))) {
R.ffi.throwNonFunApp($al568,is$link569.$var === D?U(L[323],"is-link"):is$link569.$var);
}
$ans567 = is$link569.$var === D?U(L[323],"is-link"):is$link569.$var.app(anf_arg570);
break;
case 3: var anf_arg571 = $ans567;
$al568 = L[324];
var anf_if580 = R.checkWrapBoolean(anf_arg571);
if(R.isPyretTrue(anf_if580)) {
$step563 = 4;
} else {
$step563 = 8;
}
break;
case 4: var anf_arg572 = G(self565,"first",L[325]);
$step563 = 5;
$al568 = L[329];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al568,tostring10);
}
$ans567 = tostring10.app(anf_arg572);
break;
case 5: var anf_arg573 = $ans567;
$step563 = 6;
$al568 = L[328];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al568,_plus7);
}
$ans567 = _plus7.app(anf_arg573,str566);
break;
case 6: var anf_arg576 = $ans567;
var anf_method_obj574 = G(self565,"rest",L[326]);
$step563 = 7;
$al568 = L[327];
$field575 = R.getColonFieldLoc(anf_method_obj574,"join-str",L[327]);
if(R.isMethod($field575)) {
$ans567 = $field575.full_meth(anf_method_obj574,str566);
} else {
if(!(R.isFunction($field575))) {
R.ffi.throwNonFunApp(L[327],$field575);
}
$ans567 = $field575.app(str566);
}
break;
case 7: var anf_arg577 = $ans567;
$step563 = 9;
$al568 = L[328];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al568,_plus7);
}
$ans567 = _plus7.app(anf_arg576,anf_arg577);
break;
case 8: var anf_arg578 = G(self565,"first",L[330]);
$step563 = 9;
$al568 = L[331];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al568,tostring10);
}
$ans567 = tostring10.app(anf_arg578);
break;
case 9: var ann_check_temp579 = $ans567;
$step563 = 10;
$al568 = L[332];
R._checkAnn(L[332],$type$String6,ann_check_temp579);
break;
case 10: $step563 = 11;
$ans567 = ann_check_temp579;
break;
case 11: ++R.GAS;
return $ans567;
default: throw "No case numbered " + $step563 + " in $temp_full564";
}
}
} catch($e581) {
if(R.isCont($e581) && ($step563 !== 11)) {
$e581.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al568,$temp_full564,$step563,[self565,str566],[ann_check_temp579,anf_arg576]);
}
if(R.isPyretException($e581)) {
$e581.pyretStack.push($al568);
}
throw $e581;
}
};
var anf_variant_member638 = R.makeMethod1($temp_full564);
var $empty_getfields615 = function(f) {
return f();
};
var $empty_getfieldsref613 = function(f) {
return f();
};
var $empty_mutablemask614 = [];
var $empty$base591 = {"_output":anf_shared582,
"_plus":anf_shared583,
"push":anf_shared584,
"split-at":anf_shared585,
"take":anf_shared586,
"drop":anf_shared587,
"get":anf_shared588,
"set":anf_shared589,
"remove":anf_shared590,
"length":anf_singleton_variant_member594,
"each":anf_singleton_variant_member595,
"map":anf_singleton_variant_member596,
"filter":anf_singleton_variant_member597,
"find":anf_singleton_variant_member598,
"partition":anf_singleton_variant_member599,
"foldr":anf_singleton_variant_member600,
"foldl":anf_singleton_variant_member601,
"all":anf_singleton_variant_member602,
"any":anf_singleton_variant_member603,
"member":anf_singleton_variant_member604,
"append":anf_singleton_variant_member605,
"last":anf_singleton_variant_member606,
"reverse":anf_singleton_variant_member607,
"_tostring":anf_singleton_variant_member608,
"_torepr":anf_singleton_variant_member609,
"sort-by":anf_singleton_variant_member610,
"sort":anf_singleton_variant_member611,
"join-str":anf_singleton_variant_member612,
"_match":R.makeMatch("empty",0)};
var $empty$brands593 = {"$brand$empty":true};
$empty$brands593[List42._brand] = true;
var $link_getfields641 = function(f) {
return f(this.dict["first"],this.dict["rest"]);
};
var $link_getfieldsref639 = function(f,refmask) {
return f(R.derefField(this.dict["first"],false,refmask[0]),R.derefField(this.dict["rest"],false,refmask[1]));
};
var $link_mutablemask640 = [false,false];
var $link$base617 = {"$fieldNames":["first","rest"],
"_output":anf_shared582,
"_plus":anf_shared583,
"push":anf_shared584,
"split-at":anf_shared585,
"take":anf_shared586,
"drop":anf_shared587,
"get":anf_shared588,
"set":anf_shared589,
"remove":anf_shared590,
"length":anf_variant_member620,
"each":anf_variant_member621,
"map":anf_variant_member622,
"filter":anf_variant_member623,
"partition":anf_variant_member624,
"find":anf_variant_member625,
"member":anf_variant_member626,
"foldr":anf_variant_member627,
"foldl":anf_variant_member628,
"all":anf_variant_member629,
"any":anf_variant_member630,
"append":anf_variant_member631,
"last":anf_variant_member632,
"reverse":anf_variant_member633,
"_tostring":anf_variant_member634,
"_torepr":anf_variant_member635,
"sort-by":anf_variant_member636,
"sort":anf_variant_member637,
"join-str":anf_variant_member638,
"_match":R.makeMatch("link",2)};
var $link$brands619 = {"$brand$link":true};
$link$brands619[List42._brand] = true;
var link643 = R.makeVariantConstructor(L[340],function() {
return [R.Any,List53];
},["first644","rest645"],[L[338],L[339]],[false,false],["first644","rest645"],$link_mutablemask640,$link$base617,$link$brands619,"link",$link_getfieldsref639,$link_getfields641,$link$base617);
var anf_assign647 = R.makeObject({"List":R.makeFunction(function($val646) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[341],1,$t);
}
return R.makeBoolean(R.hasBrand($val646,List42._brand));
}),
"is-empty":R.makeFunction(function($val616) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[336],1,$t);
}
return R.makeBoolean(R.hasBrand($val616,"$brand$empty"));
}),
"empty":R.makeDataValue($empty$base591,$empty$brands593,"empty",$empty_getfieldsref613,$empty_getfields615,-1,$empty_mutablemask614,$empty$base591),
"is-link":R.makeFunction(function($val642) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[337],1,$t);
}
return R.makeBoolean(R.hasBrand($val642,"$brand$link"));
}),
"link":link643});
List648.$var = anf_assign647;
var anf_assign649 = G(List648.$var,"List",L[341]);
List650.$var = anf_assign649;
var anf_assign651 = G(List648.$var,"List",L[341]);
is$List652.$var = anf_assign651;
var anf_assign653 = G(List648.$var,"is-empty",L[336]);
is$empty435.$var = anf_assign653;
var anf_assign654 = G(List648.$var,"empty",L[336]);
empty149.$var = anf_assign654;
var anf_assign655 = G(List648.$var,"is-link",L[337]);
is$link569.$var = anf_assign655;
var anf_assign656 = G(List648.$var,"link",L[337]);
link70.$var = anf_assign656;
var $temp_lam658 = function($lst659,$n660) {
var $step657 = 0;
var $ans661 = D;
var $al662 = L[361];
try {
if(R.isActivationRecord($lst659)) {
$step657 = $lst659.step;
$al662 = $lst659.from;
$ans661 = $lst659.ans;
lst659 = $lst659.args[0];
n660 = $lst659.args[1];
ann_check_temp683 = $lst659.vars[0];
help673 = $lst659.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[361],2,$t);
}
var lst659 = $lst659;
var n660 = $n660;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step657) {
case 0: $step657 = 1;
$al662 = L[359];
R._checkAnn(L[359],List53,lst659);
break;
case 1: $step657 = 2;
$al662 = L[360];
R._checkAnn(L[360],$type$Number1,n660);
break;
case 2: var help673 = {"$var":D};
var $temp_lam664 = function($l665,$cur666) {
var $step663 = 0;
var $ans667 = D;
var $al668 = L[352];
try {
if(R.isActivationRecord($l665)) {
$step663 = $l665.step;
$al668 = $l665.from;
$ans667 = $l665.ans;
l665 = $l665.args[0];
cur666 = $l665.args[1];
anf_arg674 = $l665.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[352],2,$t);
}
var l665 = $l665;
var cur666 = $cur666;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step663) {
case 0: $step663 = 1;
$al668 = L[342];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al668,is$empty435.$var);
}
$ans667 = is$empty435.$var.app(l665);
break;
case 1: var anf_arg669 = $ans667;
$al668 = L[342];
var anf_if677 = R.checkWrapBoolean(anf_arg669);
if(R.isPyretTrue(anf_if677)) {
$step663 = 2;
} else {
$step663 = 5;
}
break;
case 2: $step663 = 3;
$al668 = L[345];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al668,tostring10);
}
$ans667 = tostring10.app(n660);
break;
case 3: var anf_arg670 = $ans667;
$step663 = 4;
$al668 = L[344];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al668,_plus7);
}
$ans667 = _plus7.app(("get: n too large "),anf_arg670);
break;
case 4: var anf_arg671 = $ans667;
$step663 = 10;
$al668 = L[343];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al668,raise5);
}
$ans667 = raise5.app(anf_arg671);
break;
case 5: $step663 = 6;
$al668 = L[351];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al668,equal$always8);
}
$ans667 = equal$always8.app(cur666,(0));
break;
case 6: var anf_arg672 = $ans667;
$al668 = L[346];
var anf_if676 = R.checkWrapBoolean(anf_arg672);
if(R.isPyretTrue(anf_if676)) {
$step663 = 7;
} else {
$step663 = 8;
}
break;
case 7: $step663 = 10;
$ans667 = G(l665,"first",L[347]);
break;
case 8: var anf_arg674 = G(l665,"rest",L[348]);
$step663 = 9;
$al668 = L[350];
if(!(R.isFunction(_minus11))) {
R.ffi.throwNonFunApp($al668,_minus11);
}
$ans667 = _minus11.app(cur666,(1));
break;
case 9: var anf_arg675 = $ans667;
$step663 = 10;
$al668 = L[349];
if(!(R.isFunction(help673.$var))) {
R.ffi.throwNonFunApp($al668,help673.$var);
}
$ans667 = help673.$var.app(anf_arg674,anf_arg675);
break;
case 10: ++R.GAS;
return $ans667;
default: throw "No case numbered " + $step663 + " in $temp_lam664";
}
}
} catch($e678) {
if(R.isCont($e678) && ($step663 !== 10)) {
$e678.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al668,$temp_lam664,$step663,[l665,cur666],[anf_arg674]);
}
if(R.isPyretException($e678)) {
$e678.pyretStack.push($al668);
}
throw $e678;
}
};
var anf_assign679 = R.makeFunction($temp_lam664);
help673.$var = anf_assign679;
$step657 = 3;
$al662 = L[353];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al662,_lessthan9);
}
$ans661 = _lessthan9.app(n660,(0));
break;
case 3: var anf_arg680 = $ans661;
$al662 = L[353];
var anf_if684 = R.checkWrapBoolean(anf_arg680);
if(R.isPyretTrue(anf_if684)) {
$step657 = 4;
} else {
$step657 = 7;
}
break;
case 4: $step657 = 5;
$al662 = L[356];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al662,tostring10);
}
$ans661 = tostring10.app(n660);
break;
case 5: var anf_arg681 = $ans661;
$step657 = 6;
$al662 = L[355];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al662,_plus7);
}
$ans661 = _plus7.app(("get: invalid argument: "),anf_arg681);
break;
case 6: var anf_arg682 = $ans661;
$step657 = 8;
$al662 = L[354];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al662,raise5);
}
$ans661 = raise5.app(anf_arg682);
break;
case 7: $step657 = 8;
$al662 = L[357];
if(!(R.isFunction(help673.$var))) {
R.ffi.throwNonFunApp($al662,help673.$var);
}
$ans661 = help673.$var.app(lst659,n660);
break;
case 8: var ann_check_temp683 = $ans661;
$step657 = 9;
$al662 = L[358];
R._checkAnn(L[358],R.Any,ann_check_temp683);
break;
case 9: $step657 = 10;
$ans661 = ann_check_temp683;
break;
case 10: ++R.GAS;
return $ans661;
default: throw "No case numbered " + $step657 + " in $temp_lam658";
}
}
} catch($e685) {
if(R.isCont($e685) && ($step657 !== 10)) {
$e685.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al662,$temp_lam658,$step657,[lst659,n660],[ann_check_temp683,help673]);
}
if(R.isPyretException($e685)) {
$e685.pyretStack.push($al662);
}
throw $e685;
}
};
var anf_assign686 = R.makeFunction($temp_lam658);
get106.$var = anf_assign686;
var $temp_lam688 = function($lst689,$n690,$v691) {
var $step687 = 0;
var $ans692 = D;
var $al693 = L[384];
try {
if(R.isActivationRecord($lst689)) {
$step687 = $lst689.step;
$al693 = $lst689.from;
$ans692 = $lst689.ans;
lst689 = $lst689.args[0];
n690 = $lst689.args[1];
v691 = $lst689.args[2];
ann_check_temp718 = $lst689.vars[0];
help706 = $lst689.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[384],3,$t);
}
var lst689 = $lst689;
var n690 = $n690;
var v691 = $v691;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step687) {
case 0: $step687 = 1;
$al693 = L[382];
R._checkAnn(L[382],List53,lst689);
break;
case 1: $step687 = 2;
$al693 = L[383];
R._checkAnn(L[383],$type$Number1,n690);
break;
case 2: var help706 = {"$var":D};
var $temp_lam695 = function($l696,$cur697) {
var $step694 = 0;
var $ans698 = D;
var $al699 = L[375];
try {
if(R.isActivationRecord($l696)) {
$step694 = $l696.step;
$al699 = $l696.from;
$ans698 = $l696.ans;
l696 = $l696.args[0];
cur697 = $l696.args[1];
anf_arg707 = $l696.vars[0];
arg_709 = $l696.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[375],2,$t);
}
var l696 = $l696;
var cur697 = $cur697;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step694) {
case 0: $step694 = 1;
$al699 = L[362];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al699,is$empty435.$var);
}
$ans698 = is$empty435.$var.app(l696);
break;
case 1: var anf_arg700 = $ans698;
$al699 = L[362];
var anf_if712 = R.checkWrapBoolean(anf_arg700);
if(R.isPyretTrue(anf_if712)) {
$step694 = 2;
} else {
$step694 = 5;
}
break;
case 2: $step694 = 3;
$al699 = L[365];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al699,tostring10);
}
$ans698 = tostring10.app(n690);
break;
case 3: var anf_arg701 = $ans698;
$step694 = 4;
$al699 = L[364];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al699,_plus7);
}
$ans698 = _plus7.app(("set: n too large "),anf_arg701);
break;
case 4: var anf_arg702 = $ans698;
$step694 = 11;
$al699 = L[363];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al699,raise5);
}
$ans698 = raise5.app(anf_arg702);
break;
case 5: $step694 = 6;
$al699 = L[374];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al699,equal$always8);
}
$ans698 = equal$always8.app(cur697,(0));
break;
case 6: var anf_arg703 = $ans698;
$al699 = L[366];
var anf_if711 = R.checkWrapBoolean(anf_arg703);
if(R.isPyretTrue(anf_if711)) {
$step694 = 7;
} else {
$step694 = 8;
}
break;
case 7: var arg_704 = v691;
var anf_arg705 = G(l696,"rest",L[367]);
$step694 = 11;
$al699 = L[368];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al699,link70.$var);
}
$ans698 = link70.$var.app(arg_704,anf_arg705);
break;
case 8: var arg_709 = G(l696,"first",L[369]);
var anf_arg707 = G(l696,"rest",L[370]);
$step694 = 9;
$al699 = L[373];
if(!(R.isFunction(_minus11))) {
R.ffi.throwNonFunApp($al699,_minus11);
}
$ans698 = _minus11.app(cur697,(1));
break;
case 9: var anf_arg708 = $ans698;
$step694 = 10;
$al699 = L[372];
if(!(R.isFunction(help706.$var))) {
R.ffi.throwNonFunApp($al699,help706.$var);
}
$ans698 = help706.$var.app(anf_arg707,anf_arg708);
break;
case 10: var anf_arg710 = $ans698;
$step694 = 11;
$al699 = L[371];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al699,link70.$var);
}
$ans698 = link70.$var.app(arg_709,anf_arg710);
break;
case 11: ++R.GAS;
return $ans698;
default: throw "No case numbered " + $step694 + " in $temp_lam695";
}
}
} catch($e713) {
if(R.isCont($e713) && ($step694 !== 11)) {
$e713.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al699,$temp_lam695,$step694,[l696,cur697],[anf_arg707,arg_709]);
}
if(R.isPyretException($e713)) {
$e713.pyretStack.push($al699);
}
throw $e713;
}
};
var anf_assign714 = R.makeFunction($temp_lam695);
help706.$var = anf_assign714;
$step687 = 3;
$al693 = L[376];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al693,_lessthan9);
}
$ans692 = _lessthan9.app(n690,(0));
break;
case 3: var anf_arg715 = $ans692;
$al693 = L[376];
var anf_if719 = R.checkWrapBoolean(anf_arg715);
if(R.isPyretTrue(anf_if719)) {
$step687 = 4;
} else {
$step687 = 7;
}
break;
case 4: $step687 = 5;
$al693 = L[379];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al693,tostring10);
}
$ans692 = tostring10.app(n690);
break;
case 5: var anf_arg716 = $ans692;
$step687 = 6;
$al693 = L[378];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al693,_plus7);
}
$ans692 = _plus7.app(("set: invalid argument: "),anf_arg716);
break;
case 6: var anf_arg717 = $ans692;
$step687 = 8;
$al693 = L[377];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al693,raise5);
}
$ans692 = raise5.app(anf_arg717);
break;
case 7: $step687 = 8;
$al693 = L[380];
if(!(R.isFunction(help706.$var))) {
R.ffi.throwNonFunApp($al693,help706.$var);
}
$ans692 = help706.$var.app(lst689,n690);
break;
case 8: var ann_check_temp718 = $ans692;
$step687 = 9;
$al693 = L[381];
R._checkAnn(L[381],R.Any,ann_check_temp718);
break;
case 9: $step687 = 10;
$ans692 = ann_check_temp718;
break;
case 10: ++R.GAS;
return $ans692;
default: throw "No case numbered " + $step687 + " in $temp_lam688";
}
}
} catch($e720) {
if(R.isCont($e720) && ($step687 !== 10)) {
$e720.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al693,$temp_lam688,$step687,[lst689,n690,v691],[ann_check_temp718,help706]);
}
if(R.isPyretException($e720)) {
$e720.pyretStack.push($al693);
}
throw $e720;
}
};
var anf_assign721 = R.makeFunction($temp_lam688);
set116.$var = anf_assign721;
var $temp_lam723 = function($lst724,$acc725) {
var $step722 = 0;
var $ans726 = D;
var $al727 = L[394];
try {
if(R.isActivationRecord($lst724)) {
$step722 = $lst724.step;
$al727 = $lst724.from;
$ans726 = $lst724.ans;
lst724 = $lst724.args[0];
acc725 = $lst724.args[1];
ann_check_temp735 = $lst724.vars[0];
rest731 = $lst724.vars[1];
cases728 = $lst724.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[394],2,$t);
}
var lst724 = $lst724;
var acc725 = $acc725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step722) {
case 0: $step722 = 1;
$al727 = L[392];
R._checkAnn(L[392],List53,lst724);
break;
case 1: $step722 = 2;
$al727 = L[393];
R._checkAnn(L[393],List53,acc725);
break;
case 2: var cases728 = lst724;
$step722 = 3;
$al727 = L[391];
R._checkAnn(L[391],List53,cases728);
break;
case 3: var $cases_dispatch734 = {"empty":4,
"link":5};
$al727 = L[389];
$step722 = $cases_dispatch734[cases728.$name] || 7;
break;
case 4: if(cases728.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[385],false);
}
$step722 = 8;
$ans726 = acc725;
break;
case 5: if(cases728.$arity >= 0) {
if(2 !== cases728.$arity) {
R.ffi.throwCasesArityErrorC(L[388],2,cases728.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[388],true);
}
var $fn733 = cases728.$constructor.$fieldNames;
var first729 = R.derefField(cases728.dict[$fn733[0]],cases728.$mut_fields_mask[0],false);
var rest731 = R.derefField(cases728.dict[$fn733[1]],cases728.$mut_fields_mask[1],false);
var arg_730 = first729;
$step722 = 6;
$al727 = L[387];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al727,link70.$var);
}
$ans726 = link70.$var.app(arg_730,acc725);
break;
case 6: var anf_arg732 = $ans726;
$step722 = 8;
$al727 = L[386];
if(!(R.isFunction(reverse$help448.$var))) {
R.ffi.throwNonFunApp($al727,reverse$help448.$var);
}
$ans726 = reverse$help448.$var.app(rest731,anf_arg732);
break;
case 7: $step722 = 8;
$al727 = L[389];
$ans726 = R.throwNoCasesMatched(L[389],cases728);
break;
case 8: var ann_check_temp735 = $ans726;
$step722 = 9;
$al727 = L[390];
R._checkAnn(L[390],List53,ann_check_temp735);
break;
case 9: $step722 = 10;
$ans726 = ann_check_temp735;
break;
case 10: ++R.GAS;
return $ans726;
default: throw "No case numbered " + $step722 + " in $temp_lam723";
}
}
} catch($e736) {
if(R.isCont($e736) && ($step722 !== 10)) {
$e736.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al727,$temp_lam723,$step722,[lst724,acc725],[ann_check_temp735,rest731,cases728]);
}
if(R.isPyretException($e736)) {
$e736.pyretStack.push($al727);
}
throw $e736;
}
};
var anf_assign737 = R.makeFunction($temp_lam723);
reverse$help448.$var = anf_assign737;
var $temp_lam739 = function($lst740) {
var $step738 = 0;
var $ans741 = D;
var $al742 = L[398];
try {
if(R.isActivationRecord($lst740)) {
$step738 = $lst740.step;
$al742 = $lst740.from;
$ans741 = $lst740.ans;
lst740 = $lst740.args[0];
ann_check_temp743 = $lst740.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[398],1,$t);
}
var lst740 = $lst740;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step738) {
case 0: $step738 = 1;
$al742 = L[397];
R._checkAnn(L[397],List53,lst740);
break;
case 1: $step738 = 2;
$al742 = L[396];
if(!(R.isFunction(reverse$help448.$var))) {
R.ffi.throwNonFunApp($al742,reverse$help448.$var);
}
$ans741 = reverse$help448.$var.app(lst740,empty149.$var);
break;
case 2: var ann_check_temp743 = $ans741;
$step738 = 3;
$al742 = L[395];
R._checkAnn(L[395],List53,ann_check_temp743);
break;
case 3: $step738 = 4;
$ans741 = ann_check_temp743;
break;
case 4: ++R.GAS;
return $ans741;
default: throw "No case numbered " + $step738 + " in $temp_lam739";
}
}
} catch($e744) {
if(R.isCont($e744) && ($step738 !== 4)) {
$e744.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al742,$temp_lam739,$step738,[lst740],[ann_check_temp743]);
}
if(R.isPyretException($e744)) {
$e744.pyretStack.push($al742);
}
throw $e744;
}
};
var anf_assign745 = R.makeFunction($temp_lam739);
reverse746.$var = anf_assign745;
var $temp_lam748 = function($start749,$stop750) {
var $step747 = 0;
var $ans751 = D;
var $al752 = L[412];
try {
if(R.isActivationRecord($start749)) {
$step747 = $start749.step;
$al752 = $start749.from;
$ans751 = $start749.ans;
start749 = $start749.args[0];
stop750 = $start749.args[1];
ann_check_temp765 = $start749.vars[0];
anf_arg760 = $start749.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[412],2,$t);
}
var start749 = $start749;
var stop750 = $stop750;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step747) {
case 0: $step747 = 1;
$al752 = L[410];
R._checkAnn(L[410],$type$Number1,start749);
break;
case 1: $step747 = 2;
$al752 = L[411];
R._checkAnn(L[411],$type$Number1,stop750);
break;
case 2: $step747 = 3;
$al752 = L[399];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al752,_lessthan9);
}
$ans751 = _lessthan9.app(start749,stop750);
break;
case 3: var anf_arg753 = $ans751;
$al752 = L[399];
var anf_if766 = R.checkWrapBoolean(anf_arg753);
if(R.isPyretTrue(anf_if766)) {
$step747 = 4;
} else {
$step747 = 7;
}
break;
case 4: $step747 = 5;
$al752 = L[402];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al752,_plus7);
}
$ans751 = _plus7.app(start749,(1));
break;
case 5: var anf_arg755 = $ans751;
$step747 = 6;
$al752 = L[401];
if(!(R.isFunction(range754.$var))) {
R.ffi.throwNonFunApp($al752,range754.$var);
}
$ans751 = range754.$var.app(anf_arg755,stop750);
break;
case 6: var anf_arg756 = $ans751;
$step747 = 17;
$al752 = L[400];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al752,link70.$var);
}
$ans751 = link70.$var.app(start749,anf_arg756);
break;
case 7: $step747 = 8;
$al752 = L[408];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al752,equal$always8);
}
$ans751 = equal$always8.app(start749,stop750);
break;
case 8: var anf_arg757 = $ans751;
$al752 = L[403];
var anf_if764 = R.checkWrapBoolean(anf_arg757);
if(R.isPyretTrue(anf_if764)) {
$step747 = 9;
} else {
$step747 = 10;
}
break;
case 9: $step747 = 17;
$ans751 = empty149.$var;
break;
case 10: $step747 = 11;
$al752 = L[407];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al752,tostring10);
}
$ans751 = tostring10.app(start749);
break;
case 11: var anf_arg758 = $ans751;
$step747 = 12;
$al752 = L[405];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al752,_plus7);
}
$ans751 = _plus7.app(("range: start greater than stop: ("),anf_arg758);
break;
case 12: var anf_arg759 = $ans751;
$step747 = 13;
$al752 = L[405];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al752,_plus7);
}
$ans751 = _plus7.app(anf_arg759,(", "));
break;
case 13: var anf_arg760 = $ans751;
$step747 = 14;
$al752 = L[406];
if(!(R.isFunction(tostring10))) {
R.ffi.throwNonFunApp($al752,tostring10);
}
$ans751 = tostring10.app(stop750);
break;
case 14: var anf_arg761 = $ans751;
$step747 = 15;
$al752 = L[405];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al752,_plus7);
}
$ans751 = _plus7.app(anf_arg760,anf_arg761);
break;
case 15: var anf_arg762 = $ans751;
$step747 = 16;
$al752 = L[405];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al752,_plus7);
}
$ans751 = _plus7.app(anf_arg762,(")"));
break;
case 16: var anf_arg763 = $ans751;
$step747 = 17;
$al752 = L[404];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al752,raise5);
}
$ans751 = raise5.app(anf_arg763);
break;
case 17: var ann_check_temp765 = $ans751;
$step747 = 18;
$al752 = L[409];
R._checkAnn(L[409],List53,ann_check_temp765);
break;
case 18: $step747 = 19;
$ans751 = ann_check_temp765;
break;
case 19: ++R.GAS;
return $ans751;
default: throw "No case numbered " + $step747 + " in $temp_lam748";
}
}
} catch($e767) {
if(R.isCont($e767) && ($step747 !== 19)) {
$e767.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al752,$temp_lam748,$step747,[start749,stop750],[ann_check_temp765,anf_arg760]);
}
if(R.isPyretException($e767)) {
$e767.pyretStack.push($al752);
}
throw $e767;
}
};
var anf_assign768 = R.makeFunction($temp_lam748);
range754.$var = anf_assign768;
var $temp_lam770 = function($start771,$stop772,$delta773) {
var $step769 = 0;
var $ans774 = D;
var $al775 = L[430];
try {
if(R.isActivationRecord($start771)) {
$step769 = $start771.step;
$al775 = $start771.from;
$ans774 = $start771.ans;
start771 = $start771.args[0];
stop772 = $start771.args[1];
delta773 = $start771.args[2];
ann_check_temp790 = $start771.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[430],3,$t);
}
var start771 = $start771;
var stop772 = $stop772;
var delta773 = $delta773;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step769) {
case 0: $step769 = 1;
$al775 = L[427];
R._checkAnn(L[427],$type$Number1,start771);
break;
case 1: $step769 = 2;
$al775 = L[428];
R._checkAnn(L[428],$type$Number1,stop772);
break;
case 2: $step769 = 3;
$al775 = L[429];
R._checkAnn(L[429],$type$Number1,delta773);
break;
case 3: $step769 = 4;
$al775 = L[413];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al775,equal$always8);
}
$ans774 = equal$always8.app(delta773,(0));
break;
case 4: var anf_arg776 = $ans774;
$al775 = L[413];
var anf_if791 = R.checkWrapBoolean(anf_arg776);
if(R.isPyretTrue(anf_if791)) {
$step769 = 5;
} else {
$step769 = 9;
}
break;
case 5: $step769 = 6;
$al775 = L[414];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al775,equal$always8);
}
$ans774 = equal$always8.app(start771,stop772);
break;
case 6: var anf_arg777 = $ans774;
$al775 = L[414];
var anf_if778 = R.checkWrapBoolean(anf_arg777);
if(R.isPyretTrue(anf_if778)) {
$step769 = 7;
} else {
$step769 = 8;
}
break;
case 7: $step769 = 23;
$ans774 = empty149.$var;
break;
case 8: $step769 = 23;
$al775 = L[415];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al775,raise5);
}
$ans774 = raise5.app(("range-by: an interval of 0 would produce an infinite list"));
break;
case 9: $step769 = 10;
$al775 = L[425];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al775,_lessthan9);
}
$ans774 = _lessthan9.app(delta773,(0));
break;
case 10: var anf_arg779 = $ans774;
$al775 = L[416];
var anf_if789 = R.checkWrapBoolean(anf_arg779);
if(R.isPyretTrue(anf_if789)) {
$step769 = 11;
} else {
$step769 = 17;
}
break;
case 11: $step769 = 12;
$al775 = L[417];
if(!(R.isFunction(_lessequal13))) {
R.ffi.throwNonFunApp($al775,_lessequal13);
}
$ans774 = _lessequal13.app(start771,stop772);
break;
case 12: var anf_arg780 = $ans774;
$al775 = L[417];
var anf_if784 = R.checkWrapBoolean(anf_arg780);
if(R.isPyretTrue(anf_if784)) {
$step769 = 13;
} else {
$step769 = 14;
}
break;
case 13: $step769 = 23;
$ans774 = empty149.$var;
break;
case 14: $step769 = 15;
$al775 = L[420];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al775,_plus7);
}
$ans774 = _plus7.app(start771,delta773);
break;
case 15: var anf_arg782 = $ans774;
$step769 = 16;
$al775 = L[419];
if(!(R.isFunction(range$by781.$var))) {
R.ffi.throwNonFunApp($al775,range$by781.$var);
}
$ans774 = range$by781.$var.app(anf_arg782,stop772,delta773);
break;
case 16: var anf_arg783 = $ans774;
$step769 = 23;
$al775 = L[418];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al775,link70.$var);
}
$ans774 = link70.$var.app(start771,anf_arg783);
break;
case 17: $step769 = 18;
$al775 = L[421];
if(!(R.isFunction(_greaterequal12))) {
R.ffi.throwNonFunApp($al775,_greaterequal12);
}
$ans774 = _greaterequal12.app(start771,stop772);
break;
case 18: var anf_arg785 = $ans774;
$al775 = L[421];
var anf_if788 = R.checkWrapBoolean(anf_arg785);
if(R.isPyretTrue(anf_if788)) {
$step769 = 19;
} else {
$step769 = 20;
}
break;
case 19: $step769 = 23;
$ans774 = empty149.$var;
break;
case 20: $step769 = 21;
$al775 = L[424];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al775,_plus7);
}
$ans774 = _plus7.app(start771,delta773);
break;
case 21: var anf_arg786 = $ans774;
$step769 = 22;
$al775 = L[423];
if(!(R.isFunction(range$by781.$var))) {
R.ffi.throwNonFunApp($al775,range$by781.$var);
}
$ans774 = range$by781.$var.app(anf_arg786,stop772,delta773);
break;
case 22: var anf_arg787 = $ans774;
$step769 = 23;
$al775 = L[422];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al775,link70.$var);
}
$ans774 = link70.$var.app(start771,anf_arg787);
break;
case 23: var ann_check_temp790 = $ans774;
$step769 = 24;
$al775 = L[426];
R._checkAnn(L[426],List53,ann_check_temp790);
break;
case 24: $step769 = 25;
$ans774 = ann_check_temp790;
break;
case 25: ++R.GAS;
return $ans774;
default: throw "No case numbered " + $step769 + " in $temp_lam770";
}
}
} catch($e792) {
if(R.isCont($e792) && ($step769 !== 25)) {
$e792.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al775,$temp_lam770,$step769,[start771,stop772,delta773],[ann_check_temp790]);
}
if(R.isPyretException($e792)) {
$e792.pyretStack.push($al775);
}
throw $e792;
}
};
var anf_assign793 = R.makeFunction($temp_lam770);
range$by781.$var = anf_assign793;
var $temp_lam795 = function($n796,$e797) {
var $step794 = 0;
var $ans798 = D;
var $al799 = L[441];
try {
if(R.isActivationRecord($n796)) {
$step794 = $n796.step;
$al799 = $n796.from;
$ans798 = $n796.ans;
n796 = $n796.args[0];
e797 = $n796.args[1];
ann_check_temp806 = $n796.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[441],2,$t);
}
var n796 = $n796;
var e797 = $e797;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step794) {
case 0: $step794 = 1;
$al799 = L[439];
R._checkAnn(L[439],$type$Number1,n796);
break;
case 1: $step794 = 2;
$al799 = L[440];
R._checkAnn(L[440],R.Any,e797);
break;
case 2: $step794 = 3;
$al799 = L[431];
if(!(R.isFunction(_greaterthan14))) {
R.ffi.throwNonFunApp($al799,_greaterthan14);
}
$ans798 = _greaterthan14.app(n796,(0));
break;
case 3: var anf_arg800 = $ans798;
$al799 = L[431];
var anf_if807 = R.checkWrapBoolean(anf_arg800);
if(R.isPyretTrue(anf_if807)) {
$step794 = 4;
} else {
$step794 = 7;
}
break;
case 4: $step794 = 5;
$al799 = L[434];
if(!(R.isFunction(_minus11))) {
R.ffi.throwNonFunApp($al799,_minus11);
}
$ans798 = _minus11.app(n796,(1));
break;
case 5: var anf_arg802 = $ans798;
$step794 = 6;
$al799 = L[433];
if(!(R.isFunction(repeat801.$var))) {
R.ffi.throwNonFunApp($al799,repeat801.$var);
}
$ans798 = repeat801.$var.app(anf_arg802,e797);
break;
case 6: var anf_arg803 = $ans798;
$step794 = 11;
$al799 = L[432];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al799,link70.$var);
}
$ans798 = link70.$var.app(e797,anf_arg803);
break;
case 7: $step794 = 8;
$al799 = L[437];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al799,equal$always8);
}
$ans798 = equal$always8.app(n796,(0));
break;
case 8: var anf_arg804 = $ans798;
$al799 = L[435];
var anf_if805 = R.checkWrapBoolean(anf_arg804);
if(R.isPyretTrue(anf_if805)) {
$step794 = 9;
} else {
$step794 = 10;
}
break;
case 9: $step794 = 11;
$ans798 = empty149.$var;
break;
case 10: $step794 = 11;
$al799 = L[436];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al799,raise5);
}
$ans798 = raise5.app(("repeat: can't have a negative argument'"));
break;
case 11: var ann_check_temp806 = $ans798;
$step794 = 12;
$al799 = L[438];
R._checkAnn(L[438],List53,ann_check_temp806);
break;
case 12: $step794 = 13;
$ans798 = ann_check_temp806;
break;
case 13: ++R.GAS;
return $ans798;
default: throw "No case numbered " + $step794 + " in $temp_lam795";
}
}
} catch($e808) {
if(R.isCont($e808) && ($step794 !== 13)) {
$e808.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al799,$temp_lam795,$step794,[n796,e797],[ann_check_temp806]);
}
if(R.isPyretException($e808)) {
$e808.pyretStack.push($al799);
}
throw $e808;
}
};
var anf_assign809 = R.makeFunction($temp_lam795);
repeat801.$var = anf_assign809;
var $temp_lam811 = function($f812,$lst813) {
var $step810 = 0;
var $ans814 = D;
var $al815 = L[454];
try {
if(R.isActivationRecord($f812)) {
$step810 = $f812.step;
$al815 = $f812.from;
$ans814 = $f812.ans;
f812 = $f812.args[0];
lst813 = $f812.args[1];
ann_check_temp825 = $f812.vars[0];
arg_821 = $f812.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[454],2,$t);
}
var f812 = $f812;
var lst813 = $lst813;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step810) {
case 0: $step810 = 1;
$al815 = L[452];
R._checkAnn(L[452],R.Function,f812);
break;
case 1: $step810 = 2;
$al815 = L[453];
R._checkAnn(L[453],List53,lst813);
break;
case 2: $step810 = 3;
$al815 = L[442];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al815,is$empty435.$var);
}
$ans814 = is$empty435.$var.app(lst813);
break;
case 3: var anf_arg816 = $ans814;
$al815 = L[442];
var anf_if826 = R.checkWrapBoolean(anf_arg816);
if(R.isPyretTrue(anf_if826)) {
$step810 = 4;
} else {
$step810 = 5;
}
break;
case 4: $step810 = 10;
$ans814 = empty149.$var;
break;
case 5: var anf_arg817 = G(lst813,"first",L[443]);
$step810 = 6;
$al815 = L[444];
if(!(R.isFunction(f812))) {
R.ffi.throwNonFunApp($al815,f812);
}
$ans814 = f812.app(anf_arg817);
break;
case 6: var anf_arg818 = $ans814;
$al815 = L[444];
var anf_if824 = R.checkWrapBoolean(anf_arg818);
if(R.isPyretTrue(anf_if824)) {
$step810 = 7;
} else {
$step810 = 9;
}
break;
case 7: var arg_821 = G(lst813,"first",L[445]);
var anf_arg820 = G(lst813,"rest",L[446]);
$step810 = 8;
$al815 = L[448];
if(!(R.isFunction(filter819.$var))) {
R.ffi.throwNonFunApp($al815,filter819.$var);
}
$ans814 = filter819.$var.app(f812,anf_arg820);
break;
case 8: var anf_arg822 = $ans814;
$step810 = 10;
$al815 = L[447];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al815,link70.$var);
}
$ans814 = link70.$var.app(arg_821,anf_arg822);
break;
case 9: var anf_arg823 = G(lst813,"rest",L[449]);
$step810 = 10;
$al815 = L[450];
if(!(R.isFunction(filter819.$var))) {
R.ffi.throwNonFunApp($al815,filter819.$var);
}
$ans814 = filter819.$var.app(f812,anf_arg823);
break;
case 10: var ann_check_temp825 = $ans814;
$step810 = 11;
$al815 = L[451];
R._checkAnn(L[451],List53,ann_check_temp825);
break;
case 11: $step810 = 12;
$ans814 = ann_check_temp825;
break;
case 12: ++R.GAS;
return $ans814;
default: throw "No case numbered " + $step810 + " in $temp_lam811";
}
}
} catch($e827) {
if(R.isCont($e827) && ($step810 !== 12)) {
$e827.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al815,$temp_lam811,$step810,[f812,lst813],[ann_check_temp825,arg_821]);
}
if(R.isPyretException($e827)) {
$e827.pyretStack.push($al815);
}
throw $e827;
}
};
var anf_assign828 = R.makeFunction($temp_lam811);
filter819.$var = anf_assign828;
var $temp_lam830 = function($f831,$lst832) {
var $step829 = 0;
var $ans833 = D;
var $al834 = L[471];
try {
if(R.isActivationRecord($f831)) {
$step829 = $f831.step;
$al834 = $f831.from;
$ans833 = $f831.ans;
f831 = $f831.args[0];
lst832 = $f831.args[1];
ann_check_temp855 = $f831.vars[0];
is$false849 = $f831.vars[1];
is$true846 = $f831.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[471],2,$t);
}
var f831 = $f831;
var lst832 = $lst832;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step829) {
case 0: $step829 = 1;
$al834 = L[469];
R._checkAnn(L[469],R.Function,f831);
break;
case 1: $step829 = 2;
$al834 = L[470];
R._checkAnn(L[470],List53,lst832);
break;
case 2: var is$true846 = {"$var":empty149.$var};
var is$false849 = {"$var":empty149.$var};
var help841 = {"$var":D};
var $temp_lam836 = function($inner$lst837) {
var $step835 = 0;
var $ans838 = D;
var $al839 = L[464];
try {
if(R.isActivationRecord($inner$lst837)) {
$step835 = $inner$lst837.step;
$al839 = $inner$lst837.from;
$ans838 = $inner$lst837.ans;
inner$lst837 = $inner$lst837.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[464],1,$t);
}
var inner$lst837 = $inner$lst837;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step835) {
case 0: $step835 = 1;
$al839 = L[455];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al839,is$empty435.$var);
}
$ans838 = is$empty435.$var.app(inner$lst837);
break;
case 1: var anf_arg840 = $ans838;
$al839 = L[455];
var anf_if852 = R.checkWrapBoolean(anf_arg840);
if(R.isPyretTrue(anf_if852)) {
$step835 = 2;
} else {
$step835 = 3;
}
break;
case 2: $step835 = 10;
$ans838 = nothing3;
break;
case 3: var anf_arg842 = G(inner$lst837,"rest",L[456]);
$step835 = 4;
$al839 = L[463];
if(!(R.isFunction(help841.$var))) {
R.ffi.throwNonFunApp($al839,help841.$var);
}
$ans838 = help841.$var.app(anf_arg842);
break;
case 4: var anf_arg843 = G(inner$lst837,"first",L[457]);
$step835 = 5;
$al839 = L[458];
if(!(R.isFunction(f831))) {
R.ffi.throwNonFunApp($al839,f831);
}
$ans838 = f831.app(anf_arg843);
break;
case 5: var anf_arg844 = $ans838;
$al839 = L[458];
var anf_if851 = R.checkWrapBoolean(anf_arg844);
if(R.isPyretTrue(anf_if851)) {
$step835 = 6;
} else {
$step835 = 8;
}
break;
case 6: var arg_845 = G(inner$lst837,"first",L[459]);
$step835 = 7;
$al839 = L[460];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al839,link70.$var);
}
$ans838 = link70.$var.app(arg_845,is$true846.$var);
break;
case 7: var anf_assign847 = $ans838;
$step835 = 10;
$ans838 = is$true846.$var = anf_assign847;
break;
case 8: var arg_848 = G(inner$lst837,"first",L[461]);
$step835 = 9;
$al839 = L[462];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al839,link70.$var);
}
$ans838 = link70.$var.app(arg_848,is$false849.$var);
break;
case 9: var anf_assign850 = $ans838;
$step835 = 10;
$ans838 = is$false849.$var = anf_assign850;
break;
case 10: ++R.GAS;
return $ans838;
default: throw "No case numbered " + $step835 + " in $temp_lam836";
}
}
} catch($e853) {
if(R.isCont($e853) && ($step835 !== 10)) {
$e853.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al839,$temp_lam836,$step835,[inner$lst837],[]);
}
if(R.isPyretException($e853)) {
$e853.pyretStack.push($al839);
}
throw $e853;
}
};
var anf_assign854 = R.makeFunction($temp_lam836);
help841.$var = anf_assign854;
$step829 = 3;
$al834 = L[468];
if(!(R.isFunction(help841.$var))) {
R.ffi.throwNonFunApp($al834,help841.$var);
}
$ans833 = help841.$var.app(lst832);
break;
case 3: var ann_check_temp855 = R.makeObject({"is-true":is$true846.$var,
"is-false":is$false849.$var});
$step829 = 4;
$al834 = L[467];
R._checkAnn(L[467],R.makeRecordAnn(["is-true","is-false"],[L[465],L[466]],{"is-true":List53,
"is-false":List53}),ann_check_temp855);
break;
case 4: $step829 = 5;
$ans833 = ann_check_temp855;
break;
case 5: ++R.GAS;
return $ans833;
default: throw "No case numbered " + $step829 + " in $temp_lam830";
}
}
} catch($e856) {
if(R.isCont($e856) && ($step829 !== 5)) {
$e856.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al834,$temp_lam830,$step829,[f831,lst832],[ann_check_temp855,is$false849,is$true846]);
}
if(R.isPyretException($e856)) {
$e856.pyretStack.push($al834);
}
throw $e856;
}
};
var anf_assign857 = R.makeFunction($temp_lam830);
partition338.$var = anf_assign857;
var $temp_lam859 = function($lst860,$elt861) {
var $step858 = 0;
var $ans862 = D;
var $al863 = L[484];
try {
if(R.isActivationRecord($lst860)) {
$step858 = $lst860.step;
$al863 = $lst860.from;
$ans862 = $lst860.ans;
lst860 = $lst860.args[0];
elt861 = $lst860.args[1];
ann_check_temp872 = $lst860.vars[0];
anf_arg869 = $lst860.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[484],2,$t);
}
var lst860 = $lst860;
var elt861 = $elt861;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step858) {
case 0: $step858 = 1;
$al863 = L[482];
R._checkAnn(L[482],List53,lst860);
break;
case 1: $step858 = 2;
$al863 = L[483];
R._checkAnn(L[483],R.Any,elt861);
break;
case 2: $step858 = 3;
$al863 = L[472];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al863,is$empty435.$var);
}
$ans862 = is$empty435.$var.app(lst860);
break;
case 3: var anf_arg864 = $ans862;
$al863 = L[472];
var anf_if873 = R.checkWrapBoolean(anf_arg864);
if(R.isPyretTrue(anf_if873)) {
$step858 = 4;
} else {
$step858 = 5;
}
break;
case 4: $step858 = 10;
$ans862 = empty149.$var;
break;
case 5: var anf_arg865 = G(lst860,"first",L[473]);
$step858 = 6;
$al863 = L[474];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al863,equal$always8);
}
$ans862 = equal$always8.app(elt861,anf_arg865);
break;
case 6: var anf_arg866 = $ans862;
$al863 = L[474];
var anf_if871 = R.checkWrapBoolean(anf_arg866);
if(R.isPyretTrue(anf_if871)) {
$step858 = 7;
} else {
$step858 = 8;
}
break;
case 7: var anf_arg867 = G(lst860,"rest",L[475]);
$step858 = 10;
$al863 = L[476];
if(!(R.isFunction(remove125.$var))) {
R.ffi.throwNonFunApp($al863,remove125.$var);
}
$ans862 = remove125.$var.app(anf_arg867,elt861);
break;
case 8: var anf_arg869 = G(lst860,"first",L[477]);
var anf_arg868 = G(lst860,"rest",L[478]);
$step858 = 9;
$al863 = L[480];
if(!(R.isFunction(remove125.$var))) {
R.ffi.throwNonFunApp($al863,remove125.$var);
}
$ans862 = remove125.$var.app(anf_arg868,elt861);
break;
case 9: var anf_arg870 = $ans862;
$step858 = 10;
$al863 = L[479];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al863,link70.$var);
}
$ans862 = link70.$var.app(anf_arg869,anf_arg870);
break;
case 10: var ann_check_temp872 = $ans862;
$step858 = 11;
$al863 = L[481];
R._checkAnn(L[481],List53,ann_check_temp872);
break;
case 11: $step858 = 12;
$ans862 = ann_check_temp872;
break;
case 12: ++R.GAS;
return $ans862;
default: throw "No case numbered " + $step858 + " in $temp_lam859";
}
}
} catch($e874) {
if(R.isCont($e874) && ($step858 !== 12)) {
$e874.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al863,$temp_lam859,$step858,[lst860,elt861],[ann_check_temp872,anf_arg869]);
}
if(R.isPyretException($e874)) {
$e874.pyretStack.push($al863);
}
throw $e874;
}
};
var anf_assign875 = R.makeFunction($temp_lam859);
remove125.$var = anf_assign875;
var $temp_lam877 = function($f878,$lst879) {
var $step876 = 0;
var $ans880 = D;
var $al881 = L[496];
try {
if(R.isActivationRecord($f878)) {
$step876 = $f878.step;
$al881 = $f878.from;
$ans880 = $f878.ans;
f878 = $f878.args[0];
lst879 = $f878.args[1];
ann_check_temp889 = $f878.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[496],2,$t);
}
var f878 = $f878;
var lst879 = $lst879;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step876) {
case 0: $step876 = 1;
$al881 = L[494];
R._checkAnn(L[494],R.Function,f878);
break;
case 1: $step876 = 2;
$al881 = L[495];
R._checkAnn(L[495],List53,lst879);
break;
case 2: $step876 = 3;
$al881 = L[485];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al881,is$empty435.$var);
}
$ans880 = is$empty435.$var.app(lst879);
break;
case 3: var anf_arg882 = $ans880;
$al881 = L[485];
var anf_if890 = R.checkWrapBoolean(anf_arg882);
if(R.isPyretTrue(anf_if890)) {
$step876 = 4;
} else {
$step876 = 5;
}
break;
case 4: $step876 = 9;
$ans880 = none166;
break;
case 5: var anf_arg883 = G(lst879,"first",L[486]);
$step876 = 6;
$al881 = L[487];
if(!(R.isFunction(f878))) {
R.ffi.throwNonFunApp($al881,f878);
}
$ans880 = f878.app(anf_arg883);
break;
case 6: var anf_arg884 = $ans880;
$al881 = L[487];
var anf_if888 = R.checkWrapBoolean(anf_arg884);
if(R.isPyretTrue(anf_if888)) {
$step876 = 7;
} else {
$step876 = 8;
}
break;
case 7: var anf_arg886 = G(lst879,"first",L[488]);
$step876 = 9;
$al881 = L[489];
if(!(R.isFunction(some885))) {
R.ffi.throwNonFunApp($al881,some885);
}
$ans880 = some885.app(anf_arg886);
break;
case 8: var anf_arg887 = G(lst879,"rest",L[490]);
$step876 = 9;
$al881 = L[491];
if(!(R.isFunction(find347.$var))) {
R.ffi.throwNonFunApp($al881,find347.$var);
}
$ans880 = find347.$var.app(f878,anf_arg887);
break;
case 9: var ann_check_temp889 = $ans880;
$step876 = 10;
$al881 = L[493];
R._checkAnn(L[493],R.getDotAnn(L[492],"O",O30,"Option"),ann_check_temp889);
break;
case 10: $step876 = 11;
$ans880 = ann_check_temp889;
break;
case 11: ++R.GAS;
return $ans880;
default: throw "No case numbered " + $step876 + " in $temp_lam877";
}
}
} catch($e891) {
if(R.isCont($e891) && ($step876 !== 11)) {
$e891.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al881,$temp_lam877,$step876,[f878,lst879],[ann_check_temp889]);
}
if(R.isPyretException($e891)) {
$e891.pyretStack.push($al881);
}
throw $e891;
}
};
var anf_assign892 = R.makeFunction($temp_lam877);
find347.$var = anf_assign892;
var $temp_lam894 = function($n895,$lst896) {
var $step893 = 0;
var $ans897 = D;
var $al898 = L[516];
try {
if(R.isActivationRecord($n895)) {
$step893 = $n895.step;
$al898 = $n895.from;
$ans897 = $n895.ans;
n895 = $n895.args[0];
lst896 = $n895.args[1];
ann_check_temp920 = $n895.vars[0];
suffix907 = $n895.vars[1];
prefix914 = $n895.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[516],2,$t);
}
var n895 = $n895;
var lst896 = $lst896;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step893) {
case 0: $step893 = 1;
$al898 = L[514];
R._checkAnn(L[514],$type$Number1,n895);
break;
case 1: $step893 = 2;
$al898 = L[515];
R._checkAnn(L[515],List53,lst896);
break;
case 2: $step893 = 3;
$al898 = L[513];
if(!(R.isFunction(_lessthan9))) {
R.ffi.throwNonFunApp($al898,_lessthan9);
}
$ans897 = _lessthan9.app(n895,(0));
break;
case 3: var anf_arg899 = $ans897;
$al898 = L[497];
var anf_if921 = R.checkWrapBoolean(anf_arg899);
if(R.isPyretTrue(anf_if921)) {
$step893 = 4;
} else {
$step893 = 6;
}
break;
case 4: $step893 = 5;
$al898 = L[498];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al898,raise5);
}
$ans897 = raise5.app(("Invalid index"));
break;
case 5: $step893 = 7;
$ans897 = nothing3;
break;
case 6: $step893 = 7;
$ans897 = nothing3;
break;
case 7: var prefix914 = {"$var":empty149.$var};
var suffix907 = {"$var":empty149.$var};
var help909 = {"$var":D};
var $temp_lam901 = function($ind902,$l903) {
var $step900 = 0;
var $ans904 = D;
var $al905 = L[508];
try {
if(R.isActivationRecord($ind902)) {
$step900 = $ind902.step;
$al905 = $ind902.from;
$ans904 = $ind902.ans;
ind902 = $ind902.args[0];
l903 = $ind902.args[1];
rst911 = $ind902.vars[0];
fst912 = $ind902.vars[1];
cases908 = $ind902.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[508],2,$t);
}
var ind902 = $ind902;
var l903 = $l903;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step900) {
case 0: $step900 = 1;
$al905 = L[499];
if(!(R.isFunction(equal$always8))) {
R.ffi.throwNonFunApp($al905,equal$always8);
}
$ans904 = equal$always8.app(ind902,(0));
break;
case 1: var anf_arg906 = $ans904;
$al905 = L[499];
var anf_if917 = R.checkWrapBoolean(anf_arg906);
if(R.isPyretTrue(anf_if917)) {
$step900 = 2;
} else {
$step900 = 3;
}
break;
case 2: $step900 = 11;
$ans904 = suffix907.$var = l903;
break;
case 3: var cases908 = l903;
$step900 = 4;
$al905 = L[507];
R._checkAnn(L[507],List53,cases908);
break;
case 4: var $cases_dispatch916 = {"empty":5,
"link":6};
$al905 = L[506];
$step900 = $cases_dispatch916[cases908.$name] || 10;
break;
case 5: if(cases908.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[501],false);
}
$step900 = 11;
$al905 = L[500];
if(!(R.isFunction(raise5))) {
R.ffi.throwNonFunApp($al905,raise5);
}
$ans904 = raise5.app(("Index too large"));
break;
case 6: if(cases908.$arity >= 0) {
if(2 !== cases908.$arity) {
R.ffi.throwCasesArityErrorC(L[505],2,cases908.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[505],true);
}
var $fn733 = cases908.$constructor.$fieldNames;
var fst912 = R.derefField(cases908.dict[$fn733[0]],cases908.$mut_fields_mask[0],false);
var rst911 = R.derefField(cases908.dict[$fn733[1]],cases908.$mut_fields_mask[1],false);
$step900 = 7;
$al905 = L[504];
if(!(R.isFunction(_minus11))) {
R.ffi.throwNonFunApp($al905,_minus11);
}
$ans904 = _minus11.app(ind902,(1));
break;
case 7: var anf_arg910 = $ans904;
$step900 = 8;
$al905 = L[503];
if(!(R.isFunction(help909.$var))) {
R.ffi.throwNonFunApp($al905,help909.$var);
}
$ans904 = help909.$var.app(anf_arg910,rst911);
break;
case 8: var arg_913 = fst912;
$step900 = 9;
$al905 = L[502];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al905,link70.$var);
}
$ans904 = link70.$var.app(arg_913,prefix914.$var);
break;
case 9: var anf_assign915 = $ans904;
$step900 = 11;
$ans904 = prefix914.$var = anf_assign915;
break;
case 10: $step900 = 11;
$al905 = L[506];
$ans904 = R.throwNoCasesMatched(L[506],cases908);
break;
case 11: ++R.GAS;
return $ans904;
default: throw "No case numbered " + $step900 + " in $temp_lam901";
}
}
} catch($e918) {
if(R.isCont($e918) && ($step900 !== 11)) {
$e918.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al905,$temp_lam901,$step900,[ind902,l903],[rst911,fst912,cases908]);
}
if(R.isPyretException($e918)) {
$e918.pyretStack.push($al905);
}
throw $e918;
}
};
var anf_assign919 = R.makeFunction($temp_lam901);
help909.$var = anf_assign919;
$step893 = 8;
$al898 = L[512];
if(!(R.isFunction(help909.$var))) {
R.ffi.throwNonFunApp($al898,help909.$var);
}
$ans897 = help909.$var.app(n895,lst896);
break;
case 8: var ann_check_temp920 = R.makeObject({"prefix":prefix914.$var,
"suffix":suffix907.$var});
$step893 = 9;
$al898 = L[511];
R._checkAnn(L[511],R.makeRecordAnn(["prefix","suffix"],[L[509],L[510]],{"prefix":List53,
"suffix":List53}),ann_check_temp920);
break;
case 9: $step893 = 10;
$ans897 = ann_check_temp920;
break;
case 10: ++R.GAS;
return $ans897;
default: throw "No case numbered " + $step893 + " in $temp_lam894";
}
}
} catch($e922) {
if(R.isCont($e922) && ($step893 !== 10)) {
$e922.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al898,$temp_lam894,$step893,[n895,lst896],[ann_check_temp920,suffix907,prefix914]);
}
if(R.isPyretException($e922)) {
$e922.pyretStack.push($al898);
}
throw $e922;
}
};
var anf_assign923 = R.makeFunction($temp_lam894);
split$at79.$var = anf_assign923;
var $temp_lam925 = function($f926,$lst927) {
var $step924 = 0;
var $ans928 = D;
var $al929 = L[521];
try {
if(R.isActivationRecord($f926)) {
$step924 = $f926.step;
$al929 = $f926.from;
$ans928 = $f926.ans;
f926 = $f926.args[0];
lst927 = $f926.args[1];
ann_check_temp931 = $f926.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[521],2,$t);
}
var f926 = $f926;
var lst927 = $lst927;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step924) {
case 0: $step924 = 1;
$al929 = L[519];
R._checkAnn(L[519],R.Function,f926);
break;
case 1: $step924 = 2;
$al929 = L[520];
R._checkAnn(L[520],List53,lst927);
break;
case 2: $step924 = 3;
$al929 = L[517];
$field930 = R.getColonFieldLoc(lst927,"any",L[517]);
if(R.isMethod($field930)) {
$ans928 = $field930.full_meth(lst927,f926);
} else {
if(!(R.isFunction($field930))) {
R.ffi.throwNonFunApp(L[517],$field930);
}
$ans928 = $field930.app(f926);
}
break;
case 3: var ann_check_temp931 = $ans928;
$step924 = 4;
$al929 = L[518];
R._checkAnn(L[518],$type$Boolean4,ann_check_temp931);
break;
case 4: $step924 = 5;
$ans928 = ann_check_temp931;
break;
case 5: ++R.GAS;
return $ans928;
default: throw "No case numbered " + $step924 + " in $temp_lam925";
}
}
} catch($e932) {
if(R.isCont($e932) && ($step924 !== 5)) {
$e932.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al929,$temp_lam925,$step924,[f926,lst927],[ann_check_temp931]);
}
if(R.isPyretException($e932)) {
$e932.pyretStack.push($al929);
}
throw $e932;
}
};
var anf_assign933 = R.makeFunction($temp_lam925);
any934.$var = anf_assign933;
var $temp_lam936 = function($f937,$lst938) {
var $step935 = 0;
var $ans939 = D;
var $al940 = L[526];
try {
if(R.isActivationRecord($f937)) {
$step935 = $f937.step;
$al940 = $f937.from;
$ans939 = $f937.ans;
f937 = $f937.args[0];
lst938 = $f937.args[1];
ann_check_temp942 = $f937.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[526],2,$t);
}
var f937 = $f937;
var lst938 = $lst938;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step935) {
case 0: $step935 = 1;
$al940 = L[524];
R._checkAnn(L[524],R.Function,f937);
break;
case 1: $step935 = 2;
$al940 = L[525];
R._checkAnn(L[525],List53,lst938);
break;
case 2: $step935 = 3;
$al940 = L[522];
$field941 = R.getColonFieldLoc(lst938,"all",L[522]);
if(R.isMethod($field941)) {
$ans939 = $field941.full_meth(lst938,f937);
} else {
if(!(R.isFunction($field941))) {
R.ffi.throwNonFunApp(L[522],$field941);
}
$ans939 = $field941.app(f937);
}
break;
case 3: var ann_check_temp942 = $ans939;
$step935 = 4;
$al940 = L[523];
R._checkAnn(L[523],$type$Boolean4,ann_check_temp942);
break;
case 4: $step935 = 5;
$ans939 = ann_check_temp942;
break;
case 5: ++R.GAS;
return $ans939;
default: throw "No case numbered " + $step935 + " in $temp_lam936";
}
}
} catch($e943) {
if(R.isCont($e943) && ($step935 !== 5)) {
$e943.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al940,$temp_lam936,$step935,[f937,lst938],[ann_check_temp942]);
}
if(R.isPyretException($e943)) {
$e943.pyretStack.push($al940);
}
throw $e943;
}
};
var anf_assign944 = R.makeFunction($temp_lam936);
all945.$var = anf_assign944;
var $temp_lam947 = function($f948,$lst1949,$lst2950) {
var $step946 = 0;
var $ans951 = D;
var $al952 = L[543];
try {
if(R.isActivationRecord($f948)) {
$step946 = $f948.step;
$al952 = $f948.from;
$ans951 = $f948.ans;
f948 = $f948.args[0];
lst1949 = $f948.args[1];
lst2950 = $f948.args[2];
ann_check_temp974 = $f948.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[543],3,$t);
}
var f948 = $f948;
var lst1949 = $lst1949;
var lst2950 = $lst2950;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step946) {
case 0: $step946 = 1;
$al952 = L[540];
R._checkAnn(L[540],R.Function,f948);
break;
case 1: $step946 = 2;
$al952 = L[541];
R._checkAnn(L[541],List53,lst1949);
break;
case 2: $step946 = 3;
$al952 = L[542];
R._checkAnn(L[542],List53,lst2950);
break;
case 3: var help965 = {"$var":D};
var $temp_lam954 = function($l1955,$l2956) {
var $step953 = 0;
var $ans957 = D;
var $al958 = L[537];
try {
if(R.isActivationRecord($l1955)) {
$step953 = $l1955.step;
$al958 = $l1955.from;
$ans957 = $l1955.ans;
l1955 = $l1955.args[0];
l2956 = $l1955.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[537],2,$t);
}
var l1955 = $l1955;
var l2956 = $l2956;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step953) {
case 0: $step953 = 1;
$al958 = L[536];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al958,is$empty435.$var);
}
$ans957 = is$empty435.$var.app(l1955);
break;
case 1: var anf_arg959 = $ans957;
$al958 = L[527];
var anf_if971 = R.checkWrapBoolean(anf_arg959);
if(R.isPyretTrue(anf_if971)) {
$step953 = 2;
} else {
$step953 = 3;
}
break;
case 2: $step953 = 5;
$ans957 = (true);
break;
case 3: $step953 = 4;
$al958 = L[528];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al958,is$empty435.$var);
}
$ans957 = is$empty435.$var.app(l2956);
break;
case 4: var anf_arg960 = $ans957;
$step953 = 5;
$al958 = L[527];
$ans957 = R.checkWrapBoolean(anf_arg960);
break;
case 5: var anf_arg961 = $ans957;
$al958 = L[527];
var anf_if970 = R.checkWrapBoolean(anf_arg961);
if(R.isPyretTrue(anf_if970)) {
$step953 = 6;
} else {
$step953 = 7;
}
break;
case 6: $step953 = 12;
$ans957 = (true);
break;
case 7: var anf_arg962 = G(l1955,"first",L[529]);
var anf_arg963 = G(l2956,"first",L[530]);
$step953 = 8;
$al958 = L[535];
if(!(R.isFunction(f948))) {
R.ffi.throwNonFunApp($al958,f948);
}
$ans957 = f948.app(anf_arg962,anf_arg963);
break;
case 8: var anf_arg964 = $ans957;
$al958 = L[531];
var anf_if969 = R.checkWrapBoolean(anf_arg964);
if(R.isPyretTrue(anf_if969)) {
$step953 = 9;
} else {
$step953 = 11;
}
break;
case 9: var anf_arg966 = G(l1955,"rest",L[532]);
var anf_arg967 = G(l2956,"rest",L[533]);
$step953 = 10;
$al958 = L[534];
if(!(R.isFunction(help965.$var))) {
R.ffi.throwNonFunApp($al958,help965.$var);
}
$ans957 = help965.$var.app(anf_arg966,anf_arg967);
break;
case 10: var anf_arg968 = $ans957;
$step953 = 12;
$al958 = L[531];
$ans957 = R.checkWrapBoolean(anf_arg968);
break;
case 11: $step953 = 12;
$ans957 = (false);
break;
case 12: ++R.GAS;
return $ans957;
default: throw "No case numbered " + $step953 + " in $temp_lam954";
}
}
} catch($e972) {
if(R.isCont($e972) && ($step953 !== 12)) {
$e972.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al958,$temp_lam954,$step953,[l1955,l2956],[]);
}
if(R.isPyretException($e972)) {
$e972.pyretStack.push($al958);
}
throw $e972;
}
};
var anf_assign973 = R.makeFunction($temp_lam954);
help965.$var = anf_assign973;
$step946 = 4;
$al952 = L[539];
if(!(R.isFunction(help965.$var))) {
R.ffi.throwNonFunApp($al952,help965.$var);
}
$ans951 = help965.$var.app(lst1949,lst2950);
break;
case 4: var ann_check_temp974 = $ans951;
$step946 = 5;
$al952 = L[538];
R._checkAnn(L[538],$type$Boolean4,ann_check_temp974);
break;
case 5: $step946 = 6;
$ans951 = ann_check_temp974;
break;
case 6: ++R.GAS;
return $ans951;
default: throw "No case numbered " + $step946 + " in $temp_lam947";
}
}
} catch($e975) {
if(R.isCont($e975) && ($step946 !== 6)) {
$e975.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al952,$temp_lam947,$step946,[f948,lst1949,lst2950],[ann_check_temp974]);
}
if(R.isPyretException($e975)) {
$e975.pyretStack.push($al952);
}
throw $e975;
}
};
var anf_assign976 = R.makeFunction($temp_lam947);
all2977.$var = anf_assign976;
var $temp_lam979 = function($f980,$lst981) {
var $step978 = 0;
var $ans982 = D;
var $al983 = L[553];
try {
if(R.isActivationRecord($f980)) {
$step978 = $f980.step;
$al983 = $f980.from;
$ans982 = $f980.ans;
f980 = $f980.args[0];
lst981 = $f980.args[1];
ann_check_temp990 = $f980.vars[0];
arg_988 = $f980.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[553],2,$t);
}
var f980 = $f980;
var lst981 = $lst981;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step978) {
case 0: $step978 = 1;
$al983 = L[551];
R._checkAnn(L[551],R.Function,f980);
break;
case 1: $step978 = 2;
$al983 = L[552];
R._checkAnn(L[552],List53,lst981);
break;
case 2: $step978 = 3;
$al983 = L[544];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al983,is$empty435.$var);
}
$ans982 = is$empty435.$var.app(lst981);
break;
case 3: var anf_arg984 = $ans982;
$al983 = L[544];
var anf_if991 = R.checkWrapBoolean(anf_arg984);
if(R.isPyretTrue(anf_if991)) {
$step978 = 4;
} else {
$step978 = 5;
}
break;
case 4: $step978 = 8;
$ans982 = empty149.$var;
break;
case 5: var anf_arg985 = G(lst981,"first",L[545]);
$step978 = 6;
$al983 = L[549];
if(!(R.isFunction(f980))) {
R.ffi.throwNonFunApp($al983,f980);
}
$ans982 = f980.app(anf_arg985);
break;
case 6: var arg_988 = $ans982;
var anf_arg987 = G(lst981,"rest",L[546]);
$step978 = 7;
$al983 = L[548];
if(!(R.isFunction(map986.$var))) {
R.ffi.throwNonFunApp($al983,map986.$var);
}
$ans982 = map986.$var.app(f980,anf_arg987);
break;
case 7: var anf_arg989 = $ans982;
$step978 = 8;
$al983 = L[547];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al983,link70.$var);
}
$ans982 = link70.$var.app(arg_988,anf_arg989);
break;
case 8: var ann_check_temp990 = $ans982;
$step978 = 9;
$al983 = L[550];
R._checkAnn(L[550],List53,ann_check_temp990);
break;
case 9: $step978 = 10;
$ans982 = ann_check_temp990;
break;
case 10: ++R.GAS;
return $ans982;
default: throw "No case numbered " + $step978 + " in $temp_lam979";
}
}
} catch($e992) {
if(R.isCont($e992) && ($step978 !== 10)) {
$e992.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al983,$temp_lam979,$step978,[f980,lst981],[ann_check_temp990,arg_988]);
}
if(R.isPyretException($e992)) {
$e992.pyretStack.push($al983);
}
throw $e992;
}
};
var anf_assign993 = R.makeFunction($temp_lam979);
map986.$var = anf_assign993;
var $temp_lam995 = function($f996,$l1997,$l2998) {
var $step994 = 0;
var $ans999 = D;
var $al1000 = L[568];
try {
if(R.isActivationRecord($f996)) {
$step994 = $f996.step;
$al1000 = $f996.from;
$ans999 = $f996.ans;
f996 = $f996.args[0];
l1997 = $f996.args[1];
l2998 = $f996.args[2];
ann_check_temp1011 = $f996.vars[0];
arg_1009 = $f996.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[568],3,$t);
}
var f996 = $f996;
var l1997 = $l1997;
var l2998 = $l2998;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step994) {
case 0: $step994 = 1;
$al1000 = L[565];
R._checkAnn(L[565],R.Function,f996);
break;
case 1: $step994 = 2;
$al1000 = L[566];
R._checkAnn(L[566],List53,l1997);
break;
case 2: $step994 = 3;
$al1000 = L[567];
R._checkAnn(L[567],List53,l2998);
break;
case 3: $step994 = 4;
$al1000 = L[564];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1000,is$empty435.$var);
}
$ans999 = is$empty435.$var.app(l1997);
break;
case 4: var anf_arg1001 = $ans999;
$al1000 = L[554];
var anf_if1013 = R.checkWrapBoolean(anf_arg1001);
if(R.isPyretTrue(anf_if1013)) {
$step994 = 5;
} else {
$step994 = 6;
}
break;
case 5: $step994 = 8;
$ans999 = (true);
break;
case 6: $step994 = 7;
$al1000 = L[555];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1000,is$empty435.$var);
}
$ans999 = is$empty435.$var.app(l2998);
break;
case 7: var anf_arg1002 = $ans999;
$step994 = 8;
$al1000 = L[554];
$ans999 = R.checkWrapBoolean(anf_arg1002);
break;
case 8: var anf_arg1003 = $ans999;
$al1000 = L[554];
var anf_if1012 = R.checkWrapBoolean(anf_arg1003);
if(R.isPyretTrue(anf_if1012)) {
$step994 = 9;
} else {
$step994 = 10;
}
break;
case 9: $step994 = 13;
$ans999 = empty149.$var;
break;
case 10: var anf_arg1004 = G(l1997,"first",L[556]);
var anf_arg1005 = G(l2998,"first",L[557]);
$step994 = 11;
$al1000 = L[562];
if(!(R.isFunction(f996))) {
R.ffi.throwNonFunApp($al1000,f996);
}
$ans999 = f996.app(anf_arg1004,anf_arg1005);
break;
case 11: var arg_1009 = $ans999;
var anf_arg1007 = G(l1997,"rest",L[558]);
var anf_arg1008 = G(l2998,"rest",L[559]);
$step994 = 12;
$al1000 = L[561];
if(!(R.isFunction(map21006.$var))) {
R.ffi.throwNonFunApp($al1000,map21006.$var);
}
$ans999 = map21006.$var.app(f996,anf_arg1007,anf_arg1008);
break;
case 12: var anf_arg1010 = $ans999;
$step994 = 13;
$al1000 = L[560];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1000,link70.$var);
}
$ans999 = link70.$var.app(arg_1009,anf_arg1010);
break;
case 13: var ann_check_temp1011 = $ans999;
$step994 = 14;
$al1000 = L[563];
R._checkAnn(L[563],List53,ann_check_temp1011);
break;
case 14: $step994 = 15;
$ans999 = ann_check_temp1011;
break;
case 15: ++R.GAS;
return $ans999;
default: throw "No case numbered " + $step994 + " in $temp_lam995";
}
}
} catch($e1014) {
if(R.isCont($e1014) && ($step994 !== 15)) {
$e1014.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1000,$temp_lam995,$step994,[f996,l1997,l2998],[ann_check_temp1011,arg_1009]);
}
if(R.isPyretException($e1014)) {
$e1014.pyretStack.push($al1000);
}
throw $e1014;
}
};
var anf_assign1015 = R.makeFunction($temp_lam995);
map21006.$var = anf_assign1015;
var $temp_lam1017 = function($f1018,$l11019,$l21020,$l31021) {
var $step1016 = 0;
var $ans1022 = D;
var $al1023 = L[587];
try {
if(R.isActivationRecord($f1018)) {
$step1016 = $f1018.step;
$al1023 = $f1018.from;
$ans1022 = $f1018.ans;
f1018 = $f1018.args[0];
l11019 = $f1018.args[1];
l21020 = $f1018.args[2];
l31021 = $f1018.args[3];
ann_check_temp1038 = $f1018.vars[0];
arg_1036 = $f1018.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[587],4,$t);
}
var f1018 = $f1018;
var l11019 = $l11019;
var l21020 = $l21020;
var l31021 = $l31021;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1016) {
case 0: $step1016 = 1;
$al1023 = L[583];
R._checkAnn(L[583],R.Function,f1018);
break;
case 1: $step1016 = 2;
$al1023 = L[584];
R._checkAnn(L[584],List53,l11019);
break;
case 2: $step1016 = 3;
$al1023 = L[585];
R._checkAnn(L[585],List53,l21020);
break;
case 3: $step1016 = 4;
$al1023 = L[586];
R._checkAnn(L[586],List53,l31021);
break;
case 4: $step1016 = 5;
$al1023 = L[582];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1023,is$empty435.$var);
}
$ans1022 = is$empty435.$var.app(l11019);
break;
case 5: var anf_arg1024 = $ans1022;
$al1023 = L[569];
var anf_if1040 = R.checkWrapBoolean(anf_arg1024);
if(R.isPyretTrue(anf_if1040)) {
$step1016 = 6;
} else {
$step1016 = 7;
}
break;
case 6: $step1016 = 12;
$ans1022 = (true);
break;
case 7: $step1016 = 8;
$al1023 = L[571];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1023,is$empty435.$var);
}
$ans1022 = is$empty435.$var.app(l21020);
break;
case 8: var anf_arg1025 = $ans1022;
$al1023 = L[569];
var anf_if1027 = R.checkWrapBoolean(anf_arg1025);
if(R.isPyretTrue(anf_if1027)) {
$step1016 = 9;
} else {
$step1016 = 10;
}
break;
case 9: $step1016 = 12;
$ans1022 = (true);
break;
case 10: $step1016 = 11;
$al1023 = L[570];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1023,is$empty435.$var);
}
$ans1022 = is$empty435.$var.app(l31021);
break;
case 11: var anf_arg1026 = $ans1022;
$step1016 = 12;
$al1023 = L[569];
$ans1022 = R.checkWrapBoolean(anf_arg1026);
break;
case 12: var anf_arg1028 = $ans1022;
$al1023 = L[569];
var anf_if1039 = R.checkWrapBoolean(anf_arg1028);
if(R.isPyretTrue(anf_if1039)) {
$step1016 = 13;
} else {
$step1016 = 14;
}
break;
case 13: $step1016 = 17;
$ans1022 = empty149.$var;
break;
case 14: var anf_arg1029 = G(l11019,"first",L[572]);
var anf_arg1030 = G(l21020,"first",L[573]);
var anf_arg1031 = G(l31021,"first",L[574]);
$step1016 = 15;
$al1023 = L[580];
if(!(R.isFunction(f1018))) {
R.ffi.throwNonFunApp($al1023,f1018);
}
$ans1022 = f1018.app(anf_arg1029,anf_arg1030,anf_arg1031);
break;
case 15: var arg_1036 = $ans1022;
var anf_arg1033 = G(l11019,"rest",L[575]);
var anf_arg1034 = G(l21020,"rest",L[576]);
var anf_arg1035 = G(l31021,"rest",L[577]);
$step1016 = 16;
$al1023 = L[579];
if(!(R.isFunction(map31032.$var))) {
R.ffi.throwNonFunApp($al1023,map31032.$var);
}
$ans1022 = map31032.$var.app(f1018,anf_arg1033,anf_arg1034,anf_arg1035);
break;
case 16: var anf_arg1037 = $ans1022;
$step1016 = 17;
$al1023 = L[578];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1023,link70.$var);
}
$ans1022 = link70.$var.app(arg_1036,anf_arg1037);
break;
case 17: var ann_check_temp1038 = $ans1022;
$step1016 = 18;
$al1023 = L[581];
R._checkAnn(L[581],List53,ann_check_temp1038);
break;
case 18: $step1016 = 19;
$ans1022 = ann_check_temp1038;
break;
case 19: ++R.GAS;
return $ans1022;
default: throw "No case numbered " + $step1016 + " in $temp_lam1017";
}
}
} catch($e1041) {
if(R.isCont($e1041) && ($step1016 !== 19)) {
$e1041.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1023,$temp_lam1017,$step1016,[f1018,l11019,l21020,l31021],[ann_check_temp1038,arg_1036]);
}
if(R.isPyretException($e1041)) {
$e1041.pyretStack.push($al1023);
}
throw $e1041;
}
};
var anf_assign1042 = R.makeFunction($temp_lam1017);
map31032.$var = anf_assign1042;
var $temp_lam1044 = function($f1045,$l11046,$l21047,$l31048,$l41049) {
var $step1043 = 0;
var $ans1050 = D;
var $al1051 = L[610];
try {
if(R.isActivationRecord($f1045)) {
$step1043 = $f1045.step;
$al1051 = $f1045.from;
$ans1050 = $f1045.ans;
f1045 = $f1045.args[0];
l11046 = $f1045.args[1];
l21047 = $f1045.args[2];
l31048 = $f1045.args[3];
l41049 = $f1045.args[4];
ann_check_temp1070 = $f1045.vars[0];
arg_1068 = $f1045.vars[1];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[610],5,$t);
}
var f1045 = $f1045;
var l11046 = $l11046;
var l21047 = $l21047;
var l31048 = $l31048;
var l41049 = $l41049;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1043) {
case 0: $step1043 = 1;
$al1051 = L[605];
R._checkAnn(L[605],R.Function,f1045);
break;
case 1: $step1043 = 2;
$al1051 = L[606];
R._checkAnn(L[606],List53,l11046);
break;
case 2: $step1043 = 3;
$al1051 = L[607];
R._checkAnn(L[607],List53,l21047);
break;
case 3: $step1043 = 4;
$al1051 = L[608];
R._checkAnn(L[608],List53,l31048);
break;
case 4: $step1043 = 5;
$al1051 = L[609];
R._checkAnn(L[609],List53,l41049);
break;
case 5: $step1043 = 6;
$al1051 = L[604];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1051,is$empty435.$var);
}
$ans1050 = is$empty435.$var.app(l11046);
break;
case 6: var anf_arg1052 = $ans1050;
$al1051 = L[588];
var anf_if1072 = R.checkWrapBoolean(anf_arg1052);
if(R.isPyretTrue(anf_if1072)) {
$step1043 = 7;
} else {
$step1043 = 8;
}
break;
case 7: $step1043 = 16;
$ans1050 = (true);
break;
case 8: $step1043 = 9;
$al1051 = L[591];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1051,is$empty435.$var);
}
$ans1050 = is$empty435.$var.app(l21047);
break;
case 9: var anf_arg1053 = $ans1050;
$al1051 = L[588];
var anf_if1057 = R.checkWrapBoolean(anf_arg1053);
if(R.isPyretTrue(anf_if1057)) {
$step1043 = 10;
} else {
$step1043 = 11;
}
break;
case 10: $step1043 = 16;
$ans1050 = (true);
break;
case 11: $step1043 = 12;
$al1051 = L[590];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1051,is$empty435.$var);
}
$ans1050 = is$empty435.$var.app(l31048);
break;
case 12: var anf_arg1054 = $ans1050;
$al1051 = L[588];
var anf_if1056 = R.checkWrapBoolean(anf_arg1054);
if(R.isPyretTrue(anf_if1056)) {
$step1043 = 13;
} else {
$step1043 = 14;
}
break;
case 13: $step1043 = 16;
$ans1050 = (true);
break;
case 14: $step1043 = 15;
$al1051 = L[589];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1051,is$empty435.$var);
}
$ans1050 = is$empty435.$var.app(l41049);
break;
case 15: var anf_arg1055 = $ans1050;
$step1043 = 16;
$al1051 = L[588];
$ans1050 = R.checkWrapBoolean(anf_arg1055);
break;
case 16: var anf_arg1058 = $ans1050;
$al1051 = L[588];
var anf_if1071 = R.checkWrapBoolean(anf_arg1058);
if(R.isPyretTrue(anf_if1071)) {
$step1043 = 17;
} else {
$step1043 = 18;
}
break;
case 17: $step1043 = 21;
$ans1050 = empty149.$var;
break;
case 18: var anf_arg1059 = G(l11046,"first",L[592]);
var anf_arg1060 = G(l21047,"first",L[593]);
var anf_arg1061 = G(l31048,"first",L[594]);
var anf_arg1062 = G(l41049,"first",L[595]);
$step1043 = 19;
$al1051 = L[602];
if(!(R.isFunction(f1045))) {
R.ffi.throwNonFunApp($al1051,f1045);
}
$ans1050 = f1045.app(anf_arg1059,anf_arg1060,anf_arg1061,anf_arg1062);
break;
case 19: var arg_1068 = $ans1050;
var anf_arg1064 = G(l11046,"rest",L[596]);
var anf_arg1065 = G(l21047,"rest",L[597]);
var anf_arg1066 = G(l31048,"rest",L[598]);
var anf_arg1067 = G(l41049,"rest",L[599]);
$step1043 = 20;
$al1051 = L[601];
if(!(R.isFunction(map41063.$var))) {
R.ffi.throwNonFunApp($al1051,map41063.$var);
}
$ans1050 = map41063.$var.app(f1045,anf_arg1064,anf_arg1065,anf_arg1066,anf_arg1067);
break;
case 20: var anf_arg1069 = $ans1050;
$step1043 = 21;
$al1051 = L[600];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1051,link70.$var);
}
$ans1050 = link70.$var.app(arg_1068,anf_arg1069);
break;
case 21: var ann_check_temp1070 = $ans1050;
$step1043 = 22;
$al1051 = L[603];
R._checkAnn(L[603],List53,ann_check_temp1070);
break;
case 22: $step1043 = 23;
$ans1050 = ann_check_temp1070;
break;
case 23: ++R.GAS;
return $ans1050;
default: throw "No case numbered " + $step1043 + " in $temp_lam1044";
}
}
} catch($e1073) {
if(R.isCont($e1073) && ($step1043 !== 23)) {
$e1073.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1051,$temp_lam1044,$step1043,[f1045,l11046,l21047,l31048,l41049],[ann_check_temp1070,arg_1068]);
}
if(R.isPyretException($e1073)) {
$e1073.pyretStack.push($al1051);
}
throw $e1073;
}
};
var anf_assign1074 = R.makeFunction($temp_lam1044);
map41063.$var = anf_assign1074;
var $temp_lam1076 = function($f1077,$n1078,$lst1079) {
var $step1075 = 0;
var $ans1080 = D;
var $al1081 = L[622];
try {
if(R.isActivationRecord($f1077)) {
$step1075 = $f1077.step;
$al1081 = $f1077.from;
$ans1080 = $f1077.ans;
f1077 = $f1077.args[0];
n1078 = $f1077.args[1];
lst1079 = $f1077.args[2];
ann_check_temp1089 = $f1077.vars[0];
arg_1087 = $f1077.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[622],3,$t);
}
var f1077 = $f1077;
var n1078 = $n1078;
var lst1079 = $lst1079;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1075) {
case 0: $step1075 = 1;
$al1081 = L[619];
R._checkAnn(L[619],R.Function,f1077);
break;
case 1: $step1075 = 2;
$al1081 = L[620];
R._checkAnn(L[620],$type$Number1,n1078);
break;
case 2: $step1075 = 3;
$al1081 = L[621];
R._checkAnn(L[621],List53,lst1079);
break;
case 3: $step1075 = 4;
$al1081 = L[611];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1081,is$empty435.$var);
}
$ans1080 = is$empty435.$var.app(lst1079);
break;
case 4: var anf_arg1082 = $ans1080;
$al1081 = L[611];
var anf_if1090 = R.checkWrapBoolean(anf_arg1082);
if(R.isPyretTrue(anf_if1090)) {
$step1075 = 5;
} else {
$step1075 = 6;
}
break;
case 5: $step1075 = 10;
$ans1080 = empty149.$var;
break;
case 6: var anf_arg1083 = G(lst1079,"first",L[612]);
$step1075 = 7;
$al1081 = L[617];
if(!(R.isFunction(f1077))) {
R.ffi.throwNonFunApp($al1081,f1077);
}
$ans1080 = f1077.app(n1078,anf_arg1083);
break;
case 7: var arg_1087 = $ans1080;
$step1075 = 8;
$al1081 = L[616];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1081,_plus7);
}
$ans1080 = _plus7.app(n1078,(1));
break;
case 8: var anf_arg1085 = $ans1080;
var anf_arg1086 = G(lst1079,"rest",L[613]);
$step1075 = 9;
$al1081 = L[615];
if(!(R.isFunction(map_n1084.$var))) {
R.ffi.throwNonFunApp($al1081,map_n1084.$var);
}
$ans1080 = map_n1084.$var.app(f1077,anf_arg1085,anf_arg1086);
break;
case 9: var anf_arg1088 = $ans1080;
$step1075 = 10;
$al1081 = L[614];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1081,link70.$var);
}
$ans1080 = link70.$var.app(arg_1087,anf_arg1088);
break;
case 10: var ann_check_temp1089 = $ans1080;
$step1075 = 11;
$al1081 = L[618];
R._checkAnn(L[618],List53,ann_check_temp1089);
break;
case 11: $step1075 = 12;
$ans1080 = ann_check_temp1089;
break;
case 12: ++R.GAS;
return $ans1080;
default: throw "No case numbered " + $step1075 + " in $temp_lam1076";
}
}
} catch($e1091) {
if(R.isCont($e1091) && ($step1075 !== 12)) {
$e1091.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1081,$temp_lam1076,$step1075,[f1077,n1078,lst1079],[ann_check_temp1089,arg_1087]);
}
if(R.isPyretException($e1091)) {
$e1091.pyretStack.push($al1081);
}
throw $e1091;
}
};
var anf_assign1092 = R.makeFunction($temp_lam1076);
map_n1084.$var = anf_assign1092;
var $temp_lam1094 = function($f1095,$n1096,$l11097,$l21098) {
var $step1093 = 0;
var $ans1099 = D;
var $al1100 = L[639];
try {
if(R.isActivationRecord($f1095)) {
$step1093 = $f1095.step;
$al1100 = $f1095.from;
$ans1099 = $f1095.ans;
f1095 = $f1095.args[0];
n1096 = $f1095.args[1];
l11097 = $f1095.args[2];
l21098 = $f1095.args[3];
ann_check_temp1112 = $f1095.vars[0];
arg_1110 = $f1095.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[639],4,$t);
}
var f1095 = $f1095;
var n1096 = $n1096;
var l11097 = $l11097;
var l21098 = $l21098;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1093) {
case 0: $step1093 = 1;
$al1100 = L[635];
R._checkAnn(L[635],R.Function,f1095);
break;
case 1: $step1093 = 2;
$al1100 = L[636];
R._checkAnn(L[636],$type$Number1,n1096);
break;
case 2: $step1093 = 3;
$al1100 = L[637];
R._checkAnn(L[637],List53,l11097);
break;
case 3: $step1093 = 4;
$al1100 = L[638];
R._checkAnn(L[638],List53,l21098);
break;
case 4: $step1093 = 5;
$al1100 = L[634];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1100,is$empty435.$var);
}
$ans1099 = is$empty435.$var.app(l11097);
break;
case 5: var anf_arg1101 = $ans1099;
$al1100 = L[623];
var anf_if1114 = R.checkWrapBoolean(anf_arg1101);
if(R.isPyretTrue(anf_if1114)) {
$step1093 = 6;
} else {
$step1093 = 7;
}
break;
case 6: $step1093 = 9;
$ans1099 = (true);
break;
case 7: $step1093 = 8;
$al1100 = L[624];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1100,is$empty435.$var);
}
$ans1099 = is$empty435.$var.app(l21098);
break;
case 8: var anf_arg1102 = $ans1099;
$step1093 = 9;
$al1100 = L[623];
$ans1099 = R.checkWrapBoolean(anf_arg1102);
break;
case 9: var anf_arg1103 = $ans1099;
$al1100 = L[623];
var anf_if1113 = R.checkWrapBoolean(anf_arg1103);
if(R.isPyretTrue(anf_if1113)) {
$step1093 = 10;
} else {
$step1093 = 11;
}
break;
case 10: $step1093 = 15;
$ans1099 = empty149.$var;
break;
case 11: var anf_arg1104 = G(l11097,"first",L[625]);
var anf_arg1105 = G(l21098,"first",L[626]);
$step1093 = 12;
$al1100 = L[632];
if(!(R.isFunction(f1095))) {
R.ffi.throwNonFunApp($al1100,f1095);
}
$ans1099 = f1095.app(n1096,anf_arg1104,anf_arg1105);
break;
case 12: var arg_1110 = $ans1099;
$step1093 = 13;
$al1100 = L[631];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1100,_plus7);
}
$ans1099 = _plus7.app(n1096,(1));
break;
case 13: var anf_arg1107 = $ans1099;
var anf_arg1108 = G(l11097,"rest",L[627]);
var anf_arg1109 = G(l21098,"rest",L[628]);
$step1093 = 14;
$al1100 = L[630];
if(!(R.isFunction(map2_n1106.$var))) {
R.ffi.throwNonFunApp($al1100,map2_n1106.$var);
}
$ans1099 = map2_n1106.$var.app(f1095,anf_arg1107,anf_arg1108,anf_arg1109);
break;
case 14: var anf_arg1111 = $ans1099;
$step1093 = 15;
$al1100 = L[629];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1100,link70.$var);
}
$ans1099 = link70.$var.app(arg_1110,anf_arg1111);
break;
case 15: var ann_check_temp1112 = $ans1099;
$step1093 = 16;
$al1100 = L[633];
R._checkAnn(L[633],List53,ann_check_temp1112);
break;
case 16: $step1093 = 17;
$ans1099 = ann_check_temp1112;
break;
case 17: ++R.GAS;
return $ans1099;
default: throw "No case numbered " + $step1093 + " in $temp_lam1094";
}
}
} catch($e1115) {
if(R.isCont($e1115) && ($step1093 !== 17)) {
$e1115.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1100,$temp_lam1094,$step1093,[f1095,n1096,l11097,l21098],[ann_check_temp1112,arg_1110]);
}
if(R.isPyretException($e1115)) {
$e1115.pyretStack.push($al1100);
}
throw $e1115;
}
};
var anf_assign1116 = R.makeFunction($temp_lam1094);
map2_n1106.$var = anf_assign1116;
var $temp_lam1118 = function($f1119,$n1120,$l11121,$l21122,$l31123) {
var $step1117 = 0;
var $ans1124 = D;
var $al1125 = L[660];
try {
if(R.isActivationRecord($f1119)) {
$step1117 = $f1119.step;
$al1125 = $f1119.from;
$ans1124 = $f1119.ans;
f1119 = $f1119.args[0];
n1120 = $f1119.args[1];
l11121 = $f1119.args[2];
l21122 = $f1119.args[3];
l31123 = $f1119.args[4];
ann_check_temp1141 = $f1119.vars[0];
arg_1139 = $f1119.vars[1];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[660],5,$t);
}
var f1119 = $f1119;
var n1120 = $n1120;
var l11121 = $l11121;
var l21122 = $l21122;
var l31123 = $l31123;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1117) {
case 0: $step1117 = 1;
$al1125 = L[655];
R._checkAnn(L[655],R.Function,f1119);
break;
case 1: $step1117 = 2;
$al1125 = L[656];
R._checkAnn(L[656],$type$Number1,n1120);
break;
case 2: $step1117 = 3;
$al1125 = L[657];
R._checkAnn(L[657],List53,l11121);
break;
case 3: $step1117 = 4;
$al1125 = L[658];
R._checkAnn(L[658],List53,l21122);
break;
case 4: $step1117 = 5;
$al1125 = L[659];
R._checkAnn(L[659],List53,l31123);
break;
case 5: $step1117 = 6;
$al1125 = L[654];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1125,is$empty435.$var);
}
$ans1124 = is$empty435.$var.app(l11121);
break;
case 6: var anf_arg1126 = $ans1124;
$al1125 = L[640];
var anf_if1143 = R.checkWrapBoolean(anf_arg1126);
if(R.isPyretTrue(anf_if1143)) {
$step1117 = 7;
} else {
$step1117 = 8;
}
break;
case 7: $step1117 = 13;
$ans1124 = (true);
break;
case 8: $step1117 = 9;
$al1125 = L[642];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1125,is$empty435.$var);
}
$ans1124 = is$empty435.$var.app(l21122);
break;
case 9: var anf_arg1127 = $ans1124;
$al1125 = L[640];
var anf_if1129 = R.checkWrapBoolean(anf_arg1127);
if(R.isPyretTrue(anf_if1129)) {
$step1117 = 10;
} else {
$step1117 = 11;
}
break;
case 10: $step1117 = 13;
$ans1124 = (true);
break;
case 11: $step1117 = 12;
$al1125 = L[641];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1125,is$empty435.$var);
}
$ans1124 = is$empty435.$var.app(l31123);
break;
case 12: var anf_arg1128 = $ans1124;
$step1117 = 13;
$al1125 = L[640];
$ans1124 = R.checkWrapBoolean(anf_arg1128);
break;
case 13: var anf_arg1130 = $ans1124;
$al1125 = L[640];
var anf_if1142 = R.checkWrapBoolean(anf_arg1130);
if(R.isPyretTrue(anf_if1142)) {
$step1117 = 14;
} else {
$step1117 = 15;
}
break;
case 14: $step1117 = 19;
$ans1124 = empty149.$var;
break;
case 15: var anf_arg1131 = G(l11121,"first",L[643]);
var anf_arg1132 = G(l21122,"first",L[644]);
var anf_arg1133 = G(l31123,"first",L[645]);
$step1117 = 16;
$al1125 = L[652];
if(!(R.isFunction(f1119))) {
R.ffi.throwNonFunApp($al1125,f1119);
}
$ans1124 = f1119.app(n1120,anf_arg1131,anf_arg1132,anf_arg1133);
break;
case 16: var arg_1139 = $ans1124;
$step1117 = 17;
$al1125 = L[651];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1125,_plus7);
}
$ans1124 = _plus7.app(n1120,(1));
break;
case 17: var anf_arg1135 = $ans1124;
var anf_arg1136 = G(l11121,"rest",L[646]);
var anf_arg1137 = G(l21122,"rest",L[647]);
var anf_arg1138 = G(l31123,"rest",L[648]);
$step1117 = 18;
$al1125 = L[650];
if(!(R.isFunction(map3_n1134.$var))) {
R.ffi.throwNonFunApp($al1125,map3_n1134.$var);
}
$ans1124 = map3_n1134.$var.app(f1119,anf_arg1135,anf_arg1136,anf_arg1137,anf_arg1138);
break;
case 18: var anf_arg1140 = $ans1124;
$step1117 = 19;
$al1125 = L[649];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1125,link70.$var);
}
$ans1124 = link70.$var.app(arg_1139,anf_arg1140);
break;
case 19: var ann_check_temp1141 = $ans1124;
$step1117 = 20;
$al1125 = L[653];
R._checkAnn(L[653],List53,ann_check_temp1141);
break;
case 20: $step1117 = 21;
$ans1124 = ann_check_temp1141;
break;
case 21: ++R.GAS;
return $ans1124;
default: throw "No case numbered " + $step1117 + " in $temp_lam1118";
}
}
} catch($e1144) {
if(R.isCont($e1144) && ($step1117 !== 21)) {
$e1144.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1125,$temp_lam1118,$step1117,[f1119,n1120,l11121,l21122,l31123],[ann_check_temp1141,arg_1139]);
}
if(R.isPyretException($e1144)) {
$e1144.pyretStack.push($al1125);
}
throw $e1144;
}
};
var anf_assign1145 = R.makeFunction($temp_lam1118);
map3_n1134.$var = anf_assign1145;
var $temp_lam1147 = function($f1148,$n1149,$l11150,$l21151,$l31152,$l41153) {
var $step1146 = 0;
var $ans1154 = D;
var $al1155 = L[685];
try {
if(R.isActivationRecord($f1148)) {
$step1146 = $f1148.step;
$al1155 = $f1148.from;
$ans1154 = $f1148.ans;
f1148 = $f1148.args[0];
n1149 = $f1148.args[1];
l11150 = $f1148.args[2];
l21151 = $f1148.args[3];
l31152 = $f1148.args[4];
l41153 = $f1148.args[5];
ann_check_temp1175 = $f1148.vars[0];
arg_1173 = $f1148.vars[1];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[685],6,$t);
}
var f1148 = $f1148;
var n1149 = $n1149;
var l11150 = $l11150;
var l21151 = $l21151;
var l31152 = $l31152;
var l41153 = $l41153;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1146) {
case 0: $step1146 = 1;
$al1155 = L[679];
R._checkAnn(L[679],R.Function,f1148);
break;
case 1: $step1146 = 2;
$al1155 = L[680];
R._checkAnn(L[680],$type$Number1,n1149);
break;
case 2: $step1146 = 3;
$al1155 = L[681];
R._checkAnn(L[681],List53,l11150);
break;
case 3: $step1146 = 4;
$al1155 = L[682];
R._checkAnn(L[682],List53,l21151);
break;
case 4: $step1146 = 5;
$al1155 = L[683];
R._checkAnn(L[683],List53,l31152);
break;
case 5: $step1146 = 6;
$al1155 = L[684];
R._checkAnn(L[684],List53,l41153);
break;
case 6: $step1146 = 7;
$al1155 = L[678];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1155,is$empty435.$var);
}
$ans1154 = is$empty435.$var.app(l11150);
break;
case 7: var anf_arg1156 = $ans1154;
$al1155 = L[661];
var anf_if1177 = R.checkWrapBoolean(anf_arg1156);
if(R.isPyretTrue(anf_if1177)) {
$step1146 = 8;
} else {
$step1146 = 9;
}
break;
case 8: $step1146 = 17;
$ans1154 = (true);
break;
case 9: $step1146 = 10;
$al1155 = L[664];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1155,is$empty435.$var);
}
$ans1154 = is$empty435.$var.app(l21151);
break;
case 10: var anf_arg1157 = $ans1154;
$al1155 = L[661];
var anf_if1161 = R.checkWrapBoolean(anf_arg1157);
if(R.isPyretTrue(anf_if1161)) {
$step1146 = 11;
} else {
$step1146 = 12;
}
break;
case 11: $step1146 = 17;
$ans1154 = (true);
break;
case 12: $step1146 = 13;
$al1155 = L[663];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1155,is$empty435.$var);
}
$ans1154 = is$empty435.$var.app(l31152);
break;
case 13: var anf_arg1158 = $ans1154;
$al1155 = L[661];
var anf_if1160 = R.checkWrapBoolean(anf_arg1158);
if(R.isPyretTrue(anf_if1160)) {
$step1146 = 14;
} else {
$step1146 = 15;
}
break;
case 14: $step1146 = 17;
$ans1154 = (true);
break;
case 15: $step1146 = 16;
$al1155 = L[662];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1155,is$empty435.$var);
}
$ans1154 = is$empty435.$var.app(l41153);
break;
case 16: var anf_arg1159 = $ans1154;
$step1146 = 17;
$al1155 = L[661];
$ans1154 = R.checkWrapBoolean(anf_arg1159);
break;
case 17: var anf_arg1162 = $ans1154;
$al1155 = L[661];
var anf_if1176 = R.checkWrapBoolean(anf_arg1162);
if(R.isPyretTrue(anf_if1176)) {
$step1146 = 18;
} else {
$step1146 = 19;
}
break;
case 18: $step1146 = 23;
$ans1154 = empty149.$var;
break;
case 19: var anf_arg1163 = G(l11150,"first",L[665]);
var anf_arg1164 = G(l21151,"first",L[666]);
var anf_arg1165 = G(l31152,"first",L[667]);
var anf_arg1166 = G(l41153,"first",L[668]);
$step1146 = 20;
$al1155 = L[676];
if(!(R.isFunction(f1148))) {
R.ffi.throwNonFunApp($al1155,f1148);
}
$ans1154 = f1148.app(n1149,anf_arg1163,anf_arg1164,anf_arg1165,anf_arg1166);
break;
case 20: var arg_1173 = $ans1154;
$step1146 = 21;
$al1155 = L[675];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1155,_plus7);
}
$ans1154 = _plus7.app(n1149,(1));
break;
case 21: var anf_arg1168 = $ans1154;
var anf_arg1169 = G(l11150,"rest",L[669]);
var anf_arg1170 = G(l21151,"rest",L[670]);
var anf_arg1171 = G(l31152,"rest",L[671]);
var anf_arg1172 = G(l41153,"rest",L[672]);
$step1146 = 22;
$al1155 = L[674];
if(!(R.isFunction(map4_n1167.$var))) {
R.ffi.throwNonFunApp($al1155,map4_n1167.$var);
}
$ans1154 = map4_n1167.$var.app(f1148,anf_arg1168,anf_arg1169,anf_arg1170,anf_arg1171,anf_arg1172);
break;
case 22: var anf_arg1174 = $ans1154;
$step1146 = 23;
$al1155 = L[673];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1155,link70.$var);
}
$ans1154 = link70.$var.app(arg_1173,anf_arg1174);
break;
case 23: var ann_check_temp1175 = $ans1154;
$step1146 = 24;
$al1155 = L[677];
R._checkAnn(L[677],List53,ann_check_temp1175);
break;
case 24: $step1146 = 25;
$ans1154 = ann_check_temp1175;
break;
case 25: ++R.GAS;
return $ans1154;
default: throw "No case numbered " + $step1146 + " in $temp_lam1147";
}
}
} catch($e1178) {
if(R.isCont($e1178) && ($step1146 !== 25)) {
$e1178.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1155,$temp_lam1147,$step1146,[f1148,n1149,l11150,l21151,l31152,l41153],[ann_check_temp1175,arg_1173]);
}
if(R.isPyretException($e1178)) {
$e1178.pyretStack.push($al1155);
}
throw $e1178;
}
};
var anf_assign1179 = R.makeFunction($temp_lam1147);
map4_n1167.$var = anf_assign1179;
var $temp_lam1181 = function($f1182,$lst1183) {
var $step1180 = 0;
var $ans1184 = D;
var $al1185 = L[696];
try {
if(R.isActivationRecord($f1182)) {
$step1180 = $f1182.step;
$al1185 = $f1182.from;
$ans1184 = $f1182.ans;
f1182 = $f1182.args[0];
lst1183 = $f1182.args[1];
ann_check_temp1198 = $f1182.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[696],2,$t);
}
var f1182 = $f1182;
var lst1183 = $lst1183;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1180) {
case 0: $step1180 = 1;
$al1185 = L[694];
R._checkAnn(L[694],R.Function,f1182);
break;
case 1: $step1180 = 2;
$al1185 = L[695];
R._checkAnn(L[695],List53,lst1183);
break;
case 2: var help1193 = {"$var":D};
var $temp_lam1187 = function($l1188) {
var $step1186 = 0;
var $ans1189 = D;
var $al1190 = L[691];
try {
if(R.isActivationRecord($l1188)) {
$step1186 = $l1188.step;
$al1190 = $l1188.from;
$ans1189 = $l1188.ans;
l1188 = $l1188.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[691],1,$t);
}
var l1188 = $l1188;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1186) {
case 0: $step1186 = 1;
$al1190 = L[686];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1190,is$empty435.$var);
}
$ans1189 = is$empty435.$var.app(l1188);
break;
case 1: var anf_arg1191 = $ans1189;
$al1190 = L[686];
var anf_if1195 = R.checkWrapBoolean(anf_arg1191);
if(R.isPyretTrue(anf_if1195)) {
$step1186 = 2;
} else {
$step1186 = 3;
}
break;
case 2: $step1186 = 5;
$ans1189 = nothing3;
break;
case 3: var anf_arg1192 = G(l1188,"first",L[687]);
$step1186 = 4;
$al1190 = L[690];
if(!(R.isFunction(f1182))) {
R.ffi.throwNonFunApp($al1190,f1182);
}
$ans1189 = f1182.app(anf_arg1192);
break;
case 4: var anf_arg1194 = G(l1188,"rest",L[688]);
$step1186 = 5;
$al1190 = L[689];
if(!(R.isFunction(help1193.$var))) {
R.ffi.throwNonFunApp($al1190,help1193.$var);
}
$ans1189 = help1193.$var.app(anf_arg1194);
break;
case 5: ++R.GAS;
return $ans1189;
default: throw "No case numbered " + $step1186 + " in $temp_lam1187";
}
}
} catch($e1196) {
if(R.isCont($e1196) && ($step1186 !== 5)) {
$e1196.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1190,$temp_lam1187,$step1186,[l1188],[]);
}
if(R.isPyretException($e1196)) {
$e1196.pyretStack.push($al1190);
}
throw $e1196;
}
};
var anf_assign1197 = R.makeFunction($temp_lam1187);
help1193.$var = anf_assign1197;
$step1180 = 3;
$al1185 = L[693];
if(!(R.isFunction(help1193.$var))) {
R.ffi.throwNonFunApp($al1185,help1193.$var);
}
$ans1184 = help1193.$var.app(lst1183);
break;
case 3: var ann_check_temp1198 = $ans1184;
$step1180 = 4;
$al1185 = L[692];
R._checkAnn(L[692],$type$Nothing2,ann_check_temp1198);
break;
case 4: $step1180 = 5;
$ans1184 = ann_check_temp1198;
break;
case 5: ++R.GAS;
return $ans1184;
default: throw "No case numbered " + $step1180 + " in $temp_lam1181";
}
}
} catch($e1199) {
if(R.isCont($e1199) && ($step1180 !== 5)) {
$e1199.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1185,$temp_lam1181,$step1180,[f1182,lst1183],[ann_check_temp1198]);
}
if(R.isPyretException($e1199)) {
$e1199.pyretStack.push($al1185);
}
throw $e1199;
}
};
var anf_assign1200 = R.makeFunction($temp_lam1181);
each1201.$var = anf_assign1200;
var $temp_lam1203 = function($f1204,$lst11205,$lst21206) {
var $step1202 = 0;
var $ans1207 = D;
var $al1208 = L[712];
try {
if(R.isActivationRecord($f1204)) {
$step1202 = $f1204.step;
$al1208 = $f1204.from;
$ans1207 = $f1204.ans;
f1204 = $f1204.args[0];
lst11205 = $f1204.args[1];
lst21206 = $f1204.args[2];
ann_check_temp1227 = $f1204.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[712],3,$t);
}
var f1204 = $f1204;
var lst11205 = $lst11205;
var lst21206 = $lst21206;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1202) {
case 0: $step1202 = 1;
$al1208 = L[709];
R._checkAnn(L[709],R.Function,f1204);
break;
case 1: $step1202 = 2;
$al1208 = L[710];
R._checkAnn(L[710],List53,lst11205);
break;
case 2: $step1202 = 3;
$al1208 = L[711];
R._checkAnn(L[711],List53,lst21206);
break;
case 3: var help1220 = {"$var":D};
var $temp_lam1210 = function($l11211,$l21212) {
var $step1209 = 0;
var $ans1213 = D;
var $al1214 = L[706];
try {
if(R.isActivationRecord($l11211)) {
$step1209 = $l11211.step;
$al1214 = $l11211.from;
$ans1213 = $l11211.ans;
l11211 = $l11211.args[0];
l21212 = $l11211.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[706],2,$t);
}
var l11211 = $l11211;
var l21212 = $l21212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1209) {
case 0: $step1209 = 1;
$al1214 = L[705];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1214,is$empty435.$var);
}
$ans1213 = is$empty435.$var.app(l11211);
break;
case 1: var anf_arg1215 = $ans1213;
$al1214 = L[697];
var anf_if1224 = R.checkWrapBoolean(anf_arg1215);
if(R.isPyretTrue(anf_if1224)) {
$step1209 = 2;
} else {
$step1209 = 3;
}
break;
case 2: $step1209 = 5;
$ans1213 = (true);
break;
case 3: $step1209 = 4;
$al1214 = L[698];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1214,is$empty435.$var);
}
$ans1213 = is$empty435.$var.app(l21212);
break;
case 4: var anf_arg1216 = $ans1213;
$step1209 = 5;
$al1214 = L[697];
$ans1213 = R.checkWrapBoolean(anf_arg1216);
break;
case 5: var anf_arg1217 = $ans1213;
$al1214 = L[697];
var anf_if1223 = R.checkWrapBoolean(anf_arg1217);
if(R.isPyretTrue(anf_if1223)) {
$step1209 = 6;
} else {
$step1209 = 7;
}
break;
case 6: $step1209 = 9;
$ans1213 = nothing3;
break;
case 7: var anf_arg1218 = G(l11211,"first",L[699]);
var anf_arg1219 = G(l21212,"first",L[700]);
$step1209 = 8;
$al1214 = L[704];
if(!(R.isFunction(f1204))) {
R.ffi.throwNonFunApp($al1214,f1204);
}
$ans1213 = f1204.app(anf_arg1218,anf_arg1219);
break;
case 8: var anf_arg1221 = G(l11211,"rest",L[701]);
var anf_arg1222 = G(l21212,"rest",L[702]);
$step1209 = 9;
$al1214 = L[703];
if(!(R.isFunction(help1220.$var))) {
R.ffi.throwNonFunApp($al1214,help1220.$var);
}
$ans1213 = help1220.$var.app(anf_arg1221,anf_arg1222);
break;
case 9: ++R.GAS;
return $ans1213;
default: throw "No case numbered " + $step1209 + " in $temp_lam1210";
}
}
} catch($e1225) {
if(R.isCont($e1225) && ($step1209 !== 9)) {
$e1225.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1214,$temp_lam1210,$step1209,[l11211,l21212],[]);
}
if(R.isPyretException($e1225)) {
$e1225.pyretStack.push($al1214);
}
throw $e1225;
}
};
var anf_assign1226 = R.makeFunction($temp_lam1210);
help1220.$var = anf_assign1226;
$step1202 = 4;
$al1208 = L[708];
if(!(R.isFunction(help1220.$var))) {
R.ffi.throwNonFunApp($al1208,help1220.$var);
}
$ans1207 = help1220.$var.app(lst11205,lst21206);
break;
case 4: var ann_check_temp1227 = $ans1207;
$step1202 = 5;
$al1208 = L[707];
R._checkAnn(L[707],$type$Nothing2,ann_check_temp1227);
break;
case 5: $step1202 = 6;
$ans1207 = ann_check_temp1227;
break;
case 6: ++R.GAS;
return $ans1207;
default: throw "No case numbered " + $step1202 + " in $temp_lam1203";
}
}
} catch($e1228) {
if(R.isCont($e1228) && ($step1202 !== 6)) {
$e1228.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1208,$temp_lam1203,$step1202,[f1204,lst11205,lst21206],[ann_check_temp1227]);
}
if(R.isPyretException($e1228)) {
$e1228.pyretStack.push($al1208);
}
throw $e1228;
}
};
var anf_assign1229 = R.makeFunction($temp_lam1203);
each21230.$var = anf_assign1229;
var $temp_lam1232 = function($f1233,$lst11234,$lst21235,$lst31236) {
var $step1231 = 0;
var $ans1237 = D;
var $al1238 = L[732];
try {
if(R.isActivationRecord($f1233)) {
$step1231 = $f1233.step;
$al1238 = $f1233.from;
$ans1237 = $f1233.ans;
f1233 = $f1233.args[0];
lst11234 = $f1233.args[1];
lst21235 = $f1233.args[2];
lst31236 = $f1233.args[3];
ann_check_temp1262 = $f1233.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[732],4,$t);
}
var f1233 = $f1233;
var lst11234 = $lst11234;
var lst21235 = $lst21235;
var lst31236 = $lst31236;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1231) {
case 0: $step1231 = 1;
$al1238 = L[728];
R._checkAnn(L[728],R.Function,f1233);
break;
case 1: $step1231 = 2;
$al1238 = L[729];
R._checkAnn(L[729],List53,lst11234);
break;
case 2: $step1231 = 3;
$al1238 = L[730];
R._checkAnn(L[730],List53,lst21235);
break;
case 3: $step1231 = 4;
$al1238 = L[731];
R._checkAnn(L[731],List53,lst31236);
break;
case 4: var help1254 = {"$var":D};
var $temp_lam1240 = function($l11241,$l21242,$l31243) {
var $step1239 = 0;
var $ans1244 = D;
var $al1245 = L[725];
try {
if(R.isActivationRecord($l11241)) {
$step1239 = $l11241.step;
$al1245 = $l11241.from;
$ans1244 = $l11241.ans;
l11241 = $l11241.args[0];
l21242 = $l11241.args[1];
l31243 = $l11241.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[725],3,$t);
}
var l11241 = $l11241;
var l21242 = $l21242;
var l31243 = $l31243;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1239) {
case 0: $step1239 = 1;
$al1245 = L[724];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1245,is$empty435.$var);
}
$ans1244 = is$empty435.$var.app(l11241);
break;
case 1: var anf_arg1246 = $ans1244;
$al1245 = L[713];
var anf_if1259 = R.checkWrapBoolean(anf_arg1246);
if(R.isPyretTrue(anf_if1259)) {
$step1239 = 2;
} else {
$step1239 = 3;
}
break;
case 2: $step1239 = 8;
$ans1244 = (true);
break;
case 3: $step1239 = 4;
$al1245 = L[715];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1245,is$empty435.$var);
}
$ans1244 = is$empty435.$var.app(l21242);
break;
case 4: var anf_arg1247 = $ans1244;
$al1245 = L[713];
var anf_if1249 = R.checkWrapBoolean(anf_arg1247);
if(R.isPyretTrue(anf_if1249)) {
$step1239 = 5;
} else {
$step1239 = 6;
}
break;
case 5: $step1239 = 8;
$ans1244 = (true);
break;
case 6: $step1239 = 7;
$al1245 = L[714];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1245,is$empty435.$var);
}
$ans1244 = is$empty435.$var.app(l31243);
break;
case 7: var anf_arg1248 = $ans1244;
$step1239 = 8;
$al1245 = L[713];
$ans1244 = R.checkWrapBoolean(anf_arg1248);
break;
case 8: var anf_arg1250 = $ans1244;
$al1245 = L[713];
var anf_if1258 = R.checkWrapBoolean(anf_arg1250);
if(R.isPyretTrue(anf_if1258)) {
$step1239 = 9;
} else {
$step1239 = 10;
}
break;
case 9: $step1239 = 12;
$ans1244 = nothing3;
break;
case 10: var anf_arg1251 = G(l11241,"first",L[716]);
var anf_arg1252 = G(l21242,"first",L[717]);
var anf_arg1253 = G(l31243,"first",L[718]);
$step1239 = 11;
$al1245 = L[723];
if(!(R.isFunction(f1233))) {
R.ffi.throwNonFunApp($al1245,f1233);
}
$ans1244 = f1233.app(anf_arg1251,anf_arg1252,anf_arg1253);
break;
case 11: var anf_arg1255 = G(l11241,"rest",L[719]);
var anf_arg1256 = G(l21242,"rest",L[720]);
var anf_arg1257 = G(l31243,"rest",L[721]);
$step1239 = 12;
$al1245 = L[722];
if(!(R.isFunction(help1254.$var))) {
R.ffi.throwNonFunApp($al1245,help1254.$var);
}
$ans1244 = help1254.$var.app(anf_arg1255,anf_arg1256,anf_arg1257);
break;
case 12: ++R.GAS;
return $ans1244;
default: throw "No case numbered " + $step1239 + " in $temp_lam1240";
}
}
} catch($e1260) {
if(R.isCont($e1260) && ($step1239 !== 12)) {
$e1260.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1245,$temp_lam1240,$step1239,[l11241,l21242,l31243],[]);
}
if(R.isPyretException($e1260)) {
$e1260.pyretStack.push($al1245);
}
throw $e1260;
}
};
var anf_assign1261 = R.makeFunction($temp_lam1240);
help1254.$var = anf_assign1261;
$step1231 = 5;
$al1238 = L[727];
if(!(R.isFunction(help1254.$var))) {
R.ffi.throwNonFunApp($al1238,help1254.$var);
}
$ans1237 = help1254.$var.app(lst11234,lst21235,lst31236);
break;
case 5: var ann_check_temp1262 = $ans1237;
$step1231 = 6;
$al1238 = L[726];
R._checkAnn(L[726],$type$Nothing2,ann_check_temp1262);
break;
case 6: $step1231 = 7;
$ans1237 = ann_check_temp1262;
break;
case 7: ++R.GAS;
return $ans1237;
default: throw "No case numbered " + $step1231 + " in $temp_lam1232";
}
}
} catch($e1263) {
if(R.isCont($e1263) && ($step1231 !== 7)) {
$e1263.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1238,$temp_lam1232,$step1231,[f1233,lst11234,lst21235,lst31236],[ann_check_temp1262]);
}
if(R.isPyretException($e1263)) {
$e1263.pyretStack.push($al1238);
}
throw $e1263;
}
};
var anf_assign1264 = R.makeFunction($temp_lam1232);
each31265.$var = anf_assign1264;
var $temp_lam1267 = function($f1268,$lst11269,$lst21270,$lst31271,$lst41272) {
var $step1266 = 0;
var $ans1273 = D;
var $al1274 = L[755];
try {
if(R.isActivationRecord($f1268)) {
$step1266 = $f1268.step;
$al1274 = $f1268.from;
$ans1273 = $f1268.ans;
f1268 = $f1268.args[0];
lst11269 = $f1268.args[1];
lst21270 = $f1268.args[2];
lst31271 = $f1268.args[3];
lst41272 = $f1268.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[755],5,$t);
}
var f1268 = $f1268;
var lst11269 = $lst11269;
var lst21270 = $lst21270;
var lst31271 = $lst31271;
var lst41272 = $lst41272;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1266) {
case 0: $step1266 = 1;
$al1274 = L[750];
R._checkAnn(L[750],R.Function,f1268);
break;
case 1: $step1266 = 2;
$al1274 = L[751];
R._checkAnn(L[751],List53,lst11269);
break;
case 2: $step1266 = 3;
$al1274 = L[752];
R._checkAnn(L[752],List53,lst21270);
break;
case 3: $step1266 = 4;
$al1274 = L[753];
R._checkAnn(L[753],List53,lst31271);
break;
case 4: $step1266 = 5;
$al1274 = L[754];
R._checkAnn(L[754],List53,lst41272);
break;
case 5: var help1294 = {"$var":D};
var $temp_lam1276 = function($l11277,$l21278,$l31279,$l41280) {
var $step1275 = 0;
var $ans1281 = D;
var $al1282 = L[748];
try {
if(R.isActivationRecord($l11277)) {
$step1275 = $l11277.step;
$al1282 = $l11277.from;
$ans1281 = $l11277.ans;
l11277 = $l11277.args[0];
l21278 = $l11277.args[1];
l31279 = $l11277.args[2];
l41280 = $l11277.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[748],4,$t);
}
var l11277 = $l11277;
var l21278 = $l21278;
var l31279 = $l31279;
var l41280 = $l41280;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1275) {
case 0: $step1275 = 1;
$al1282 = L[747];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1282,is$empty435.$var);
}
$ans1281 = is$empty435.$var.app(l11277);
break;
case 1: var anf_arg1283 = $ans1281;
$al1282 = L[733];
var anf_if1300 = R.checkWrapBoolean(anf_arg1283);
if(R.isPyretTrue(anf_if1300)) {
$step1275 = 2;
} else {
$step1275 = 3;
}
break;
case 2: $step1275 = 11;
$ans1281 = (true);
break;
case 3: $step1275 = 4;
$al1282 = L[736];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1282,is$empty435.$var);
}
$ans1281 = is$empty435.$var.app(l21278);
break;
case 4: var anf_arg1284 = $ans1281;
$al1282 = L[733];
var anf_if1288 = R.checkWrapBoolean(anf_arg1284);
if(R.isPyretTrue(anf_if1288)) {
$step1275 = 5;
} else {
$step1275 = 6;
}
break;
case 5: $step1275 = 11;
$ans1281 = (true);
break;
case 6: $step1275 = 7;
$al1282 = L[735];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1282,is$empty435.$var);
}
$ans1281 = is$empty435.$var.app(l31279);
break;
case 7: var anf_arg1285 = $ans1281;
$al1282 = L[733];
var anf_if1287 = R.checkWrapBoolean(anf_arg1285);
if(R.isPyretTrue(anf_if1287)) {
$step1275 = 8;
} else {
$step1275 = 9;
}
break;
case 8: $step1275 = 11;
$ans1281 = (true);
break;
case 9: $step1275 = 10;
$al1282 = L[734];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1282,is$empty435.$var);
}
$ans1281 = is$empty435.$var.app(l41280);
break;
case 10: var anf_arg1286 = $ans1281;
$step1275 = 11;
$al1282 = L[733];
$ans1281 = R.checkWrapBoolean(anf_arg1286);
break;
case 11: var anf_arg1289 = $ans1281;
$al1282 = L[733];
var anf_if1299 = R.checkWrapBoolean(anf_arg1289);
if(R.isPyretTrue(anf_if1299)) {
$step1275 = 12;
} else {
$step1275 = 13;
}
break;
case 12: $step1275 = 15;
$ans1281 = nothing3;
break;
case 13: var anf_arg1290 = G(l11277,"first",L[737]);
var anf_arg1291 = G(l21278,"first",L[738]);
var anf_arg1292 = G(l31279,"first",L[739]);
var anf_arg1293 = G(l41280,"first",L[740]);
$step1275 = 14;
$al1282 = L[746];
if(!(R.isFunction(f1268))) {
R.ffi.throwNonFunApp($al1282,f1268);
}
$ans1281 = f1268.app(anf_arg1290,anf_arg1291,anf_arg1292,anf_arg1293);
break;
case 14: var anf_arg1295 = G(l11277,"rest",L[741]);
var anf_arg1296 = G(l21278,"rest",L[742]);
var anf_arg1297 = G(l31279,"rest",L[743]);
var anf_arg1298 = G(l41280,"rest",L[744]);
$step1275 = 15;
$al1282 = L[745];
if(!(R.isFunction(help1294.$var))) {
R.ffi.throwNonFunApp($al1282,help1294.$var);
}
$ans1281 = help1294.$var.app(anf_arg1295,anf_arg1296,anf_arg1297,anf_arg1298);
break;
case 15: ++R.GAS;
return $ans1281;
default: throw "No case numbered " + $step1275 + " in $temp_lam1276";
}
}
} catch($e1301) {
if(R.isCont($e1301) && ($step1275 !== 15)) {
$e1301.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1282,$temp_lam1276,$step1275,[l11277,l21278,l31279,l41280],[]);
}
if(R.isPyretException($e1301)) {
$e1301.pyretStack.push($al1282);
}
throw $e1301;
}
};
var anf_assign1302 = R.makeFunction($temp_lam1276);
help1294.$var = anf_assign1302;
$step1266 = 6;
$al1274 = L[749];
if(!(R.isFunction(help1294.$var))) {
R.ffi.throwNonFunApp($al1274,help1294.$var);
}
$ans1273 = help1294.$var.app(lst11269,lst21270,lst31271,lst41272);
break;
case 6: ++R.GAS;
return $ans1273;
default: throw "No case numbered " + $step1266 + " in $temp_lam1267";
}
}
} catch($e1303) {
if(R.isCont($e1303) && ($step1266 !== 6)) {
$e1303.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1274,$temp_lam1267,$step1266,[f1268,lst11269,lst21270,lst31271,lst41272],[]);
}
if(R.isPyretException($e1303)) {
$e1303.pyretStack.push($al1274);
}
throw $e1303;
}
};
var anf_assign1304 = R.makeFunction($temp_lam1267);
each41305.$var = anf_assign1304;
var $temp_lam1307 = function($f1308,$num1309,$lst1310) {
var $step1306 = 0;
var $ans1311 = D;
var $al1312 = L[768];
try {
if(R.isActivationRecord($f1308)) {
$step1306 = $f1308.step;
$al1312 = $f1308.from;
$ans1311 = $f1308.ans;
f1308 = $f1308.args[0];
num1309 = $f1308.args[1];
lst1310 = $f1308.args[2];
ann_check_temp1327 = $f1308.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[768],3,$t);
}
var f1308 = $f1308;
var num1309 = $num1309;
var lst1310 = $lst1310;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1306) {
case 0: $step1306 = 1;
$al1312 = L[765];
R._checkAnn(L[765],R.Function,f1308);
break;
case 1: $step1306 = 2;
$al1312 = L[766];
R._checkAnn(L[766],$type$Number1,num1309);
break;
case 2: $step1306 = 3;
$al1312 = L[767];
R._checkAnn(L[767],List53,lst1310);
break;
case 3: var help1321 = {"$var":D};
var $temp_lam1314 = function($n1315,$l1316) {
var $step1313 = 0;
var $ans1317 = D;
var $al1318 = L[762];
try {
if(R.isActivationRecord($n1315)) {
$step1313 = $n1315.step;
$al1318 = $n1315.from;
$ans1317 = $n1315.ans;
n1315 = $n1315.args[0];
l1316 = $n1315.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[762],2,$t);
}
var n1315 = $n1315;
var l1316 = $l1316;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1313) {
case 0: $step1313 = 1;
$al1318 = L[756];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1318,is$empty435.$var);
}
$ans1317 = is$empty435.$var.app(l1316);
break;
case 1: var anf_arg1319 = $ans1317;
$al1318 = L[756];
var anf_if1324 = R.checkWrapBoolean(anf_arg1319);
if(R.isPyretTrue(anf_if1324)) {
$step1313 = 2;
} else {
$step1313 = 3;
}
break;
case 2: $step1313 = 6;
$ans1317 = nothing3;
break;
case 3: var anf_arg1320 = G(l1316,"first",L[757]);
$step1313 = 4;
$al1318 = L[761];
if(!(R.isFunction(f1308))) {
R.ffi.throwNonFunApp($al1318,f1308);
}
$ans1317 = f1308.app(n1315,anf_arg1320);
break;
case 4: $step1313 = 5;
$al1318 = L[760];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1318,_plus7);
}
$ans1317 = _plus7.app(n1315,(1));
break;
case 5: var anf_arg1322 = $ans1317;
var anf_arg1323 = G(l1316,"rest",L[758]);
$step1313 = 6;
$al1318 = L[759];
if(!(R.isFunction(help1321.$var))) {
R.ffi.throwNonFunApp($al1318,help1321.$var);
}
$ans1317 = help1321.$var.app(anf_arg1322,anf_arg1323);
break;
case 6: ++R.GAS;
return $ans1317;
default: throw "No case numbered " + $step1313 + " in $temp_lam1314";
}
}
} catch($e1325) {
if(R.isCont($e1325) && ($step1313 !== 6)) {
$e1325.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1318,$temp_lam1314,$step1313,[n1315,l1316],[]);
}
if(R.isPyretException($e1325)) {
$e1325.pyretStack.push($al1318);
}
throw $e1325;
}
};
var anf_assign1326 = R.makeFunction($temp_lam1314);
help1321.$var = anf_assign1326;
$step1306 = 4;
$al1312 = L[764];
if(!(R.isFunction(help1321.$var))) {
R.ffi.throwNonFunApp($al1312,help1321.$var);
}
$ans1311 = help1321.$var.app(num1309,lst1310);
break;
case 4: var ann_check_temp1327 = $ans1311;
$step1306 = 5;
$al1312 = L[763];
R._checkAnn(L[763],$type$Nothing2,ann_check_temp1327);
break;
case 5: $step1306 = 6;
$ans1311 = ann_check_temp1327;
break;
case 6: ++R.GAS;
return $ans1311;
default: throw "No case numbered " + $step1306 + " in $temp_lam1307";
}
}
} catch($e1328) {
if(R.isCont($e1328) && ($step1306 !== 6)) {
$e1328.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1312,$temp_lam1307,$step1306,[f1308,num1309,lst1310],[ann_check_temp1327]);
}
if(R.isPyretException($e1328)) {
$e1328.pyretStack.push($al1312);
}
throw $e1328;
}
};
var anf_assign1329 = R.makeFunction($temp_lam1307);
each_n1330.$var = anf_assign1329;
var $temp_lam1332 = function($f1333,$num1334,$lst11335,$lst21336) {
var $step1331 = 0;
var $ans1337 = D;
var $al1338 = L[786];
try {
if(R.isActivationRecord($f1333)) {
$step1331 = $f1333.step;
$al1338 = $f1333.from;
$ans1337 = $f1333.ans;
f1333 = $f1333.args[0];
num1334 = $f1333.args[1];
lst11335 = $f1333.args[2];
lst21336 = $f1333.args[3];
ann_check_temp1359 = $f1333.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[786],4,$t);
}
var f1333 = $f1333;
var num1334 = $num1334;
var lst11335 = $lst11335;
var lst21336 = $lst21336;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1331) {
case 0: $step1331 = 1;
$al1338 = L[782];
R._checkAnn(L[782],R.Function,f1333);
break;
case 1: $step1331 = 2;
$al1338 = L[783];
R._checkAnn(L[783],$type$Number1,num1334);
break;
case 2: $step1331 = 3;
$al1338 = L[784];
R._checkAnn(L[784],List53,lst11335);
break;
case 3: $step1331 = 4;
$al1338 = L[785];
R._checkAnn(L[785],List53,lst21336);
break;
case 4: var help1351 = {"$var":D};
var $temp_lam1340 = function($n1341,$l11342,$l21343) {
var $step1339 = 0;
var $ans1344 = D;
var $al1345 = L[779];
try {
if(R.isActivationRecord($n1341)) {
$step1339 = $n1341.step;
$al1345 = $n1341.from;
$ans1344 = $n1341.ans;
n1341 = $n1341.args[0];
l11342 = $n1341.args[1];
l21343 = $n1341.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[779],3,$t);
}
var n1341 = $n1341;
var l11342 = $l11342;
var l21343 = $l21343;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1339) {
case 0: $step1339 = 1;
$al1345 = L[778];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1345,is$empty435.$var);
}
$ans1344 = is$empty435.$var.app(l11342);
break;
case 1: var anf_arg1346 = $ans1344;
$al1345 = L[769];
var anf_if1356 = R.checkWrapBoolean(anf_arg1346);
if(R.isPyretTrue(anf_if1356)) {
$step1339 = 2;
} else {
$step1339 = 3;
}
break;
case 2: $step1339 = 5;
$ans1344 = (true);
break;
case 3: $step1339 = 4;
$al1345 = L[770];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1345,is$empty435.$var);
}
$ans1344 = is$empty435.$var.app(l21343);
break;
case 4: var anf_arg1347 = $ans1344;
$step1339 = 5;
$al1345 = L[769];
$ans1344 = R.checkWrapBoolean(anf_arg1347);
break;
case 5: var anf_arg1348 = $ans1344;
$al1345 = L[769];
var anf_if1355 = R.checkWrapBoolean(anf_arg1348);
if(R.isPyretTrue(anf_if1355)) {
$step1339 = 6;
} else {
$step1339 = 7;
}
break;
case 6: $step1339 = 10;
$ans1344 = nothing3;
break;
case 7: var anf_arg1349 = G(l11342,"first",L[771]);
var anf_arg1350 = G(l21343,"first",L[772]);
$step1339 = 8;
$al1345 = L[777];
if(!(R.isFunction(f1333))) {
R.ffi.throwNonFunApp($al1345,f1333);
}
$ans1344 = f1333.app(n1341,anf_arg1349,anf_arg1350);
break;
case 8: $step1339 = 9;
$al1345 = L[776];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1345,_plus7);
}
$ans1344 = _plus7.app(n1341,(1));
break;
case 9: var anf_arg1352 = $ans1344;
var anf_arg1353 = G(l11342,"rest",L[773]);
var anf_arg1354 = G(l21343,"rest",L[774]);
$step1339 = 10;
$al1345 = L[775];
if(!(R.isFunction(help1351.$var))) {
R.ffi.throwNonFunApp($al1345,help1351.$var);
}
$ans1344 = help1351.$var.app(anf_arg1352,anf_arg1353,anf_arg1354);
break;
case 10: ++R.GAS;
return $ans1344;
default: throw "No case numbered " + $step1339 + " in $temp_lam1340";
}
}
} catch($e1357) {
if(R.isCont($e1357) && ($step1339 !== 10)) {
$e1357.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1345,$temp_lam1340,$step1339,[n1341,l11342,l21343],[]);
}
if(R.isPyretException($e1357)) {
$e1357.pyretStack.push($al1345);
}
throw $e1357;
}
};
var anf_assign1358 = R.makeFunction($temp_lam1340);
help1351.$var = anf_assign1358;
$step1331 = 5;
$al1338 = L[781];
if(!(R.isFunction(help1351.$var))) {
R.ffi.throwNonFunApp($al1338,help1351.$var);
}
$ans1337 = help1351.$var.app(num1334,lst11335,lst21336);
break;
case 5: var ann_check_temp1359 = $ans1337;
$step1331 = 6;
$al1338 = L[780];
R._checkAnn(L[780],$type$Nothing2,ann_check_temp1359);
break;
case 6: $step1331 = 7;
$ans1337 = ann_check_temp1359;
break;
case 7: ++R.GAS;
return $ans1337;
default: throw "No case numbered " + $step1331 + " in $temp_lam1332";
}
}
} catch($e1360) {
if(R.isCont($e1360) && ($step1331 !== 7)) {
$e1360.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1338,$temp_lam1332,$step1331,[f1333,num1334,lst11335,lst21336],[ann_check_temp1359]);
}
if(R.isPyretException($e1360)) {
$e1360.pyretStack.push($al1338);
}
throw $e1360;
}
};
var anf_assign1361 = R.makeFunction($temp_lam1332);
each2_n1362.$var = anf_assign1361;
var $temp_lam1364 = function($f1365,$num1366,$lst11367,$lst21368,$lst31369) {
var $step1363 = 0;
var $ans1370 = D;
var $al1371 = L[808];
try {
if(R.isActivationRecord($f1365)) {
$step1363 = $f1365.step;
$al1371 = $f1365.from;
$ans1370 = $f1365.ans;
f1365 = $f1365.args[0];
num1366 = $f1365.args[1];
lst11367 = $f1365.args[2];
lst21368 = $f1365.args[3];
lst31369 = $f1365.args[4];
ann_check_temp1397 = $f1365.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[808],5,$t);
}
var f1365 = $f1365;
var num1366 = $num1366;
var lst11367 = $lst11367;
var lst21368 = $lst21368;
var lst31369 = $lst31369;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1363) {
case 0: $step1363 = 1;
$al1371 = L[803];
R._checkAnn(L[803],R.Function,f1365);
break;
case 1: $step1363 = 2;
$al1371 = L[804];
R._checkAnn(L[804],$type$Number1,num1366);
break;
case 2: $step1363 = 3;
$al1371 = L[805];
R._checkAnn(L[805],List53,lst11367);
break;
case 3: $step1363 = 4;
$al1371 = L[806];
R._checkAnn(L[806],List53,lst21368);
break;
case 4: $step1363 = 5;
$al1371 = L[807];
R._checkAnn(L[807],List53,lst31369);
break;
case 5: var help1388 = {"$var":D};
var $temp_lam1373 = function($n1374,$l11375,$l21376,$l31377) {
var $step1372 = 0;
var $ans1378 = D;
var $al1379 = L[800];
try {
if(R.isActivationRecord($n1374)) {
$step1372 = $n1374.step;
$al1379 = $n1374.from;
$ans1378 = $n1374.ans;
n1374 = $n1374.args[0];
l11375 = $n1374.args[1];
l21376 = $n1374.args[2];
l31377 = $n1374.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[800],4,$t);
}
var n1374 = $n1374;
var l11375 = $l11375;
var l21376 = $l21376;
var l31377 = $l31377;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1372) {
case 0: $step1372 = 1;
$al1379 = L[799];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1379,is$empty435.$var);
}
$ans1378 = is$empty435.$var.app(l11375);
break;
case 1: var anf_arg1380 = $ans1378;
$al1379 = L[787];
var anf_if1394 = R.checkWrapBoolean(anf_arg1380);
if(R.isPyretTrue(anf_if1394)) {
$step1372 = 2;
} else {
$step1372 = 3;
}
break;
case 2: $step1372 = 8;
$ans1378 = (true);
break;
case 3: $step1372 = 4;
$al1379 = L[789];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1379,is$empty435.$var);
}
$ans1378 = is$empty435.$var.app(l21376);
break;
case 4: var anf_arg1381 = $ans1378;
$al1379 = L[787];
var anf_if1383 = R.checkWrapBoolean(anf_arg1381);
if(R.isPyretTrue(anf_if1383)) {
$step1372 = 5;
} else {
$step1372 = 6;
}
break;
case 5: $step1372 = 8;
$ans1378 = (true);
break;
case 6: $step1372 = 7;
$al1379 = L[788];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1379,is$empty435.$var);
}
$ans1378 = is$empty435.$var.app(l31377);
break;
case 7: var anf_arg1382 = $ans1378;
$step1372 = 8;
$al1379 = L[787];
$ans1378 = R.checkWrapBoolean(anf_arg1382);
break;
case 8: var anf_arg1384 = $ans1378;
$al1379 = L[787];
var anf_if1393 = R.checkWrapBoolean(anf_arg1384);
if(R.isPyretTrue(anf_if1393)) {
$step1372 = 9;
} else {
$step1372 = 10;
}
break;
case 9: $step1372 = 13;
$ans1378 = nothing3;
break;
case 10: var anf_arg1385 = G(l11375,"first",L[790]);
var anf_arg1386 = G(l21376,"first",L[791]);
var anf_arg1387 = G(l31377,"first",L[792]);
$step1372 = 11;
$al1379 = L[798];
if(!(R.isFunction(f1365))) {
R.ffi.throwNonFunApp($al1379,f1365);
}
$ans1378 = f1365.app(n1374,anf_arg1385,anf_arg1386,anf_arg1387);
break;
case 11: $step1372 = 12;
$al1379 = L[797];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1379,_plus7);
}
$ans1378 = _plus7.app(n1374,(1));
break;
case 12: var anf_arg1389 = $ans1378;
var anf_arg1390 = G(l11375,"rest",L[793]);
var anf_arg1391 = G(l21376,"rest",L[794]);
var anf_arg1392 = G(l31377,"rest",L[795]);
$step1372 = 13;
$al1379 = L[796];
if(!(R.isFunction(help1388.$var))) {
R.ffi.throwNonFunApp($al1379,help1388.$var);
}
$ans1378 = help1388.$var.app(anf_arg1389,anf_arg1390,anf_arg1391,anf_arg1392);
break;
case 13: ++R.GAS;
return $ans1378;
default: throw "No case numbered " + $step1372 + " in $temp_lam1373";
}
}
} catch($e1395) {
if(R.isCont($e1395) && ($step1372 !== 13)) {
$e1395.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1379,$temp_lam1373,$step1372,[n1374,l11375,l21376,l31377],[]);
}
if(R.isPyretException($e1395)) {
$e1395.pyretStack.push($al1379);
}
throw $e1395;
}
};
var anf_assign1396 = R.makeFunction($temp_lam1373);
help1388.$var = anf_assign1396;
$step1363 = 6;
$al1371 = L[802];
if(!(R.isFunction(help1388.$var))) {
R.ffi.throwNonFunApp($al1371,help1388.$var);
}
$ans1370 = help1388.$var.app(num1366,lst11367,lst21368,lst31369);
break;
case 6: var ann_check_temp1397 = $ans1370;
$step1363 = 7;
$al1371 = L[801];
R._checkAnn(L[801],$type$Nothing2,ann_check_temp1397);
break;
case 7: $step1363 = 8;
$ans1370 = ann_check_temp1397;
break;
case 8: ++R.GAS;
return $ans1370;
default: throw "No case numbered " + $step1363 + " in $temp_lam1364";
}
}
} catch($e1398) {
if(R.isCont($e1398) && ($step1363 !== 8)) {
$e1398.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1371,$temp_lam1364,$step1363,[f1365,num1366,lst11367,lst21368,lst31369],[ann_check_temp1397]);
}
if(R.isPyretException($e1398)) {
$e1398.pyretStack.push($al1371);
}
throw $e1398;
}
};
var anf_assign1399 = R.makeFunction($temp_lam1364);
each3_n1400.$var = anf_assign1399;
var $temp_lam1402 = function($f1403,$num1404,$lst11405,$lst21406,$lst31407,$lst41408) {
var $step1401 = 0;
var $ans1409 = D;
var $al1410 = L[834];
try {
if(R.isActivationRecord($f1403)) {
$step1401 = $f1403.step;
$al1410 = $f1403.from;
$ans1409 = $f1403.ans;
f1403 = $f1403.args[0];
num1404 = $f1403.args[1];
lst11405 = $f1403.args[2];
lst21406 = $f1403.args[3];
lst31407 = $f1403.args[4];
lst41408 = $f1403.args[5];
ann_check_temp1441 = $f1403.vars[0];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[834],6,$t);
}
var f1403 = $f1403;
var num1404 = $num1404;
var lst11405 = $lst11405;
var lst21406 = $lst21406;
var lst31407 = $lst31407;
var lst41408 = $lst41408;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1401) {
case 0: $step1401 = 1;
$al1410 = L[828];
R._checkAnn(L[828],R.Function,f1403);
break;
case 1: $step1401 = 2;
$al1410 = L[829];
R._checkAnn(L[829],$type$Number1,num1404);
break;
case 2: $step1401 = 3;
$al1410 = L[830];
R._checkAnn(L[830],List53,lst11405);
break;
case 3: $step1401 = 4;
$al1410 = L[831];
R._checkAnn(L[831],List53,lst21406);
break;
case 4: $step1401 = 5;
$al1410 = L[832];
R._checkAnn(L[832],List53,lst31407);
break;
case 5: $step1401 = 6;
$al1410 = L[833];
R._checkAnn(L[833],List53,lst41408);
break;
case 6: var help1431 = {"$var":D};
var $temp_lam1412 = function($n1413,$l11414,$l21415,$l31416,$l41417) {
var $step1411 = 0;
var $ans1418 = D;
var $al1419 = L[825];
try {
if(R.isActivationRecord($n1413)) {
$step1411 = $n1413.step;
$al1419 = $n1413.from;
$ans1418 = $n1413.ans;
n1413 = $n1413.args[0];
l11414 = $n1413.args[1];
l21415 = $n1413.args[2];
l31416 = $n1413.args[3];
l41417 = $n1413.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[825],5,$t);
}
var n1413 = $n1413;
var l11414 = $l11414;
var l21415 = $l21415;
var l31416 = $l31416;
var l41417 = $l41417;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1411) {
case 0: $step1411 = 1;
$al1419 = L[824];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1419,is$empty435.$var);
}
$ans1418 = is$empty435.$var.app(l11414);
break;
case 1: var anf_arg1420 = $ans1418;
$al1419 = L[809];
var anf_if1438 = R.checkWrapBoolean(anf_arg1420);
if(R.isPyretTrue(anf_if1438)) {
$step1411 = 2;
} else {
$step1411 = 3;
}
break;
case 2: $step1411 = 11;
$ans1418 = (true);
break;
case 3: $step1411 = 4;
$al1419 = L[812];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1419,is$empty435.$var);
}
$ans1418 = is$empty435.$var.app(l21415);
break;
case 4: var anf_arg1421 = $ans1418;
$al1419 = L[809];
var anf_if1425 = R.checkWrapBoolean(anf_arg1421);
if(R.isPyretTrue(anf_if1425)) {
$step1411 = 5;
} else {
$step1411 = 6;
}
break;
case 5: $step1411 = 11;
$ans1418 = (true);
break;
case 6: $step1411 = 7;
$al1419 = L[811];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1419,is$empty435.$var);
}
$ans1418 = is$empty435.$var.app(l31416);
break;
case 7: var anf_arg1422 = $ans1418;
$al1419 = L[809];
var anf_if1424 = R.checkWrapBoolean(anf_arg1422);
if(R.isPyretTrue(anf_if1424)) {
$step1411 = 8;
} else {
$step1411 = 9;
}
break;
case 8: $step1411 = 11;
$ans1418 = (true);
break;
case 9: $step1411 = 10;
$al1419 = L[810];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1419,is$empty435.$var);
}
$ans1418 = is$empty435.$var.app(l41417);
break;
case 10: var anf_arg1423 = $ans1418;
$step1411 = 11;
$al1419 = L[809];
$ans1418 = R.checkWrapBoolean(anf_arg1423);
break;
case 11: var anf_arg1426 = $ans1418;
$al1419 = L[809];
var anf_if1437 = R.checkWrapBoolean(anf_arg1426);
if(R.isPyretTrue(anf_if1437)) {
$step1411 = 12;
} else {
$step1411 = 13;
}
break;
case 12: $step1411 = 16;
$ans1418 = nothing3;
break;
case 13: var anf_arg1427 = G(l11414,"first",L[813]);
var anf_arg1428 = G(l21415,"first",L[814]);
var anf_arg1429 = G(l31416,"first",L[815]);
var anf_arg1430 = G(l41417,"first",L[816]);
$step1411 = 14;
$al1419 = L[823];
if(!(R.isFunction(f1403))) {
R.ffi.throwNonFunApp($al1419,f1403);
}
$ans1418 = f1403.app(n1413,anf_arg1427,anf_arg1428,anf_arg1429,anf_arg1430);
break;
case 14: $step1411 = 15;
$al1419 = L[822];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1419,_plus7);
}
$ans1418 = _plus7.app(n1413,(1));
break;
case 15: var anf_arg1432 = $ans1418;
var anf_arg1433 = G(l11414,"rest",L[817]);
var anf_arg1434 = G(l21415,"rest",L[818]);
var anf_arg1435 = G(l31416,"rest",L[819]);
var anf_arg1436 = G(l41417,"rest",L[820]);
$step1411 = 16;
$al1419 = L[821];
if(!(R.isFunction(help1431.$var))) {
R.ffi.throwNonFunApp($al1419,help1431.$var);
}
$ans1418 = help1431.$var.app(anf_arg1432,anf_arg1433,anf_arg1434,anf_arg1435,anf_arg1436);
break;
case 16: ++R.GAS;
return $ans1418;
default: throw "No case numbered " + $step1411 + " in $temp_lam1412";
}
}
} catch($e1439) {
if(R.isCont($e1439) && ($step1411 !== 16)) {
$e1439.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1419,$temp_lam1412,$step1411,[n1413,l11414,l21415,l31416,l41417],[]);
}
if(R.isPyretException($e1439)) {
$e1439.pyretStack.push($al1419);
}
throw $e1439;
}
};
var anf_assign1440 = R.makeFunction($temp_lam1412);
help1431.$var = anf_assign1440;
$step1401 = 7;
$al1410 = L[827];
if(!(R.isFunction(help1431.$var))) {
R.ffi.throwNonFunApp($al1410,help1431.$var);
}
$ans1409 = help1431.$var.app(num1404,lst11405,lst21406,lst31407,lst41408);
break;
case 7: var ann_check_temp1441 = $ans1409;
$step1401 = 8;
$al1410 = L[826];
R._checkAnn(L[826],$type$Nothing2,ann_check_temp1441);
break;
case 8: $step1401 = 9;
$ans1409 = ann_check_temp1441;
break;
case 9: ++R.GAS;
return $ans1409;
default: throw "No case numbered " + $step1401 + " in $temp_lam1402";
}
}
} catch($e1442) {
if(R.isCont($e1442) && ($step1401 !== 9)) {
$e1442.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1410,$temp_lam1402,$step1401,[f1403,num1404,lst11405,lst21406,lst31407,lst41408],[ann_check_temp1441]);
}
if(R.isPyretException($e1442)) {
$e1442.pyretStack.push($al1410);
}
throw $e1442;
}
};
var anf_assign1443 = R.makeFunction($temp_lam1402);
each4_n1444.$var = anf_assign1443;
var $temp_lam1446 = function($f1447,$base1448,$lst1449) {
var $step1445 = 0;
var $ans1450 = D;
var $al1451 = L[850];
try {
if(R.isActivationRecord($f1447)) {
$step1445 = $f1447.step;
$al1451 = $f1447.from;
$ans1450 = $f1447.ans;
f1447 = $f1447.args[0];
base1448 = $f1447.args[1];
lst1449 = $f1447.args[2];
ann_check_temp1467 = $f1447.vars[0];
cases1452 = $f1447.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[850],3,$t);
}
var f1447 = $f1447;
var base1448 = $base1448;
var lst1449 = $lst1449;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1445) {
case 0: $step1445 = 1;
$al1451 = L[847];
R._checkAnn(L[847],R.Function,f1447);
break;
case 1: $step1445 = 2;
$al1451 = L[848];
R._checkAnn(L[848],R.Any,base1448);
break;
case 2: $step1445 = 3;
$al1451 = L[849];
R._checkAnn(L[849],List53,lst1449);
break;
case 3: var cases1452 = lst1449;
$step1445 = 4;
$al1451 = L[846];
R._checkAnn(L[846],List53,cases1452);
break;
case 4: var $cases_dispatch1466 = {"empty":5,
"link":6};
$al1451 = L[844];
$step1445 = $cases_dispatch1466[cases1452.$name] || 7;
break;
case 5: if(cases1452.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[835],false);
}
$step1445 = 8;
$ans1450 = base1448;
break;
case 6: if(cases1452.$arity >= 0) {
if(2 !== cases1452.$arity) {
R.ffi.throwCasesArityErrorC(L[842],2,cases1452.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[842],true);
}
$step1445 = 8;
$al1451 = L[843];
var $temp_branch1460 = function($elt1453,$r1457) {
var $step1461 = 0;
var $ans1462 = D;
var $al1463 = L[839];
try {
if(R.isActivationRecord($elt1453)) {
$step1461 = $elt1453.step;
$al1463 = $elt1453.from;
$ans1462 = $elt1453.ans;
elt1453 = $elt1453.args[0];
r1457 = $elt1453.args[1];
cases1454 = $elt1453.vars[0];
} else {
var elt1453 = $elt1453;
var r1457 = $r1457;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1461) {
case 0: $step1461 = 1;
$al1463 = L[841];
if(!(R.isFunction(f1447))) {
R.ffi.throwNonFunApp($al1463,f1447);
}
$ans1462 = f1447.app(base1448,elt1453);
break;
case 1: var cases1454 = $ans1462;
$step1461 = 2;
$al1463 = L[840];
R._checkAnn(L[840],R.getDotAnn(L[840],"E",E28,"Either"),cases1454);
break;
case 2: var $cases_dispatch1464 = {"left":3,
"right":4};
$al1463 = L[839];
$step1461 = $cases_dispatch1464[cases1454.$name] || 5;
break;
case 3: if(cases1454.$arity >= 0) {
if(1 !== cases1454.$arity) {
R.ffi.throwCasesArityErrorC(L[837],1,cases1454.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[837],true);
}
var $fn733 = cases1454.$constructor.$fieldNames;
var v1456 = R.derefField(cases1454.dict[$fn733[0]],cases1454.$mut_fields_mask[0],false);
$step1461 = 6;
$al1463 = L[836];
if(!(R.isFunction(fold$while1455.$var))) {
R.ffi.throwNonFunApp($al1463,fold$while1455.$var);
}
$ans1462 = fold$while1455.$var.app(f1447,v1456,r1457);
break;
case 4: if(cases1454.$arity >= 0) {
if(1 !== cases1454.$arity) {
R.ffi.throwCasesArityErrorC(L[838],1,cases1454.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[838],true);
}
var $fn733 = cases1454.$constructor.$fieldNames;
var v1458 = R.derefField(cases1454.dict[$fn733[0]],cases1454.$mut_fields_mask[0],false);
$step1461 = 6;
$ans1462 = v1458;
break;
case 5: $step1461 = 6;
$al1463 = L[839];
$ans1462 = R.throwNoCasesMatched(L[839],cases1454);
break;
case 6: ++R.GAS;
return $ans1462;
default: throw "No case numbered " + $step1461 + " in $temp_branch1460";
}
}
} catch($e1465) {
if(R.isCont($e1465) && ($step1461 !== 6)) {
$e1465.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1463,$temp_branch1460,$step1461,[elt1453,r1457],[cases1454]);
}
if(R.isPyretException($e1465)) {
$e1465.pyretStack.push($al1463);
}
throw $e1465;
}
};
$ans1450 = cases1452.$app_fields($temp_branch1460,[false,false]);
break;
case 7: $step1445 = 8;
$al1451 = L[844];
$ans1450 = R.throwNoCasesMatched(L[844],cases1452);
break;
case 8: var ann_check_temp1467 = $ans1450;
$step1445 = 9;
$al1451 = L[845];
R._checkAnn(L[845],R.Any,ann_check_temp1467);
break;
case 9: $step1445 = 10;
$ans1450 = ann_check_temp1467;
break;
case 10: ++R.GAS;
return $ans1450;
default: throw "No case numbered " + $step1445 + " in $temp_lam1446";
}
}
} catch($e1468) {
if(R.isCont($e1468) && ($step1445 !== 10)) {
$e1468.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1451,$temp_lam1446,$step1445,[f1447,base1448,lst1449],[ann_check_temp1467,cases1452]);
}
if(R.isPyretException($e1468)) {
$e1468.pyretStack.push($al1451);
}
throw $e1468;
}
};
var anf_assign1469 = R.makeFunction($temp_lam1446);
fold$while1455.$var = anf_assign1469;
var $temp_lam1471 = function($f1472,$base1473,$lst1474) {
var $step1470 = 0;
var $ans1475 = D;
var $al1476 = L[860];
try {
if(R.isActivationRecord($f1472)) {
$step1470 = $f1472.step;
$al1476 = $f1472.from;
$ans1475 = $f1472.ans;
f1472 = $f1472.args[0];
base1473 = $f1472.args[1];
lst1474 = $f1472.args[2];
ann_check_temp1481 = $f1472.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[860],3,$t);
}
var f1472 = $f1472;
var base1473 = $base1473;
var lst1474 = $lst1474;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1470) {
case 0: $step1470 = 1;
$al1476 = L[857];
R._checkAnn(L[857],R.Function,f1472);
break;
case 1: $step1470 = 2;
$al1476 = L[858];
R._checkAnn(L[858],R.Any,base1473);
break;
case 2: $step1470 = 3;
$al1476 = L[859];
R._checkAnn(L[859],List53,lst1474);
break;
case 3: $step1470 = 4;
$al1476 = L[851];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1476,is$empty435.$var);
}
$ans1475 = is$empty435.$var.app(lst1474);
break;
case 4: var anf_arg1477 = $ans1475;
$al1476 = L[851];
var anf_if1482 = R.checkWrapBoolean(anf_arg1477);
if(R.isPyretTrue(anf_if1482)) {
$step1470 = 5;
} else {
$step1470 = 6;
}
break;
case 5: $step1470 = 8;
$ans1475 = base1473;
break;
case 6: var anf_arg1478 = G(lst1474,"first",L[852]);
$step1470 = 7;
$al1476 = L[855];
if(!(R.isFunction(f1472))) {
R.ffi.throwNonFunApp($al1476,f1472);
}
$ans1475 = f1472.app(base1473,anf_arg1478);
break;
case 7: var anf_arg1479 = $ans1475;
var anf_arg1480 = G(lst1474,"rest",L[853]);
$step1470 = 8;
$al1476 = L[854];
if(!(R.isFunction(fold467.$var))) {
R.ffi.throwNonFunApp($al1476,fold467.$var);
}
$ans1475 = fold467.$var.app(f1472,anf_arg1479,anf_arg1480);
break;
case 8: var ann_check_temp1481 = $ans1475;
$step1470 = 9;
$al1476 = L[856];
R._checkAnn(L[856],R.Any,ann_check_temp1481);
break;
case 9: $step1470 = 10;
$ans1475 = ann_check_temp1481;
break;
case 10: ++R.GAS;
return $ans1475;
default: throw "No case numbered " + $step1470 + " in $temp_lam1471";
}
}
} catch($e1483) {
if(R.isCont($e1483) && ($step1470 !== 10)) {
$e1483.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1476,$temp_lam1471,$step1470,[f1472,base1473,lst1474],[ann_check_temp1481]);
}
if(R.isPyretException($e1483)) {
$e1483.pyretStack.push($al1476);
}
throw $e1483;
}
};
var anf_assign1484 = R.makeFunction($temp_lam1471);
fold467.$var = anf_assign1484;
foldl1485.$var = fold467.$var;
var $temp_lam1487 = function($f1488,$base1489,$lst1490) {
var $step1486 = 0;
var $ans1491 = D;
var $al1492 = L[870];
try {
if(R.isActivationRecord($f1488)) {
$step1486 = $f1488.step;
$al1492 = $f1488.from;
$ans1491 = $f1488.ans;
f1488 = $f1488.args[0];
base1489 = $f1488.args[1];
lst1490 = $f1488.args[2];
ann_check_temp1498 = $f1488.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[870],3,$t);
}
var f1488 = $f1488;
var base1489 = $base1489;
var lst1490 = $lst1490;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1486) {
case 0: $step1486 = 1;
$al1492 = L[867];
R._checkAnn(L[867],R.Function,f1488);
break;
case 1: $step1486 = 2;
$al1492 = L[868];
R._checkAnn(L[868],R.Any,base1489);
break;
case 2: $step1486 = 3;
$al1492 = L[869];
R._checkAnn(L[869],List53,lst1490);
break;
case 3: $step1486 = 4;
$al1492 = L[861];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1492,is$empty435.$var);
}
$ans1491 = is$empty435.$var.app(lst1490);
break;
case 4: var anf_arg1493 = $ans1491;
$al1492 = L[861];
var anf_if1499 = R.checkWrapBoolean(anf_arg1493);
if(R.isPyretTrue(anf_if1499)) {
$step1486 = 5;
} else {
$step1486 = 6;
}
break;
case 5: $step1486 = 8;
$ans1491 = base1489;
break;
case 6: var anf_arg1495 = G(lst1490,"rest",L[862]);
$step1486 = 7;
$al1492 = L[865];
if(!(R.isFunction(foldr1494.$var))) {
R.ffi.throwNonFunApp($al1492,foldr1494.$var);
}
$ans1491 = foldr1494.$var.app(f1488,base1489,anf_arg1495);
break;
case 7: var anf_arg1496 = $ans1491;
var anf_arg1497 = G(lst1490,"first",L[863]);
$step1486 = 8;
$al1492 = L[864];
if(!(R.isFunction(f1488))) {
R.ffi.throwNonFunApp($al1492,f1488);
}
$ans1491 = f1488.app(anf_arg1496,anf_arg1497);
break;
case 8: var ann_check_temp1498 = $ans1491;
$step1486 = 9;
$al1492 = L[866];
R._checkAnn(L[866],R.Any,ann_check_temp1498);
break;
case 9: $step1486 = 10;
$ans1491 = ann_check_temp1498;
break;
case 10: ++R.GAS;
return $ans1491;
default: throw "No case numbered " + $step1486 + " in $temp_lam1487";
}
}
} catch($e1500) {
if(R.isCont($e1500) && ($step1486 !== 10)) {
$e1500.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1492,$temp_lam1487,$step1486,[f1488,base1489,lst1490],[ann_check_temp1498]);
}
if(R.isPyretException($e1500)) {
$e1500.pyretStack.push($al1492);
}
throw $e1500;
}
};
var anf_assign1501 = R.makeFunction($temp_lam1487);
foldr1494.$var = anf_assign1501;
var $temp_lam1503 = function($f1504,$base1505,$l11506,$l21507) {
var $step1502 = 0;
var $ans1508 = D;
var $al1509 = L[885];
try {
if(R.isActivationRecord($f1504)) {
$step1502 = $f1504.step;
$al1509 = $f1504.from;
$ans1508 = $f1504.ans;
f1504 = $f1504.args[0];
base1505 = $f1504.args[1];
l11506 = $f1504.args[2];
l21507 = $f1504.args[3];
ann_check_temp1519 = $f1504.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[885],4,$t);
}
var f1504 = $f1504;
var base1505 = $base1505;
var l11506 = $l11506;
var l21507 = $l21507;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1502) {
case 0: $step1502 = 1;
$al1509 = L[881];
R._checkAnn(L[881],R.Function,f1504);
break;
case 1: $step1502 = 2;
$al1509 = L[882];
R._checkAnn(L[882],R.Any,base1505);
break;
case 2: $step1502 = 3;
$al1509 = L[883];
R._checkAnn(L[883],List53,l11506);
break;
case 3: $step1502 = 4;
$al1509 = L[884];
R._checkAnn(L[884],List53,l21507);
break;
case 4: $step1502 = 5;
$al1509 = L[880];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1509,is$empty435.$var);
}
$ans1508 = is$empty435.$var.app(l11506);
break;
case 5: var anf_arg1510 = $ans1508;
$al1509 = L[871];
var anf_if1521 = R.checkWrapBoolean(anf_arg1510);
if(R.isPyretTrue(anf_if1521)) {
$step1502 = 6;
} else {
$step1502 = 7;
}
break;
case 6: $step1502 = 9;
$ans1508 = (true);
break;
case 7: $step1502 = 8;
$al1509 = L[872];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1509,is$empty435.$var);
}
$ans1508 = is$empty435.$var.app(l21507);
break;
case 8: var anf_arg1511 = $ans1508;
$step1502 = 9;
$al1509 = L[871];
$ans1508 = R.checkWrapBoolean(anf_arg1511);
break;
case 9: var anf_arg1512 = $ans1508;
$al1509 = L[871];
var anf_if1520 = R.checkWrapBoolean(anf_arg1512);
if(R.isPyretTrue(anf_if1520)) {
$step1502 = 10;
} else {
$step1502 = 11;
}
break;
case 10: $step1502 = 13;
$ans1508 = base1505;
break;
case 11: var anf_arg1513 = G(l11506,"first",L[873]);
var anf_arg1514 = G(l21507,"first",L[874]);
$step1502 = 12;
$al1509 = L[878];
if(!(R.isFunction(f1504))) {
R.ffi.throwNonFunApp($al1509,f1504);
}
$ans1508 = f1504.app(base1505,anf_arg1513,anf_arg1514);
break;
case 12: var anf_arg1516 = $ans1508;
var anf_arg1517 = G(l11506,"rest",L[875]);
var anf_arg1518 = G(l21507,"rest",L[876]);
$step1502 = 13;
$al1509 = L[877];
if(!(R.isFunction(fold21515.$var))) {
R.ffi.throwNonFunApp($al1509,fold21515.$var);
}
$ans1508 = fold21515.$var.app(f1504,anf_arg1516,anf_arg1517,anf_arg1518);
break;
case 13: var ann_check_temp1519 = $ans1508;
$step1502 = 14;
$al1509 = L[879];
R._checkAnn(L[879],R.Any,ann_check_temp1519);
break;
case 14: $step1502 = 15;
$ans1508 = ann_check_temp1519;
break;
case 15: ++R.GAS;
return $ans1508;
default: throw "No case numbered " + $step1502 + " in $temp_lam1503";
}
}
} catch($e1522) {
if(R.isCont($e1522) && ($step1502 !== 15)) {
$e1522.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1509,$temp_lam1503,$step1502,[f1504,base1505,l11506,l21507],[ann_check_temp1519]);
}
if(R.isPyretException($e1522)) {
$e1522.pyretStack.push($al1509);
}
throw $e1522;
}
};
var anf_assign1523 = R.makeFunction($temp_lam1503);
fold21515.$var = anf_assign1523;
var $temp_lam1525 = function($f1526,$base1527,$l11528,$l21529,$l31530) {
var $step1524 = 0;
var $ans1531 = D;
var $al1532 = L[904];
try {
if(R.isActivationRecord($f1526)) {
$step1524 = $f1526.step;
$al1532 = $f1526.from;
$ans1531 = $f1526.ans;
f1526 = $f1526.args[0];
base1527 = $f1526.args[1];
l11528 = $f1526.args[2];
l21529 = $f1526.args[3];
l31530 = $f1526.args[4];
ann_check_temp1546 = $f1526.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[904],5,$t);
}
var f1526 = $f1526;
var base1527 = $base1527;
var l11528 = $l11528;
var l21529 = $l21529;
var l31530 = $l31530;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1524) {
case 0: $step1524 = 1;
$al1532 = L[899];
R._checkAnn(L[899],R.Function,f1526);
break;
case 1: $step1524 = 2;
$al1532 = L[900];
R._checkAnn(L[900],R.Any,base1527);
break;
case 2: $step1524 = 3;
$al1532 = L[901];
R._checkAnn(L[901],List53,l11528);
break;
case 3: $step1524 = 4;
$al1532 = L[902];
R._checkAnn(L[902],List53,l21529);
break;
case 4: $step1524 = 5;
$al1532 = L[903];
R._checkAnn(L[903],List53,l31530);
break;
case 5: $step1524 = 6;
$al1532 = L[898];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1532,is$empty435.$var);
}
$ans1531 = is$empty435.$var.app(l11528);
break;
case 6: var anf_arg1533 = $ans1531;
$al1532 = L[886];
var anf_if1548 = R.checkWrapBoolean(anf_arg1533);
if(R.isPyretTrue(anf_if1548)) {
$step1524 = 7;
} else {
$step1524 = 8;
}
break;
case 7: $step1524 = 13;
$ans1531 = (true);
break;
case 8: $step1524 = 9;
$al1532 = L[888];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1532,is$empty435.$var);
}
$ans1531 = is$empty435.$var.app(l21529);
break;
case 9: var anf_arg1534 = $ans1531;
$al1532 = L[886];
var anf_if1536 = R.checkWrapBoolean(anf_arg1534);
if(R.isPyretTrue(anf_if1536)) {
$step1524 = 10;
} else {
$step1524 = 11;
}
break;
case 10: $step1524 = 13;
$ans1531 = (true);
break;
case 11: $step1524 = 12;
$al1532 = L[887];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1532,is$empty435.$var);
}
$ans1531 = is$empty435.$var.app(l31530);
break;
case 12: var anf_arg1535 = $ans1531;
$step1524 = 13;
$al1532 = L[886];
$ans1531 = R.checkWrapBoolean(anf_arg1535);
break;
case 13: var anf_arg1537 = $ans1531;
$al1532 = L[886];
var anf_if1547 = R.checkWrapBoolean(anf_arg1537);
if(R.isPyretTrue(anf_if1547)) {
$step1524 = 14;
} else {
$step1524 = 15;
}
break;
case 14: $step1524 = 17;
$ans1531 = base1527;
break;
case 15: var anf_arg1538 = G(l11528,"first",L[889]);
var anf_arg1539 = G(l21529,"first",L[890]);
var anf_arg1540 = G(l31530,"first",L[891]);
$step1524 = 16;
$al1532 = L[896];
if(!(R.isFunction(f1526))) {
R.ffi.throwNonFunApp($al1532,f1526);
}
$ans1531 = f1526.app(base1527,anf_arg1538,anf_arg1539,anf_arg1540);
break;
case 16: var anf_arg1542 = $ans1531;
var anf_arg1543 = G(l11528,"rest",L[892]);
var anf_arg1544 = G(l21529,"rest",L[893]);
var anf_arg1545 = G(l31530,"rest",L[894]);
$step1524 = 17;
$al1532 = L[895];
if(!(R.isFunction(fold31541.$var))) {
R.ffi.throwNonFunApp($al1532,fold31541.$var);
}
$ans1531 = fold31541.$var.app(f1526,anf_arg1542,anf_arg1543,anf_arg1544,anf_arg1545);
break;
case 17: var ann_check_temp1546 = $ans1531;
$step1524 = 18;
$al1532 = L[897];
R._checkAnn(L[897],R.Any,ann_check_temp1546);
break;
case 18: $step1524 = 19;
$ans1531 = ann_check_temp1546;
break;
case 19: ++R.GAS;
return $ans1531;
default: throw "No case numbered " + $step1524 + " in $temp_lam1525";
}
}
} catch($e1549) {
if(R.isCont($e1549) && ($step1524 !== 19)) {
$e1549.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1532,$temp_lam1525,$step1524,[f1526,base1527,l11528,l21529,l31530],[ann_check_temp1546]);
}
if(R.isPyretException($e1549)) {
$e1549.pyretStack.push($al1532);
}
throw $e1549;
}
};
var anf_assign1550 = R.makeFunction($temp_lam1525);
fold31541.$var = anf_assign1550;
var $temp_lam1552 = function($f1553,$base1554,$l11555,$l21556,$l31557,$l41558) {
var $step1551 = 0;
var $ans1559 = D;
var $al1560 = L[927];
try {
if(R.isActivationRecord($f1553)) {
$step1551 = $f1553.step;
$al1560 = $f1553.from;
$ans1559 = $f1553.ans;
f1553 = $f1553.args[0];
base1554 = $f1553.args[1];
l11555 = $f1553.args[2];
l21556 = $f1553.args[3];
l31557 = $f1553.args[4];
l41558 = $f1553.args[5];
ann_check_temp1578 = $f1553.vars[0];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[927],6,$t);
}
var f1553 = $f1553;
var base1554 = $base1554;
var l11555 = $l11555;
var l21556 = $l21556;
var l31557 = $l31557;
var l41558 = $l41558;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1551) {
case 0: $step1551 = 1;
$al1560 = L[921];
R._checkAnn(L[921],R.Function,f1553);
break;
case 1: $step1551 = 2;
$al1560 = L[922];
R._checkAnn(L[922],R.Any,base1554);
break;
case 2: $step1551 = 3;
$al1560 = L[923];
R._checkAnn(L[923],List53,l11555);
break;
case 3: $step1551 = 4;
$al1560 = L[924];
R._checkAnn(L[924],List53,l21556);
break;
case 4: $step1551 = 5;
$al1560 = L[925];
R._checkAnn(L[925],List53,l31557);
break;
case 5: $step1551 = 6;
$al1560 = L[926];
R._checkAnn(L[926],List53,l41558);
break;
case 6: $step1551 = 7;
$al1560 = L[920];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1560,is$empty435.$var);
}
$ans1559 = is$empty435.$var.app(l11555);
break;
case 7: var anf_arg1561 = $ans1559;
$al1560 = L[905];
var anf_if1580 = R.checkWrapBoolean(anf_arg1561);
if(R.isPyretTrue(anf_if1580)) {
$step1551 = 8;
} else {
$step1551 = 9;
}
break;
case 8: $step1551 = 17;
$ans1559 = (true);
break;
case 9: $step1551 = 10;
$al1560 = L[908];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1560,is$empty435.$var);
}
$ans1559 = is$empty435.$var.app(l21556);
break;
case 10: var anf_arg1562 = $ans1559;
$al1560 = L[905];
var anf_if1566 = R.checkWrapBoolean(anf_arg1562);
if(R.isPyretTrue(anf_if1566)) {
$step1551 = 11;
} else {
$step1551 = 12;
}
break;
case 11: $step1551 = 17;
$ans1559 = (true);
break;
case 12: $step1551 = 13;
$al1560 = L[907];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1560,is$empty435.$var);
}
$ans1559 = is$empty435.$var.app(l31557);
break;
case 13: var anf_arg1563 = $ans1559;
$al1560 = L[905];
var anf_if1565 = R.checkWrapBoolean(anf_arg1563);
if(R.isPyretTrue(anf_if1565)) {
$step1551 = 14;
} else {
$step1551 = 15;
}
break;
case 14: $step1551 = 17;
$ans1559 = (true);
break;
case 15: $step1551 = 16;
$al1560 = L[906];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1560,is$empty435.$var);
}
$ans1559 = is$empty435.$var.app(l41558);
break;
case 16: var anf_arg1564 = $ans1559;
$step1551 = 17;
$al1560 = L[905];
$ans1559 = R.checkWrapBoolean(anf_arg1564);
break;
case 17: var anf_arg1567 = $ans1559;
$al1560 = L[905];
var anf_if1579 = R.checkWrapBoolean(anf_arg1567);
if(R.isPyretTrue(anf_if1579)) {
$step1551 = 18;
} else {
$step1551 = 19;
}
break;
case 18: $step1551 = 21;
$ans1559 = base1554;
break;
case 19: var anf_arg1568 = G(l11555,"first",L[909]);
var anf_arg1569 = G(l21556,"first",L[910]);
var anf_arg1570 = G(l31557,"first",L[911]);
var anf_arg1571 = G(l41558,"first",L[912]);
$step1551 = 20;
$al1560 = L[918];
if(!(R.isFunction(f1553))) {
R.ffi.throwNonFunApp($al1560,f1553);
}
$ans1559 = f1553.app(base1554,anf_arg1568,anf_arg1569,anf_arg1570,anf_arg1571);
break;
case 20: var anf_arg1573 = $ans1559;
var anf_arg1574 = G(l11555,"rest",L[913]);
var anf_arg1575 = G(l21556,"rest",L[914]);
var anf_arg1576 = G(l31557,"rest",L[915]);
var anf_arg1577 = G(l41558,"rest",L[916]);
$step1551 = 21;
$al1560 = L[917];
if(!(R.isFunction(fold41572.$var))) {
R.ffi.throwNonFunApp($al1560,fold41572.$var);
}
$ans1559 = fold41572.$var.app(f1553,anf_arg1573,anf_arg1574,anf_arg1575,anf_arg1576,anf_arg1577);
break;
case 21: var ann_check_temp1578 = $ans1559;
$step1551 = 22;
$al1560 = L[919];
R._checkAnn(L[919],R.Any,ann_check_temp1578);
break;
case 22: $step1551 = 23;
$ans1559 = ann_check_temp1578;
break;
case 23: ++R.GAS;
return $ans1559;
default: throw "No case numbered " + $step1551 + " in $temp_lam1552";
}
}
} catch($e1581) {
if(R.isCont($e1581) && ($step1551 !== 23)) {
$e1581.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1560,$temp_lam1552,$step1551,[f1553,base1554,l11555,l21556,l31557,l41558],[ann_check_temp1578]);
}
if(R.isPyretException($e1581)) {
$e1581.pyretStack.push($al1560);
}
throw $e1581;
}
};
var anf_assign1582 = R.makeFunction($temp_lam1552);
fold41572.$var = anf_assign1582;
var $temp_lam1584 = function($f1585,$num1586,$base1587,$lst1588) {
var $step1583 = 0;
var $ans1589 = D;
var $al1590 = L[941];
try {
if(R.isActivationRecord($f1585)) {
$step1583 = $f1585.step;
$al1590 = $f1585.from;
$ans1589 = $f1585.ans;
f1585 = $f1585.args[0];
num1586 = $f1585.args[1];
base1587 = $f1585.args[2];
lst1588 = $f1585.args[3];
ann_check_temp1607 = $f1585.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[941],4,$t);
}
var f1585 = $f1585;
var num1586 = $num1586;
var base1587 = $base1587;
var lst1588 = $lst1588;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1583) {
case 0: $step1583 = 1;
$al1590 = L[937];
R._checkAnn(L[937],R.Function,f1585);
break;
case 1: $step1583 = 2;
$al1590 = L[938];
R._checkAnn(L[938],$type$Number1,num1586);
break;
case 2: $step1583 = 3;
$al1590 = L[939];
R._checkAnn(L[939],R.Any,base1587);
break;
case 3: $step1583 = 4;
$al1590 = L[940];
R._checkAnn(L[940],List53,lst1588);
break;
case 4: var help1600 = {"$var":D};
var $temp_lam1592 = function($n1593,$acc1594,$partial$list1595) {
var $step1591 = 0;
var $ans1596 = D;
var $al1597 = L[934];
try {
if(R.isActivationRecord($n1593)) {
$step1591 = $n1593.step;
$al1597 = $n1593.from;
$ans1596 = $n1593.ans;
n1593 = $n1593.args[0];
acc1594 = $n1593.args[1];
partial$list1595 = $n1593.args[2];
anf_arg1601 = $n1593.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[934],3,$t);
}
var n1593 = $n1593;
var acc1594 = $acc1594;
var partial$list1595 = $partial$list1595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1591) {
case 0: $step1591 = 1;
$al1597 = L[928];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1597,is$empty435.$var);
}
$ans1596 = is$empty435.$var.app(partial$list1595);
break;
case 1: var anf_arg1598 = $ans1596;
$al1597 = L[928];
var anf_if1604 = R.checkWrapBoolean(anf_arg1598);
if(R.isPyretTrue(anf_if1604)) {
$step1591 = 2;
} else {
$step1591 = 3;
}
break;
case 2: $step1591 = 6;
$ans1596 = acc1594;
break;
case 3: $step1591 = 4;
$al1597 = L[933];
if(!(R.isFunction(_plus7))) {
R.ffi.throwNonFunApp($al1597,_plus7);
}
$ans1596 = _plus7.app(n1593,(1));
break;
case 4: var anf_arg1601 = $ans1596;
var anf_arg1599 = G(partial$list1595,"first",L[929]);
$step1591 = 5;
$al1597 = L[932];
if(!(R.isFunction(f1585))) {
R.ffi.throwNonFunApp($al1597,f1585);
}
$ans1596 = f1585.app(n1593,acc1594,anf_arg1599);
break;
case 5: var anf_arg1602 = $ans1596;
var anf_arg1603 = G(partial$list1595,"rest",L[930]);
$step1591 = 6;
$al1597 = L[931];
if(!(R.isFunction(help1600.$var))) {
R.ffi.throwNonFunApp($al1597,help1600.$var);
}
$ans1596 = help1600.$var.app(anf_arg1601,anf_arg1602,anf_arg1603);
break;
case 6: ++R.GAS;
return $ans1596;
default: throw "No case numbered " + $step1591 + " in $temp_lam1592";
}
}
} catch($e1605) {
if(R.isCont($e1605) && ($step1591 !== 6)) {
$e1605.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1597,$temp_lam1592,$step1591,[n1593,acc1594,partial$list1595],[anf_arg1601]);
}
if(R.isPyretException($e1605)) {
$e1605.pyretStack.push($al1597);
}
throw $e1605;
}
};
var anf_assign1606 = R.makeFunction($temp_lam1592);
help1600.$var = anf_assign1606;
$step1583 = 5;
$al1590 = L[936];
if(!(R.isFunction(help1600.$var))) {
R.ffi.throwNonFunApp($al1590,help1600.$var);
}
$ans1589 = help1600.$var.app(num1586,base1587,lst1588);
break;
case 5: var ann_check_temp1607 = $ans1589;
$step1583 = 6;
$al1590 = L[935];
R._checkAnn(L[935],R.Any,ann_check_temp1607);
break;
case 6: $step1583 = 7;
$ans1589 = ann_check_temp1607;
break;
case 7: ++R.GAS;
return $ans1589;
default: throw "No case numbered " + $step1583 + " in $temp_lam1584";
}
}
} catch($e1608) {
if(R.isCont($e1608) && ($step1583 !== 7)) {
$e1608.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1590,$temp_lam1584,$step1583,[f1585,num1586,base1587,lst1588],[ann_check_temp1607]);
}
if(R.isPyretException($e1608)) {
$e1608.pyretStack.push($al1590);
}
throw $e1608;
}
};
var anf_assign1609 = R.makeFunction($temp_lam1584);
fold_n1610.$var = anf_assign1609;
var $temp_lam1612 = function($lst1613,$elt1614,$eq1615) {
var $step1611 = 0;
var $ans1616 = D;
var $al1617 = L[960];
try {
if(R.isActivationRecord($lst1613)) {
$step1611 = $lst1613.step;
$al1617 = $lst1613.from;
$ans1616 = $lst1613.ans;
lst1613 = $lst1613.args[0];
elt1614 = $lst1613.args[1];
eq1615 = $lst1613.args[2];
cases1623 = $lst1613.vars[0];
first$elt$equal1622 = $lst1613.vars[1];
r1625 = $lst1613.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[960],3,$t);
}
var lst1613 = $lst1613;
var elt1614 = $elt1614;
var eq1615 = $eq1615;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1611) {
case 0: $step1611 = 1;
$al1617 = L[957];
R._checkAnn(L[957],List53,lst1613);
break;
case 1: $step1611 = 2;
$al1617 = L[958];
R._checkAnn(L[958],R.Any,elt1614);
break;
case 2: $step1611 = 3;
$al1617 = L[959];
R._checkAnn(L[959],R.Function,eq1615);
break;
case 3: $step1611 = 4;
$al1617 = L[956];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1617,is$empty435.$var);
}
$ans1616 = is$empty435.$var.app(lst1613);
break;
case 4: var anf_arg1618 = $ans1616;
$al1617 = L[942];
var anf_if1630 = R.checkWrapBoolean(anf_arg1618);
if(R.isPyretTrue(anf_if1630)) {
$step1611 = 5;
} else {
$step1611 = 6;
}
break;
case 5: $step1611 = 15;
$al1617 = L[943];
$field1619 = R.getColonFieldLoc(equality25,"NotEqual",L[943]);
if(R.isMethod($field1619)) {
$ans1616 = $field1619.full_meth(equality25,("list"),elt1614,lst1613);
} else {
if(!(R.isFunction($field1619))) {
R.ffi.throwNonFunApp(L[943],$field1619);
}
$ans1616 = $field1619.app(("list"),elt1614,lst1613);
}
break;
case 6: $step1611 = 7;
$al1617 = L[955];
if(!(R.isFunction(is$link569.$var))) {
R.ffi.throwNonFunApp($al1617,is$link569.$var);
}
$ans1616 = is$link569.$var.app(lst1613);
break;
case 7: var anf_arg1620 = $ans1616;
$al1617 = L[944];
var anf_if1629 = R.checkWrapBoolean(anf_arg1620);
if(R.isPyretTrue(anf_if1629)) {
$step1611 = 8;
} else {
$step1611 = 14;
}
break;
case 8: var f1621 = G(lst1613,"first",L[945]);
var r1625 = G(lst1613,"rest",L[946]);
$step1611 = 9;
$al1617 = L[953];
if(!(R.isFunction(eq1615))) {
R.ffi.throwNonFunApp($al1617,eq1615);
}
$ans1616 = eq1615.app(f1621,elt1614);
break;
case 9: var first$elt$equal1622 = $ans1616;
var cases1623 = first$elt$equal1622;
$step1611 = 10;
$al1617 = L[952];
R._checkAnn(L[952],R.getDotAnn(L[952],"equality",equality29,"EqualityResult"),cases1623);
break;
case 10: var $cases_dispatch1628 = {"Equal":11};
$al1617 = L[951];
$step1611 = $cases_dispatch1628[cases1623.$name] || 12;
break;
case 11: if(cases1623.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[948],false);
}
$step1611 = 15;
$ans1616 = G(equality25,"Equal",L[947]);
break;
case 12: $step1611 = 13;
$al1617 = L[950];
if(!(R.isFunction(member$with1624.$var))) {
R.ffi.throwNonFunApp($al1617,member$with1624.$var);
}
$ans1616 = member$with1624.$var.app(r1625,elt1614,eq1615);
break;
case 13: var anf_arg1626 = $ans1616;
$step1611 = 15;
$al1617 = L[949];
$field1627 = R.getColonFieldLoc(equality25,"equal-or",L[949]);
if(R.isMethod($field1627)) {
$ans1616 = $field1627.full_meth(equality25,first$elt$equal1622,anf_arg1626);
} else {
if(!(R.isFunction($field1627))) {
R.ffi.throwNonFunApp(L[949],$field1627);
}
$ans1616 = $field1627.app(first$elt$equal1622,anf_arg1626);
}
break;
case 14: $step1611 = 15;
$al1617 = L[954];
$ans1616 = R.throwNoBranchesMatched(L[954],("ask"));
break;
case 15: ++R.GAS;
return $ans1616;
default: throw "No case numbered " + $step1611 + " in $temp_lam1612";
}
}
} catch($e1631) {
if(R.isCont($e1631) && ($step1611 !== 15)) {
$e1631.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1617,$temp_lam1612,$step1611,[lst1613,elt1614,eq1615],[cases1623,first$elt$equal1622,r1625]);
}
if(R.isPyretException($e1631)) {
$e1631.pyretStack.push($al1617);
}
throw $e1631;
}
};
var anf_assign1632 = R.makeFunction($temp_lam1612);
member$with1624.$var = anf_assign1632;
var $temp_lam1634 = function($lst1635,$elt1636) {
var $step1633 = 0;
var $ans1637 = D;
var $al1638 = L[965];
try {
if(R.isActivationRecord($lst1635)) {
$step1633 = $lst1635.step;
$al1638 = $lst1635.from;
$ans1637 = $lst1635.ans;
lst1635 = $lst1635.args[0];
elt1636 = $lst1635.args[1];
ann_check_temp1639 = $lst1635.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[965],2,$t);
}
var lst1635 = $lst1635;
var elt1636 = $elt1636;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1633) {
case 0: $step1633 = 1;
$al1638 = L[963];
R._checkAnn(L[963],List53,lst1635);
break;
case 1: $step1633 = 2;
$al1638 = L[964];
R._checkAnn(L[964],R.Any,elt1636);
break;
case 2: $step1633 = 3;
$al1638 = L[962];
if(!(R.isFunction(member$with1624.$var))) {
R.ffi.throwNonFunApp($al1638,member$with1624.$var);
}
$ans1637 = member$with1624.$var.app(lst1635,elt1636,equal$always315);
break;
case 3: var ann_check_temp1639 = $ans1637;
$step1633 = 4;
$al1638 = L[961];
R._checkAnn(L[961],R.getDotAnn(L[961],"equality",equality29,"EqualityResult"),ann_check_temp1639);
break;
case 4: $step1633 = 5;
$ans1637 = ann_check_temp1639;
break;
case 5: ++R.GAS;
return $ans1637;
default: throw "No case numbered " + $step1633 + " in $temp_lam1634";
}
}
} catch($e1640) {
if(R.isCont($e1640) && ($step1633 !== 5)) {
$e1640.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1638,$temp_lam1634,$step1633,[lst1635,elt1636],[ann_check_temp1639]);
}
if(R.isPyretException($e1640)) {
$e1640.pyretStack.push($al1638);
}
throw $e1640;
}
};
var anf_assign1641 = R.makeFunction($temp_lam1634);
member31642.$var = anf_assign1641;
var $temp_lam1644 = function($lst1645,$elt1646) {
var $step1643 = 0;
var $ans1647 = D;
var $al1648 = L[971];
try {
if(R.isActivationRecord($lst1645)) {
$step1643 = $lst1645.step;
$al1648 = $lst1645.from;
$ans1647 = $lst1645.ans;
lst1645 = $lst1645.args[0];
elt1646 = $lst1645.args[1];
ann_check_temp1651 = $lst1645.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[971],2,$t);
}
var lst1645 = $lst1645;
var elt1646 = $elt1646;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1643) {
case 0: $step1643 = 1;
$al1648 = L[969];
R._checkAnn(L[969],List53,lst1645);
break;
case 1: $step1643 = 2;
$al1648 = L[970];
R._checkAnn(L[970],R.Any,elt1646);
break;
case 2: $step1643 = 3;
$al1648 = L[968];
if(!(R.isFunction(member31642.$var))) {
R.ffi.throwNonFunApp($al1648,member31642.$var);
}
$ans1647 = member31642.$var.app(lst1645,elt1646);
break;
case 3: var anf_arg1649 = $ans1647;
$step1643 = 4;
$al1648 = L[966];
$field1650 = R.getColonFieldLoc(equality25,"to-boolean",L[966]);
if(R.isMethod($field1650)) {
$ans1647 = $field1650.full_meth(equality25,anf_arg1649);
} else {
if(!(R.isFunction($field1650))) {
R.ffi.throwNonFunApp(L[966],$field1650);
}
$ans1647 = $field1650.app(anf_arg1649);
}
break;
case 4: var ann_check_temp1651 = $ans1647;
$step1643 = 5;
$al1648 = L[967];
R._checkAnn(L[967],$type$Boolean4,ann_check_temp1651);
break;
case 5: $step1643 = 6;
$ans1647 = ann_check_temp1651;
break;
case 6: ++R.GAS;
return $ans1647;
default: throw "No case numbered " + $step1643 + " in $temp_lam1644";
}
}
} catch($e1652) {
if(R.isCont($e1652) && ($step1643 !== 6)) {
$e1652.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1648,$temp_lam1644,$step1643,[lst1645,elt1646],[ann_check_temp1651]);
}
if(R.isPyretException($e1652)) {
$e1652.pyretStack.push($al1648);
}
throw $e1652;
}
};
var anf_assign1653 = R.makeFunction($temp_lam1644);
member1654.$var = anf_assign1653;
var member$always31793 = member31642.$var;
var member$always1794 = member1654.$var;
var member$now31664 = {"$var":D};
var member$now1676 = {"$var":D};
var member$identical31686 = {"$var":D};
var member$identical1698 = {"$var":D};
var shuffle1726 = {"$var":D};
var $temp_lam1656 = function($lst1657,$elt1658) {
var $step1655 = 0;
var $ans1659 = D;
var $al1660 = L[976];
try {
if(R.isActivationRecord($lst1657)) {
$step1655 = $lst1657.step;
$al1660 = $lst1657.from;
$ans1659 = $lst1657.ans;
lst1657 = $lst1657.args[0];
elt1658 = $lst1657.args[1];
ann_check_temp1661 = $lst1657.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[976],2,$t);
}
var lst1657 = $lst1657;
var elt1658 = $elt1658;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1655) {
case 0: $step1655 = 1;
$al1660 = L[974];
R._checkAnn(L[974],List53,lst1657);
break;
case 1: $step1655 = 2;
$al1660 = L[975];
R._checkAnn(L[975],R.Any,elt1658);
break;
case 2: $step1655 = 3;
$al1660 = L[973];
if(!(R.isFunction(member$with1624.$var))) {
R.ffi.throwNonFunApp($al1660,member$with1624.$var);
}
$ans1659 = member$with1624.$var.app(lst1657,elt1658,equal$now316);
break;
case 3: var ann_check_temp1661 = $ans1659;
$step1655 = 4;
$al1660 = L[972];
R._checkAnn(L[972],R.getDotAnn(L[972],"equality",equality29,"EqualityResult"),ann_check_temp1661);
break;
case 4: $step1655 = 5;
$ans1659 = ann_check_temp1661;
break;
case 5: ++R.GAS;
return $ans1659;
default: throw "No case numbered " + $step1655 + " in $temp_lam1656";
}
}
} catch($e1662) {
if(R.isCont($e1662) && ($step1655 !== 5)) {
$e1662.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1660,$temp_lam1656,$step1655,[lst1657,elt1658],[ann_check_temp1661]);
}
if(R.isPyretException($e1662)) {
$e1662.pyretStack.push($al1660);
}
throw $e1662;
}
};
var anf_assign1663 = R.makeFunction($temp_lam1656);
member$now31664.$var = anf_assign1663;
var $temp_lam1666 = function($lst1667,$elt1668) {
var $step1665 = 0;
var $ans1669 = D;
var $al1670 = L[982];
try {
if(R.isActivationRecord($lst1667)) {
$step1665 = $lst1667.step;
$al1670 = $lst1667.from;
$ans1669 = $lst1667.ans;
lst1667 = $lst1667.args[0];
elt1668 = $lst1667.args[1];
ann_check_temp1673 = $lst1667.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[982],2,$t);
}
var lst1667 = $lst1667;
var elt1668 = $elt1668;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1665) {
case 0: $step1665 = 1;
$al1670 = L[980];
R._checkAnn(L[980],List53,lst1667);
break;
case 1: $step1665 = 2;
$al1670 = L[981];
R._checkAnn(L[981],R.Any,elt1668);
break;
case 2: $step1665 = 3;
$al1670 = L[979];
if(!(R.isFunction(member$now31664.$var))) {
R.ffi.throwNonFunApp($al1670,member$now31664.$var);
}
$ans1669 = member$now31664.$var.app(lst1667,elt1668);
break;
case 3: var anf_arg1671 = $ans1669;
$step1665 = 4;
$al1670 = L[977];
$field1672 = R.getColonFieldLoc(equality25,"to-boolean",L[977]);
if(R.isMethod($field1672)) {
$ans1669 = $field1672.full_meth(equality25,anf_arg1671);
} else {
if(!(R.isFunction($field1672))) {
R.ffi.throwNonFunApp(L[977],$field1672);
}
$ans1669 = $field1672.app(anf_arg1671);
}
break;
case 4: var ann_check_temp1673 = $ans1669;
$step1665 = 5;
$al1670 = L[978];
R._checkAnn(L[978],$type$Boolean4,ann_check_temp1673);
break;
case 5: $step1665 = 6;
$ans1669 = ann_check_temp1673;
break;
case 6: ++R.GAS;
return $ans1669;
default: throw "No case numbered " + $step1665 + " in $temp_lam1666";
}
}
} catch($e1674) {
if(R.isCont($e1674) && ($step1665 !== 6)) {
$e1674.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1670,$temp_lam1666,$step1665,[lst1667,elt1668],[ann_check_temp1673]);
}
if(R.isPyretException($e1674)) {
$e1674.pyretStack.push($al1670);
}
throw $e1674;
}
};
var anf_assign1675 = R.makeFunction($temp_lam1666);
member$now1676.$var = anf_assign1675;
var $temp_lam1678 = function($lst1679,$elt1680) {
var $step1677 = 0;
var $ans1681 = D;
var $al1682 = L[987];
try {
if(R.isActivationRecord($lst1679)) {
$step1677 = $lst1679.step;
$al1682 = $lst1679.from;
$ans1681 = $lst1679.ans;
lst1679 = $lst1679.args[0];
elt1680 = $lst1679.args[1];
ann_check_temp1683 = $lst1679.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[987],2,$t);
}
var lst1679 = $lst1679;
var elt1680 = $elt1680;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1677) {
case 0: $step1677 = 1;
$al1682 = L[985];
R._checkAnn(L[985],List53,lst1679);
break;
case 1: $step1677 = 2;
$al1682 = L[986];
R._checkAnn(L[986],R.Any,elt1680);
break;
case 2: $step1677 = 3;
$al1682 = L[984];
if(!(R.isFunction(member$with1624.$var))) {
R.ffi.throwNonFunApp($al1682,member$with1624.$var);
}
$ans1681 = member$with1624.$var.app(lst1679,elt1680,identical317);
break;
case 3: var ann_check_temp1683 = $ans1681;
$step1677 = 4;
$al1682 = L[983];
R._checkAnn(L[983],R.getDotAnn(L[983],"equality",equality29,"EqualityResult"),ann_check_temp1683);
break;
case 4: $step1677 = 5;
$ans1681 = ann_check_temp1683;
break;
case 5: ++R.GAS;
return $ans1681;
default: throw "No case numbered " + $step1677 + " in $temp_lam1678";
}
}
} catch($e1684) {
if(R.isCont($e1684) && ($step1677 !== 5)) {
$e1684.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1682,$temp_lam1678,$step1677,[lst1679,elt1680],[ann_check_temp1683]);
}
if(R.isPyretException($e1684)) {
$e1684.pyretStack.push($al1682);
}
throw $e1684;
}
};
var anf_assign1685 = R.makeFunction($temp_lam1678);
member$identical31686.$var = anf_assign1685;
var $temp_lam1688 = function($lst1689,$elt1690) {
var $step1687 = 0;
var $ans1691 = D;
var $al1692 = L[993];
try {
if(R.isActivationRecord($lst1689)) {
$step1687 = $lst1689.step;
$al1692 = $lst1689.from;
$ans1691 = $lst1689.ans;
lst1689 = $lst1689.args[0];
elt1690 = $lst1689.args[1];
ann_check_temp1695 = $lst1689.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[993],2,$t);
}
var lst1689 = $lst1689;
var elt1690 = $elt1690;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1687) {
case 0: $step1687 = 1;
$al1692 = L[991];
R._checkAnn(L[991],List53,lst1689);
break;
case 1: $step1687 = 2;
$al1692 = L[992];
R._checkAnn(L[992],R.Any,elt1690);
break;
case 2: $step1687 = 3;
$al1692 = L[990];
if(!(R.isFunction(member$identical31686.$var))) {
R.ffi.throwNonFunApp($al1692,member$identical31686.$var);
}
$ans1691 = member$identical31686.$var.app(lst1689,elt1690);
break;
case 3: var anf_arg1693 = $ans1691;
$step1687 = 4;
$al1692 = L[988];
$field1694 = R.getColonFieldLoc(equality25,"to-boolean",L[988]);
if(R.isMethod($field1694)) {
$ans1691 = $field1694.full_meth(equality25,anf_arg1693);
} else {
if(!(R.isFunction($field1694))) {
R.ffi.throwNonFunApp(L[988],$field1694);
}
$ans1691 = $field1694.app(anf_arg1693);
}
break;
case 4: var ann_check_temp1695 = $ans1691;
$step1687 = 5;
$al1692 = L[989];
R._checkAnn(L[989],$type$Boolean4,ann_check_temp1695);
break;
case 5: $step1687 = 6;
$ans1691 = ann_check_temp1695;
break;
case 6: ++R.GAS;
return $ans1691;
default: throw "No case numbered " + $step1687 + " in $temp_lam1688";
}
}
} catch($e1696) {
if(R.isCont($e1696) && ($step1687 !== 6)) {
$e1696.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1692,$temp_lam1688,$step1687,[lst1689,elt1690],[ann_check_temp1695]);
}
if(R.isPyretException($e1696)) {
$e1696.pyretStack.push($al1692);
}
throw $e1696;
}
};
var anf_assign1697 = R.makeFunction($temp_lam1688);
member$identical1698.$var = anf_assign1697;
var $temp_lam1700 = function($lst1701) {
var $step1699 = 0;
var $ans1702 = D;
var $al1703 = L[1007];
try {
if(R.isActivationRecord($lst1701)) {
$step1699 = $lst1701.step;
$al1703 = $lst1701.from;
$ans1702 = $lst1701.ans;
lst1701 = $lst1701.args[0];
ann_check_temp1722 = $lst1701.vars[0];
anf_arg1716 = $lst1701.vars[1];
anf_arg1718 = $lst1701.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1007],1,$t);
}
var lst1701 = $lst1701;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1699) {
case 0: $step1699 = 1;
$al1703 = L[1006];
R._checkAnn(L[1006],List53,lst1701);
break;
case 1: $step1699 = 2;
$al1703 = L[994];
if(!(R.isFunction(is$empty435.$var))) {
R.ffi.throwNonFunApp($al1703,is$empty435.$var);
}
$ans1702 = is$empty435.$var.app(lst1701);
break;
case 2: var anf_arg1704 = $ans1702;
$al1703 = L[994];
var anf_if1723 = R.checkWrapBoolean(anf_arg1704);
if(R.isPyretTrue(anf_if1723)) {
$step1699 = 3;
} else {
$step1699 = 4;
}
break;
case 3: $step1699 = 8;
$ans1702 = empty149.$var;
break;
case 4: var $temp_lam1706 = function($i1707,$arr1708,$e1709) {
var $step1705 = 0;
var $ans1710 = D;
var $al1711 = L[999];
try {
if(R.isActivationRecord($i1707)) {
$step1705 = $i1707.step;
$al1711 = $i1707.from;
$ans1710 = $i1707.ans;
i1707 = $i1707.args[0];
arr1708 = $i1707.args[1];
e1709 = $i1707.args[2];
ix1712 = $i1707.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[999],3,$t);
}
var i1707 = $i1707;
var arr1708 = $arr1708;
var e1709 = $e1709;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1705) {
case 0: $step1705 = 1;
$al1711 = L[998];
if(!(R.isFunction(random18))) {
R.ffi.throwNonFunApp($al1711,random18);
}
$ans1710 = random18.app(i1707);
break;
case 1: var ix1712 = $ans1710;
$step1705 = 2;
$al1711 = L[997];
if(!(R.isFunction(raw$array$get19))) {
R.ffi.throwNonFunApp($al1711,raw$array$get19);
}
$ans1710 = raw$array$get19.app(arr1708,ix1712);
break;
case 2: var anf_arg1713 = $ans1710;
$step1705 = 3;
$al1711 = L[996];
if(!(R.isFunction(raw$array$set20))) {
R.ffi.throwNonFunApp($al1711,raw$array$set20);
}
$ans1710 = raw$array$set20.app(arr1708,i1707,anf_arg1713);
break;
case 3: $step1705 = 4;
$al1711 = L[995];
if(!(R.isFunction(raw$array$set20))) {
R.ffi.throwNonFunApp($al1711,raw$array$set20);
}
$ans1710 = raw$array$set20.app(arr1708,ix1712,e1709);
break;
case 4: $step1705 = 5;
$ans1710 = arr1708;
break;
case 5: ++R.GAS;
return $ans1710;
default: throw "No case numbered " + $step1705 + " in $temp_lam1706";
}
}
} catch($e1714) {
if(R.isCont($e1714) && ($step1705 !== 5)) {
$e1714.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1711,$temp_lam1706,$step1705,[i1707,arr1708,e1709],[ix1712]);
}
if(R.isPyretException($e1714)) {
$e1714.pyretStack.push($al1711);
}
throw $e1714;
}
};
var anf_arg1718 = R.makeFunction($temp_lam1706);
var anf_arg1716 = G(lst1701,"first",L[1000]);
$step1699 = 5;
$al1703 = L[1001];
$field1715 = R.getColonFieldLoc(lst1701,"length",L[1001]);
if(R.isMethod($field1715)) {
$ans1702 = $field1715.full_meth(lst1701);
} else {
if(!(R.isFunction($field1715))) {
R.ffi.throwNonFunApp(L[1001],$field1715);
}
$ans1702 = $field1715.app();
}
break;
case 5: var anf_arg1717 = $ans1702;
$step1699 = 6;
$al1703 = L[1004];
if(!(R.isFunction(raw$array$of21))) {
R.ffi.throwNonFunApp($al1703,raw$array$of21);
}
$ans1702 = raw$array$of21.app(anf_arg1716,anf_arg1717);
break;
case 6: var anf_arg1719 = $ans1702;
var anf_arg1720 = G(lst1701,"rest",L[1002]);
$step1699 = 7;
$al1703 = L[999];
if(!(R.isFunction(fold_n1610.$var))) {
R.ffi.throwNonFunApp($al1703,fold_n1610.$var);
}
$ans1702 = fold_n1610.$var.app(anf_arg1718,(1),anf_arg1719,anf_arg1720);
break;
case 7: var elts1721 = $ans1702;
$step1699 = 8;
$al1703 = L[1003];
if(!(R.isFunction(raw$array$to$list22))) {
R.ffi.throwNonFunApp($al1703,raw$array$to$list22);
}
$ans1702 = raw$array$to$list22.app(elts1721);
break;
case 8: var ann_check_temp1722 = $ans1702;
$step1699 = 9;
$al1703 = L[1005];
R._checkAnn(L[1005],List53,ann_check_temp1722);
break;
case 9: $step1699 = 10;
$ans1702 = ann_check_temp1722;
break;
case 10: ++R.GAS;
return $ans1702;
default: throw "No case numbered " + $step1699 + " in $temp_lam1700";
}
}
} catch($e1724) {
if(R.isCont($e1724) && ($step1699 !== 10)) {
$e1724.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1703,$temp_lam1700,$step1699,[lst1701],[ann_check_temp1722,anf_arg1716,anf_arg1718]);
}
if(R.isPyretException($e1724)) {
$e1724.pyretStack.push($al1703);
}
throw $e1724;
}
};
var anf_assign1725 = R.makeFunction($temp_lam1700);
shuffle1726.$var = anf_assign1725;
var index1795 = nothing3;
var $temp_lam1728 = function($$resumer1729) {
var $step1727 = 0;
var $ans1730 = D;
var $al1731 = L[1008];
try {
if(R.isActivationRecord($$resumer1729)) {
$step1727 = $$resumer1729.step;
$al1731 = $$resumer1729.from;
$ans1730 = $$resumer1729.ans;
$resumer1729 = $$resumer1729.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1008],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1727) {
case 0: $step1727 = 1;
$ans1730 = empty149.$var;
break;
case 1: ++R.GAS;
return $ans1730;
default: throw "No case numbered " + $step1727 + " in $temp_lam1728";
}
}
} catch($e1732) {
if(R.isCont($e1732) && ($step1727 !== 1)) {
$e1732.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1731,$temp_lam1728,$step1727,[],[]);
}
if(R.isPyretException($e1732)) {
$e1732.pyretStack.push($al1731);
}
throw $e1732;
}
};
var anf_obj1783 = R.makeFunction($temp_lam1728);
var $temp_lam1734 = function($a1735) {
var $step1733 = 0;
var $ans1736 = D;
var $al1737 = L[1010];
try {
if(R.isActivationRecord($a1735)) {
$step1733 = $a1735.step;
$al1737 = $a1735.from;
$ans1736 = $a1735.ans;
a1735 = $a1735.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1010],1,$t);
}
var a1735 = $a1735;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1733) {
case 0: $step1733 = 1;
$al1737 = L[1009];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1737,link70.$var);
}
$ans1736 = link70.$var.app(a1735,empty149.$var);
break;
case 1: ++R.GAS;
return $ans1736;
default: throw "No case numbered " + $step1733 + " in $temp_lam1734";
}
}
} catch($e1738) {
if(R.isCont($e1738) && ($step1733 !== 1)) {
$e1738.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1737,$temp_lam1734,$step1733,[a1735],[]);
}
if(R.isPyretException($e1738)) {
$e1738.pyretStack.push($al1737);
}
throw $e1738;
}
};
var anf_obj1784 = R.makeFunction($temp_lam1734);
var $temp_lam1740 = function($a1741,$b1742) {
var $step1739 = 0;
var $ans1743 = D;
var $al1744 = L[1013];
try {
if(R.isActivationRecord($a1741)) {
$step1739 = $a1741.step;
$al1744 = $a1741.from;
$ans1743 = $a1741.ans;
a1741 = $a1741.args[0];
b1742 = $a1741.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1013],2,$t);
}
var a1741 = $a1741;
var b1742 = $b1742;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1739) {
case 0: $step1739 = 1;
$al1744 = L[1012];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1744,link70.$var);
}
$ans1743 = link70.$var.app(b1742,empty149.$var);
break;
case 1: var anf_arg1745 = $ans1743;
$step1739 = 2;
$al1744 = L[1011];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1744,link70.$var);
}
$ans1743 = link70.$var.app(a1741,anf_arg1745);
break;
case 2: ++R.GAS;
return $ans1743;
default: throw "No case numbered " + $step1739 + " in $temp_lam1740";
}
}
} catch($e1746) {
if(R.isCont($e1746) && ($step1739 !== 2)) {
$e1746.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1744,$temp_lam1740,$step1739,[a1741,b1742],[]);
}
if(R.isPyretException($e1746)) {
$e1746.pyretStack.push($al1744);
}
throw $e1746;
}
};
var anf_obj1785 = R.makeFunction($temp_lam1740);
var $temp_lam1748 = function($a1749,$b1750,$c1751) {
var $step1747 = 0;
var $ans1752 = D;
var $al1753 = L[1017];
try {
if(R.isActivationRecord($a1749)) {
$step1747 = $a1749.step;
$al1753 = $a1749.from;
$ans1752 = $a1749.ans;
a1749 = $a1749.args[0];
b1750 = $a1749.args[1];
c1751 = $a1749.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1017],3,$t);
}
var a1749 = $a1749;
var b1750 = $b1750;
var c1751 = $c1751;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1747) {
case 0: $step1747 = 1;
$al1753 = L[1016];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1753,link70.$var);
}
$ans1752 = link70.$var.app(c1751,empty149.$var);
break;
case 1: var anf_arg1754 = $ans1752;
$step1747 = 2;
$al1753 = L[1015];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1753,link70.$var);
}
$ans1752 = link70.$var.app(b1750,anf_arg1754);
break;
case 2: var anf_arg1755 = $ans1752;
$step1747 = 3;
$al1753 = L[1014];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1753,link70.$var);
}
$ans1752 = link70.$var.app(a1749,anf_arg1755);
break;
case 3: ++R.GAS;
return $ans1752;
default: throw "No case numbered " + $step1747 + " in $temp_lam1748";
}
}
} catch($e1756) {
if(R.isCont($e1756) && ($step1747 !== 3)) {
$e1756.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1753,$temp_lam1748,$step1747,[a1749,b1750,c1751],[]);
}
if(R.isPyretException($e1756)) {
$e1756.pyretStack.push($al1753);
}
throw $e1756;
}
};
var anf_obj1786 = R.makeFunction($temp_lam1748);
var $temp_lam1758 = function($a1759,$b1760,$c1761,$d1762) {
var $step1757 = 0;
var $ans1763 = D;
var $al1764 = L[1022];
try {
if(R.isActivationRecord($a1759)) {
$step1757 = $a1759.step;
$al1764 = $a1759.from;
$ans1763 = $a1759.ans;
a1759 = $a1759.args[0];
b1760 = $a1759.args[1];
c1761 = $a1759.args[2];
d1762 = $a1759.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1022],4,$t);
}
var a1759 = $a1759;
var b1760 = $b1760;
var c1761 = $c1761;
var d1762 = $d1762;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1757) {
case 0: $step1757 = 1;
$al1764 = L[1021];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1764,link70.$var);
}
$ans1763 = link70.$var.app(d1762,empty149.$var);
break;
case 1: var anf_arg1765 = $ans1763;
$step1757 = 2;
$al1764 = L[1020];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1764,link70.$var);
}
$ans1763 = link70.$var.app(c1761,anf_arg1765);
break;
case 2: var anf_arg1766 = $ans1763;
$step1757 = 3;
$al1764 = L[1019];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1764,link70.$var);
}
$ans1763 = link70.$var.app(b1760,anf_arg1766);
break;
case 3: var anf_arg1767 = $ans1763;
$step1757 = 4;
$al1764 = L[1018];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1764,link70.$var);
}
$ans1763 = link70.$var.app(a1759,anf_arg1767);
break;
case 4: ++R.GAS;
return $ans1763;
default: throw "No case numbered " + $step1757 + " in $temp_lam1758";
}
}
} catch($e1768) {
if(R.isCont($e1768) && ($step1757 !== 4)) {
$e1768.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1764,$temp_lam1758,$step1757,[a1759,b1760,c1761,d1762],[]);
}
if(R.isPyretException($e1768)) {
$e1768.pyretStack.push($al1764);
}
throw $e1768;
}
};
var anf_obj1787 = R.makeFunction($temp_lam1758);
var $temp_lam1770 = function($a1771,$b1772,$c1773,$d1774,$e1775) {
var $step1769 = 0;
var $ans1776 = D;
var $al1777 = L[1028];
try {
if(R.isActivationRecord($a1771)) {
$step1769 = $a1771.step;
$al1777 = $a1771.from;
$ans1776 = $a1771.ans;
a1771 = $a1771.args[0];
b1772 = $a1771.args[1];
c1773 = $a1771.args[2];
d1774 = $a1771.args[3];
e1775 = $a1771.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1028],5,$t);
}
var a1771 = $a1771;
var b1772 = $b1772;
var c1773 = $c1773;
var d1774 = $d1774;
var e1775 = $e1775;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1769) {
case 0: $step1769 = 1;
$al1777 = L[1027];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1777,link70.$var);
}
$ans1776 = link70.$var.app(e1775,empty149.$var);
break;
case 1: var anf_arg1778 = $ans1776;
$step1769 = 2;
$al1777 = L[1026];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1777,link70.$var);
}
$ans1776 = link70.$var.app(d1774,anf_arg1778);
break;
case 2: var anf_arg1779 = $ans1776;
$step1769 = 3;
$al1777 = L[1025];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1777,link70.$var);
}
$ans1776 = link70.$var.app(c1773,anf_arg1779);
break;
case 3: var anf_arg1780 = $ans1776;
$step1769 = 4;
$al1777 = L[1024];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1777,link70.$var);
}
$ans1776 = link70.$var.app(b1772,anf_arg1780);
break;
case 4: var anf_arg1781 = $ans1776;
$step1769 = 5;
$al1777 = L[1023];
if(!(R.isFunction(link70.$var))) {
R.ffi.throwNonFunApp($al1777,link70.$var);
}
$ans1776 = link70.$var.app(a1771,anf_arg1781);
break;
case 5: ++R.GAS;
return $ans1776;
default: throw "No case numbered " + $step1769 + " in $temp_lam1770";
}
}
} catch($e1782) {
if(R.isCont($e1782) && ($step1769 !== 5)) {
$e1782.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1777,$temp_lam1770,$step1769,[a1771,b1772,c1773,d1774,e1775],[]);
}
if(R.isPyretException($e1782)) {
$e1782.pyretStack.push($al1777);
}
throw $e1782;
}
};
var anf_obj1788 = R.makeFunction($temp_lam1770);
var list1796 = R.makeObject({"make":raw$array$to$list22,
"make0":anf_obj1783,
"make1":anf_obj1784,
"make2":anf_obj1785,
"make3":anf_obj1786,
"make4":anf_obj1787,
"make5":anf_obj1788});
var provides1802 = R.makeObject({"none":none166,
"is-none":is$none1789,
"some":some885,
"is-some":is$some1790,
"left":left1791,
"right":right1792,
"List":List650.$var,
"is-List":is$List652.$var,
"empty":empty149.$var,
"is-empty":is$empty435.$var,
"link":link70.$var,
"is-link":is$link569.$var,
"get":get106.$var,
"set":set116.$var,
"reverse-help":reverse$help448.$var,
"reverse":reverse746.$var,
"range":range754.$var,
"range-by":range$by781.$var,
"repeat":repeat801.$var,
"filter":filter819.$var,
"partition":partition338.$var,
"remove":remove125.$var,
"find":find347.$var,
"split-at":split$at79.$var,
"any":any934.$var,
"all":all945.$var,
"all2":all2977.$var,
"map":map986.$var,
"map2":map21006.$var,
"map3":map31032.$var,
"map4":map41063.$var,
"map_n":map_n1084.$var,
"map2_n":map2_n1106.$var,
"map3_n":map3_n1134.$var,
"map4_n":map4_n1167.$var,
"each":each1201.$var,
"each2":each21230.$var,
"each3":each31265.$var,
"each4":each41305.$var,
"each_n":each_n1330.$var,
"each2_n":each2_n1362.$var,
"each3_n":each3_n1400.$var,
"each4_n":each4_n1444.$var,
"fold-while":fold$while1455.$var,
"fold":fold467.$var,
"foldl":foldl1485.$var,
"foldr":foldr1494.$var,
"fold2":fold21515.$var,
"fold3":fold31541.$var,
"fold4":fold41572.$var,
"fold_n":fold_n1610.$var,
"member-with":member$with1624.$var,
"member3":member31642.$var,
"member":member1654.$var,
"member-always3":member$always31793,
"member-always":member$always1794,
"member-now3":member$now31664.$var,
"member-now":member$now1676.$var,
"member-identical3":member$identical31686.$var,
"member-identical":member$identical1698.$var,
"shuffle":shuffle1726.$var,
"index":index1795,
"list":list1796});
$step37 = 1;
$al41 = L[341];
$field1797 = R.getColonFieldLoc(builtins23,"current-checker",L[341]);
if(R.isMethod($field1797)) {
$ans40 = $field1797.full_meth(builtins23);
} else {
if(!(R.isFunction($field1797))) {
R.ffi.throwNonFunApp(L[341],$field1797);
}
$ans40 = $field1797.app();
}
break;
case 1: var anf_method_obj1798 = $ans40;
$step37 = 2;
$al41 = L[341];
$field1799 = R.getColonFieldLoc(anf_method_obj1798,"results",L[341]);
if(R.isMethod($field1799)) {
$ans40 = $field1799.full_meth(anf_method_obj1798);
} else {
if(!(R.isFunction($field1799))) {
R.ffi.throwNonFunApp(L[341],$field1799);
}
$ans40 = $field1799.app();
}
break;
case 2: var checks1803 = $ans40;
$step37 = 3;
$ans40 = R.makeObject({"answer":nothing3,
"namespace":NAMESPACE,
"defined-values":{"list":list1796,
"index":index1795,
"empty":empty149.$var,
"shuffle":shuffle1726.$var,
"member-identical":member$identical1698.$var,
"member-identical3":member$identical31686.$var,
"member-now":member$now1676.$var,
"member-now3":member$now31664.$var,
"member-always":member$always1794,
"member-always3":member$always31793,
"member":member1654.$var,
"fold":fold467.$var,
"member3":member31642.$var,
"member-with":member$with1624.$var,
"fold_n":fold_n1610.$var,
"fold4":fold41572.$var,
"fold3":fold31541.$var,
"fold2":fold21515.$var,
"foldr":foldr1494.$var,
"foldl":foldl1485.$var,
"fold-while":fold$while1455.$var,
"each4_n":each4_n1444.$var,
"each3_n":each3_n1400.$var,
"each2_n":each2_n1362.$var,
"each_n":each_n1330.$var,
"each4":each41305.$var,
"each3":each31265.$var,
"each2":each21230.$var,
"each":each1201.$var,
"map4_n":map4_n1167.$var,
"map3_n":map3_n1134.$var,
"map2_n":map2_n1106.$var,
"map_n":map_n1084.$var,
"map4":map41063.$var,
"map3":map31032.$var,
"map2":map21006.$var,
"map":map986.$var,
"all2":all2977.$var,
"all":all945.$var,
"any":any934.$var,
"split-at":split$at79.$var,
"find":find347.$var,
"remove":remove125.$var,
"partition":partition338.$var,
"filter":filter819.$var,
"repeat":repeat801.$var,
"range-by":range$by781.$var,
"range":range754.$var,
"reverse":reverse746.$var,
"reverse-help":reverse$help448.$var,
"set":set116.$var,
"get":get106.$var,
"link":link70.$var,
"is-link":is$link569.$var,
"is-empty":is$empty435.$var,
"is-List":is$List652.$var,
"List":List650.$var,
"right":right1792,
"left":left1791,
"E":E24,
"is-some":is$some1790,
"some":some885,
"O":O26,
"is-none":is$none1789,
"none":none166,
"VS":VS27,
"equality":equality25},
"defined-types":{"Either":Either1801,
"List":List53,
"Option":Option1800,
"E":E28,
"O":O30,
"VS":VS31,
"equality":equality29},
"provide-plus-types":R.makeObject({"values":provides1802,
"types":{"Option":Option1800,
"Either":Either1801,
"List":List53}}),
"checks":checks1803});
break;
case 3: ++R.GAS;
return $ans40;
default: throw "No case numbered " + $step37 + " in $toplevel38";
}
}
} catch($e1804) {
if(R.isCont($e1804) && ($step37 !== 3)) {
$e1804.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al41,$toplevel38,$step37,[],[provides1802,list1796,index1795,shuffle1726,member$identical1698,member$identical31686,member$now1676,member$now31664,member$always1794,member$always31793,member1654,member31642,member$with1624,fold_n1610,fold41572,fold31541,fold21515,foldr1494,foldl1485,fold467,fold$while1455,each4_n1444,each3_n1400,each2_n1362,each_n1330,each41305,each31265,each21230,each1201,map4_n1167,map3_n1134,map2_n1106,map_n1084,map41063,map31032,map21006,map986,all2977,all945,any934,split$at79,find347,remove125,partition338,filter819,repeat801,range$by781,range754,reverse746,reverse$help448,set116,get106,link70,is$link569,empty149,is$empty435,is$List652,List650,Either1801,right1792,left1791,Option1800,is$some1790,some885,is$none1789,none166,List53]);
}
if(R.isPyretException($e1804)) {
$e1804.pyretStack.push($al41);
}
throw $e1804;
}
};
return R.safeCall($toplevel38,function(moduleVal) {
R.modules["$src/arr/base/lists.arr32"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://option": ({"name":"$src/arr/base/option.arr3",
"requires":[],
"dependencies":[],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":function(R, NAMESPACE, M) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,8,42,113,8,43,114],
[M,8,20,91,8,29,100],
[M,8,36,107,8,37,108],
[M,8,4,75,11,7,178],
[M,12,53,233,12,62,242],
[M,12,24,204,12,33,213],
[M,12,40,220,12,48,228],
[M,12,4,184,15,7,287],
[M,19,6,417,19,16,427],
[M,17,42,352,17,43,353],
[M,17,20,330,17,29,339],
[M,17,36,346,17,37,347],
[M,17,4,314,20,7,435],
[M,23,13,570,23,23,580],
[M,23,6,563,23,10,567],
[M,21,53,490,21,62,499],
[M,23,6,563,23,25,582],
[M,23,11,568,23,24,581],
[M,21,24,461,21,33,470],
[M,21,40,477,21,48,485],
[M,21,4,441,24,7,590],
[M,7,2,58,15,7,287],
[M,16,2,290,24,7,590],
[M,16,4,292,16,15,303],
[M,6,0,40,31,3,755],
[M,3,0,13,31,3,755]];
var builtins1 = NAMESPACE.get("builtins");
var nothing2 = NAMESPACE.get("nothing");
var $toplevel5 = function($$resumer85) {
var $step4 = 0;
var $ans7 = D;
var $al8 = L[25];
try {
if(R.isActivationRecord($$resumer85)) {
$step4 = $$resumer85.step;
$al8 = $$resumer85.from;
$ans7 = $$resumer85.ans;
$resumer85 = $$resumer85.args[0];
provides83 = $$resumer85.vars[0];
some42 = $$resumer85.vars[1];
is$some78 = $$resumer85.vars[2];
none76 = $$resumer85.vars[3];
is$none74 = $$resumer85.vars[4];
is$Option72 = $$resumer85.vars[5];
Option70 = $$resumer85.vars[6];
Option17 = $$resumer85.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4) {
case 0: var Option9 = R.namedBrander("Option");
var Option17 = R.makeBranderAnn(Option9,"Option");
var Option68 = {"$var":D};
var Option70 = {"$var":D};
var is$Option72 = {"$var":D};
var is$none74 = {"$var":D};
var none76 = {"$var":D};
var is$some78 = {"$var":D};
var some42 = {"$var":D};
var $temp_full11 = function($self12,$v13) {
var $step10 = 0;
var $ans14 = D;
var $al15 = L[3];
try {
if(R.isActivationRecord($self12)) {
$step10 = $self12.step;
$al15 = $self12.from;
$ans14 = $self12.ans;
self12 = $self12.args[0];
v13 = $self12.args[1];
ann_check_temp16 = $self12.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[3],2,$t);
}
var self12 = $self12;
var v13 = $v13;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step10) {
case 0: $step10 = 1;
$al15 = L[1];
R._checkAnn(L[1],Option17,self12);
break;
case 1: $step10 = 2;
$al15 = L[2];
R._checkAnn(L[2],R.Any,v13);
break;
case 2: var ann_check_temp16 = v13;
$step10 = 3;
$al15 = L[0];
R._checkAnn(L[0],R.Any,ann_check_temp16);
break;
case 3: $step10 = 4;
$ans14 = ann_check_temp16;
break;
case 4: ++R.GAS;
return $ans14;
default: throw "No case numbered " + $step10 + " in $temp_full11";
}
}
} catch($e18) {
if(R.isCont($e18) && ($step10 !== 4)) {
$e18.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al15,$temp_full11,$step10,[self12,v13],[ann_check_temp16]);
}
if(R.isPyretException($e18)) {
$e18.pyretStack.push($al15);
}
throw $e18;
}
};
var anf_singleton_variant_member49 = R.makeMethod1($temp_full11);
var $temp_full20 = function($self21,$$underscore22) {
var $step19 = 0;
var $ans23 = D;
var $al24 = L[7];
try {
if(R.isActivationRecord($self21)) {
$step19 = $self21.step;
$al24 = $self21.from;
$ans23 = $self21.ans;
self21 = $self21.args[0];
$underscore22 = $self21.args[1];
ann_check_temp25 = $self21.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[7],2,$t);
}
var self21 = $self21;
var $underscore22 = $$underscore22;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step19) {
case 0: $step19 = 1;
$al24 = L[5];
R._checkAnn(L[5],Option17,self21);
break;
case 1: $step19 = 2;
$al24 = L[6];
R._checkAnn(L[6],R.Function,$underscore22);
break;
case 2: var ann_check_temp25 = self21;
$step19 = 3;
$al24 = L[4];
R._checkAnn(L[4],Option17,ann_check_temp25);
break;
case 3: $step19 = 4;
$ans23 = ann_check_temp25;
break;
case 4: ++R.GAS;
return $ans23;
default: throw "No case numbered " + $step19 + " in $temp_full20";
}
}
} catch($e26) {
if(R.isCont($e26) && ($step19 !== 4)) {
$e26.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al24,$temp_full20,$step19,[self21,$underscore22],[ann_check_temp25]);
}
if(R.isPyretException($e26)) {
$e26.pyretStack.push($al24);
}
throw $e26;
}
};
var anf_singleton_variant_member50 = R.makeMethod1($temp_full20);
var $temp_full28 = function($self29,$v30) {
var $step27 = 0;
var $ans31 = D;
var $al32 = L[12];
try {
if(R.isActivationRecord($self29)) {
$step27 = $self29.step;
$al32 = $self29.from;
$ans31 = $self29.ans;
self29 = $self29.args[0];
v30 = $self29.args[1];
ann_check_temp33 = $self29.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],2,$t);
}
var self29 = $self29;
var v30 = $v30;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step27) {
case 0: $step27 = 1;
$al32 = L[10];
R._checkAnn(L[10],Option17,self29);
break;
case 1: $step27 = 2;
$al32 = L[11];
R._checkAnn(L[11],R.Any,v30);
break;
case 2: var ann_check_temp33 = G(self29,"value",L[8]);
$step27 = 3;
$al32 = L[9];
R._checkAnn(L[9],R.Any,ann_check_temp33);
break;
case 3: $step27 = 4;
$ans31 = ann_check_temp33;
break;
case 4: ++R.GAS;
return $ans31;
default: throw "No case numbered " + $step27 + " in $temp_full28";
}
}
} catch($e34) {
if(R.isCont($e34) && ($step27 !== 4)) {
$e34.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al32,$temp_full28,$step27,[self29,v30],[ann_check_temp33]);
}
if(R.isPyretException($e34)) {
$e34.pyretStack.push($al32);
}
throw $e34;
}
};
var anf_variant_member58 = R.makeMethod1($temp_full28);
var $temp_full36 = function($self37,$f38) {
var $step35 = 0;
var $ans39 = D;
var $al40 = L[20];
try {
if(R.isActivationRecord($self37)) {
$step35 = $self37.step;
$al40 = $self37.from;
$ans39 = $self37.ans;
self37 = $self37.args[0];
f38 = $self37.args[1];
ann_check_temp44 = $self37.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[20],2,$t);
}
var self37 = $self37;
var f38 = $f38;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step35) {
case 0: $step35 = 1;
$al40 = L[18];
R._checkAnn(L[18],Option17,self37);
break;
case 1: $step35 = 2;
$al40 = L[19];
R._checkAnn(L[19],R.Function,f38);
break;
case 2: var anf_arg41 = G(self37,"value",L[13]);
$step35 = 3;
$al40 = L[17];
if(!(R.isFunction(f38))) {
R.ffi.throwNonFunApp($al40,f38);
}
$ans39 = f38.app(anf_arg41);
break;
case 3: var anf_arg43 = $ans39;
$step35 = 4;
$al40 = L[16];
if(!(R.isFunction(some42.$var === D?U(L[14],"some"):some42.$var))) {
R.ffi.throwNonFunApp($al40,some42.$var === D?U(L[14],"some"):some42.$var);
}
$ans39 = some42.$var === D?U(L[14],"some"):some42.$var.app(anf_arg43);
break;
case 4: var ann_check_temp44 = $ans39;
$step35 = 5;
$al40 = L[15];
R._checkAnn(L[15],Option17,ann_check_temp44);
break;
case 5: $step35 = 6;
$ans39 = ann_check_temp44;
break;
case 6: ++R.GAS;
return $ans39;
default: throw "No case numbered " + $step35 + " in $temp_full36";
}
}
} catch($e45) {
if(R.isCont($e45) && ($step35 !== 6)) {
$e45.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al40,$temp_full36,$step35,[self37,f38],[ann_check_temp44]);
}
if(R.isPyretException($e45)) {
$e45.pyretStack.push($al40);
}
throw $e45;
}
};
var anf_variant_member59 = R.makeMethod1($temp_full36);
var $none_getfields53 = function(f) {
return f();
};
var $none_getfieldsref51 = function(f) {
return f();
};
var $none_mutablemask52 = [];
var $none$base46 = {"or-else":anf_singleton_variant_member49,
"and-then":anf_singleton_variant_member50,
"_match":R.makeMatch("none",0)};
var $none$brands48 = {"$brand$none":true};
$none$brands48[Option9._brand] = true;
var $some_getfields62 = function(f) {
return f(this.dict["value"]);
};
var $some_getfieldsref60 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]));
};
var $some_mutablemask61 = [false];
var $some$base55 = {"$fieldNames":["value"],
"or-else":anf_variant_member58,
"and-then":anf_variant_member59,
"_match":R.makeMatch("some",1)};
var $some$brands57 = {"$brand$some":true};
$some$brands57[Option9._brand] = true;
var some64 = R.makeVariantConstructor(L[23],function() {
return [];
},[],[],[false],["value65"],$some_mutablemask61,$some$base55,$some$brands57,"some",$some_getfieldsref60,$some_getfields62,$some$base55);
var anf_assign67 = R.makeObject({"Option":R.makeFunction(function($val66) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[24],1,$t);
}
return R.makeBoolean(R.hasBrand($val66,Option9._brand));
}),
"is-none":R.makeFunction(function($val54) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],1,$t);
}
return R.makeBoolean(R.hasBrand($val54,"$brand$none"));
}),
"none":R.makeDataValue($none$base46,$none$brands48,"none",$none_getfieldsref51,$none_getfields53,-1,$none_mutablemask52,$none$base46),
"is-some":R.makeFunction(function($val63) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],1,$t);
}
return R.makeBoolean(R.hasBrand($val63,"$brand$some"));
}),
"some":some64});
Option68.$var = anf_assign67;
var anf_assign69 = G(Option68.$var,"Option",L[24]);
Option70.$var = anf_assign69;
var anf_assign71 = G(Option68.$var,"Option",L[24]);
is$Option72.$var = anf_assign71;
var anf_assign73 = G(Option68.$var,"is-none",L[21]);
is$none74.$var = anf_assign73;
var anf_assign75 = G(Option68.$var,"none",L[21]);
none76.$var = anf_assign75;
var anf_assign77 = G(Option68.$var,"is-some",L[22]);
is$some78.$var = anf_assign77;
var anf_assign79 = G(Option68.$var,"some",L[22]);
some42.$var = anf_assign79;
var provides83 = R.makeObject({"Option":Option70.$var,
"is-Option":is$Option72.$var,
"none":none76.$var,
"is-none":is$none74.$var,
"some":some42.$var,
"is-some":is$some78.$var});
$step4 = 1;
$al8 = L[24];
$field80 = R.getColonFieldLoc(builtins1,"current-checker",L[24]);
if(R.isMethod($field80)) {
$ans7 = $field80.full_meth(builtins1);
} else {
if(!(R.isFunction($field80))) {
R.ffi.throwNonFunApp(L[24],$field80);
}
$ans7 = $field80.app();
}
break;
case 1: var anf_method_obj81 = $ans7;
$step4 = 2;
$al8 = L[24];
$field82 = R.getColonFieldLoc(anf_method_obj81,"results",L[24]);
if(R.isMethod($field82)) {
$ans7 = $field82.full_meth(anf_method_obj81);
} else {
if(!(R.isFunction($field82))) {
R.ffi.throwNonFunApp(L[24],$field82);
}
$ans7 = $field82.app();
}
break;
case 2: var checks84 = $ans7;
$step4 = 3;
$ans7 = R.makeObject({"answer":nothing2,
"namespace":NAMESPACE,
"defined-values":{"some":some42.$var,
"is-some":is$some78.$var,
"none":none76.$var,
"is-none":is$none74.$var,
"is-Option":is$Option72.$var,
"Option":Option70.$var},
"defined-types":{"Option":Option17},
"provide-plus-types":R.makeObject({"values":provides83,
"types":{"Option":Option17}}),
"checks":checks84});
break;
case 3: ++R.GAS;
return $ans7;
default: throw "No case numbered " + $step4 + " in $toplevel5";
}
}
} catch($e86) {
if(R.isCont($e86) && ($step4 !== 3)) {
$e86.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al8,$toplevel5,$step4,[],[provides83,some42,is$some78,none76,is$none74,is$Option72,Option70,Option17]);
}
if(R.isPyretException($e86)) {
$e86.pyretStack.push($al8);
}
throw $e86;
}
};
return R.safeCall($toplevel5,function(moduleVal) {
R.modules["$src/arr/base/option.arr3"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://pick": ({
"requires":[],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE,M) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,5,2,46,5,13,57],
[M,6,2,60,6,34,92],
[M,6,21,79,6,22,80],
[M,6,32,90,6,33,91],
[M,6,4,62,6,34,92],
[M,4,0,27,7,3,96],
[M,1,0,0,7,3,96]];
var builtins1 = NAMESPACE.get("builtins");
var nothing2 = NAMESPACE.get("nothing");
var $toplevel5 = function($$resumer48) {
var $step4 = 0;
var $ans7 = D;
var $al8 = L[6];
try {
if(R.isActivationRecord($$resumer48)) {
$step4 = $$resumer48.step;
$al8 = $$resumer48.from;
$ans7 = $$resumer48.ans;
$resumer48 = $$resumer48.args[0];
provides46 = $$resumer48.vars[0];
pick$some41 = $$resumer48.vars[1];
is$pick$some39 = $$resumer48.vars[2];
pick$none37 = $$resumer48.vars[3];
is$pick$none35 = $$resumer48.vars[4];
is$Pick33 = $$resumer48.vars[5];
Pick31 = $$resumer48.vars[6];
Pick45 = $$resumer48.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4) {
case 0: var Pick9 = R.namedBrander("Pick");
var Pick45 = R.makeBranderAnn(Pick9,"Pick");
var Pick29 = {"$var":D};
var Pick31 = {"$var":D};
var is$Pick33 = {"$var":D};
var is$pick$none35 = {"$var":D};
var pick$none37 = {"$var":D};
var is$pick$some39 = {"$var":D};
var pick$some41 = {"$var":D};
var $pick$none_getfields15 = function(f) {
return f();
};
var $pick$none_getfieldsref13 = function(f) {
return f();
};
var $pick$none_mutablemask14 = [];
var $pick$none$base10 = {"_match":R.makeMatch("pick-none",0)};
var $pick$none$brands12 = {"$brand$pick$none":true};
$pick$none$brands12[Pick9._brand] = true;
var $pick$some_getfields22 = function(f) {
return f(this.dict["elt"],this.dict["rest"]);
};
var $pick$some_getfieldsref20 = function(f,refmask) {
return f(R.derefField(this.dict["elt"],false,refmask[0]),R.derefField(this.dict["rest"],false,refmask[1]));
};
var $pick$some_mutablemask21 = [false,false];
var $pick$some$base17 = {"$fieldNames":["elt","rest"],
"_match":R.makeMatch("pick-some",2)};
var $pick$some$brands19 = {"$brand$pick$some":true};
$pick$some$brands19[Pick9._brand] = true;
var pick$some24 = R.makeVariantConstructor(L[4],function() {
return [R.Any,R.Any];
},["elt25","rest26"],[L[2],L[3]],[false,false],["elt25","rest26"],$pick$some_mutablemask21,$pick$some$base17,$pick$some$brands19,"pick-some",$pick$some_getfieldsref20,$pick$some_getfields22,$pick$some$base17);
var anf_assign28 = R.makeObject({"Pick":R.makeFunction(function($val27) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],1,$t);
}
return R.makeBoolean(R.hasBrand($val27,Pick9._brand));
}),
"is-pick-none":R.makeFunction(function($val16) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],1,$t);
}
return R.makeBoolean(R.hasBrand($val16,"$brand$pick$none"));
}),
"pick-none":R.makeDataValue($pick$none$base10,$pick$none$brands12,"pick-none",$pick$none_getfieldsref13,$pick$none_getfields15,-1,$pick$none_mutablemask14,$pick$none$base10),
"is-pick-some":R.makeFunction(function($val23) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1],1,$t);
}
return R.makeBoolean(R.hasBrand($val23,"$brand$pick$some"));
}),
"pick-some":pick$some24});
Pick29.$var = anf_assign28;
var anf_assign30 = G(Pick29.$var,"Pick",L[5]);
Pick31.$var = anf_assign30;
var anf_assign32 = G(Pick29.$var,"Pick",L[5]);
is$Pick33.$var = anf_assign32;
var anf_assign34 = G(Pick29.$var,"is-pick-none",L[0]);
is$pick$none35.$var = anf_assign34;
var anf_assign36 = G(Pick29.$var,"pick-none",L[0]);
pick$none37.$var = anf_assign36;
var anf_assign38 = G(Pick29.$var,"is-pick-some",L[1]);
is$pick$some39.$var = anf_assign38;
var anf_assign40 = G(Pick29.$var,"pick-some",L[1]);
pick$some41.$var = anf_assign40;
var provides46 = R.makeObject({"Pick":Pick31.$var,
"is-Pick":is$Pick33.$var,
"pick-none":pick$none37.$var,
"is-pick-none":is$pick$none35.$var,
"pick-some":pick$some41.$var,
"is-pick-some":is$pick$some39.$var});
$step4 = 1;
$al8 = L[5];
$field42 = R.getColonFieldLoc(builtins1,"current-checker",L[5]);
if(R.isMethod($field42)) {
$ans7 = $field42.full_meth(builtins1);
} else {
if(!(R.isFunction($field42))) {
R.ffi.throwNonFunApp(L[5],$field42);
}
$ans7 = $field42.app();
}
break;
case 1: var anf_method_obj43 = $ans7;
$step4 = 2;
$al8 = L[5];
$field44 = R.getColonFieldLoc(anf_method_obj43,"results",L[5]);
if(R.isMethod($field44)) {
$ans7 = $field44.full_meth(anf_method_obj43);
} else {
if(!(R.isFunction($field44))) {
R.ffi.throwNonFunApp(L[5],$field44);
}
$ans7 = $field44.app();
}
break;
case 2: var checks47 = $ans7;
$step4 = 3;
$ans7 = R.makeObject({"answer":nothing2,
"namespace":NAMESPACE,
"defined-values":{"pick-some":pick$some41.$var,
"is-pick-some":is$pick$some39.$var,
"pick-none":pick$none37.$var,
"is-pick-none":is$pick$none35.$var,
"is-Pick":is$Pick33.$var,
"Pick":Pick31.$var},
"defined-types":{"Pick":Pick45},
"provide-plus-types":R.makeObject({"values":provides46,
"types":{"Pick":Pick45}}),
"checks":checks47});
break;
case 3: ++R.GAS;
return $ans7;
default: throw "No case numbered " + $step4 + " in $toplevel5";
}
}
} catch($e49) {
if(R.isCont($e49) && ($step4 !== 3)) {
$e49.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al8,$toplevel5,$step4,[],[provides46,pick$some41,is$pick$some39,pick$none37,is$pick$none35,is$Pick33,Pick31,Pick45]);
}
if(R.isPyretException($e49)) {
$e49.pyretStack.push($al8);
}
throw $e49;
}
};
return R.safeCall($toplevel5,function(moduleVal) {
R.modules["$src/arr/base/pick.arr3"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://sets": ({
"requires":[{"import-type":"builtin",
"name":"arrays"},
{"import-type":"builtin",
"name":"equality"},
{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"pick"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":function(R, NAMESPACE, M, $arrays36,$equality37,$error38,$lists39,$option40,$pick41,$VS42) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,28,7,586,28,17,596],
[M,29,8,605,29,19,616],
[M,30,7,624,30,17,634],
[M,31,11,646,31,25,660],
[M,32,7,668,32,17,678],
[M,35,12,714,35,26,728],
[M,36,12,741,36,26,755],
[M,162,4,6236,162,18,6250],
[M,160,19,6153,160,29,6163],
[M,160,2,6136,163,5,6256],
[M,165,11,6297,165,18,6304],
[M,165,7,6293,165,26,6312],
[M,166,6,6320,166,51,6365],
[M,168,9,6385,168,23,6399],
[M,168,25,6401,168,40,6416],
[M,168,6,6382,168,41,6417],
[M,165,11,6297,165,25,6311],
[M,164,2,6260,170,5,6431],
[M,42,20,814,42,26,820],
[M,42,4,798,42,33,827],
[M,43,34,863,43,41,870],
[M,43,4,833,43,52,881],
[M,44,41,924,44,49,932],
[M,44,55,938,44,59,942],
[M,44,61,944,44,65,948],
[M,44,32,915,44,39,922],
[M,44,41,924,44,66,949],
[M,44,4,887,44,70,953],
[M,45,41,996,45,45,1000],
[M,45,32,987,45,39,994],
[M,45,4,959,45,49,1004],
[M,46,22,1028,46,32,1038],
[M,46,4,1010,46,43,1049],
[M,47,21,1072,47,31,1082],
[M,47,4,1055,47,42,1093],
[M,48,23,1118,48,33,1128],
[M,48,4,1099,48,44,1139],
[M,49,25,1166,49,35,1176],
[M,49,4,1145,49,46,1187],
[M,50,24,1213,50,34,1223],
[M,50,4,1193,50,45,1234],
[M,51,26,1262,51,36,1272],
[M,51,4,1240,51,47,1283],
[M,52,4,1289,52,42,1327],
[M,53,4,1333,53,41,1370],
[M,54,4,1376,54,43,1415],
[M,55,4,1421,55,45,1462],
[M,56,4,1468,56,44,1508],
[M,57,4,1514,57,46,1556],
[M,58,4,1562,58,22,1580],
[M,59,4,1586,59,26,1608],
[M,60,4,1614,60,27,1637],
[M,65,6,1795,65,12,1801],
[M,63,20,1738,63,26,1744],
[M,63,4,1722,66,7,1809],
[M,69,16,1946,69,26,1956],
[M,69,9,1939,69,26,1956],
[M,70,20,1983,70,30,1993],
[M,70,6,1969,70,55,2018],
[M,70,32,1995,70,41,2004],
[M,70,32,1995,70,55,2018],
[M,71,12,2031,71,22,2041],
[M,71,12,2031,71,36,2055],
[M,70,14,1977,70,30,1993],
[M,67,34,1845,67,41,1852],
[M,67,4,1815,73,7,2073],
[M,76,16,2199,76,26,2209],
[M,76,9,2192,76,26,2209],
[M,76,42,2225,76,51,2234],
[M,76,53,2236,76,63,2246],
[M,76,28,2211,76,36,2219],
[M,76,28,2211,76,64,2247],
[M,77,20,2268,77,30,2278],
[M,77,6,2254,78,74,2354],
[M,78,27,2307,78,37,2317],
[M,78,39,2319,78,48,2328],
[M,78,39,2319,78,60,2340],
[M,78,62,2342,78,72,2352],
[M,78,18,2298,78,26,2306],
[M,78,8,2288,78,17,2297],
[M,78,8,2288,78,74,2354],
[M,78,18,2298,78,73,2353],
[M,80,27,2394,80,37,2404],
[M,80,39,2406,80,48,2415],
[M,80,50,2417,80,60,2427],
[M,80,50,2417,80,72,2439],
[M,80,18,2385,80,26,2393],
[M,80,8,2375,80,17,2384],
[M,80,8,2375,80,74,2441],
[M,80,18,2385,80,73,2440],
[M,77,14,2262,77,30,2278],
[M,74,32,2107,74,39,2114],
[M,74,4,2079,82,7,2459],
[M,85,16,2582,85,26,2592],
[M,85,9,2575,85,26,2592],
[M,85,28,2594,85,39,2605],
[M,85,28,2594,85,45,2611],
[M,86,20,2632,86,30,2642],
[M,86,6,2618,87,74,2718],
[M,87,27,2671,87,37,2681],
[M,87,39,2683,87,48,2692],
[M,87,39,2683,87,60,2704],
[M,87,62,2706,87,72,2716],
[M,87,18,2662,87,26,2670],
[M,87,8,2652,87,17,2661],
[M,87,8,2652,87,74,2718],
[M,87,18,2662,87,73,2717],
[M,89,27,2758,89,37,2768],
[M,89,39,2770,89,48,2779],
[M,89,50,2781,89,60,2791],
[M,89,50,2781,89,72,2803],
[M,89,18,2749,89,26,2757],
[M,89,8,2739,89,17,2748],
[M,89,8,2739,89,74,2805],
[M,89,18,2749,89,73,2804],
[M,86,14,2626,86,30,2642],
[M,83,32,2493,83,39,2500],
[M,83,4,2465,91,7,2823],
[M,94,22,2965,94,32,2975],
[M,94,6,2949,94,36,2979],
[M,95,6,3047,95,40,3081],
[M,92,22,2847,92,32,2857],
[M,92,4,2829,96,7,3125],
[M,99,22,3265,99,32,3275],
[M,99,6,3249,99,36,3279],
[M,100,6,3286,100,39,3319],
[M,97,21,3148,97,31,3158],
[M,97,4,3131,101,7,3327],
[M,104,22,3471,104,32,3481],
[M,104,6,3455,104,36,3485],
[M,105,6,3492,105,41,3527],
[M,102,23,3352,102,33,3362],
[M,102,4,3333,106,7,3535],
[M,109,22,3680,109,32,3690],
[M,109,6,3664,109,36,3694],
[M,110,6,3701,110,37,3732],
[M,107,25,3562,107,35,3572],
[M,107,4,3541,111,7,3740],
[M,114,22,3882,114,32,3892],
[M,114,6,3866,114,36,3896],
[M,115,6,3903,115,36,3933],
[M,112,24,3766,112,34,3776],
[M,112,4,3746,116,7,3941],
[M,119,22,4088,119,32,4098],
[M,119,6,4072,119,36,4102],
[M,120,6,4109,120,38,4141],
[M,117,26,3969,117,36,3979],
[M,117,4,3947,121,7,4149],
[M,125,6,4342,125,16,4352],
[M,125,34,4370,125,43,4379],
[M,125,69,4405,125,79,4415],
[M,125,34,4370,125,81,4417],
[M,125,6,4342,125,82,4418],
[M,125,61,4397,125,80,4416],
[M,122,4,4155,126,7,4426],
[M,130,6,4618,130,16,4628],
[M,130,35,4647,130,44,4656],
[M,130,35,4647,130,66,4678],
[M,130,68,4680,130,78,4690],
[M,130,6,4618,130,80,4692],
[M,130,33,4645,130,79,4691],
[M,127,4,4432,131,7,4700],
[M,135,8,4897,135,18,4907],
[M,135,37,4926,135,46,4935],
[M,135,37,4926,135,70,4959],
[M,135,8,4897,135,71,4960],
[M,135,73,4962,135,83,4972],
[M,135,6,4895,135,84,4973],
[M,132,4,4706,136,7,4981],
[M,140,6,5191,140,15,5200],
[M,140,36,5221,140,46,5231],
[M,140,75,5260,140,85,5270],
[M,140,36,5221,140,87,5272],
[M,140,6,5191,140,88,5273],
[M,140,67,5252,140,86,5271],
[M,137,4,4987,141,7,5281],
[M,145,6,5489,145,15,5498],
[M,145,37,5520,145,47,5530],
[M,145,37,5520,145,72,5555],
[M,145,74,5557,145,84,5567],
[M,145,6,5489,145,86,5569],
[M,145,35,5518,145,85,5568],
[M,142,4,5287,146,7,5577],
[M,150,8,5791,150,17,5800],
[M,150,39,5822,150,49,5832],
[M,150,39,5822,150,76,5859],
[M,150,8,5791,150,77,5860],
[M,150,79,5862,150,89,5872],
[M,150,6,5789,150,90,5873],
[M,147,4,5583,151,7,5881],
[M,152,21,5904,152,30,5913],
[M,152,21,5904,152,38,5921],
[M,152,41,5924,152,51,5934],
[M,152,41,5924,152,59,5942],
[M,152,17,5900,152,59,5942],
[M,152,4,5887,152,63,5946],
[M,154,8,5974,154,18,5984],
[M,154,6,5972,154,62,6028],
[M,154,24,5990,154,34,6000],
[M,154,24,5990,154,41,6007],
[M,154,46,6012,154,55,6021],
[M,154,46,6012,154,62,6028],
[M,154,6,5972,154,19,5985],
[M,153,4,5952,155,7,6036],
[M,157,8,6064,157,18,6074],
[M,157,6,6062,157,60,6116],
[M,157,23,6079,157,33,6089],
[M,157,23,6079,157,40,6096],
[M,157,44,6100,157,53,6109],
[M,157,44,6100,157,60,6116],
[M,157,6,6062,157,19,6075],
[M,156,4,6042,158,7,6124],
[M,41,2,781,60,27,1637],
[M,62,2,1641,158,7,6124],
[M,62,30,1669,62,36,1675],
[M,62,46,1685,62,53,1692],
[M,62,64,1703,62,71,1710],
[M,62,4,1643,62,72,1711],
[M,40,0,765,171,3,6435],
[M,173,30,6467,173,57,6494],
[M,173,0,6437,173,61,6498],
[M,174,23,6522,174,34,6533],
[M,174,0,6499,174,38,6537],
[M,175,23,6561,175,34,6572],
[M,175,0,6538,175,38,6576],
[M,178,22,6661,178,35,6674],
[M,178,37,6676,178,51,6690],
[M,178,2,6641,178,70,6709],
[M,178,14,6653,178,56,6695],
[M,178,14,6653,178,52,6691],
[M,177,33,6611,177,40,6618],
[M,177,51,6629,177,58,6636],
[M,177,0,6578,179,3,6713],
[M,183,13,6780,183,19,6786],
[M,183,13,6780,183,25,6792],
[M,183,27,6794,183,33,6800],
[M,183,27,6794,183,38,6805],
[M,183,49,6816,183,56,6823],
[M,183,58,6825,183,64,6831],
[M,183,58,6825,183,70,6837],
[M,183,72,6839,183,79,6846],
[M,183,4,6771,183,81,6848],
[M,183,40,6807,183,80,6847],
[M,182,2,6749,184,5,6854],
[M,186,13,6890,186,20,6897],
[M,186,13,6890,186,26,6903],
[M,186,37,6914,186,44,6921],
[M,186,46,6923,186,52,6929],
[M,186,54,6931,186,61,6938],
[M,186,54,6931,186,66,6943],
[M,186,69,6946,186,76,6953],
[M,186,69,6946,186,82,6959],
[M,186,4,6881,186,83,6960],
[M,186,28,6905,186,67,6944],
[M,185,2,6857,187,5,6966],
[M,189,13,7001,189,19,7007],
[M,189,13,7001,189,25,7013],
[M,189,13,7001,189,31,7019],
[M,190,15,7036,190,21,7042],
[M,190,15,7036,190,27,7048],
[M,190,29,7050,190,35,7056],
[M,190,29,7050,190,40,7061],
[M,190,42,7063,190,48,7069],
[M,190,42,7063,190,54,7075],
[M,190,42,7063,190,59,7080],
[M,191,15,7098,191,22,7105],
[M,191,24,7107,191,30,7113],
[M,191,24,7107,191,36,7119],
[M,191,24,7107,191,42,7125],
[M,191,44,7127,191,51,7134],
[M,189,4,6992,191,53,7136],
[M,191,6,7089,191,52,7135],
[M,190,6,7027,190,60,7081],
[M,188,2,6969,192,5,7142],
[M,194,13,7177,194,20,7184],
[M,194,13,7177,194,25,7189],
[M,194,13,7177,194,31,7195],
[M,195,15,7212,195,22,7219],
[M,195,24,7221,195,30,7227],
[M,195,32,7229,195,39,7236],
[M,195,32,7229,195,44,7241],
[M,195,32,7229,195,49,7246],
[M,196,15,7264,196,22,7271],
[M,196,15,7264,196,28,7277],
[M,196,30,7279,196,37,7286],
[M,196,30,7279,196,42,7291],
[M,196,30,7279,196,48,7297],
[M,196,50,7299,196,57,7306],
[M,196,50,7299,196,63,7312],
[M,194,4,7168,196,65,7314],
[M,196,6,7255,196,64,7313],
[M,195,6,7203,195,50,7247],
[M,193,2,7145,197,5,7320],
[M,198,7,7328,198,16,7337],
[M,198,7,7328,198,25,7346],
[M,199,7,7354,199,17,7364],
[M,199,7,7354,199,26,7373],
[M,200,5,7379,200,26,7400],
[M,202,2,7413,207,7,7559],
[M,203,7,7444,203,16,7453],
[M,203,7,7444,203,21,7458],
[M,203,7,7444,203,30,7467],
[M,203,34,7471,203,43,7480],
[M,203,34,7471,203,49,7486],
[M,203,34,7471,203,58,7495],
[M,203,7,7444,203,58,7495],
[M,204,6,7503,204,21,7518],
[M,206,6,7535,206,22,7551],
[M,208,2,7562,213,7,7712],
[M,209,7,7593,209,17,7603],
[M,209,7,7593,209,23,7609],
[M,209,7,7593,209,32,7618],
[M,209,36,7622,209,46,7632],
[M,209,36,7622,209,51,7637],
[M,209,36,7622,209,60,7646],
[M,209,7,7593,209,60,7646],
[M,210,6,7654,210,23,7671],
[M,212,6,7688,212,22,7704],
[M,215,4,7725,215,48,7769],
[M,208,10,7570,208,24,7584],
[M,208,11,7571,208,18,7578],
[M,202,10,7421,202,24,7435],
[M,202,11,7422,202,18,7429],
[M,200,5,7379,200,21,7395],
[M,200,13,7387,200,20,7394],
[M,181,22,6737,181,29,6744],
[M,181,0,6715,217,3,7779],
[M,220,13,7828,220,22,7837],
[M,220,5,7820,220,23,7838],
[M,221,15,7855,221,25,7865],
[M,221,7,7847,221,26,7866],
[M,224,6,7895,224,16,7905],
[M,227,15,7937,227,25,7947],
[M,227,7,7929,227,26,7948],
[M,228,6,7956,228,15,7965],
[M,230,6,7982,230,22,7998],
[M,230,6,7982,230,28,8004],
[M,219,24,7805,219,31,7812],
[M,219,0,7781,233,3,8022],
[M,238,16,8120,238,55,8159],
[M,238,8,8112,238,12,8116],
[M,239,37,8197,239,51,8211],
[M,239,61,8221,239,76,8236],
[M,239,8,8168,239,30,8190],
[M,237,4,8086,240,7,8248],
[M,237,10,8092,237,17,8099],
[M,236,2,8065,241,5,8254],
[M,244,16,8333,244,53,8370],
[M,244,8,8325,244,12,8329],
[M,246,11,8421,246,25,8435],
[M,249,10,8476,249,78,8544],
[M,249,20,8486,249,77,8543],
[M,249,40,8506,249,76,8542],
[M,245,8,8379,245,35,8406],
[M,245,6,8377,250,11,8556],
[M,243,4,8299,251,7,8564],
[M,243,10,8305,243,17,8312],
[M,242,2,8257,252,5,8570],
[M,253,30,8601,253,39,8610],
[M,253,21,8592,253,46,8617],
[M,254,36,8655,254,45,8664],
[M,255,6,8673,255,16,8683],
[M,253,2,8573,255,18,8685],
[M,253,12,8583,255,17,8684],
[M,254,6,8625,254,46,8665],
[M,253,21,8592,253,40,8611],
[M,235,29,8053,235,36,8060],
[M,235,0,8024,256,3,8689],
[M,480,4,14635,480,21,14652],
[M,480,33,14664,480,54,14685],
[M,480,4,14635,480,55,14686],
[M,478,53,14553,478,56,14556],
[M,478,31,14531,478,34,14534],
[M,478,45,14545,478,48,14548],
[M,478,2,14502,481,5,14692],
[M,484,11,14734,484,14,14737],
[M,484,7,14730,484,22,14745],
[M,485,6,14753,485,47,14794],
[M,487,18,14823,487,32,14837],
[M,488,19,14857,488,34,14872],
[M,489,13,14886,489,32,14905],
[M,489,36,14909,489,54,14927],
[M,489,9,14882,489,55,14928],
[M,490,8,14938,490,50,14980],
[M,493,27,15086,493,65,15124],
[M,494,10,15135,494,52,15177],
[M,492,8,15001,495,11,15189],
[M,492,29,15022,492,43,15036],
[M,489,13,14886,489,54,14927],
[M,484,11,14734,484,21,14744],
[M,483,2,14697,498,5,15213],
[M,275,12,9237,275,22,9247],
[M,277,10,9281,277,15,9286],
[M,280,36,9385,280,44,9393],
[M,280,23,9372,280,52,9401],
[M,280,36,9385,280,51,9400],
[M,280,14,9363,280,19,9368],
[M,283,17,9485,283,31,9499],
[M,284,29,9530,284,37,9538],
[M,284,16,9517,284,41,9542],
[M,284,29,9530,284,40,9541],
[M,286,30,9593,286,38,9601],
[M,286,16,9579,286,52,9615],
[M,286,30,9593,286,51,9614],
[M,286,39,9602,286,50,9613],
[M,282,26,9458,282,35,9467],
[M,282,14,9446,282,35,9467],
[M,281,14,9416,281,26,9428],
[M,281,12,9414,287,17,9633],
[M,279,10,9334,288,13,9647],
[M,279,16,9340,279,20,9344],
[M,278,10,9310,278,20,9320],
[M,278,8,9308,288,13,9647],
[M,276,6,9254,289,9,9657],
[M,276,12,9260,276,16,9264],
[M,274,4,9213,290,7,9665],
[M,293,6,9728,293,16,9738],
[M,294,13,9774,294,22,9783],
[M,294,24,9785,294,38,9799],
[M,295,16,9816,295,43,9843],
[M,295,16,9816,295,30,9830],
[M,293,23,9745,297,11,9869],
[M,293,6,9728,297,16,9874],
[M,292,6,9711,298,9,9886],
[M,291,4,9671,299,7,9894],
[M,302,6,9958,302,16,9968],
[M,303,13,10004,303,22,10013],
[M,303,24,10015,303,36,10027],
[M,304,16,10044,304,41,10069],
[M,304,16,10044,304,28,10056],
[M,302,23,9975,306,11,10095],
[M,302,6,9958,306,16,10100],
[M,301,6,9936,307,9,10112],
[M,300,4,9900,308,7,10120],
[M,309,48,10170,309,62,10184],
[M,309,67,10189,309,78,10200],
[M,309,48,10170,309,79,10201],
[M,309,19,10141,309,80,10202],
[M,309,4,10126,309,84,10206],
[M,312,20,10282,312,30,10292],
[M,312,6,10268,312,31,10293],
[M,311,20,10229,311,37,10246],
[M,311,4,10213,313,7,10301],
[M,317,6,10405,317,16,10415],
[M,317,6,10405,317,29,10428],
[M,315,33,10337,315,40,10344],
[M,315,4,10308,318,7,10436],
[M,322,10,10553,322,20,10563],
[M,322,10,10553,322,33,10576],
[M,322,9,10552,322,34,10577],
[M,325,28,10632,325,38,10642],
[M,325,8,10612,325,16,10620],
[M,325,8,10612,325,40,10644],
[M,325,17,10621,325,39,10643],
[M,320,30,10469,320,33,10472],
[M,320,4,10443,327,7,10662],
[M,331,15,10780,331,25,10790],
[M,331,15,10780,331,38,10803],
[M,331,6,10771,331,14,10779],
[M,329,33,10698,329,36,10701],
[M,331,6,10771,331,39,10804],
[M,329,4,10669,332,7,10812],
[M,336,6,10906,336,16,10916],
[M,334,21,10836,334,31,10846],
[M,334,4,10819,337,7,10924],
[M,342,8,11071,342,19,11082],
[M,341,17,11049,343,9,11092],
[M,341,6,11038,343,16,11099],
[M,339,40,10967,339,43,10970],
[M,339,18,10945,339,21,10948],
[M,339,32,10959,339,35,10962],
[M,339,4,10931,344,7,11107],
[M,349,11,11310,349,29,11328],
[M,352,10,11370,352,28,11388],
[M,348,18,11244,354,9,11410],
[M,348,38,11264,348,48,11274],
[M,348,60,11286,348,70,11296],
[M,355,6,11417,355,14,11425],
[M,346,44,11154,346,47,11157],
[M,355,6,11417,355,25,11436],
[M,346,22,11132,346,25,11135],
[M,346,36,11146,346,39,11149],
[M,346,4,11114,356,7,11444],
[M,360,15,11600,360,27,11612],
[M,360,6,11591,360,28,11613],
[M,358,43,11490,358,50,11497],
[M,358,21,11468,358,24,11471],
[M,358,35,11482,358,38,11485],
[M,358,4,11451,361,7,11621],
[M,366,11,11827,366,29,11845],
[M,367,10,11857,367,28,11875],
[M,365,18,11761,371,9,11927],
[M,365,38,11781,365,48,11791],
[M,365,60,11803,365,70,11813],
[M,372,6,11934,372,14,11942],
[M,363,45,11673,363,48,11676],
[M,372,6,11934,372,25,11953],
[M,363,23,11651,363,26,11654],
[M,363,37,11665,363,40,11668],
[M,363,4,11632,373,7,11961],
[M,376,6,12003,376,16,12013],
[M,376,6,12003,376,25,12022],
[M,375,25,11989,375,31,11995],
[M,375,17,11981,375,20,11984],
[M,375,4,11968,377,7,12030],
[M,379,29,12062,379,39,12072],
[M,379,20,12053,379,40,12073],
[M,379,4,12037,379,44,12077],
[M,382,6,12115,382,16,12125],
[M,382,6,12115,382,23,12132],
[M,381,20,12100,381,27,12107],
[M,381,4,12084,383,7,12140],
[M,386,6,12178,386,16,12188],
[M,386,6,12178,386,23,12195],
[M,385,20,12163,385,27,12170],
[M,385,4,12147,387,7,12203],
[M,391,10,12272,391,20,12282],
[M,393,10,12317,393,14,12321],
[M,395,32,12399,395,43,12410],
[M,395,23,12390,395,31,12398],
[M,395,10,12377,395,45,12412],
[M,395,23,12390,395,44,12411],
[M,394,10,12345,394,28,12363],
[M,392,6,12289,396,9,12422],
[M,392,12,12295,392,19,12302],
[M,390,4,12250,397,7,12430],
[M,400,6,12498,400,16,12508],
[M,401,13,12543,401,22,12552],
[M,401,24,12554,401,38,12568],
[M,402,16,12585,402,43,12612],
[M,402,29,12598,402,43,12612],
[M,400,22,12514,404,11,12638],
[M,400,6,12498,404,16,12643],
[M,399,6,12476,405,9,12655],
[M,398,4,12436,406,7,12663],
[M,409,6,12727,409,16,12737],
[M,410,13,12772,410,22,12781],
[M,410,24,12783,410,36,12795],
[M,411,16,12812,411,41,12837],
[M,411,29,12825,411,41,12837],
[M,409,22,12743,413,11,12863],
[M,409,6,12727,413,16,12868],
[M,408,6,12705,414,9,12880],
[M,407,4,12669,415,7,12888],
[M,416,48,12938,416,62,12952],
[M,416,67,12957,416,78,12968],
[M,416,48,12938,416,79,12969],
[M,416,19,12909,416,80,12970],
[M,416,4,12894,416,84,12974],
[M,419,25,13050,419,35,13060],
[M,419,6,13031,419,36,13061],
[M,418,20,12997,418,32,13009],
[M,418,4,12981,420,7,13069],
[M,424,6,13173,424,16,13183],
[M,424,6,13173,424,31,13198],
[M,422,33,13105,422,40,13112],
[M,422,4,13076,425,7,13206],
[M,429,15,13328,429,25,13338],
[M,429,15,13328,429,38,13351],
[M,429,6,13319,429,14,13327],
[M,427,30,13239,427,33,13242],
[M,429,6,13319,429,39,13352],
[M,427,4,13213,430,7,13360],
[M,434,15,13478,434,25,13488],
[M,434,15,13478,434,38,13501],
[M,434,6,13469,434,14,13477],
[M,432,33,13396,432,36,13399],
[M,434,6,13469,434,39,13502],
[M,432,4,13367,435,7,13510],
[M,439,6,13604,439,16,13614],
[M,439,6,13604,439,26,13624],
[M,437,21,13534,437,31,13544],
[M,437,4,13517,440,7,13632],
[M,444,6,13725,444,20,13739],
[M,444,6,13725,444,33,13752],
[M,442,4,13639,445,7,13760],
[M,449,6,13864,449,24,13882],
[M,449,6,13864,449,37,13895],
[M,447,4,13767,450,7,13903],
[M,454,15,14059,454,27,14071],
[M,454,6,14050,454,28,14072],
[M,452,43,13949,452,50,13956],
[M,452,21,13927,452,24,13930],
[M,452,35,13941,452,38,13944],
[M,452,4,13910,455,7,14080],
[M,459,6,14204,459,25,14223],
[M,457,45,14128,457,48,14131],
[M,459,6,14204,459,38,14236],
[M,457,23,14106,457,26,14109],
[M,457,37,14120,457,40,14123],
[M,457,4,14087,460,7,14244],
[M,463,6,14286,463,16,14296],
[M,463,6,14286,463,24,14304],
[M,462,25,14272,462,31,14278],
[M,462,17,14264,462,20,14267],
[M,462,4,14251,464,7,14312],
[M,466,28,14343,466,38,14353],
[M,466,20,14335,466,39,14354],
[M,466,4,14319,466,43,14358],
[M,469,6,14396,469,16,14406],
[M,469,6,14396,469,23,14413],
[M,468,20,14381,468,27,14388],
[M,468,4,14365,470,7,14421],
[M,473,6,14459,473,16,14469],
[M,473,6,14459,473,23,14476],
[M,472,20,14444,472,27,14451],
[M,472,4,14428,474,7,14484],
[M,273,2,9171,387,7,12203],
[M,273,22,9191,273,32,9201],
[M,273,4,9173,273,33,9202],
[M,389,2,12211,474,7,14484],
[M,389,22,12231,389,29,12238],
[M,389,4,12213,389,30,12239],
[M,272,0,9159,499,3,15217],
[M,503,25,15288,503,37,15300],
[M,503,6,15269,503,21,15284],
[M,504,25,15326,504,40,15341],
[M,504,6,15307,504,21,15322],
[M,502,2,15249,505,5,15347],
[M,502,8,15255,502,11,15258],
[M,501,0,15219,506,3,15351],
[M,515,8,15726,515,22,15740],
[M,517,7,15765,517,13,15771],
[M,518,4,15782,518,32,15810],
[M,521,13,15872,521,23,15882],
[M,522,14,15897,522,23,15906],
[M,523,19,15926,523,32,15939],
[M,523,6,15913,523,77,15984],
[M,523,44,15951,523,76,15983],
[M,523,51,15958,523,75,15982],
[M,523,63,15970,523,74,15981],
[M,523,64,15971,523,69,15976],
[M,523,19,15926,523,36,15943],
[M,520,13,15834,520,37,15858],
[M,520,20,15841,520,36,15857],
[M,520,30,15851,520,35,15856],
[M,518,12,15790,518,26,15804],
[M,516,2,15743,525,5,15998],
[M,526,2,16001,526,13,16012],
[M,508,0,15353,535,3,16407],
[M,539,5,16536,539,17,16548],
[M,540,2,16555,540,26,16579],
[M,541,10,16590,541,18,16598],
[M,541,21,16601,541,29,16609],
[M,541,2,16582,541,74,16654],
[M,541,37,16617,541,45,16625],
[M,541,61,16641,541,68,16648],
[M,541,32,16612,541,74,16654],
[M,541,47,16627,541,73,16653],
[M,542,10,16665,542,18,16673],
[M,542,22,16677,542,30,16685],
[M,542,2,16657,542,58,16713],
[M,542,46,16701,542,53,16708],
[M,542,32,16687,542,58,16713],
[M,543,37,16751,543,45,16759],
[M,543,65,16779,543,72,16786],
[M,543,32,16746,543,74,16788],
[M,543,47,16761,543,73,16787],
[M,542,10,16665,542,30,16685],
[M,541,10,16590,541,29,16609],
[M,540,10,16563,540,22,16575],
[M,537,0,16409,547,3,16889],
[M,549,30,16921,549,33,16924],
[M,553,2,17050,553,44,17092],
[M,553,11,17059,553,43,17091],
[M,552,14,17014,552,47,17047],
[M,551,13,16976,551,36,16999],
[M,550,13,16939,550,36,16962],
[M,549,0,16891,554,3,17096],
[M,558,5,17217,558,33,17245],
[M,558,21,17233,558,33,17245],
[M,559,10,17263,559,18,17271],
[M,559,21,17274,559,29,17282],
[M,559,2,17255,559,60,17313],
[M,559,48,17301,559,55,17308],
[M,559,32,17285,559,60,17313],
[M,560,10,17324,560,18,17332],
[M,560,22,17336,560,30,17344],
[M,560,2,17316,560,81,17395],
[M,560,37,17351,560,45,17359],
[M,560,63,17377,560,70,17384],
[M,560,72,17386,560,79,17393],
[M,560,32,17346,560,81,17395],
[M,560,47,17361,560,80,17394],
[M,561,52,17448,561,59,17455],
[M,561,32,17428,561,60,17456],
[M,560,10,17324,560,30,17344],
[M,559,10,17263,559,29,17282],
[M,558,5,17217,558,17,17229],
[M,556,0,17098,565,3,17547],
[M,567,34,17583,567,37,17586],
[M,571,2,17714,571,44,17756],
[M,571,11,17723,571,43,17755],
[M,570,14,17676,570,49,17711],
[M,569,13,17638,569,36,17661],
[M,568,13,17601,568,36,17624],
[M,567,0,17549,572,3,17760],
[M,576,5,17885,576,33,17913],
[M,576,21,17901,576,33,17913],
[M,577,10,17928,577,18,17936],
[M,577,22,17940,577,30,17948],
[M,577,2,17920,577,63,17981],
[M,577,46,17964,577,53,17971],
[M,577,55,17973,577,62,17980],
[M,577,32,17950,577,63,17981],
[M,578,10,17992,578,18,18000],
[M,578,21,18003,578,29,18011],
[M,578,2,17984,578,74,18056],
[M,578,37,18019,578,45,18027],
[M,578,61,18043,578,68,18050],
[M,578,32,18014,578,74,18056],
[M,578,47,18029,578,73,18055],
[M,579,50,18107,579,57,18114],
[M,579,32,18089,579,58,18115],
[M,578,10,17992,578,29,18011],
[M,577,10,17928,577,30,17948],
[M,576,5,17885,576,17,17897],
[M,574,0,17762,583,3,18204],
[M,585,35,18241,585,38,18244],
[M,589,2,18370,589,44,18412],
[M,589,11,18379,589,43,18411],
[M,588,14,18334,588,47,18367],
[M,587,13,18296,587,36,18319],
[M,586,13,18259,586,36,18282],
[M,585,0,18206,590,3,18416],
[M,593,2,18457,593,10,18465],
[M,592,28,18446,592,35,18453],
[M,592,20,18438,592,23,18441],
[M,592,0,18418,594,3,18469],
[M,597,2,18510,597,10,18518],
[M,596,28,18499,596,35,18506],
[M,596,20,18491,596,23,18494],
[M,596,0,18471,598,3,18522],
[M,601,2,18559,601,17,18574],
[M,600,27,18551,600,30,18554],
[M,600,0,18524,602,3,18578],
[M,607,4,18730,607,15,18741],
[M,606,2,18678,608,5,18747],
[M,604,55,18635,604,58,18638],
[M,604,23,18603,604,33,18613],
[M,604,47,18627,604,50,18630],
[M,604,0,18580,609,3,18751],
[M,611,43,18796,611,46,18799],
[M,613,2,18850,613,35,18883],
[M,613,19,18867,613,34,18882],
[M,611,28,18781,611,38,18791],
[M,611,0,18753,614,3,18887],
[M,616,43,18932,616,46,18935],
[M,618,2,18986,618,34,19018],
[M,618,19,19003,618,33,19017],
[M,616,28,18917,616,38,18927],
[M,616,0,18889,619,3,19022],
[M,623,4,19113,623,20,19129],
[M,622,2,19063,624,5,19135],
[M,621,24,19048,621,34,19058],
[M,621,0,19024,625,3,19139],
[M,629,4,19261,629,15,19272],
[M,628,2,19188,630,5,19278],
[M,627,40,19181,627,43,19184],
[M,628,29,19215,628,44,19230],
[M,627,27,19168,627,35,19176],
[M,627,0,19141,631,3,19282],
[M,635,4,19399,635,17,19412],
[M,634,9,19338,636,5,19418],
[M,633,40,19324,633,43,19327],
[M,637,2,19421,637,16,19435],
[M,633,27,19311,633,35,19319],
[M,633,0,19284,638,3,19439],
[M,644,5,19532,644,11,19538],
[M,644,13,19540,644,27,19554],
[M,645,8,19563,645,31,19586],
[M,645,16,19571,645,30,19585],
[M,643,0,19507,647,3,19596],
[M,649,10,19630,649,16,19636],
[M,649,18,19638,649,32,19652],
[M,650,2,19655,650,32,19685],
[M,650,18,19671,650,32,19685],
[M,651,18,19704,651,41,19727],
[M,651,26,19712,651,40,19726],
[M,650,10,19663,650,16,19669],
[M,648,0,19597,653,3,19737],
[M,655,10,19774,655,16,19780],
[M,655,18,19782,655,35,19799],
[M,656,2,19802,656,35,19835],
[M,656,18,19818,656,35,19835],
[M,657,2,19838,657,35,19871],
[M,657,18,19854,657,35,19871],
[M,658,18,19890,658,44,19916],
[M,658,26,19898,658,43,19915],
[M,657,10,19846,657,16,19852],
[M,656,10,19810,656,16,19816],
[M,654,0,19738,660,3,19926],
[M,662,10,19966,662,16,19972],
[M,662,18,19974,662,38,19994],
[M,663,2,19997,663,38,20033],
[M,663,18,20013,663,38,20033],
[M,664,2,20036,664,38,20072],
[M,664,18,20052,664,38,20072],
[M,665,2,20075,665,38,20111],
[M,665,18,20091,665,38,20111],
[M,666,18,20130,666,47,20159],
[M,666,26,20138,666,46,20158],
[M,665,10,20083,665,16,20089],
[M,664,10,20044,664,16,20050],
[M,663,10,20005,663,16,20011],
[M,661,0,19927,668,3,20169],
[M,672,9,20224,672,34,20249],
[M,673,17,20268,673,41,20292],
[M,673,26,20277,673,40,20291],
[M,673,9,20260,673,45,20296],
[M,674,20,20318,674,44,20342],
[M,674,29,20327,674,43,20341],
[M,674,9,20307,674,48,20346],
[M,675,23,20371,675,50,20398],
[M,675,32,20380,675,49,20397],
[M,675,9,20357,675,54,20402],
[M,676,26,20430,676,56,20460],
[M,676,35,20439,676,55,20459],
[M,676,9,20413,676,60,20464],
[M,677,29,20495,677,62,20528],
[M,677,38,20504,677,61,20527],
[M,677,9,20475,677,66,20532],
[M,682,9,20589,682,34,20614],
[M,683,17,20633,683,38,20654],
[M,683,9,20625,683,42,20658],
[M,684,20,20680,684,41,20701],
[M,684,20,20680,684,48,20708],
[M,684,9,20669,684,52,20712],
[M,685,23,20737,685,44,20758],
[M,685,23,20737,685,51,20765],
[M,685,23,20737,685,58,20772],
[M,685,9,20723,685,62,20776],
[M,686,26,20804,686,47,20825],
[M,686,26,20804,686,54,20832],
[M,686,26,20804,686,61,20839],
[M,686,26,20804,686,68,20846],
[M,686,9,20787,686,72,20850],
[M,687,29,20881,687,50,20902],
[M,687,29,20881,687,57,20909],
[M,687,29,20881,687,64,20916],
[M,687,29,20881,687,71,20923],
[M,687,29,20881,687,78,20930],
[M,687,9,20861,687,82,20934],
[M,641,17,19491,641,31,19505],
[M,640,17,19458,640,32,19473],
[M,34,12,692,34,21,701],
[M,27,12,568,27,22,578],
[M,3,0,21,688,1,20936]];
var not1 = NAMESPACE.get("not");
var $type$Number2 = NAMESPACE.get("$type$Number");
var $type$Boolean3 = NAMESPACE.get("$type$Boolean");
var equal$always4 = NAMESPACE.get("equal-always");
var _lessthan5 = NAMESPACE.get("_lessthan");
var _plus6 = NAMESPACE.get("_plus");
var num$max7 = NAMESPACE.get("num-max");
var _minus8 = NAMESPACE.get("_minus");
var num$abs9 = NAMESPACE.get("num-abs");
var _lessequal10 = NAMESPACE.get("_lessequal");
var raise11 = NAMESPACE.get("raise");
var _greaterequal12 = NAMESPACE.get("_greaterequal");
var nothing13 = NAMESPACE.get("nothing");
var random14 = NAMESPACE.get("random");
var _divide15 = NAMESPACE.get("_divide");
var num$floor16 = NAMESPACE.get("num-floor");
var num$ceiling17 = NAMESPACE.get("num-ceiling");
var $type$RawArray18 = NAMESPACE.get("$type$RawArray");
var raw$array$fold19 = NAMESPACE.get("raw-array-fold");
var builtins20 = NAMESPACE.get("builtins");
var arrays21 = R.getField($arrays36,"values");
var equality22 = R.getField($equality37,"values");
var error23 = R.getField($error38,"values");
var lists24 = R.getField($lists39,"values");
var option25 = R.getField($option40,"values");
var pick26 = R.getField($pick41,"values");
var VS27 = R.getField($VS42,"values");
var arrays28 = R.getField($arrays36,"types");
var equality29 = R.getField($equality37,"types");
var error30 = R.getField($error38,"types");
var lists31 = R.getField($lists39,"types");
var option32 = R.getField($option40,"types");
var pick33 = R.getField($pick41,"types");
var VS34 = R.getField($VS42,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$arrays36);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$equality37);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error38);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists39);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$option40);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$pick41);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS42);
var $toplevel44 = function($$resumer1804) {
var $step43 = 0;
var $ans46 = D;
var $al47 = L[847];
try {
if(R.isActivationRecord($$resumer1804)) {
$step43 = $$resumer1804.step;
$al47 = $$resumer1804.from;
$ans46 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
provides1943 = $$resumer1804.vars[0];
tree$set$maker1938 = $$resumer1804.vars[1];
list$set$maker1937 = $$resumer1804.vars[2];
makeSet51801 = $$resumer1804.vars[3];
makeSet41780 = $$resumer1804.vars[4];
makeSet31762 = $$resumer1804.vars[5];
makeSet21747 = $$resumer1804.vars[6];
empty$tree$set1864 = $$resumer1804.vars[7];
empty$list$set1807 = $$resumer1804.vars[8];
arr$to$tree$set1735 = $$resumer1804.vars[9];
arr$to$list$set1715 = $$resumer1804.vars[10];
list$to$tree1695 = $$resumer1804.vars[11];
list$to$tree$set1677 = $$resumer1804.vars[12];
list$to$list$set1667 = $$resumer1804.vars[13];
list$to$set1657 = $$resumer1804.vars[14];
set$fold1637 = $$resumer1804.vars[15];
set$any1626 = $$resumer1804.vars[16];
set$all1615 = $$resumer1804.vars[17];
tree$set$difference1328 = $$resumer1804.vars[18];
merge$drop$l21576 = $$resumer1804.vars[19];
tree$set$intersect1310 = $$resumer1804.vars[20];
merge$only$dups1535 = $$resumer1804.vars[21];
tree$set$union1302 = $$resumer1804.vars[22];
merge$no$dups1493 = $$resumer1804.vars[23];
elems$to$balanced$avl1481 = $$resumer1804.vars[24];
set$to$sorted$elems1446 = $$resumer1804.vars[25];
tree$set1180 = $$resumer1804.vars[26];
is$tree$set1431 = $$resumer1804.vars[27];
list$set919 = $$resumer1804.vars[28];
is$list$set1428 = $$resumer1804.vars[29];
is$Set1426 = $$resumer1804.vars[30];
Set878 = $$resumer1804.vars[31];
swap$next$lowest798 = $$resumer1804.vars[32];
remove$root282 = $$resumer1804.vars[33];
rebalance262 = $$resumer1804.vars[34];
mkbranch96 = $$resumer1804.vars[35];
tree$any643 = $$resumer1804.vars[36];
tree$all633 = $$resumer1804.vars[37];
tree$fold623 = $$resumer1804.vars[38];
branch612 = $$resumer1804.vars[39];
is$branch610 = $$resumer1804.vars[40];
leaf97 = $$resumer1804.vars[41];
is$leaf607 = $$resumer1804.vars[42];
is$AVLTree605 = $$resumer1804.vars[43];
AVLTree65 = $$resumer1804.vars[44];
pick$some920 = $$resumer1804.vars[45];
pick$none916 = $$resumer1804.vars[46];
Pick1942 = $$resumer1804.vars[47];
fold903 = $$resumer1804.vars[48];
is$empty1148 = $$resumer1804.vars[49];
link312 = $$resumer1804.vars[50];
empty114 = $$resumer1804.vars[51];
List1945 = $$resumer1804.vars[52];
List937 = $$resumer1804.vars[53];
Set869 = $$resumer1804.vars[54];
AVLTree99 = $$resumer1804.vars[55];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step43) {
case 0: var AVLTree48 = R.namedBrander("AVLTree");
var AVLTree99 = R.makeBranderAnn(AVLTree48,"AVLTree");
var Set49 = R.namedBrander("Set");
var Set869 = R.makeBranderAnn(Set49,"Set");
var List937 = R.getDotAnn(L[846],"lists",lists31,"List");
var List1945 = G(lists24,"List",L[0]);
var empty114 = G(lists24,"empty",L[1]);
var link312 = G(lists24,"link",L[2]);
var is$empty1148 = G(lists24,"is-empty",L[3]);
var fold903 = G(lists24,"fold",L[4]);
var Pick1942 = R.getDotAnn(L[845],"pick",pick33,"Pick");
var pick$none916 = G(pick26,"pick-none",L[5]);
var pick$some920 = G(pick26,"pick-some",L[6]);
var AVLTree602 = {"$var":D};
var AVLTree65 = {"$var":D};
var is$AVLTree605 = {"$var":D};
var is$leaf607 = {"$var":D};
var leaf97 = {"$var":D};
var is$branch610 = {"$var":D};
var branch612 = {"$var":D};
var tree$fold623 = {"$var":D};
var tree$all633 = {"$var":D};
var tree$any643 = {"$var":D};
var mkbranch96 = {"$var":D};
var rebalance262 = {"$var":D};
var remove$root282 = {"$var":D};
var swap$next$lowest798 = {"$var":D};
var $temp_full51 = function($self52) {
var $step50 = 0;
var $ans53 = D;
var $al54 = L[9];
try {
if(R.isActivationRecord($self52)) {
$step50 = $self52.step;
$al54 = $self52.from;
$ans53 = $self52.ans;
self52 = $self52.args[0];
ann_check_temp56 = $self52.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],1,$t);
}
var self52 = $self52;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step50) {
case 0: $step50 = 1;
$al54 = L[7];
$field55 = R.getColonFieldLoc(self52,"inorder",L[7]);
if(R.isMethod($field55)) {
$ans53 = $field55.full_meth(self52);
} else {
if(!(R.isFunction($field55))) {
R.ffi.throwNonFunApp(L[7],$field55);
}
$ans53 = $field55.app();
}
break;
case 1: var ann_check_temp56 = $ans53;
$step50 = 2;
$al54 = L[8];
R._checkAnn(L[8],R.getDotAnn(L[8],"lists",lists31,"List"),ann_check_temp56);
break;
case 2: $step50 = 3;
$ans53 = ann_check_temp56;
break;
case 3: ++R.GAS;
return $ans53;
default: throw "No case numbered " + $step50 + " in $temp_full51";
}
}
} catch($e57) {
if(R.isCont($e57) && ($step50 !== 3)) {
$e57.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al54,$temp_full51,$step50,[self52],[ann_check_temp56]);
}
if(R.isPyretException($e57)) {
$e57.pyretStack.push($al54);
}
throw $e57;
}
};
var anf_shared541 = R.makeMethod0($temp_full51);
var $temp_full59 = function($self60,$other61,$eq62) {
var $step58 = 0;
var $ans63 = D;
var $al64 = L[17];
try {
if(R.isActivationRecord($self60)) {
$step58 = $self60.step;
$al64 = $self60.from;
$ans63 = $self60.ans;
self60 = $self60.args[0];
other61 = $self60.args[1];
eq62 = $self60.args[2];
anf_arg71 = $self60.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],3,$t);
}
var self60 = $self60;
var other61 = $other61;
var eq62 = $eq62;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step58) {
case 0: $step58 = 1;
$al64 = L[16];
if(!(R.isFunction(AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var))) {
R.ffi.throwNonFunApp($al64,AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var);
}
$ans63 = AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var.app(other61);
break;
case 1: var anf_arg66 = $ans63;
$step58 = 2;
$al64 = L[11];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al64,not1);
}
$ans63 = not1.app(anf_arg66);
break;
case 2: var anf_arg67 = $ans63;
$al64 = L[11];
var anf_if73 = R.checkWrapBoolean(anf_arg67);
if(R.isPyretTrue(anf_if73)) {
$step58 = 3;
} else {
$step58 = 4;
}
break;
case 3: $step58 = 7;
$al64 = L[12];
$field68 = R.getColonFieldLoc(equality22,"NotEqual",L[12]);
if(R.isMethod($field68)) {
$ans63 = $field68.full_meth(equality22,("Non-AVLTree"),self60,other61);
} else {
if(!(R.isFunction($field68))) {
R.ffi.throwNonFunApp(L[12],$field68);
}
$ans63 = $field68.app(("Non-AVLTree"),self60,other61);
}
break;
case 4: $step58 = 5;
$al64 = L[13];
$field69 = R.getColonFieldLoc(self60,"inorder",L[13]);
if(R.isMethod($field69)) {
$ans63 = $field69.full_meth(self60);
} else {
if(!(R.isFunction($field69))) {
R.ffi.throwNonFunApp(L[13],$field69);
}
$ans63 = $field69.app();
}
break;
case 5: var anf_arg71 = $ans63;
$step58 = 6;
$al64 = L[14];
$field70 = R.getColonFieldLoc(other61,"inorder",L[14]);
if(R.isMethod($field70)) {
$ans63 = $field70.full_meth(other61);
} else {
if(!(R.isFunction($field70))) {
R.ffi.throwNonFunApp(L[14],$field70);
}
$ans63 = $field70.app();
}
break;
case 6: var anf_arg72 = $ans63;
$step58 = 7;
$al64 = L[15];
if(!(R.isFunction(eq62))) {
R.ffi.throwNonFunApp($al64,eq62);
}
$ans63 = eq62.app(anf_arg71,anf_arg72);
break;
case 7: ++R.GAS;
return $ans63;
default: throw "No case numbered " + $step58 + " in $temp_full59";
}
}
} catch($e74) {
if(R.isCont($e74) && ($step58 !== 7)) {
$e74.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al64,$temp_full59,$step58,[self60,other61,eq62],[anf_arg71]);
}
if(R.isPyretException($e74)) {
$e74.pyretStack.push($al64);
}
throw $e74;
}
};
var anf_shared542 = R.makeMethod2($temp_full59);
var $temp_full76 = function($self77) {
var $step75 = 0;
var $ans78 = D;
var $al79 = L[19];
try {
if(R.isActivationRecord($self77)) {
$step75 = $self77.step;
$al79 = $self77.from;
$ans78 = $self77.ans;
self77 = $self77.args[0];
ann_check_temp80 = $self77.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[19],1,$t);
}
var self77 = $self77;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step75) {
case 0: var ann_check_temp80 = (0);
$step75 = 1;
$al79 = L[18];
R._checkAnn(L[18],$type$Number2,ann_check_temp80);
break;
case 1: $step75 = 2;
$ans78 = ann_check_temp80;
break;
case 2: ++R.GAS;
return $ans78;
default: throw "No case numbered " + $step75 + " in $temp_full76";
}
}
} catch($e81) {
if(R.isCont($e81) && ($step75 !== 2)) {
$e81.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al79,$temp_full76,$step75,[self77],[ann_check_temp80]);
}
if(R.isPyretException($e81)) {
$e81.pyretStack.push($al79);
}
throw $e81;
}
};
var anf_singleton_variant_member546 = R.makeMethod0($temp_full76);
var $temp_full83 = function($self84,$val85) {
var $step82 = 0;
var $ans86 = D;
var $al87 = L[21];
try {
if(R.isActivationRecord($self84)) {
$step82 = $self84.step;
$al87 = $self84.from;
$ans86 = $self84.ans;
self84 = $self84.args[0];
val85 = $self84.args[1];
ann_check_temp88 = $self84.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],2,$t);
}
var self84 = $self84;
var val85 = $val85;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step82) {
case 0: var ann_check_temp88 = (false);
$step82 = 1;
$al87 = L[20];
R._checkAnn(L[20],$type$Boolean3,ann_check_temp88);
break;
case 1: $step82 = 2;
$ans86 = ann_check_temp88;
break;
case 2: ++R.GAS;
return $ans86;
default: throw "No case numbered " + $step82 + " in $temp_full83";
}
}
} catch($e89) {
if(R.isCont($e89) && ($step82 !== 2)) {
$e89.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al87,$temp_full83,$step82,[self84,val85],[ann_check_temp88]);
}
if(R.isPyretException($e89)) {
$e89.pyretStack.push($al87);
}
throw $e89;
}
};
var anf_singleton_variant_member547 = R.makeMethod1($temp_full83);
var $temp_full91 = function($self92,$val93) {
var $step90 = 0;
var $ans94 = D;
var $al95 = L[27];
try {
if(R.isActivationRecord($self92)) {
$step90 = $self92.step;
$al95 = $self92.from;
$ans94 = $self92.ans;
self92 = $self92.args[0];
val93 = $self92.args[1];
ann_check_temp98 = $self92.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[27],2,$t);
}
var self92 = $self92;
var val93 = $val93;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step90) {
case 0: $step90 = 1;
$al95 = L[26];
if(!(R.isFunction(mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al95,mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var);
}
$ans94 = mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var.app(val93,leaf97.$var === D?U(L[23],"leaf"):leaf97.$var,leaf97.$var === D?U(L[24],"leaf"):leaf97.$var);
break;
case 1: var ann_check_temp98 = $ans94;
$step90 = 2;
$al95 = L[25];
R._checkAnn(L[25],AVLTree99,ann_check_temp98);
break;
case 2: $step90 = 3;
$ans94 = ann_check_temp98;
break;
case 3: ++R.GAS;
return $ans94;
default: throw "No case numbered " + $step90 + " in $temp_full91";
}
}
} catch($e100) {
if(R.isCont($e100) && ($step90 !== 3)) {
$e100.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al95,$temp_full91,$step90,[self92,val93],[ann_check_temp98]);
}
if(R.isPyretException($e100)) {
$e100.pyretStack.push($al95);
}
throw $e100;
}
};
var anf_singleton_variant_member548 = R.makeMethod1($temp_full91);
var $temp_full102 = function($self103,$val104) {
var $step101 = 0;
var $ans105 = D;
var $al106 = L[30];
try {
if(R.isActivationRecord($self103)) {
$step101 = $self103.step;
$al106 = $self103.from;
$ans105 = $self103.ans;
self103 = $self103.args[0];
val104 = $self103.args[1];
ann_check_temp107 = $self103.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],2,$t);
}
var self103 = $self103;
var val104 = $val104;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step101) {
case 0: var ann_check_temp107 = leaf97.$var === D?U(L[28],"leaf"):leaf97.$var;
$step101 = 1;
$al106 = L[29];
R._checkAnn(L[29],AVLTree99,ann_check_temp107);
break;
case 1: $step101 = 2;
$ans105 = ann_check_temp107;
break;
case 2: ++R.GAS;
return $ans105;
default: throw "No case numbered " + $step101 + " in $temp_full102";
}
}
} catch($e108) {
if(R.isCont($e108) && ($step101 !== 2)) {
$e108.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al106,$temp_full102,$step101,[self103,val104],[ann_check_temp107]);
}
if(R.isPyretException($e108)) {
$e108.pyretStack.push($al106);
}
throw $e108;
}
};
var anf_singleton_variant_member549 = R.makeMethod1($temp_full102);
var $temp_full110 = function($self111) {
var $step109 = 0;
var $ans112 = D;
var $al113 = L[32];
try {
if(R.isActivationRecord($self111)) {
$step109 = $self111.step;
$al113 = $self111.from;
$ans112 = $self111.ans;
self111 = $self111.args[0];
ann_check_temp115 = $self111.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
var self111 = $self111;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step109) {
case 0: var ann_check_temp115 = empty114;
$step109 = 1;
$al113 = L[31];
R._checkAnn(L[31],R.getDotAnn(L[31],"lists",lists31,"List"),ann_check_temp115);
break;
case 1: $step109 = 2;
$ans112 = ann_check_temp115;
break;
case 2: ++R.GAS;
return $ans112;
default: throw "No case numbered " + $step109 + " in $temp_full110";
}
}
} catch($e116) {
if(R.isCont($e116) && ($step109 !== 2)) {
$e116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al113,$temp_full110,$step109,[self111],[ann_check_temp115]);
}
if(R.isPyretException($e116)) {
$e116.pyretStack.push($al113);
}
throw $e116;
}
};
var anf_singleton_variant_member550 = R.makeMethod0($temp_full110);
var $temp_full118 = function($self119) {
var $step117 = 0;
var $ans120 = D;
var $al121 = L[34];
try {
if(R.isActivationRecord($self119)) {
$step117 = $self119.step;
$al121 = $self119.from;
$ans120 = $self119.ans;
self119 = $self119.args[0];
ann_check_temp122 = $self119.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[34],1,$t);
}
var self119 = $self119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step117) {
case 0: var ann_check_temp122 = empty114;
$step117 = 1;
$al121 = L[33];
R._checkAnn(L[33],R.getDotAnn(L[33],"lists",lists31,"List"),ann_check_temp122);
break;
case 1: $step117 = 2;
$ans120 = ann_check_temp122;
break;
case 2: ++R.GAS;
return $ans120;
default: throw "No case numbered " + $step117 + " in $temp_full118";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step117 !== 2)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al121,$temp_full118,$step117,[self119],[ann_check_temp122]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al121);
}
throw $e123;
}
};
var anf_singleton_variant_member551 = R.makeMethod0($temp_full118);
var $temp_full125 = function($self126) {
var $step124 = 0;
var $ans127 = D;
var $al128 = L[36];
try {
if(R.isActivationRecord($self126)) {
$step124 = $self126.step;
$al128 = $self126.from;
$ans127 = $self126.ans;
self126 = $self126.args[0];
ann_check_temp129 = $self126.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],1,$t);
}
var self126 = $self126;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step124) {
case 0: var ann_check_temp129 = empty114;
$step124 = 1;
$al128 = L[35];
R._checkAnn(L[35],R.getDotAnn(L[35],"lists",lists31,"List"),ann_check_temp129);
break;
case 1: $step124 = 2;
$ans127 = ann_check_temp129;
break;
case 2: ++R.GAS;
return $ans127;
default: throw "No case numbered " + $step124 + " in $temp_full125";
}
}
} catch($e130) {
if(R.isCont($e130) && ($step124 !== 2)) {
$e130.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al128,$temp_full125,$step124,[self126],[ann_check_temp129]);
}
if(R.isPyretException($e130)) {
$e130.pyretStack.push($al128);
}
throw $e130;
}
};
var anf_singleton_variant_member552 = R.makeMethod0($temp_full125);
var $temp_full132 = function($self133) {
var $step131 = 0;
var $ans134 = D;
var $al135 = L[38];
try {
if(R.isActivationRecord($self133)) {
$step131 = $self133.step;
$al135 = $self133.from;
$ans134 = $self133.ans;
self133 = $self133.args[0];
ann_check_temp136 = $self133.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var self133 = $self133;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step131) {
case 0: var ann_check_temp136 = empty114;
$step131 = 1;
$al135 = L[37];
R._checkAnn(L[37],R.getDotAnn(L[37],"lists",lists31,"List"),ann_check_temp136);
break;
case 1: $step131 = 2;
$ans134 = ann_check_temp136;
break;
case 2: ++R.GAS;
return $ans134;
default: throw "No case numbered " + $step131 + " in $temp_full132";
}
}
} catch($e137) {
if(R.isCont($e137) && ($step131 !== 2)) {
$e137.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al135,$temp_full132,$step131,[self133],[ann_check_temp136]);
}
if(R.isPyretException($e137)) {
$e137.pyretStack.push($al135);
}
throw $e137;
}
};
var anf_singleton_variant_member553 = R.makeMethod0($temp_full132);
var $temp_full139 = function($self140) {
var $step138 = 0;
var $ans141 = D;
var $al142 = L[40];
try {
if(R.isActivationRecord($self140)) {
$step138 = $self140.step;
$al142 = $self140.from;
$ans141 = $self140.ans;
self140 = $self140.args[0];
ann_check_temp143 = $self140.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],1,$t);
}
var self140 = $self140;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step138) {
case 0: var ann_check_temp143 = empty114;
$step138 = 1;
$al142 = L[39];
R._checkAnn(L[39],R.getDotAnn(L[39],"lists",lists31,"List"),ann_check_temp143);
break;
case 1: $step138 = 2;
$ans141 = ann_check_temp143;
break;
case 2: ++R.GAS;
return $ans141;
default: throw "No case numbered " + $step138 + " in $temp_full139";
}
}
} catch($e144) {
if(R.isCont($e144) && ($step138 !== 2)) {
$e144.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al142,$temp_full139,$step138,[self140],[ann_check_temp143]);
}
if(R.isPyretException($e144)) {
$e144.pyretStack.push($al142);
}
throw $e144;
}
};
var anf_singleton_variant_member554 = R.makeMethod0($temp_full139);
var $temp_full146 = function($self147) {
var $step145 = 0;
var $ans148 = D;
var $al149 = L[42];
try {
if(R.isActivationRecord($self147)) {
$step145 = $self147.step;
$al149 = $self147.from;
$ans148 = $self147.ans;
self147 = $self147.args[0];
ann_check_temp150 = $self147.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],1,$t);
}
var self147 = $self147;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step145) {
case 0: var ann_check_temp150 = empty114;
$step145 = 1;
$al149 = L[41];
R._checkAnn(L[41],R.getDotAnn(L[41],"lists",lists31,"List"),ann_check_temp150);
break;
case 1: $step145 = 2;
$ans148 = ann_check_temp150;
break;
case 2: ++R.GAS;
return $ans148;
default: throw "No case numbered " + $step145 + " in $temp_full146";
}
}
} catch($e151) {
if(R.isCont($e151) && ($step145 !== 2)) {
$e151.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al149,$temp_full146,$step145,[self147],[ann_check_temp150]);
}
if(R.isPyretException($e151)) {
$e151.pyretStack.push($al149);
}
throw $e151;
}
};
var anf_singleton_variant_member555 = R.makeMethod0($temp_full146);
var $temp_full153 = function($self154,$f155,$base156) {
var $step152 = 0;
var $ans157 = D;
var $al158 = L[43];
try {
if(R.isActivationRecord($self154)) {
$step152 = $self154.step;
$al158 = $self154.from;
$ans157 = $self154.ans;
self154 = $self154.args[0];
f155 = $self154.args[1];
base156 = $self154.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[43],3,$t);
}
var self154 = $self154;
var f155 = $f155;
var base156 = $base156;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step152) {
case 0: $step152 = 1;
$ans157 = base156;
break;
case 1: ++R.GAS;
return $ans157;
default: throw "No case numbered " + $step152 + " in $temp_full153";
}
}
} catch($e159) {
if(R.isCont($e159) && ($step152 !== 1)) {
$e159.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al158,$temp_full153,$step152,[self154,f155,base156],[]);
}
if(R.isPyretException($e159)) {
$e159.pyretStack.push($al158);
}
throw $e159;
}
};
var anf_singleton_variant_member556 = R.makeMethod2($temp_full153);
var $temp_full161 = function($self162,$f163,$base164) {
var $step160 = 0;
var $ans165 = D;
var $al166 = L[44];
try {
if(R.isActivationRecord($self162)) {
$step160 = $self162.step;
$al166 = $self162.from;
$ans165 = $self162.ans;
self162 = $self162.args[0];
f163 = $self162.args[1];
base164 = $self162.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],3,$t);
}
var self162 = $self162;
var f163 = $f163;
var base164 = $base164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step160) {
case 0: $step160 = 1;
$ans165 = base164;
break;
case 1: ++R.GAS;
return $ans165;
default: throw "No case numbered " + $step160 + " in $temp_full161";
}
}
} catch($e167) {
if(R.isCont($e167) && ($step160 !== 1)) {
$e167.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al166,$temp_full161,$step160,[self162,f163,base164],[]);
}
if(R.isPyretException($e167)) {
$e167.pyretStack.push($al166);
}
throw $e167;
}
};
var anf_singleton_variant_member557 = R.makeMethod2($temp_full161);
var $temp_full169 = function($self170,$f171,$base172) {
var $step168 = 0;
var $ans173 = D;
var $al174 = L[45];
try {
if(R.isActivationRecord($self170)) {
$step168 = $self170.step;
$al174 = $self170.from;
$ans173 = $self170.ans;
self170 = $self170.args[0];
f171 = $self170.args[1];
base172 = $self170.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],3,$t);
}
var self170 = $self170;
var f171 = $f171;
var base172 = $base172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step168) {
case 0: $step168 = 1;
$ans173 = base172;
break;
case 1: ++R.GAS;
return $ans173;
default: throw "No case numbered " + $step168 + " in $temp_full169";
}
}
} catch($e175) {
if(R.isCont($e175) && ($step168 !== 1)) {
$e175.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al174,$temp_full169,$step168,[self170,f171,base172],[]);
}
if(R.isPyretException($e175)) {
$e175.pyretStack.push($al174);
}
throw $e175;
}
};
var anf_singleton_variant_member558 = R.makeMethod2($temp_full169);
var $temp_full177 = function($self178,$f179,$base180) {
var $step176 = 0;
var $ans181 = D;
var $al182 = L[46];
try {
if(R.isActivationRecord($self178)) {
$step176 = $self178.step;
$al182 = $self178.from;
$ans181 = $self178.ans;
self178 = $self178.args[0];
f179 = $self178.args[1];
base180 = $self178.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[46],3,$t);
}
var self178 = $self178;
var f179 = $f179;
var base180 = $base180;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step176) {
case 0: $step176 = 1;
$ans181 = base180;
break;
case 1: ++R.GAS;
return $ans181;
default: throw "No case numbered " + $step176 + " in $temp_full177";
}
}
} catch($e183) {
if(R.isCont($e183) && ($step176 !== 1)) {
$e183.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al182,$temp_full177,$step176,[self178,f179,base180],[]);
}
if(R.isPyretException($e183)) {
$e183.pyretStack.push($al182);
}
throw $e183;
}
};
var anf_singleton_variant_member559 = R.makeMethod2($temp_full177);
var $temp_full185 = function($self186,$f187,$base188) {
var $step184 = 0;
var $ans189 = D;
var $al190 = L[47];
try {
if(R.isActivationRecord($self186)) {
$step184 = $self186.step;
$al190 = $self186.from;
$ans189 = $self186.ans;
self186 = $self186.args[0];
f187 = $self186.args[1];
base188 = $self186.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[47],3,$t);
}
var self186 = $self186;
var f187 = $f187;
var base188 = $base188;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step184) {
case 0: $step184 = 1;
$ans189 = base188;
break;
case 1: ++R.GAS;
return $ans189;
default: throw "No case numbered " + $step184 + " in $temp_full185";
}
}
} catch($e191) {
if(R.isCont($e191) && ($step184 !== 1)) {
$e191.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al190,$temp_full185,$step184,[self186,f187,base188],[]);
}
if(R.isPyretException($e191)) {
$e191.pyretStack.push($al190);
}
throw $e191;
}
};
var anf_singleton_variant_member560 = R.makeMethod2($temp_full185);
var $temp_full193 = function($self194,$f195,$base196) {
var $step192 = 0;
var $ans197 = D;
var $al198 = L[48];
try {
if(R.isActivationRecord($self194)) {
$step192 = $self194.step;
$al198 = $self194.from;
$ans197 = $self194.ans;
self194 = $self194.args[0];
f195 = $self194.args[1];
base196 = $self194.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[48],3,$t);
}
var self194 = $self194;
var f195 = $f195;
var base196 = $base196;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step192) {
case 0: $step192 = 1;
$ans197 = base196;
break;
case 1: ++R.GAS;
return $ans197;
default: throw "No case numbered " + $step192 + " in $temp_full193";
}
}
} catch($e199) {
if(R.isCont($e199) && ($step192 !== 1)) {
$e199.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al198,$temp_full193,$step192,[self194,f195,base196],[]);
}
if(R.isPyretException($e199)) {
$e199.pyretStack.push($al198);
}
throw $e199;
}
};
var anf_singleton_variant_member561 = R.makeMethod2($temp_full193);
var $temp_full201 = function($self202) {
var $step200 = 0;
var $ans203 = D;
var $al204 = L[49];
try {
if(R.isActivationRecord($self202)) {
$step200 = $self202.step;
$al204 = $self202.from;
$ans203 = $self202.ans;
self202 = $self202.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[49],1,$t);
}
var self202 = $self202;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step200) {
case 0: $step200 = 1;
$ans203 = (0);
break;
case 1: ++R.GAS;
return $ans203;
default: throw "No case numbered " + $step200 + " in $temp_full201";
}
}
} catch($e205) {
if(R.isCont($e205) && ($step200 !== 1)) {
$e205.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al204,$temp_full201,$step200,[self202],[]);
}
if(R.isPyretException($e205)) {
$e205.pyretStack.push($al204);
}
throw $e205;
}
};
var anf_singleton_variant_member562 = R.makeMethod0($temp_full201);
var $temp_full207 = function($self208,$f209) {
var $step206 = 0;
var $ans210 = D;
var $al211 = L[50];
try {
if(R.isActivationRecord($self208)) {
$step206 = $self208.step;
$al211 = $self208.from;
$ans210 = $self208.ans;
self208 = $self208.args[0];
f209 = $self208.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var self208 = $self208;
var f209 = $f209;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step206) {
case 0: $step206 = 1;
$ans210 = (true);
break;
case 1: ++R.GAS;
return $ans210;
default: throw "No case numbered " + $step206 + " in $temp_full207";
}
}
} catch($e212) {
if(R.isCont($e212) && ($step206 !== 1)) {
$e212.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al211,$temp_full207,$step206,[self208,f209],[]);
}
if(R.isPyretException($e212)) {
$e212.pyretStack.push($al211);
}
throw $e212;
}
};
var anf_singleton_variant_member563 = R.makeMethod1($temp_full207);
var $temp_full214 = function($self215,$f216) {
var $step213 = 0;
var $ans217 = D;
var $al218 = L[51];
try {
if(R.isActivationRecord($self215)) {
$step213 = $self215.step;
$al218 = $self215.from;
$ans217 = $self215.ans;
self215 = $self215.args[0];
f216 = $self215.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],2,$t);
}
var self215 = $self215;
var f216 = $f216;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step213) {
case 0: $step213 = 1;
$ans217 = (false);
break;
case 1: ++R.GAS;
return $ans217;
default: throw "No case numbered " + $step213 + " in $temp_full214";
}
}
} catch($e219) {
if(R.isCont($e219) && ($step213 !== 1)) {
$e219.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al218,$temp_full214,$step213,[self215,f216],[]);
}
if(R.isPyretException($e219)) {
$e219.pyretStack.push($al218);
}
throw $e219;
}
};
var anf_singleton_variant_member564 = R.makeMethod1($temp_full214);
var $temp_full221 = function($self222) {
var $step220 = 0;
var $ans223 = D;
var $al224 = L[54];
try {
if(R.isActivationRecord($self222)) {
$step220 = $self222.step;
$al224 = $self222.from;
$ans223 = $self222.ans;
self222 = $self222.args[0];
ann_check_temp225 = $self222.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],1,$t);
}
var self222 = $self222;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step220) {
case 0: var ann_check_temp225 = G(self222,"h",L[52]);
$step220 = 1;
$al224 = L[53];
R._checkAnn(L[53],$type$Number2,ann_check_temp225);
break;
case 1: $step220 = 2;
$ans223 = ann_check_temp225;
break;
case 2: ++R.GAS;
return $ans223;
default: throw "No case numbered " + $step220 + " in $temp_full221";
}
}
} catch($e226) {
if(R.isCont($e226) && ($step220 !== 2)) {
$e226.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al224,$temp_full221,$step220,[self222],[ann_check_temp225]);
}
if(R.isPyretException($e226)) {
$e226.pyretStack.push($al224);
}
throw $e226;
}
};
var anf_variant_member572 = R.makeMethod0($temp_full221);
var $temp_full228 = function($self229,$val230) {
var $step227 = 0;
var $ans231 = D;
var $al232 = L[65];
try {
if(R.isActivationRecord($self229)) {
$step227 = $self229.step;
$al232 = $self229.from;
$ans231 = $self229.ans;
self229 = $self229.args[0];
val230 = $self229.args[1];
ann_check_temp242 = $self229.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[65],2,$t);
}
var self229 = $self229;
var val230 = $val230;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step227) {
case 0: var anf_arg233 = G(self229,"value",L[55]);
$step227 = 1;
$al232 = L[56];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al232,equal$always4);
}
$ans231 = equal$always4.app(val230,anf_arg233);
break;
case 1: var anf_arg234 = $ans231;
$al232 = L[56];
var anf_if243 = R.checkWrapBoolean(anf_arg234);
if(R.isPyretTrue(anf_if243)) {
$step227 = 2;
} else {
$step227 = 3;
}
break;
case 2: $step227 = 7;
$ans231 = (true);
break;
case 3: var anf_arg235 = G(self229,"value",L[57]);
$step227 = 4;
$al232 = L[63];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al232,_lessthan5);
}
$ans231 = _lessthan5.app(val230,anf_arg235);
break;
case 4: var anf_arg236 = $ans231;
$al232 = L[58];
var anf_if241 = R.checkWrapBoolean(anf_arg236);
if(R.isPyretTrue(anf_if241)) {
$step227 = 5;
} else {
$step227 = 6;
}
break;
case 5: var anf_method_obj237 = G(self229,"left",L[59]);
$step227 = 7;
$al232 = L[60];
$field238 = R.getColonFieldLoc(anf_method_obj237,"contains",L[60]);
if(R.isMethod($field238)) {
$ans231 = $field238.full_meth(anf_method_obj237,val230);
} else {
if(!(R.isFunction($field238))) {
R.ffi.throwNonFunApp(L[60],$field238);
}
$ans231 = $field238.app(val230);
}
break;
case 6: var anf_method_obj239 = G(self229,"right",L[61]);
$step227 = 7;
$al232 = L[62];
$field240 = R.getColonFieldLoc(anf_method_obj239,"contains",L[62]);
if(R.isMethod($field240)) {
$ans231 = $field240.full_meth(anf_method_obj239,val230);
} else {
if(!(R.isFunction($field240))) {
R.ffi.throwNonFunApp(L[62],$field240);
}
$ans231 = $field240.app(val230);
}
break;
case 7: var ann_check_temp242 = $ans231;
$step227 = 8;
$al232 = L[64];
R._checkAnn(L[64],$type$Boolean3,ann_check_temp242);
break;
case 8: $step227 = 9;
$ans231 = ann_check_temp242;
break;
case 9: ++R.GAS;
return $ans231;
default: throw "No case numbered " + $step227 + " in $temp_full228";
}
}
} catch($e244) {
if(R.isCont($e244) && ($step227 !== 9)) {
$e244.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al232,$temp_full228,$step227,[self229,val230],[ann_check_temp242]);
}
if(R.isPyretException($e244)) {
$e244.pyretStack.push($al232);
}
throw $e244;
}
};
var anf_variant_member573 = R.makeMethod1($temp_full228);
var $temp_full246 = function($self247,$val248) {
var $step245 = 0;
var $ans249 = D;
var $al250 = L[92];
try {
if(R.isActivationRecord($self247)) {
$step245 = $self247.step;
$al250 = $self247.from;
$ans249 = $self247.ans;
self247 = $self247.args[0];
val248 = $self247.args[1];
ann_check_temp271 = $self247.vars[0];
anf_arg267 = $self247.vars[1];
anf_arg266 = $self247.vars[2];
anf_arg259 = $self247.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[92],2,$t);
}
var self247 = $self247;
var val248 = $val248;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step245) {
case 0: var anf_arg251 = G(self247,"value",L[66]);
$step245 = 1;
$al250 = L[67];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al250,equal$always4);
}
$ans249 = equal$always4.app(val248,anf_arg251);
break;
case 1: var anf_arg252 = $ans249;
$al250 = L[67];
var anf_if272 = R.checkWrapBoolean(anf_arg252);
if(R.isPyretTrue(anf_if272)) {
$step245 = 2;
} else {
$step245 = 3;
}
break;
case 2: var anf_arg253 = G(self247,"left",L[68]);
var anf_arg254 = G(self247,"right",L[69]);
$step245 = 11;
$al250 = L[71];
if(!(R.isFunction(mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var.app(val248,anf_arg253,anf_arg254);
break;
case 3: var anf_arg255 = G(self247,"value",L[72]);
$step245 = 4;
$al250 = L[90];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al250,_lessthan5);
}
$ans249 = _lessthan5.app(val248,anf_arg255);
break;
case 4: var anf_arg256 = $ans249;
$al250 = L[73];
var anf_if270 = R.checkWrapBoolean(anf_arg256);
if(R.isPyretTrue(anf_if270)) {
$step245 = 5;
} else {
$step245 = 8;
}
break;
case 5: var anf_arg259 = G(self247,"value",L[74]);
var anf_method_obj257 = G(self247,"left",L[75]);
$step245 = 6;
$al250 = L[76];
$field258 = R.getColonFieldLoc(anf_method_obj257,"insert",L[76]);
if(R.isMethod($field258)) {
$ans249 = $field258.full_meth(anf_method_obj257,val248);
} else {
if(!(R.isFunction($field258))) {
R.ffi.throwNonFunApp(L[76],$field258);
}
$ans249 = $field258.app(val248);
}
break;
case 6: var anf_arg260 = $ans249;
var anf_arg261 = G(self247,"right",L[77]);
$step245 = 7;
$al250 = L[81];
if(!(R.isFunction(mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var.app(anf_arg259,anf_arg260,anf_arg261);
break;
case 7: var anf_arg263 = $ans249;
$step245 = 11;
$al250 = L[80];
if(!(R.isFunction(rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al250,rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var);
}
$ans249 = rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var.app(anf_arg263);
break;
case 8: var anf_arg266 = G(self247,"value",L[82]);
var anf_arg267 = G(self247,"left",L[83]);
var anf_method_obj264 = G(self247,"right",L[84]);
$step245 = 9;
$al250 = L[85];
$field265 = R.getColonFieldLoc(anf_method_obj264,"insert",L[85]);
if(R.isMethod($field265)) {
$ans249 = $field265.full_meth(anf_method_obj264,val248);
} else {
if(!(R.isFunction($field265))) {
R.ffi.throwNonFunApp(L[85],$field265);
}
$ans249 = $field265.app(val248);
}
break;
case 9: var anf_arg268 = $ans249;
$step245 = 10;
$al250 = L[89];
if(!(R.isFunction(mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var.app(anf_arg266,anf_arg267,anf_arg268);
break;
case 10: var anf_arg269 = $ans249;
$step245 = 11;
$al250 = L[88];
if(!(R.isFunction(rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al250,rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var);
}
$ans249 = rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var.app(anf_arg269);
break;
case 11: var ann_check_temp271 = $ans249;
$step245 = 12;
$al250 = L[91];
R._checkAnn(L[91],AVLTree99,ann_check_temp271);
break;
case 12: $step245 = 13;
$ans249 = ann_check_temp271;
break;
case 13: ++R.GAS;
return $ans249;
default: throw "No case numbered " + $step245 + " in $temp_full246";
}
}
} catch($e273) {
if(R.isCont($e273) && ($step245 !== 13)) {
$e273.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al250,$temp_full246,$step245,[self247,val248],[ann_check_temp271,anf_arg267,anf_arg266,anf_arg259]);
}
if(R.isPyretException($e273)) {
$e273.pyretStack.push($al250);
}
throw $e273;
}
};
var anf_variant_member574 = R.makeMethod1($temp_full246);
var $temp_full275 = function($self276,$val277) {
var $step274 = 0;
var $ans278 = D;
var $al279 = L[117];
try {
if(R.isActivationRecord($self276)) {
$step274 = $self276.step;
$al279 = $self276.from;
$ans278 = $self276.ans;
self276 = $self276.args[0];
val277 = $self276.args[1];
ann_check_temp298 = $self276.vars[0];
anf_arg294 = $self276.vars[1];
anf_arg293 = $self276.vars[2];
anf_arg287 = $self276.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[117],2,$t);
}
var self276 = $self276;
var val277 = $val277;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step274) {
case 0: var anf_arg280 = G(self276,"value",L[93]);
$step274 = 1;
$al279 = L[94];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al279,equal$always4);
}
$ans278 = equal$always4.app(val277,anf_arg280);
break;
case 1: var anf_arg281 = $ans278;
$al279 = L[94];
var anf_if299 = R.checkWrapBoolean(anf_arg281);
if(R.isPyretTrue(anf_if299)) {
$step274 = 2;
} else {
$step274 = 3;
}
break;
case 2: $step274 = 11;
$al279 = L[96];
if(!(R.isFunction(remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var))) {
R.ffi.throwNonFunApp($al279,remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var);
}
$ans278 = remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var.app(self276);
break;
case 3: var anf_arg283 = G(self276,"value",L[97]);
$step274 = 4;
$al279 = L[115];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al279,_lessthan5);
}
$ans278 = _lessthan5.app(val277,anf_arg283);
break;
case 4: var anf_arg284 = $ans278;
$al279 = L[98];
var anf_if297 = R.checkWrapBoolean(anf_arg284);
if(R.isPyretTrue(anf_if297)) {
$step274 = 5;
} else {
$step274 = 8;
}
break;
case 5: var anf_arg287 = G(self276,"value",L[99]);
var anf_method_obj285 = G(self276,"left",L[100]);
$step274 = 6;
$al279 = L[101];
$field286 = R.getColonFieldLoc(anf_method_obj285,"remove",L[101]);
if(R.isMethod($field286)) {
$ans278 = $field286.full_meth(anf_method_obj285,val277);
} else {
if(!(R.isFunction($field286))) {
R.ffi.throwNonFunApp(L[101],$field286);
}
$ans278 = $field286.app(val277);
}
break;
case 6: var anf_arg288 = $ans278;
var anf_arg289 = G(self276,"right",L[102]);
$step274 = 7;
$al279 = L[106];
if(!(R.isFunction(mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al279,mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var);
}
$ans278 = mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var.app(anf_arg287,anf_arg288,anf_arg289);
break;
case 7: var anf_arg290 = $ans278;
$step274 = 11;
$al279 = L[105];
if(!(R.isFunction(rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al279,rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var);
}
$ans278 = rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var.app(anf_arg290);
break;
case 8: var anf_arg293 = G(self276,"value",L[107]);
var anf_arg294 = G(self276,"left",L[108]);
var anf_method_obj291 = G(self276,"right",L[109]);
$step274 = 9;
$al279 = L[110];
$field292 = R.getColonFieldLoc(anf_method_obj291,"remove",L[110]);
if(R.isMethod($field292)) {
$ans278 = $field292.full_meth(anf_method_obj291,val277);
} else {
if(!(R.isFunction($field292))) {
R.ffi.throwNonFunApp(L[110],$field292);
}
$ans278 = $field292.app(val277);
}
break;
case 9: var anf_arg295 = $ans278;
$step274 = 10;
$al279 = L[114];
if(!(R.isFunction(mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al279,mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var);
}
$ans278 = mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var.app(anf_arg293,anf_arg294,anf_arg295);
break;
case 10: var anf_arg296 = $ans278;
$step274 = 11;
$al279 = L[113];
if(!(R.isFunction(rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al279,rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var);
}
$ans278 = rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var.app(anf_arg296);
break;
case 11: var ann_check_temp298 = $ans278;
$step274 = 12;
$al279 = L[116];
R._checkAnn(L[116],AVLTree99,ann_check_temp298);
break;
case 12: $step274 = 13;
$ans278 = ann_check_temp298;
break;
case 13: ++R.GAS;
return $ans278;
default: throw "No case numbered " + $step274 + " in $temp_full275";
}
}
} catch($e300) {
if(R.isCont($e300) && ($step274 !== 13)) {
$e300.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al279,$temp_full275,$step274,[self276,val277],[ann_check_temp298,anf_arg294,anf_arg293,anf_arg287]);
}
if(R.isPyretException($e300)) {
$e300.pyretStack.push($al279);
}
throw $e300;
}
};
var anf_variant_member575 = R.makeMethod1($temp_full275);
var $temp_full302 = function($self303) {
var $step301 = 0;
var $ans304 = D;
var $al305 = L[122];
try {
if(R.isActivationRecord($self303)) {
$step301 = $self303.step;
$al305 = $self303.from;
$ans304 = $self303.ans;
self303 = $self303.args[0];
ann_check_temp317 = $self303.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[122],1,$t);
}
var self303 = $self303;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step301) {
case 0: var knil315 = {"$var":D};
var $temp_lam307 = function($l308,$x309) {
var $step306 = 0;
var $ans310 = D;
var $al311 = L[119];
try {
if(R.isActivationRecord($l308)) {
$step306 = $l308.step;
$al311 = $l308.from;
$ans310 = $l308.ans;
l308 = $l308.args[0];
x309 = $l308.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[119],2,$t);
}
var l308 = $l308;
var x309 = $x309;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step306) {
case 0: $step306 = 1;
$al311 = L[118];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al311,link312);
}
$ans310 = link312.app(x309,l308);
break;
case 1: ++R.GAS;
return $ans310;
default: throw "No case numbered " + $step306 + " in $temp_lam307";
}
}
} catch($e313) {
if(R.isCont($e313) && ($step306 !== 1)) {
$e313.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al311,$temp_lam307,$step306,[l308,x309],[]);
}
if(R.isPyretException($e313)) {
$e313.pyretStack.push($al311);
}
throw $e313;
}
};
var anf_assign314 = R.makeFunction($temp_lam307);
knil315.$var = anf_assign314;
$step301 = 1;
$al305 = L[120];
$field316 = R.getColonFieldLoc(self303,"fold-revpreorder",L[120]);
if(R.isMethod($field316)) {
$ans304 = $field316.full_meth(self303,knil315.$var,empty114);
} else {
if(!(R.isFunction($field316))) {
R.ffi.throwNonFunApp(L[120],$field316);
}
$ans304 = $field316.app(knil315.$var,empty114);
}
break;
case 1: var ann_check_temp317 = $ans304;
$step301 = 2;
$al305 = L[121];
R._checkAnn(L[121],R.getDotAnn(L[121],"lists",lists31,"List"),ann_check_temp317);
break;
case 2: $step301 = 3;
$ans304 = ann_check_temp317;
break;
case 3: ++R.GAS;
return $ans304;
default: throw "No case numbered " + $step301 + " in $temp_full302";
}
}
} catch($e318) {
if(R.isCont($e318) && ($step301 !== 3)) {
$e318.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al305,$temp_full302,$step301,[self303],[ann_check_temp317]);
}
if(R.isPyretException($e318)) {
$e318.pyretStack.push($al305);
}
throw $e318;
}
};
var anf_variant_member576 = R.makeMethod0($temp_full302);
var $temp_full320 = function($self321) {
var $step319 = 0;
var $ans322 = D;
var $al323 = L[127];
try {
if(R.isActivationRecord($self321)) {
$step319 = $self321.step;
$al323 = $self321.from;
$ans322 = $self321.ans;
self321 = $self321.args[0];
ann_check_temp334 = $self321.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[127],1,$t);
}
var self321 = $self321;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step319) {
case 0: var knil332 = {"$var":D};
var $temp_lam325 = function($l326,$x327) {
var $step324 = 0;
var $ans328 = D;
var $al329 = L[124];
try {
if(R.isActivationRecord($l326)) {
$step324 = $l326.step;
$al329 = $l326.from;
$ans328 = $l326.ans;
l326 = $l326.args[0];
x327 = $l326.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[124],2,$t);
}
var l326 = $l326;
var x327 = $x327;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step324) {
case 0: $step324 = 1;
$al329 = L[123];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al329,link312);
}
$ans328 = link312.app(x327,l326);
break;
case 1: ++R.GAS;
return $ans328;
default: throw "No case numbered " + $step324 + " in $temp_lam325";
}
}
} catch($e330) {
if(R.isCont($e330) && ($step324 !== 1)) {
$e330.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al329,$temp_lam325,$step324,[l326,x327],[]);
}
if(R.isPyretException($e330)) {
$e330.pyretStack.push($al329);
}
throw $e330;
}
};
var anf_assign331 = R.makeFunction($temp_lam325);
knil332.$var = anf_assign331;
$step319 = 1;
$al323 = L[125];
$field333 = R.getColonFieldLoc(self321,"fold-revinorder",L[125]);
if(R.isMethod($field333)) {
$ans322 = $field333.full_meth(self321,knil332.$var,empty114);
} else {
if(!(R.isFunction($field333))) {
R.ffi.throwNonFunApp(L[125],$field333);
}
$ans322 = $field333.app(knil332.$var,empty114);
}
break;
case 1: var ann_check_temp334 = $ans322;
$step319 = 2;
$al323 = L[126];
R._checkAnn(L[126],R.getDotAnn(L[126],"lists",lists31,"List"),ann_check_temp334);
break;
case 2: $step319 = 3;
$ans322 = ann_check_temp334;
break;
case 3: ++R.GAS;
return $ans322;
default: throw "No case numbered " + $step319 + " in $temp_full320";
}
}
} catch($e335) {
if(R.isCont($e335) && ($step319 !== 3)) {
$e335.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al323,$temp_full320,$step319,[self321],[ann_check_temp334]);
}
if(R.isPyretException($e335)) {
$e335.pyretStack.push($al323);
}
throw $e335;
}
};
var anf_variant_member577 = R.makeMethod0($temp_full320);
var $temp_full337 = function($self338) {
var $step336 = 0;
var $ans339 = D;
var $al340 = L[132];
try {
if(R.isActivationRecord($self338)) {
$step336 = $self338.step;
$al340 = $self338.from;
$ans339 = $self338.ans;
self338 = $self338.args[0];
ann_check_temp351 = $self338.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[132],1,$t);
}
var self338 = $self338;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step336) {
case 0: var knil349 = {"$var":D};
var $temp_lam342 = function($l343,$x344) {
var $step341 = 0;
var $ans345 = D;
var $al346 = L[129];
try {
if(R.isActivationRecord($l343)) {
$step341 = $l343.step;
$al346 = $l343.from;
$ans345 = $l343.ans;
l343 = $l343.args[0];
x344 = $l343.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[129],2,$t);
}
var l343 = $l343;
var x344 = $x344;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step341) {
case 0: $step341 = 1;
$al346 = L[128];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al346,link312);
}
$ans345 = link312.app(x344,l343);
break;
case 1: ++R.GAS;
return $ans345;
default: throw "No case numbered " + $step341 + " in $temp_lam342";
}
}
} catch($e347) {
if(R.isCont($e347) && ($step341 !== 1)) {
$e347.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al346,$temp_lam342,$step341,[l343,x344],[]);
}
if(R.isPyretException($e347)) {
$e347.pyretStack.push($al346);
}
throw $e347;
}
};
var anf_assign348 = R.makeFunction($temp_lam342);
knil349.$var = anf_assign348;
$step336 = 1;
$al340 = L[130];
$field350 = R.getColonFieldLoc(self338,"fold-revpostorder",L[130]);
if(R.isMethod($field350)) {
$ans339 = $field350.full_meth(self338,knil349.$var,empty114);
} else {
if(!(R.isFunction($field350))) {
R.ffi.throwNonFunApp(L[130],$field350);
}
$ans339 = $field350.app(knil349.$var,empty114);
}
break;
case 1: var ann_check_temp351 = $ans339;
$step336 = 2;
$al340 = L[131];
R._checkAnn(L[131],R.getDotAnn(L[131],"lists",lists31,"List"),ann_check_temp351);
break;
case 2: $step336 = 3;
$ans339 = ann_check_temp351;
break;
case 3: ++R.GAS;
return $ans339;
default: throw "No case numbered " + $step336 + " in $temp_full337";
}
}
} catch($e352) {
if(R.isCont($e352) && ($step336 !== 3)) {
$e352.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al340,$temp_full337,$step336,[self338],[ann_check_temp351]);
}
if(R.isPyretException($e352)) {
$e352.pyretStack.push($al340);
}
throw $e352;
}
};
var anf_variant_member578 = R.makeMethod0($temp_full337);
var $temp_full354 = function($self355) {
var $step353 = 0;
var $ans356 = D;
var $al357 = L[137];
try {
if(R.isActivationRecord($self355)) {
$step353 = $self355.step;
$al357 = $self355.from;
$ans356 = $self355.ans;
self355 = $self355.args[0];
ann_check_temp368 = $self355.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[137],1,$t);
}
var self355 = $self355;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step353) {
case 0: var knil366 = {"$var":D};
var $temp_lam359 = function($l360,$x361) {
var $step358 = 0;
var $ans362 = D;
var $al363 = L[134];
try {
if(R.isActivationRecord($l360)) {
$step358 = $l360.step;
$al363 = $l360.from;
$ans362 = $l360.ans;
l360 = $l360.args[0];
x361 = $l360.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[134],2,$t);
}
var l360 = $l360;
var x361 = $x361;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step358) {
case 0: $step358 = 1;
$al363 = L[133];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al363,link312);
}
$ans362 = link312.app(x361,l360);
break;
case 1: ++R.GAS;
return $ans362;
default: throw "No case numbered " + $step358 + " in $temp_lam359";
}
}
} catch($e364) {
if(R.isCont($e364) && ($step358 !== 1)) {
$e364.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al363,$temp_lam359,$step358,[l360,x361],[]);
}
if(R.isPyretException($e364)) {
$e364.pyretStack.push($al363);
}
throw $e364;
}
};
var anf_assign365 = R.makeFunction($temp_lam359);
knil366.$var = anf_assign365;
$step353 = 1;
$al357 = L[135];
$field367 = R.getColonFieldLoc(self355,"fold-preorder",L[135]);
if(R.isMethod($field367)) {
$ans356 = $field367.full_meth(self355,knil366.$var,empty114);
} else {
if(!(R.isFunction($field367))) {
R.ffi.throwNonFunApp(L[135],$field367);
}
$ans356 = $field367.app(knil366.$var,empty114);
}
break;
case 1: var ann_check_temp368 = $ans356;
$step353 = 2;
$al357 = L[136];
R._checkAnn(L[136],R.getDotAnn(L[136],"lists",lists31,"List"),ann_check_temp368);
break;
case 2: $step353 = 3;
$ans356 = ann_check_temp368;
break;
case 3: ++R.GAS;
return $ans356;
default: throw "No case numbered " + $step353 + " in $temp_full354";
}
}
} catch($e369) {
if(R.isCont($e369) && ($step353 !== 3)) {
$e369.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al357,$temp_full354,$step353,[self355],[ann_check_temp368]);
}
if(R.isPyretException($e369)) {
$e369.pyretStack.push($al357);
}
throw $e369;
}
};
var anf_variant_member579 = R.makeMethod0($temp_full354);
var $temp_full371 = function($self372) {
var $step370 = 0;
var $ans373 = D;
var $al374 = L[142];
try {
if(R.isActivationRecord($self372)) {
$step370 = $self372.step;
$al374 = $self372.from;
$ans373 = $self372.ans;
self372 = $self372.args[0];
ann_check_temp385 = $self372.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[142],1,$t);
}
var self372 = $self372;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step370) {
case 0: var knil383 = {"$var":D};
var $temp_lam376 = function($l377,$x378) {
var $step375 = 0;
var $ans379 = D;
var $al380 = L[139];
try {
if(R.isActivationRecord($l377)) {
$step375 = $l377.step;
$al380 = $l377.from;
$ans379 = $l377.ans;
l377 = $l377.args[0];
x378 = $l377.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[139],2,$t);
}
var l377 = $l377;
var x378 = $x378;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step375) {
case 0: $step375 = 1;
$al380 = L[138];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al380,link312);
}
$ans379 = link312.app(x378,l377);
break;
case 1: ++R.GAS;
return $ans379;
default: throw "No case numbered " + $step375 + " in $temp_lam376";
}
}
} catch($e381) {
if(R.isCont($e381) && ($step375 !== 1)) {
$e381.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al380,$temp_lam376,$step375,[l377,x378],[]);
}
if(R.isPyretException($e381)) {
$e381.pyretStack.push($al380);
}
throw $e381;
}
};
var anf_assign382 = R.makeFunction($temp_lam376);
knil383.$var = anf_assign382;
$step370 = 1;
$al374 = L[140];
$field384 = R.getColonFieldLoc(self372,"fold-inorder",L[140]);
if(R.isMethod($field384)) {
$ans373 = $field384.full_meth(self372,knil383.$var,empty114);
} else {
if(!(R.isFunction($field384))) {
R.ffi.throwNonFunApp(L[140],$field384);
}
$ans373 = $field384.app(knil383.$var,empty114);
}
break;
case 1: var ann_check_temp385 = $ans373;
$step370 = 2;
$al374 = L[141];
R._checkAnn(L[141],R.getDotAnn(L[141],"lists",lists31,"List"),ann_check_temp385);
break;
case 2: $step370 = 3;
$ans373 = ann_check_temp385;
break;
case 3: ++R.GAS;
return $ans373;
default: throw "No case numbered " + $step370 + " in $temp_full371";
}
}
} catch($e386) {
if(R.isCont($e386) && ($step370 !== 3)) {
$e386.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al374,$temp_full371,$step370,[self372],[ann_check_temp385]);
}
if(R.isPyretException($e386)) {
$e386.pyretStack.push($al374);
}
throw $e386;
}
};
var anf_variant_member580 = R.makeMethod0($temp_full371);
var $temp_full388 = function($self389) {
var $step387 = 0;
var $ans390 = D;
var $al391 = L[147];
try {
if(R.isActivationRecord($self389)) {
$step387 = $self389.step;
$al391 = $self389.from;
$ans390 = $self389.ans;
self389 = $self389.args[0];
ann_check_temp402 = $self389.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[147],1,$t);
}
var self389 = $self389;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step387) {
case 0: var knil400 = {"$var":D};
var $temp_lam393 = function($l394,$x395) {
var $step392 = 0;
var $ans396 = D;
var $al397 = L[144];
try {
if(R.isActivationRecord($l394)) {
$step392 = $l394.step;
$al397 = $l394.from;
$ans396 = $l394.ans;
l394 = $l394.args[0];
x395 = $l394.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[144],2,$t);
}
var l394 = $l394;
var x395 = $x395;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step392) {
case 0: $step392 = 1;
$al397 = L[143];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al397,link312);
}
$ans396 = link312.app(x395,l394);
break;
case 1: ++R.GAS;
return $ans396;
default: throw "No case numbered " + $step392 + " in $temp_lam393";
}
}
} catch($e398) {
if(R.isCont($e398) && ($step392 !== 1)) {
$e398.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al397,$temp_lam393,$step392,[l394,x395],[]);
}
if(R.isPyretException($e398)) {
$e398.pyretStack.push($al397);
}
throw $e398;
}
};
var anf_assign399 = R.makeFunction($temp_lam393);
knil400.$var = anf_assign399;
$step387 = 1;
$al391 = L[145];
$field401 = R.getColonFieldLoc(self389,"fold-postorder",L[145]);
if(R.isMethod($field401)) {
$ans390 = $field401.full_meth(self389,knil400.$var,empty114);
} else {
if(!(R.isFunction($field401))) {
R.ffi.throwNonFunApp(L[145],$field401);
}
$ans390 = $field401.app(knil400.$var,empty114);
}
break;
case 1: var ann_check_temp402 = $ans390;
$step387 = 2;
$al391 = L[146];
R._checkAnn(L[146],R.getDotAnn(L[146],"lists",lists31,"List"),ann_check_temp402);
break;
case 2: $step387 = 3;
$ans390 = ann_check_temp402;
break;
case 3: ++R.GAS;
return $ans390;
default: throw "No case numbered " + $step387 + " in $temp_full388";
}
}
} catch($e403) {
if(R.isCont($e403) && ($step387 !== 3)) {
$e403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al391,$temp_full388,$step387,[self389],[ann_check_temp402]);
}
if(R.isPyretException($e403)) {
$e403.pyretStack.push($al391);
}
throw $e403;
}
};
var anf_variant_member581 = R.makeMethod0($temp_full388);
var $temp_full405 = function($self406,$f407,$base408) {
var $step404 = 0;
var $ans409 = D;
var $al410 = L[154];
try {
if(R.isActivationRecord($self406)) {
$step404 = $self406.step;
$al410 = $self406.from;
$ans409 = $self406.ans;
self406 = $self406.args[0];
f407 = $self406.args[1];
base408 = $self406.args[2];
anf_method_obj412 = $self406.vars[0];
anf_method_obj415 = $self406.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[154],3,$t);
}
var self406 = $self406;
var f407 = $f407;
var base408 = $base408;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step404) {
case 0: var anf_method_obj415 = G(self406,"right",L[148]);
var anf_method_obj412 = G(self406,"left",L[149]);
var anf_arg411 = G(self406,"value",L[150]);
$step404 = 1;
$al410 = L[153];
if(!(R.isFunction(f407))) {
R.ffi.throwNonFunApp($al410,f407);
}
$ans409 = f407.app(base408,anf_arg411);
break;
case 1: var anf_arg413 = $ans409;
$step404 = 2;
$al410 = L[151];
$field414 = R.getColonFieldLoc(anf_method_obj412,"fold-preorder",L[151]);
if(R.isMethod($field414)) {
$ans409 = $field414.full_meth(anf_method_obj412,f407,anf_arg413);
} else {
if(!(R.isFunction($field414))) {
R.ffi.throwNonFunApp(L[151],$field414);
}
$ans409 = $field414.app(f407,anf_arg413);
}
break;
case 2: var anf_arg416 = $ans409;
$step404 = 3;
$al410 = L[152];
$field417 = R.getColonFieldLoc(anf_method_obj415,"fold-preorder",L[152]);
if(R.isMethod($field417)) {
$ans409 = $field417.full_meth(anf_method_obj415,f407,anf_arg416);
} else {
if(!(R.isFunction($field417))) {
R.ffi.throwNonFunApp(L[152],$field417);
}
$ans409 = $field417.app(f407,anf_arg416);
}
break;
case 3: ++R.GAS;
return $ans409;
default: throw "No case numbered " + $step404 + " in $temp_full405";
}
}
} catch($e418) {
if(R.isCont($e418) && ($step404 !== 3)) {
$e418.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al410,$temp_full405,$step404,[self406,f407,base408],[anf_method_obj412,anf_method_obj415]);
}
if(R.isPyretException($e418)) {
$e418.pyretStack.push($al410);
}
throw $e418;
}
};
var anf_variant_member582 = R.makeMethod2($temp_full405);
var $temp_full420 = function($self421,$f422,$base423) {
var $step419 = 0;
var $ans424 = D;
var $al425 = L[161];
try {
if(R.isActivationRecord($self421)) {
$step419 = $self421.step;
$al425 = $self421.from;
$ans424 = $self421.ans;
self421 = $self421.args[0];
f422 = $self421.args[1];
base423 = $self421.args[2];
anf_method_obj430 = $self421.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[161],3,$t);
}
var self421 = $self421;
var f422 = $f422;
var base423 = $base423;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step419) {
case 0: var anf_method_obj430 = G(self421,"right",L[155]);
var anf_method_obj426 = G(self421,"left",L[156]);
$step419 = 1;
$al425 = L[157];
$field427 = R.getColonFieldLoc(anf_method_obj426,"fold-inorder",L[157]);
if(R.isMethod($field427)) {
$ans424 = $field427.full_meth(anf_method_obj426,f422,base423);
} else {
if(!(R.isFunction($field427))) {
R.ffi.throwNonFunApp(L[157],$field427);
}
$ans424 = $field427.app(f422,base423);
}
break;
case 1: var anf_arg428 = $ans424;
var anf_arg429 = G(self421,"value",L[158]);
$step419 = 2;
$al425 = L[160];
if(!(R.isFunction(f422))) {
R.ffi.throwNonFunApp($al425,f422);
}
$ans424 = f422.app(anf_arg428,anf_arg429);
break;
case 2: var anf_arg431 = $ans424;
$step419 = 3;
$al425 = L[159];
$field432 = R.getColonFieldLoc(anf_method_obj430,"fold-inorder",L[159]);
if(R.isMethod($field432)) {
$ans424 = $field432.full_meth(anf_method_obj430,f422,anf_arg431);
} else {
if(!(R.isFunction($field432))) {
R.ffi.throwNonFunApp(L[159],$field432);
}
$ans424 = $field432.app(f422,anf_arg431);
}
break;
case 3: ++R.GAS;
return $ans424;
default: throw "No case numbered " + $step419 + " in $temp_full420";
}
}
} catch($e433) {
if(R.isCont($e433) && ($step419 !== 3)) {
$e433.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al425,$temp_full420,$step419,[self421,f422,base423],[anf_method_obj430]);
}
if(R.isPyretException($e433)) {
$e433.pyretStack.push($al425);
}
throw $e433;
}
};
var anf_variant_member583 = R.makeMethod2($temp_full420);
var $temp_full435 = function($self436,$f437,$base438) {
var $step434 = 0;
var $ans439 = D;
var $al440 = L[168];
try {
if(R.isActivationRecord($self436)) {
$step434 = $self436.step;
$al440 = $self436.from;
$ans439 = $self436.ans;
self436 = $self436.args[0];
f437 = $self436.args[1];
base438 = $self436.args[2];
anf_method_obj443 = $self436.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[168],3,$t);
}
var self436 = $self436;
var f437 = $f437;
var base438 = $base438;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step434) {
case 0: var anf_method_obj443 = G(self436,"right",L[162]);
var anf_method_obj441 = G(self436,"left",L[163]);
$step434 = 1;
$al440 = L[164];
$field442 = R.getColonFieldLoc(anf_method_obj441,"fold-postorder",L[164]);
if(R.isMethod($field442)) {
$ans439 = $field442.full_meth(anf_method_obj441,f437,base438);
} else {
if(!(R.isFunction($field442))) {
R.ffi.throwNonFunApp(L[164],$field442);
}
$ans439 = $field442.app(f437,base438);
}
break;
case 1: var anf_arg444 = $ans439;
$step434 = 2;
$al440 = L[165];
$field445 = R.getColonFieldLoc(anf_method_obj443,"fold-postorder",L[165]);
if(R.isMethod($field445)) {
$ans439 = $field445.full_meth(anf_method_obj443,f437,anf_arg444);
} else {
if(!(R.isFunction($field445))) {
R.ffi.throwNonFunApp(L[165],$field445);
}
$ans439 = $field445.app(f437,anf_arg444);
}
break;
case 2: var anf_arg446 = $ans439;
var anf_arg447 = G(self436,"value",L[166]);
$step434 = 3;
$al440 = L[167];
if(!(R.isFunction(f437))) {
R.ffi.throwNonFunApp($al440,f437);
}
$ans439 = f437.app(anf_arg446,anf_arg447);
break;
case 3: ++R.GAS;
return $ans439;
default: throw "No case numbered " + $step434 + " in $temp_full435";
}
}
} catch($e448) {
if(R.isCont($e448) && ($step434 !== 3)) {
$e448.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al440,$temp_full435,$step434,[self436,f437,base438],[anf_method_obj443]);
}
if(R.isPyretException($e448)) {
$e448.pyretStack.push($al440);
}
throw $e448;
}
};
var anf_variant_member584 = R.makeMethod2($temp_full435);
var $temp_full450 = function($self451,$f452,$base453) {
var $step449 = 0;
var $ans454 = D;
var $al455 = L[175];
try {
if(R.isActivationRecord($self451)) {
$step449 = $self451.step;
$al455 = $self451.from;
$ans454 = $self451.ans;
self451 = $self451.args[0];
f452 = $self451.args[1];
base453 = $self451.args[2];
anf_method_obj457 = $self451.vars[0];
anf_method_obj460 = $self451.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[175],3,$t);
}
var self451 = $self451;
var f452 = $f452;
var base453 = $base453;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step449) {
case 0: var anf_method_obj460 = G(self451,"left",L[169]);
var anf_method_obj457 = G(self451,"right",L[170]);
var anf_arg456 = G(self451,"value",L[171]);
$step449 = 1;
$al455 = L[174];
if(!(R.isFunction(f452))) {
R.ffi.throwNonFunApp($al455,f452);
}
$ans454 = f452.app(base453,anf_arg456);
break;
case 1: var anf_arg458 = $ans454;
$step449 = 2;
$al455 = L[172];
$field459 = R.getColonFieldLoc(anf_method_obj457,"fold-revpreorder",L[172]);
if(R.isMethod($field459)) {
$ans454 = $field459.full_meth(anf_method_obj457,f452,anf_arg458);
} else {
if(!(R.isFunction($field459))) {
R.ffi.throwNonFunApp(L[172],$field459);
}
$ans454 = $field459.app(f452,anf_arg458);
}
break;
case 2: var anf_arg461 = $ans454;
$step449 = 3;
$al455 = L[173];
$field462 = R.getColonFieldLoc(anf_method_obj460,"fold-revpreorder",L[173]);
if(R.isMethod($field462)) {
$ans454 = $field462.full_meth(anf_method_obj460,f452,anf_arg461);
} else {
if(!(R.isFunction($field462))) {
R.ffi.throwNonFunApp(L[173],$field462);
}
$ans454 = $field462.app(f452,anf_arg461);
}
break;
case 3: ++R.GAS;
return $ans454;
default: throw "No case numbered " + $step449 + " in $temp_full450";
}
}
} catch($e463) {
if(R.isCont($e463) && ($step449 !== 3)) {
$e463.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al455,$temp_full450,$step449,[self451,f452,base453],[anf_method_obj457,anf_method_obj460]);
}
if(R.isPyretException($e463)) {
$e463.pyretStack.push($al455);
}
throw $e463;
}
};
var anf_variant_member585 = R.makeMethod2($temp_full450);
var $temp_full465 = function($self466,$f467,$base468) {
var $step464 = 0;
var $ans469 = D;
var $al470 = L[182];
try {
if(R.isActivationRecord($self466)) {
$step464 = $self466.step;
$al470 = $self466.from;
$ans469 = $self466.ans;
self466 = $self466.args[0];
f467 = $self466.args[1];
base468 = $self466.args[2];
anf_method_obj475 = $self466.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[182],3,$t);
}
var self466 = $self466;
var f467 = $f467;
var base468 = $base468;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step464) {
case 0: var anf_method_obj475 = G(self466,"left",L[176]);
var anf_method_obj471 = G(self466,"right",L[177]);
$step464 = 1;
$al470 = L[178];
$field472 = R.getColonFieldLoc(anf_method_obj471,"fold-revinorder",L[178]);
if(R.isMethod($field472)) {
$ans469 = $field472.full_meth(anf_method_obj471,f467,base468);
} else {
if(!(R.isFunction($field472))) {
R.ffi.throwNonFunApp(L[178],$field472);
}
$ans469 = $field472.app(f467,base468);
}
break;
case 1: var anf_arg473 = $ans469;
var anf_arg474 = G(self466,"value",L[179]);
$step464 = 2;
$al470 = L[181];
if(!(R.isFunction(f467))) {
R.ffi.throwNonFunApp($al470,f467);
}
$ans469 = f467.app(anf_arg473,anf_arg474);
break;
case 2: var anf_arg476 = $ans469;
$step464 = 3;
$al470 = L[180];
$field477 = R.getColonFieldLoc(anf_method_obj475,"fold-revinorder",L[180]);
if(R.isMethod($field477)) {
$ans469 = $field477.full_meth(anf_method_obj475,f467,anf_arg476);
} else {
if(!(R.isFunction($field477))) {
R.ffi.throwNonFunApp(L[180],$field477);
}
$ans469 = $field477.app(f467,anf_arg476);
}
break;
case 3: ++R.GAS;
return $ans469;
default: throw "No case numbered " + $step464 + " in $temp_full465";
}
}
} catch($e478) {
if(R.isCont($e478) && ($step464 !== 3)) {
$e478.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al470,$temp_full465,$step464,[self466,f467,base468],[anf_method_obj475]);
}
if(R.isPyretException($e478)) {
$e478.pyretStack.push($al470);
}
throw $e478;
}
};
var anf_variant_member586 = R.makeMethod2($temp_full465);
var $temp_full480 = function($self481,$f482,$base483) {
var $step479 = 0;
var $ans484 = D;
var $al485 = L[189];
try {
if(R.isActivationRecord($self481)) {
$step479 = $self481.step;
$al485 = $self481.from;
$ans484 = $self481.ans;
self481 = $self481.args[0];
f482 = $self481.args[1];
base483 = $self481.args[2];
anf_method_obj488 = $self481.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],3,$t);
}
var self481 = $self481;
var f482 = $f482;
var base483 = $base483;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step479) {
case 0: var anf_method_obj488 = G(self481,"left",L[183]);
var anf_method_obj486 = G(self481,"right",L[184]);
$step479 = 1;
$al485 = L[185];
$field487 = R.getColonFieldLoc(anf_method_obj486,"fold-revpostorder",L[185]);
if(R.isMethod($field487)) {
$ans484 = $field487.full_meth(anf_method_obj486,f482,base483);
} else {
if(!(R.isFunction($field487))) {
R.ffi.throwNonFunApp(L[185],$field487);
}
$ans484 = $field487.app(f482,base483);
}
break;
case 1: var anf_arg489 = $ans484;
$step479 = 2;
$al485 = L[186];
$field490 = R.getColonFieldLoc(anf_method_obj488,"fold-revpostorder",L[186]);
if(R.isMethod($field490)) {
$ans484 = $field490.full_meth(anf_method_obj488,f482,anf_arg489);
} else {
if(!(R.isFunction($field490))) {
R.ffi.throwNonFunApp(L[186],$field490);
}
$ans484 = $field490.app(f482,anf_arg489);
}
break;
case 2: var anf_arg491 = $ans484;
var anf_arg492 = G(self481,"value",L[187]);
$step479 = 3;
$al485 = L[188];
if(!(R.isFunction(f482))) {
R.ffi.throwNonFunApp($al485,f482);
}
$ans484 = f482.app(anf_arg491,anf_arg492);
break;
case 3: ++R.GAS;
return $ans484;
default: throw "No case numbered " + $step479 + " in $temp_full480";
}
}
} catch($e493) {
if(R.isCont($e493) && ($step479 !== 3)) {
$e493.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al485,$temp_full480,$step479,[self481,f482,base483],[anf_method_obj488]);
}
if(R.isPyretException($e493)) {
$e493.pyretStack.push($al485);
}
throw $e493;
}
};
var anf_variant_member587 = R.makeMethod2($temp_full480);
var $temp_full495 = function($self496) {
var $step494 = 0;
var $ans497 = D;
var $al498 = L[195];
try {
if(R.isActivationRecord($self496)) {
$step494 = $self496.step;
$al498 = $self496.from;
$ans497 = $self496.ans;
self496 = $self496.args[0];
anf_arg504 = $self496.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[195],1,$t);
}
var self496 = $self496;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step494) {
case 0: var anf_method_obj499 = G(self496,"left",L[190]);
$step494 = 1;
$al498 = L[191];
$field500 = R.getColonFieldLoc(anf_method_obj499,"count",L[191]);
if(R.isMethod($field500)) {
$ans497 = $field500.full_meth(anf_method_obj499);
} else {
if(!(R.isFunction($field500))) {
R.ffi.throwNonFunApp(L[191],$field500);
}
$ans497 = $field500.app();
}
break;
case 1: var anf_arg501 = $ans497;
$step494 = 2;
$al498 = L[194];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al498,_plus6);
}
$ans497 = _plus6.app((1),anf_arg501);
break;
case 2: var anf_arg504 = $ans497;
var anf_method_obj502 = G(self496,"right",L[192]);
$step494 = 3;
$al498 = L[193];
$field503 = R.getColonFieldLoc(anf_method_obj502,"count",L[193]);
if(R.isMethod($field503)) {
$ans497 = $field503.full_meth(anf_method_obj502);
} else {
if(!(R.isFunction($field503))) {
R.ffi.throwNonFunApp(L[193],$field503);
}
$ans497 = $field503.app();
}
break;
case 3: var anf_arg505 = $ans497;
$step494 = 4;
$al498 = L[194];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al498,_plus6);
}
$ans497 = _plus6.app(anf_arg504,anf_arg505);
break;
case 4: ++R.GAS;
return $ans497;
default: throw "No case numbered " + $step494 + " in $temp_full495";
}
}
} catch($e506) {
if(R.isCont($e506) && ($step494 !== 4)) {
$e506.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al498,$temp_full495,$step494,[self496],[anf_arg504]);
}
if(R.isPyretException($e506)) {
$e506.pyretStack.push($al498);
}
throw $e506;
}
};
var anf_variant_member588 = R.makeMethod0($temp_full495);
var $temp_full508 = function($self509,$f510) {
var $step507 = 0;
var $ans511 = D;
var $al512 = L[203];
try {
if(R.isActivationRecord($self509)) {
$step507 = $self509.step;
$al512 = $self509.from;
$ans511 = $self509.ans;
self509 = $self509.args[0];
f510 = $self509.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[203],2,$t);
}
var self509 = $self509;
var f510 = $f510;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step507) {
case 0: var anf_arg513 = G(self509,"value",L[196]);
$step507 = 1;
$al512 = L[202];
if(!(R.isFunction(f510))) {
R.ffi.throwNonFunApp($al512,f510);
}
$ans511 = f510.app(anf_arg513);
break;
case 1: var anf_arg514 = $ans511;
$al512 = L[197];
var anf_if522 = R.checkWrapBoolean(anf_arg514);
if(R.isPyretTrue(anf_if522)) {
$step507 = 2;
} else {
$step507 = 7;
}
break;
case 2: var anf_method_obj515 = G(self509,"right",L[198]);
$step507 = 3;
$al512 = L[199];
$field516 = R.getColonFieldLoc(anf_method_obj515,"all",L[199]);
if(R.isMethod($field516)) {
$ans511 = $field516.full_meth(anf_method_obj515,f510);
} else {
if(!(R.isFunction($field516))) {
R.ffi.throwNonFunApp(L[199],$field516);
}
$ans511 = $field516.app(f510);
}
break;
case 3: var anf_arg517 = $ans511;
$al512 = L[197];
var anf_if521 = R.checkWrapBoolean(anf_arg517);
if(R.isPyretTrue(anf_if521)) {
$step507 = 4;
} else {
$step507 = 6;
}
break;
case 4: var anf_method_obj518 = G(self509,"left",L[200]);
$step507 = 5;
$al512 = L[201];
$field519 = R.getColonFieldLoc(anf_method_obj518,"all",L[201]);
if(R.isMethod($field519)) {
$ans511 = $field519.full_meth(anf_method_obj518,f510);
} else {
if(!(R.isFunction($field519))) {
R.ffi.throwNonFunApp(L[201],$field519);
}
$ans511 = $field519.app(f510);
}
break;
case 5: var anf_arg520 = $ans511;
$step507 = 8;
$al512 = L[197];
$ans511 = R.checkWrapBoolean(anf_arg520);
break;
case 6: $step507 = 8;
$ans511 = (false);
break;
case 7: $step507 = 8;
$ans511 = (false);
break;
case 8: ++R.GAS;
return $ans511;
default: throw "No case numbered " + $step507 + " in $temp_full508";
}
}
} catch($e523) {
if(R.isCont($e523) && ($step507 !== 8)) {
$e523.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al512,$temp_full508,$step507,[self509,f510],[]);
}
if(R.isPyretException($e523)) {
$e523.pyretStack.push($al512);
}
throw $e523;
}
};
var anf_variant_member589 = R.makeMethod1($temp_full508);
var $temp_full525 = function($self526,$f527) {
var $step524 = 0;
var $ans528 = D;
var $al529 = L[211];
try {
if(R.isActivationRecord($self526)) {
$step524 = $self526.step;
$al529 = $self526.from;
$ans528 = $self526.ans;
self526 = $self526.args[0];
f527 = $self526.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[211],2,$t);
}
var self526 = $self526;
var f527 = $f527;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step524) {
case 0: var anf_arg530 = G(self526,"value",L[204]);
$step524 = 1;
$al529 = L[210];
if(!(R.isFunction(f527))) {
R.ffi.throwNonFunApp($al529,f527);
}
$ans528 = f527.app(anf_arg530);
break;
case 1: var anf_arg531 = $ans528;
$al529 = L[205];
var anf_if539 = R.checkWrapBoolean(anf_arg531);
if(R.isPyretTrue(anf_if539)) {
$step524 = 2;
} else {
$step524 = 3;
}
break;
case 2: $step524 = 8;
$ans528 = (true);
break;
case 3: var anf_method_obj532 = G(self526,"right",L[206]);
$step524 = 4;
$al529 = L[207];
$field533 = R.getColonFieldLoc(anf_method_obj532,"all",L[207]);
if(R.isMethod($field533)) {
$ans528 = $field533.full_meth(anf_method_obj532,f527);
} else {
if(!(R.isFunction($field533))) {
R.ffi.throwNonFunApp(L[207],$field533);
}
$ans528 = $field533.app(f527);
}
break;
case 4: var anf_arg534 = $ans528;
$al529 = L[205];
var anf_if538 = R.checkWrapBoolean(anf_arg534);
if(R.isPyretTrue(anf_if538)) {
$step524 = 5;
} else {
$step524 = 6;
}
break;
case 5: $step524 = 8;
$ans528 = (true);
break;
case 6: var anf_method_obj535 = G(self526,"left",L[208]);
$step524 = 7;
$al529 = L[209];
$field536 = R.getColonFieldLoc(anf_method_obj535,"all",L[209]);
if(R.isMethod($field536)) {
$ans528 = $field536.full_meth(anf_method_obj535,f527);
} else {
if(!(R.isFunction($field536))) {
R.ffi.throwNonFunApp(L[209],$field536);
}
$ans528 = $field536.app(f527);
}
break;
case 7: var anf_arg537 = $ans528;
$step524 = 8;
$al529 = L[205];
$ans528 = R.checkWrapBoolean(anf_arg537);
break;
case 8: ++R.GAS;
return $ans528;
default: throw "No case numbered " + $step524 + " in $temp_full525";
}
}
} catch($e540) {
if(R.isCont($e540) && ($step524 !== 8)) {
$e540.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al529,$temp_full525,$step524,[self526,f527],[]);
}
if(R.isPyretException($e540)) {
$e540.pyretStack.push($al529);
}
throw $e540;
}
};
var anf_variant_member590 = R.makeMethod1($temp_full525);
var $leaf_getfields567 = function(f) {
return f();
};
var $leaf_getfieldsref565 = function(f) {
return f();
};
var $leaf_mutablemask566 = [];
var $leaf$base543 = {"to-list":anf_shared541,
"_equals":anf_shared542,
"height":anf_singleton_variant_member546,
"contains":anf_singleton_variant_member547,
"insert":anf_singleton_variant_member548,
"remove":anf_singleton_variant_member549,
"preorder":anf_singleton_variant_member550,
"inorder":anf_singleton_variant_member551,
"postorder":anf_singleton_variant_member552,
"revpreorder":anf_singleton_variant_member553,
"revinorder":anf_singleton_variant_member554,
"revpostorder":anf_singleton_variant_member555,
"fold-preorder":anf_singleton_variant_member556,
"fold-inorder":anf_singleton_variant_member557,
"fold-postorder":anf_singleton_variant_member558,
"fold-revpreorder":anf_singleton_variant_member559,
"fold-revinorder":anf_singleton_variant_member560,
"fold-revpostorder":anf_singleton_variant_member561,
"count":anf_singleton_variant_member562,
"all":anf_singleton_variant_member563,
"any":anf_singleton_variant_member564,
"_match":R.makeMatch("leaf",0)};
var $leaf$brands545 = {"$brand$leaf":true};
$leaf$brands545[AVLTree48._brand] = true;
var $branch_getfields593 = function(f) {
return f(this.dict["value"],this.dict["h"],this.dict["left"],this.dict["right"]);
};
var $branch_getfieldsref591 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]),R.derefField(this.dict["h"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["right"],false,refmask[3]));
};
var $branch_mutablemask592 = [false,false,false,false];
var $branch$base569 = {"$fieldNames":["value","h","left","right"],
"to-list":anf_shared541,
"_equals":anf_shared542,
"height":anf_variant_member572,
"contains":anf_variant_member573,
"insert":anf_variant_member574,
"remove":anf_variant_member575,
"preorder":anf_variant_member576,
"inorder":anf_variant_member577,
"postorder":anf_variant_member578,
"revpreorder":anf_variant_member579,
"revinorder":anf_variant_member580,
"revpostorder":anf_variant_member581,
"fold-preorder":anf_variant_member582,
"fold-inorder":anf_variant_member583,
"fold-postorder":anf_variant_member584,
"fold-revpreorder":anf_variant_member585,
"fold-revinorder":anf_variant_member586,
"fold-revpostorder":anf_variant_member587,
"count":anf_variant_member588,
"all":anf_variant_member589,
"any":anf_variant_member590,
"_match":R.makeMatch("branch",4)};
var $branch$brands571 = {"$brand$branch":true};
$branch$brands571[AVLTree48._brand] = true;
var branch595 = R.makeVariantConstructor(L[217],function() {
return [$type$Number2,AVLTree99,AVLTree99];
},["h596","left597","right598"],[L[214],L[215],L[216]],[false,false,false,false],["value599","h596","left597","right598"],$branch_mutablemask592,$branch$base569,$branch$brands571,"branch",$branch_getfieldsref591,$branch_getfields593,$branch$base569);
var anf_assign601 = R.makeObject({"AVLTree":R.makeFunction(function($val600) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[218],1,$t);
}
return R.makeBoolean(R.hasBrand($val600,AVLTree48._brand));
}),
"is-leaf":R.makeFunction(function($val568) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[212],1,$t);
}
return R.makeBoolean(R.hasBrand($val568,"$brand$leaf"));
}),
"leaf":R.makeDataValue($leaf$base543,$leaf$brands545,"leaf",$leaf_getfieldsref565,$leaf_getfields567,-1,$leaf_mutablemask566,$leaf$base543),
"is-branch":R.makeFunction(function($val594) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[213],1,$t);
}
return R.makeBoolean(R.hasBrand($val594,"$brand$branch"));
}),
"branch":branch595});
AVLTree602.$var = anf_assign601;
var anf_assign603 = G(AVLTree602.$var,"AVLTree",L[218]);
AVLTree65.$var = anf_assign603;
var anf_assign604 = G(AVLTree602.$var,"AVLTree",L[218]);
is$AVLTree605.$var = anf_assign604;
var anf_assign606 = G(AVLTree602.$var,"is-leaf",L[212]);
is$leaf607.$var = anf_assign606;
var anf_assign608 = G(AVLTree602.$var,"leaf",L[212]);
leaf97.$var = anf_assign608;
var anf_assign609 = G(AVLTree602.$var,"is-branch",L[213]);
is$branch610.$var = anf_assign609;
var anf_assign611 = G(AVLTree602.$var,"branch",L[213]);
branch612.$var = anf_assign611;
var $temp_lam614 = function($f615,$base616,$tree617) {
var $step613 = 0;
var $ans618 = D;
var $al619 = L[220];
try {
if(R.isActivationRecord($f615)) {
$step613 = $f615.step;
$al619 = $f615.from;
$ans618 = $f615.ans;
f615 = $f615.args[0];
base616 = $f615.args[1];
tree617 = $f615.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[220],3,$t);
}
var f615 = $f615;
var base616 = $base616;
var tree617 = $tree617;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step613) {
case 0: $step613 = 1;
$al619 = L[219];
$field620 = R.getColonFieldLoc(tree617,"fold-preorder",L[219]);
if(R.isMethod($field620)) {
$ans618 = $field620.full_meth(tree617,f615,base616);
} else {
if(!(R.isFunction($field620))) {
R.ffi.throwNonFunApp(L[219],$field620);
}
$ans618 = $field620.app(f615,base616);
}
break;
case 1: ++R.GAS;
return $ans618;
default: throw "No case numbered " + $step613 + " in $temp_lam614";
}
}
} catch($e621) {
if(R.isCont($e621) && ($step613 !== 1)) {
$e621.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al619,$temp_lam614,$step613,[f615,base616,tree617],[]);
}
if(R.isPyretException($e621)) {
$e621.pyretStack.push($al619);
}
throw $e621;
}
};
var anf_assign622 = R.makeFunction($temp_lam614);
tree$fold623.$var = anf_assign622;
var $temp_lam625 = function($f626,$tree627) {
var $step624 = 0;
var $ans628 = D;
var $al629 = L[222];
try {
if(R.isActivationRecord($f626)) {
$step624 = $f626.step;
$al629 = $f626.from;
$ans628 = $f626.ans;
f626 = $f626.args[0];
tree627 = $f626.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[222],2,$t);
}
var f626 = $f626;
var tree627 = $tree627;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step624) {
case 0: $step624 = 1;
$al629 = L[221];
$field630 = R.getColonFieldLoc(tree627,"all",L[221]);
if(R.isMethod($field630)) {
$ans628 = $field630.full_meth(tree627,f626);
} else {
if(!(R.isFunction($field630))) {
R.ffi.throwNonFunApp(L[221],$field630);
}
$ans628 = $field630.app(f626);
}
break;
case 1: ++R.GAS;
return $ans628;
default: throw "No case numbered " + $step624 + " in $temp_lam625";
}
}
} catch($e631) {
if(R.isCont($e631) && ($step624 !== 1)) {
$e631.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al629,$temp_lam625,$step624,[f626,tree627],[]);
}
if(R.isPyretException($e631)) {
$e631.pyretStack.push($al629);
}
throw $e631;
}
};
var anf_assign632 = R.makeFunction($temp_lam625);
tree$all633.$var = anf_assign632;
var $temp_lam635 = function($f636,$tree637) {
var $step634 = 0;
var $ans638 = D;
var $al639 = L[224];
try {
if(R.isActivationRecord($f636)) {
$step634 = $f636.step;
$al639 = $f636.from;
$ans638 = $f636.ans;
f636 = $f636.args[0];
tree637 = $f636.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[224],2,$t);
}
var f636 = $f636;
var tree637 = $tree637;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step634) {
case 0: $step634 = 1;
$al639 = L[223];
$field640 = R.getColonFieldLoc(tree637,"any",L[223]);
if(R.isMethod($field640)) {
$ans638 = $field640.full_meth(tree637,f636);
} else {
if(!(R.isFunction($field640))) {
R.ffi.throwNonFunApp(L[223],$field640);
}
$ans638 = $field640.app(f636);
}
break;
case 1: ++R.GAS;
return $ans638;
default: throw "No case numbered " + $step634 + " in $temp_lam635";
}
}
} catch($e641) {
if(R.isCont($e641) && ($step634 !== 1)) {
$e641.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al639,$temp_lam635,$step634,[f636,tree637],[]);
}
if(R.isPyretException($e641)) {
$e641.pyretStack.push($al639);
}
throw $e641;
}
};
var anf_assign642 = R.makeFunction($temp_lam635);
tree$any643.$var = anf_assign642;
var $temp_lam645 = function($val646,$left647,$right648) {
var $step644 = 0;
var $ans649 = D;
var $al650 = L[232];
try {
if(R.isActivationRecord($val646)) {
$step644 = $val646.step;
$al650 = $val646.from;
$ans649 = $val646.ans;
val646 = $val646.args[0];
left647 = $val646.args[1];
right648 = $val646.args[2];
anf_arg653 = $val646.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[232],3,$t);
}
var val646 = $val646;
var left647 = $left647;
var right648 = $right648;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step644) {
case 0: $step644 = 1;
$al650 = L[230];
R._checkAnn(L[230],AVLTree99,left647);
break;
case 1: $step644 = 2;
$al650 = L[231];
R._checkAnn(L[231],AVLTree99,right648);
break;
case 2: $step644 = 3;
$al650 = L[225];
$field651 = R.getColonFieldLoc(left647,"height",L[225]);
if(R.isMethod($field651)) {
$ans649 = $field651.full_meth(left647);
} else {
if(!(R.isFunction($field651))) {
R.ffi.throwNonFunApp(L[225],$field651);
}
$ans649 = $field651.app();
}
break;
case 3: var anf_arg653 = $ans649;
$step644 = 4;
$al650 = L[226];
$field652 = R.getColonFieldLoc(right648,"height",L[226]);
if(R.isMethod($field652)) {
$ans649 = $field652.full_meth(right648);
} else {
if(!(R.isFunction($field652))) {
R.ffi.throwNonFunApp(L[226],$field652);
}
$ans649 = $field652.app();
}
break;
case 4: var anf_arg654 = $ans649;
$step644 = 5;
$al650 = L[229];
if(!(R.isFunction(num$max7))) {
R.ffi.throwNonFunApp($al650,num$max7);
}
$ans649 = num$max7.app(anf_arg653,anf_arg654);
break;
case 5: var anf_arg655 = $ans649;
$step644 = 6;
$al650 = L[228];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al650,_plus6);
}
$ans649 = _plus6.app(anf_arg655,(1));
break;
case 6: var anf_arg656 = $ans649;
$step644 = 7;
$al650 = L[227];
if(!(R.isFunction(branch612.$var))) {
R.ffi.throwNonFunApp($al650,branch612.$var);
}
$ans649 = branch612.$var.app(val646,anf_arg656,left647,right648);
break;
case 7: ++R.GAS;
return $ans649;
default: throw "No case numbered " + $step644 + " in $temp_lam645";
}
}
} catch($e657) {
if(R.isCont($e657) && ($step644 !== 7)) {
$e657.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al650,$temp_lam645,$step644,[val646,left647,right648],[anf_arg653]);
}
if(R.isPyretException($e657)) {
$e657.pyretStack.push($al650);
}
throw $e657;
}
};
var anf_assign658 = R.makeFunction($temp_lam645);
mkbranch96.$var = anf_assign658;
var $temp_lam660 = function($tree661) {
var $step659 = 0;
var $ans662 = D;
var $al663 = L[326];
try {
if(R.isActivationRecord($tree661)) {
$step659 = $tree661.step;
$al663 = $tree661.from;
$ans662 = $tree661.ans;
tree661 = $tree661.args[0];
anf_arg777 = $tree661.vars[0];
anf_arg765 = $tree661.vars[1];
rh753 = $tree661.vars[2];
lh752 = $tree661.vars[3];
right$left747 = $tree661.vars[4];
left$right722 = $tree661.vars[5];
right$right697 = $tree661.vars[6];
left$left680 = $tree661.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[326],1,$t);
}
var tree661 = $tree661;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step659) {
case 0: $step659 = 1;
$al663 = L[325];
R._checkAnn(L[325],AVLTree99,tree661);
break;
case 1: var left$left680 = {"$var":D};
var right$right697 = {"$var":D};
var left$right722 = {"$var":D};
var right$left747 = {"$var":D};
var $temp_lam665 = function($t666) {
var $step664 = 0;
var $ans667 = D;
var $al668 = L[243];
try {
if(R.isActivationRecord($t666)) {
$step664 = $t666.step;
$al668 = $t666.from;
$ans667 = $t666.ans;
t666 = $t666.args[0];
anf_arg676 = $t666.vars[0];
anf_arg675 = $t666.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[243],1,$t);
}
var t666 = $t666;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step664) {
case 0: var anf_bracket669 = G(t666,"left",L[233]);
var anf_arg675 = G(anf_bracket669,"value",L[234]);
var anf_bracket670 = G(t666,"left",L[235]);
var anf_arg676 = G(anf_bracket670,"left",L[236]);
var anf_arg672 = G(t666,"value",L[237]);
var anf_bracket671 = G(t666,"left",L[238]);
var anf_arg673 = G(anf_bracket671,"right",L[239]);
var anf_arg674 = G(t666,"right",L[240]);
$step664 = 1;
$al668 = L[242];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al668,mkbranch96.$var);
}
$ans667 = mkbranch96.$var.app(anf_arg672,anf_arg673,anf_arg674);
break;
case 1: var anf_arg677 = $ans667;
$step664 = 2;
$al668 = L[241];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al668,mkbranch96.$var);
}
$ans667 = mkbranch96.$var.app(anf_arg675,anf_arg676,anf_arg677);
break;
case 2: ++R.GAS;
return $ans667;
default: throw "No case numbered " + $step664 + " in $temp_lam665";
}
}
} catch($e678) {
if(R.isCont($e678) && ($step664 !== 2)) {
$e678.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al668,$temp_lam665,$step664,[t666],[anf_arg676,anf_arg675]);
}
if(R.isPyretException($e678)) {
$e678.pyretStack.push($al668);
}
throw $e678;
}
};
var anf_assign679 = R.makeFunction($temp_lam665);
left$left680.$var = anf_assign679;
var $temp_lam682 = function($t683) {
var $step681 = 0;
var $ans684 = D;
var $al685 = L[254];
try {
if(R.isActivationRecord($t683)) {
$step681 = $t683.step;
$al685 = $t683.from;
$ans684 = $t683.ans;
t683 = $t683.args[0];
anf_arg692 = $t683.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[254],1,$t);
}
var t683 = $t683;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step681) {
case 0: var anf_bracket686 = G(t683,"right",L[244]);
var anf_arg692 = G(anf_bracket686,"value",L[245]);
var anf_arg688 = G(t683,"value",L[246]);
var anf_arg689 = G(t683,"left",L[247]);
var anf_bracket687 = G(t683,"right",L[248]);
var anf_arg690 = G(anf_bracket687,"left",L[249]);
$step681 = 1;
$al685 = L[253];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al685,mkbranch96.$var);
}
$ans684 = mkbranch96.$var.app(anf_arg688,anf_arg689,anf_arg690);
break;
case 1: var anf_arg693 = $ans684;
var anf_bracket691 = G(t683,"right",L[250]);
var anf_arg694 = G(anf_bracket691,"right",L[251]);
$step681 = 2;
$al685 = L[252];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al685,mkbranch96.$var);
}
$ans684 = mkbranch96.$var.app(anf_arg692,anf_arg693,anf_arg694);
break;
case 2: ++R.GAS;
return $ans684;
default: throw "No case numbered " + $step681 + " in $temp_lam682";
}
}
} catch($e695) {
if(R.isCont($e695) && ($step681 !== 2)) {
$e695.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al685,$temp_lam682,$step681,[t683],[anf_arg692]);
}
if(R.isPyretException($e695)) {
$e695.pyretStack.push($al685);
}
throw $e695;
}
};
var anf_assign696 = R.makeFunction($temp_lam682);
right$right697.$var = anf_assign696;
var $temp_lam699 = function($t700) {
var $step698 = 0;
var $ans701 = D;
var $al702 = L[273];
try {
if(R.isActivationRecord($t700)) {
$step698 = $t700.step;
$al702 = $t700.from;
$ans701 = $t700.ans;
t700 = $t700.args[0];
anf_arg718 = $t700.vars[0];
anf_arg717 = $t700.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[273],1,$t);
}
var t700 = $t700;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step698) {
case 0: var anf_bracket703 = G(t700,"left",L[255]);
var anf_bracket704 = G(anf_bracket703,"right",L[256]);
var anf_arg717 = G(anf_bracket704,"value",L[257]);
var anf_bracket705 = G(t700,"left",L[258]);
var anf_arg709 = G(anf_bracket705,"value",L[259]);
var anf_bracket706 = G(t700,"left",L[260]);
var anf_arg710 = G(anf_bracket706,"left",L[261]);
var anf_bracket707 = G(t700,"left",L[262]);
var anf_bracket708 = G(anf_bracket707,"right",L[263]);
var anf_arg711 = G(anf_bracket708,"left",L[264]);
$step698 = 1;
$al702 = L[272];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg709,anf_arg710,anf_arg711);
break;
case 1: var anf_arg718 = $ans701;
var anf_arg714 = G(t700,"value",L[265]);
var anf_bracket712 = G(t700,"left",L[266]);
var anf_bracket713 = G(anf_bracket712,"right",L[267]);
var anf_arg715 = G(anf_bracket713,"right",L[268]);
var anf_arg716 = G(t700,"right",L[269]);
$step698 = 2;
$al702 = L[271];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg714,anf_arg715,anf_arg716);
break;
case 2: var anf_arg719 = $ans701;
$step698 = 3;
$al702 = L[270];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg717,anf_arg718,anf_arg719);
break;
case 3: ++R.GAS;
return $ans701;
default: throw "No case numbered " + $step698 + " in $temp_lam699";
}
}
} catch($e720) {
if(R.isCont($e720) && ($step698 !== 3)) {
$e720.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al702,$temp_lam699,$step698,[t700],[anf_arg718,anf_arg717]);
}
if(R.isPyretException($e720)) {
$e720.pyretStack.push($al702);
}
throw $e720;
}
};
var anf_assign721 = R.makeFunction($temp_lam699);
left$right722.$var = anf_assign721;
var $temp_lam724 = function($t725) {
var $step723 = 0;
var $ans726 = D;
var $al727 = L[292];
try {
if(R.isActivationRecord($t725)) {
$step723 = $t725.step;
$al727 = $t725.from;
$ans726 = $t725.ans;
t725 = $t725.args[0];
anf_arg743 = $t725.vars[0];
anf_arg742 = $t725.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[292],1,$t);
}
var t725 = $t725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step723) {
case 0: var anf_bracket728 = G(t725,"right",L[274]);
var anf_bracket729 = G(anf_bracket728,"left",L[275]);
var anf_arg742 = G(anf_bracket729,"value",L[276]);
var anf_arg732 = G(t725,"value",L[277]);
var anf_arg733 = G(t725,"left",L[278]);
var anf_bracket730 = G(t725,"right",L[279]);
var anf_bracket731 = G(anf_bracket730,"left",L[280]);
var anf_arg734 = G(anf_bracket731,"left",L[281]);
$step723 = 1;
$al727 = L[291];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg732,anf_arg733,anf_arg734);
break;
case 1: var anf_arg743 = $ans726;
var anf_bracket735 = G(t725,"right",L[282]);
var anf_arg739 = G(anf_bracket735,"value",L[283]);
var anf_bracket736 = G(t725,"right",L[284]);
var anf_bracket737 = G(anf_bracket736,"left",L[285]);
var anf_arg740 = G(anf_bracket737,"right",L[286]);
var anf_bracket738 = G(t725,"right",L[287]);
var anf_arg741 = G(anf_bracket738,"right",L[288]);
$step723 = 2;
$al727 = L[290];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg739,anf_arg740,anf_arg741);
break;
case 2: var anf_arg744 = $ans726;
$step723 = 3;
$al727 = L[289];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg742,anf_arg743,anf_arg744);
break;
case 3: ++R.GAS;
return $ans726;
default: throw "No case numbered " + $step723 + " in $temp_lam724";
}
}
} catch($e745) {
if(R.isCont($e745) && ($step723 !== 3)) {
$e745.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al727,$temp_lam724,$step723,[t725],[anf_arg743,anf_arg742]);
}
if(R.isPyretException($e745)) {
$e745.pyretStack.push($al727);
}
throw $e745;
}
};
var anf_assign746 = R.makeFunction($temp_lam724);
right$left747.$var = anf_assign746;
var anf_method_obj748 = G(tree661,"left",L[293]);
$step659 = 2;
$al663 = L[294];
$field749 = R.getColonFieldLoc(anf_method_obj748,"height",L[294]);
if(R.isMethod($field749)) {
$ans662 = $field749.full_meth(anf_method_obj748);
} else {
if(!(R.isFunction($field749))) {
R.ffi.throwNonFunApp(L[294],$field749);
}
$ans662 = $field749.app();
}
break;
case 2: var lh752 = $ans662;
var anf_method_obj750 = G(tree661,"right",L[295]);
$step659 = 3;
$al663 = L[296];
$field751 = R.getColonFieldLoc(anf_method_obj750,"height",L[296]);
if(R.isMethod($field751)) {
$ans662 = $field751.full_meth(anf_method_obj750);
} else {
if(!(R.isFunction($field751))) {
R.ffi.throwNonFunApp(L[296],$field751);
}
$ans662 = $field751.app();
}
break;
case 3: var rh753 = $ans662;
$step659 = 4;
$al663 = L[324];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(lh752,rh753);
break;
case 4: var anf_arg754 = $ans662;
$step659 = 5;
$al663 = L[323];
if(!(R.isFunction(num$abs9))) {
R.ffi.throwNonFunApp($al663,num$abs9);
}
$ans662 = num$abs9.app(anf_arg754);
break;
case 5: var anf_arg755 = $ans662;
$step659 = 6;
$al663 = L[297];
if(!(R.isFunction(_lessequal10))) {
R.ffi.throwNonFunApp($al663,_lessequal10);
}
$ans662 = _lessequal10.app(anf_arg755,(1));
break;
case 6: var anf_arg756 = $ans662;
$al663 = L[297];
var anf_if783 = R.checkWrapBoolean(anf_arg756);
if(R.isPyretTrue(anf_if783)) {
$step659 = 7;
} else {
$step659 = 8;
}
break;
case 7: $step659 = 27;
$ans662 = tree661;
break;
case 8: $step659 = 9;
$al663 = L[322];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(lh752,rh753);
break;
case 9: var anf_arg757 = $ans662;
$step659 = 10;
$al663 = L[321];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al663,equal$always4);
}
$ans662 = equal$always4.app(anf_arg757,(2));
break;
case 10: var anf_arg758 = $ans662;
$al663 = L[298];
var anf_if782 = R.checkWrapBoolean(anf_arg758);
if(R.isPyretTrue(anf_if782)) {
$step659 = 11;
} else {
$step659 = 17;
}
break;
case 11: var anf_bracket759 = G(tree661,"left",L[299]);
var anf_method_obj760 = G(anf_bracket759,"left",L[300]);
$step659 = 12;
$al663 = L[301];
$field761 = R.getColonFieldLoc(anf_method_obj760,"height",L[301]);
if(R.isMethod($field761)) {
$ans662 = $field761.full_meth(anf_method_obj760);
} else {
if(!(R.isFunction($field761))) {
R.ffi.throwNonFunApp(L[301],$field761);
}
$ans662 = $field761.app();
}
break;
case 12: var anf_arg765 = $ans662;
var anf_bracket762 = G(tree661,"left",L[302]);
var anf_method_obj763 = G(anf_bracket762,"right",L[303]);
$step659 = 13;
$al663 = L[304];
$field764 = R.getColonFieldLoc(anf_method_obj763,"height",L[304]);
if(R.isMethod($field764)) {
$ans662 = $field764.full_meth(anf_method_obj763);
} else {
if(!(R.isFunction($field764))) {
R.ffi.throwNonFunApp(L[304],$field764);
}
$ans662 = $field764.app();
}
break;
case 13: var anf_arg766 = $ans662;
$step659 = 14;
$al663 = L[305];
if(!(R.isFunction(_greaterequal12))) {
R.ffi.throwNonFunApp($al663,_greaterequal12);
}
$ans662 = _greaterequal12.app(anf_arg765,anf_arg766);
break;
case 14: var anf_arg767 = $ans662;
$al663 = L[305];
var anf_if768 = R.checkWrapBoolean(anf_arg767);
if(R.isPyretTrue(anf_if768)) {
$step659 = 15;
} else {
$step659 = 16;
}
break;
case 15: $step659 = 27;
$al663 = L[306];
if(!(R.isFunction(left$left680.$var))) {
R.ffi.throwNonFunApp($al663,left$left680.$var);
}
$ans662 = left$left680.$var.app(tree661);
break;
case 16: $step659 = 27;
$al663 = L[307];
if(!(R.isFunction(left$right722.$var))) {
R.ffi.throwNonFunApp($al663,left$right722.$var);
}
$ans662 = left$right722.$var.app(tree661);
break;
case 17: $step659 = 18;
$al663 = L[320];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(rh753,lh752);
break;
case 18: var anf_arg769 = $ans662;
$step659 = 19;
$al663 = L[319];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al663,equal$always4);
}
$ans662 = equal$always4.app(anf_arg769,(2));
break;
case 19: var anf_arg770 = $ans662;
$al663 = L[308];
var anf_if781 = R.checkWrapBoolean(anf_arg770);
if(R.isPyretTrue(anf_if781)) {
$step659 = 20;
} else {
$step659 = 26;
}
break;
case 20: var anf_bracket771 = G(tree661,"right",L[309]);
var anf_method_obj772 = G(anf_bracket771,"right",L[310]);
$step659 = 21;
$al663 = L[311];
$field773 = R.getColonFieldLoc(anf_method_obj772,"height",L[311]);
if(R.isMethod($field773)) {
$ans662 = $field773.full_meth(anf_method_obj772);
} else {
if(!(R.isFunction($field773))) {
R.ffi.throwNonFunApp(L[311],$field773);
}
$ans662 = $field773.app();
}
break;
case 21: var anf_arg777 = $ans662;
var anf_bracket774 = G(tree661,"right",L[312]);
var anf_method_obj775 = G(anf_bracket774,"left",L[313]);
$step659 = 22;
$al663 = L[314];
$field776 = R.getColonFieldLoc(anf_method_obj775,"height",L[314]);
if(R.isMethod($field776)) {
$ans662 = $field776.full_meth(anf_method_obj775);
} else {
if(!(R.isFunction($field776))) {
R.ffi.throwNonFunApp(L[314],$field776);
}
$ans662 = $field776.app();
}
break;
case 22: var anf_arg778 = $ans662;
$step659 = 23;
$al663 = L[315];
if(!(R.isFunction(_greaterequal12))) {
R.ffi.throwNonFunApp($al663,_greaterequal12);
}
$ans662 = _greaterequal12.app(anf_arg777,anf_arg778);
break;
case 23: var anf_arg779 = $ans662;
$al663 = L[315];
var anf_if780 = R.checkWrapBoolean(anf_arg779);
if(R.isPyretTrue(anf_if780)) {
$step659 = 24;
} else {
$step659 = 25;
}
break;
case 24: $step659 = 27;
$al663 = L[316];
if(!(R.isFunction(right$right697.$var))) {
R.ffi.throwNonFunApp($al663,right$right697.$var);
}
$ans662 = right$right697.$var.app(tree661);
break;
case 25: $step659 = 27;
$al663 = L[317];
if(!(R.isFunction(right$left747.$var))) {
R.ffi.throwNonFunApp($al663,right$left747.$var);
}
$ans662 = right$left747.$var.app(tree661);
break;
case 26: $step659 = 27;
$al663 = L[318];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al663,raise11);
}
$ans662 = raise11.app(("AVL tree invariant has been broken!"));
break;
case 27: ++R.GAS;
return $ans662;
default: throw "No case numbered " + $step659 + " in $temp_lam660";
}
}
} catch($e784) {
if(R.isCont($e784) && ($step659 !== 27)) {
$e784.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al663,$temp_lam660,$step659,[tree661],[anf_arg777,anf_arg765,rh753,lh752,right$left747,left$right722,right$right697,left$left680]);
}
if(R.isPyretException($e784)) {
$e784.pyretStack.push($al663);
}
throw $e784;
}
};
var anf_assign785 = R.makeFunction($temp_lam660);
rebalance262.$var = anf_assign785;
var $temp_lam787 = function($tree788) {
var $step786 = 0;
var $ans789 = D;
var $al790 = L[338];
try {
if(R.isActivationRecord($tree788)) {
$step786 = $tree788.step;
$al790 = $tree788.from;
$ans789 = $tree788.ans;
tree788 = $tree788.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[338],1,$t);
}
var tree788 = $tree788;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step786) {
case 0: $step786 = 1;
$al790 = L[337];
R._checkAnn(L[337],AVLTree99,tree788);
break;
case 1: var anf_arg791 = G(tree788,"left",L[327]);
$step786 = 2;
$al790 = L[328];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg791);
break;
case 2: var anf_arg792 = $ans789;
$al790 = L[328];
var anf_if800 = R.checkWrapBoolean(anf_arg792);
if(R.isPyretTrue(anf_if800)) {
$step786 = 3;
} else {
$step786 = 7;
}
break;
case 3: var anf_arg793 = G(tree788,"right",L[329]);
$step786 = 4;
$al790 = L[330];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg793);
break;
case 4: var anf_arg794 = $ans789;
$al790 = L[330];
var anf_if795 = R.checkWrapBoolean(anf_arg794);
if(R.isPyretTrue(anf_if795)) {
$step786 = 5;
} else {
$step786 = 6;
}
break;
case 5: $step786 = 11;
$ans789 = leaf97.$var;
break;
case 6: $step786 = 11;
$ans789 = G(tree788,"right",L[331]);
break;
case 7: var anf_arg796 = G(tree788,"right",L[332]);
$step786 = 8;
$al790 = L[333];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg796);
break;
case 8: var anf_arg797 = $ans789;
$al790 = L[333];
var anf_if799 = R.checkWrapBoolean(anf_arg797);
if(R.isPyretTrue(anf_if799)) {
$step786 = 9;
} else {
$step786 = 10;
}
break;
case 9: $step786 = 11;
$ans789 = G(tree788,"left",L[334]);
break;
case 10: $step786 = 11;
$al790 = L[336];
if(!(R.isFunction(swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var))) {
R.ffi.throwNonFunApp($al790,swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var);
}
$ans789 = swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var.app(tree788);
break;
case 11: ++R.GAS;
return $ans789;
default: throw "No case numbered " + $step786 + " in $temp_lam787";
}
}
} catch($e801) {
if(R.isCont($e801) && ($step786 !== 11)) {
$e801.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al790,$temp_lam787,$step786,[tree788],[]);
}
if(R.isPyretException($e801)) {
$e801.pyretStack.push($al790);
}
throw $e801;
}
};
var anf_assign802 = R.makeFunction($temp_lam787);
remove$root282.$var = anf_assign802;
var $temp_lam804 = function($tree805) {
var $step803 = 0;
var $ans806 = D;
var $al807 = L[367];
try {
if(R.isActivationRecord($tree805)) {
$step803 = $tree805.step;
$al807 = $tree805.from;
$ans806 = $tree805.ans;
tree805 = $tree805.args[0];
anf_arg851 = $tree805.vars[0];
remove$greatest$and$rebalance834 = $tree805.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[367],1,$t);
}
var tree805 = $tree805;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step803) {
case 0: $step803 = 1;
$al807 = L[366];
R._checkAnn(L[366],AVLTree99,tree805);
break;
case 1: var greatest816 = {"$var":D};
var remove$greatest$and$rebalance834 = {"$var":D};
var $temp_lam809 = function($t810) {
var $step808 = 0;
var $ans811 = D;
var $al812 = L[346];
try {
if(R.isActivationRecord($t810)) {
$step808 = $t810.step;
$al812 = $t810.from;
$ans811 = $t810.ans;
t810 = $t810.args[0];
right814 = $t810.vars[0];
cases813 = $t810.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[346],1,$t);
}
var t810 = $t810;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step808) {
case 0: var cases813 = t810;
$step808 = 1;
$al812 = L[345];
R._checkAnn(L[345],AVLTree99,cases813);
break;
case 1: var $cases_dispatch822 = {"leaf":2,
"branch":3};
$al812 = L[344];
$step808 = $cases_dispatch822[cases813.$name] || 7;
break;
case 2: if(cases813.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[340],false);
}
$step808 = 8;
$al812 = L[339];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al812,raise11);
}
$ans811 = raise11.app(("Went too far in traversal step"));
break;
case 3: if(cases813.$arity >= 0) {
if(4 !== cases813.$arity) {
R.ffi.throwCasesArityErrorC(L[343],4,cases813.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[343],true);
}
var $fn818 = cases813.$constructor.$fieldNames;
R.derefField(cases813.dict[$fn818[0]],cases813.$mut_fields_mask[0],false);
R.derefField(cases813.dict[$fn818[1]],cases813.$mut_fields_mask[1],false);
R.derefField(cases813.dict[$fn818[2]],cases813.$mut_fields_mask[2],false);
var right814 = R.derefField(cases813.dict[$fn818[3]],cases813.$mut_fields_mask[3],false);
$step808 = 4;
$al812 = L[341];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al812,is$leaf607.$var);
}
$ans811 = is$leaf607.$var.app(right814);
break;
case 4: var anf_arg815 = $ans811;
$al812 = L[341];
var anf_if817 = R.checkWrapBoolean(anf_arg815);
if(R.isPyretTrue(anf_if817)) {
$step808 = 5;
} else {
$step808 = 6;
}
break;
case 5: $step808 = 8;
$ans811 = t810;
break;
case 6: $step808 = 8;
$al812 = L[342];
if(!(R.isFunction(greatest816.$var))) {
R.ffi.throwNonFunApp($al812,greatest816.$var);
}
$ans811 = greatest816.$var.app(right814);
break;
case 7: $step808 = 8;
$al812 = L[344];
$ans811 = R.throwNoCasesMatched(L[344],cases813);
break;
case 8: ++R.GAS;
return $ans811;
default: throw "No case numbered " + $step808 + " in $temp_lam809";
}
}
} catch($e823) {
if(R.isCont($e823) && ($step808 !== 8)) {
$e823.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al812,$temp_lam809,$step808,[t810],[right814,cases813]);
}
if(R.isPyretException($e823)) {
$e823.pyretStack.push($al812);
}
throw $e823;
}
};
var anf_assign824 = R.makeFunction($temp_lam809);
greatest816.$var = anf_assign824;
var $temp_lam826 = function($t827) {
var $step825 = 0;
var $ans828 = D;
var $al829 = L[357];
try {
if(R.isActivationRecord($t827)) {
$step825 = $t827.step;
$al829 = $t827.from;
$ans828 = $t827.ans;
t827 = $t827.args[0];
cases830 = $t827.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[357],1,$t);
}
var t827 = $t827;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step825) {
case 0: var cases830 = t827;
$step825 = 1;
$al829 = L[356];
R._checkAnn(L[356],AVLTree99,cases830);
break;
case 1: var $cases_dispatch845 = {"leaf":2,
"branch":3};
$al829 = L[355];
$step825 = $cases_dispatch845[cases830.$name] || 4;
break;
case 2: if(cases830.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[348],false);
}
$step825 = 5;
$al829 = L[347];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al829,raise11);
}
$ans828 = raise11.app(("Went too far in removal step"));
break;
case 3: if(cases830.$arity >= 0) {
if(4 !== cases830.$arity) {
R.ffi.throwCasesArityErrorC(L[353],4,cases830.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[353],true);
}
$step825 = 5;
$al829 = L[354];
var $temp_branch839 = function($val835,$$underscore843,$left833,$right831) {
var $step840 = 0;
var $ans841 = D;
var $al842 = L[349];
try {
if(R.isActivationRecord($val835)) {
$step840 = $val835.step;
$al842 = $val835.from;
$ans841 = $val835.ans;
val835 = $val835.args[0];
$underscore843 = $val835.args[1];
left833 = $val835.args[2];
right831 = $val835.args[3];
} else {
var val835 = $val835;
var $underscore843 = $$underscore843;
var left833 = $left833;
var right831 = $right831;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step840) {
case 0: $step840 = 1;
$al842 = L[349];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al842,is$leaf607.$var);
}
$ans841 = is$leaf607.$var.app(right831);
break;
case 1: var anf_arg832 = $ans841;
$al842 = L[349];
var anf_if838 = R.checkWrapBoolean(anf_arg832);
if(R.isPyretTrue(anf_if838)) {
$step840 = 2;
} else {
$step840 = 3;
}
break;
case 2: $step840 = 6;
$ans841 = left833;
break;
case 3: $step840 = 4;
$al842 = L[352];
if(!(R.isFunction(remove$greatest$and$rebalance834.$var))) {
R.ffi.throwNonFunApp($al842,remove$greatest$and$rebalance834.$var);
}
$ans841 = remove$greatest$and$rebalance834.$var.app(right831);
break;
case 4: var anf_arg836 = $ans841;
$step840 = 5;
$al842 = L[351];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al842,mkbranch96.$var);
}
$ans841 = mkbranch96.$var.app(val835,left833,anf_arg836);
break;
case 5: var anf_arg837 = $ans841;
$step840 = 6;
$al842 = L[350];
if(!(R.isFunction(rebalance262.$var))) {
R.ffi.throwNonFunApp($al842,rebalance262.$var);
}
$ans841 = rebalance262.$var.app(anf_arg837);
break;
case 6: ++R.GAS;
return $ans841;
default: throw "No case numbered " + $step840 + " in $temp_branch839";
}
}
} catch($e844) {
if(R.isCont($e844) && ($step840 !== 6)) {
$e844.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al842,$temp_branch839,$step840,[val835,$underscore843,left833,right831],[]);
}
if(R.isPyretException($e844)) {
$e844.pyretStack.push($al842);
}
throw $e844;
}
};
$ans828 = cases830.$app_fields($temp_branch839,[false,false,false,false]);
break;
case 4: $step825 = 5;
$al829 = L[355];
$ans828 = R.throwNoCasesMatched(L[355],cases830);
break;
case 5: ++R.GAS;
return $ans828;
default: throw "No case numbered " + $step825 + " in $temp_lam826";
}
}
} catch($e846) {
if(R.isCont($e846) && ($step825 !== 5)) {
$e846.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al829,$temp_lam826,$step825,[t827],[cases830]);
}
if(R.isPyretException($e846)) {
$e846.pyretStack.push($al829);
}
throw $e846;
}
};
var anf_assign847 = R.makeFunction($temp_lam826);
remove$greatest$and$rebalance834.$var = anf_assign847;
var anf_arg848 = G(tree805,"left",L[358]);
$step803 = 2;
$al807 = L[365];
if(!(R.isFunction(greatest816.$var))) {
R.ffi.throwNonFunApp($al807,greatest816.$var);
}
$ans806 = greatest816.$var.app(anf_arg848);
break;
case 2: var anf_bracket849 = $ans806;
var anf_arg851 = G(anf_bracket849,"value",L[359]);
var anf_arg850 = G(tree805,"left",L[360]);
$step803 = 3;
$al807 = L[364];
if(!(R.isFunction(remove$greatest$and$rebalance834.$var))) {
R.ffi.throwNonFunApp($al807,remove$greatest$and$rebalance834.$var);
}
$ans806 = remove$greatest$and$rebalance834.$var.app(anf_arg850);
break;
case 3: var anf_arg852 = $ans806;
var anf_arg853 = G(tree805,"right",L[361]);
$step803 = 4;
$al807 = L[363];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al807,mkbranch96.$var);
}
$ans806 = mkbranch96.$var.app(anf_arg851,anf_arg852,anf_arg853);
break;
case 4: var anf_arg854 = $ans806;
$step803 = 5;
$al807 = L[362];
if(!(R.isFunction(rebalance262.$var))) {
R.ffi.throwNonFunApp($al807,rebalance262.$var);
}
$ans806 = rebalance262.$var.app(anf_arg854);
break;
case 5: ++R.GAS;
return $ans806;
default: throw "No case numbered " + $step803 + " in $temp_lam804";
}
}
} catch($e855) {
if(R.isCont($e855) && ($step803 !== 5)) {
$e855.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al807,$temp_lam804,$step803,[tree805],[anf_arg851,remove$greatest$and$rebalance834]);
}
if(R.isPyretException($e855)) {
$e855.pyretStack.push($al807);
}
throw $e855;
}
};
var anf_assign856 = R.makeFunction($temp_lam804);
swap$next$lowest798.$var = anf_assign856;
nothing13;
var Set1423 = {"$var":D};
var Set878 = {"$var":D};
var is$Set1426 = {"$var":D};
var is$list$set1428 = {"$var":D};
var list$set919 = {"$var":D};
var is$tree$set1431 = {"$var":D};
var tree$set1180 = {"$var":D};
var set$to$sorted$elems1446 = {"$var":D};
var elems$to$balanced$avl1481 = {"$var":D};
var merge$no$dups1493 = {"$var":D};
var tree$set$union1302 = {"$var":D};
var merge$only$dups1535 = {"$var":D};
var tree$set$intersect1310 = {"$var":D};
var merge$drop$l21576 = {"$var":D};
var tree$set$difference1328 = {"$var":D};
var set$all1615 = {"$var":D};
var set$any1626 = {"$var":D};
var set$fold1637 = {"$var":D};
var list$to$set1657 = {"$var":D};
var list$to$list$set1667 = {"$var":D};
var list$to$tree$set1677 = {"$var":D};
var list$to$tree1695 = {"$var":D};
var arr$to$list$set1715 = {"$var":D};
var arr$to$tree$set1735 = {"$var":D};
var $temp_full858 = function($self859,$other860) {
var $step857 = 0;
var $ans861 = D;
var $al862 = L[374];
try {
if(R.isActivationRecord($self859)) {
$step857 = $self859.step;
$al862 = $self859.from;
$ans861 = $self859.ans;
self859 = $self859.args[0];
other860 = $self859.args[1];
ann_check_temp868 = $self859.vars[0];
anf_method_obj865 = $self859.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[374],2,$t);
}
var self859 = $self859;
var other860 = $other860;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step857) {
case 0: $step857 = 1;
$al862 = L[372];
R._checkAnn(L[372],Set869,self859);
break;
case 1: $step857 = 2;
$al862 = L[373];
R._checkAnn(L[373],Set869,other860);
break;
case 2: $step857 = 3;
$al862 = L[368];
$field863 = R.getColonFieldLoc(self859,"union",L[368]);
if(R.isMethod($field863)) {
$ans861 = $field863.full_meth(self859,other860);
} else {
if(!(R.isFunction($field863))) {
R.ffi.throwNonFunApp(L[368],$field863);
}
$ans861 = $field863.app(other860);
}
break;
case 3: var anf_method_obj865 = $ans861;
$step857 = 4;
$al862 = L[369];
$field864 = R.getColonFieldLoc(self859,"intersect",L[369]);
if(R.isMethod($field864)) {
$ans861 = $field864.full_meth(self859,other860);
} else {
if(!(R.isFunction($field864))) {
R.ffi.throwNonFunApp(L[369],$field864);
}
$ans861 = $field864.app(other860);
}
break;
case 4: var anf_arg866 = $ans861;
$step857 = 5;
$al862 = L[370];
$field867 = R.getColonFieldLoc(anf_method_obj865,"difference",L[370]);
if(R.isMethod($field867)) {
$ans861 = $field867.full_meth(anf_method_obj865,anf_arg866);
} else {
if(!(R.isFunction($field867))) {
R.ffi.throwNonFunApp(L[370],$field867);
}
$ans861 = $field867.app(anf_arg866);
}
break;
case 5: var ann_check_temp868 = $ans861;
$step857 = 6;
$al862 = L[371];
R._checkAnn(L[371],Set869,ann_check_temp868);
break;
case 6: $step857 = 7;
$ans861 = ann_check_temp868;
break;
case 7: ++R.GAS;
return $ans861;
default: throw "No case numbered " + $step857 + " in $temp_full858";
}
}
} catch($e870) {
if(R.isCont($e870) && ($step857 !== 7)) {
$e870.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al862,$temp_full858,$step857,[self859,other860],[ann_check_temp868,anf_method_obj865]);
}
if(R.isPyretException($e870)) {
$e870.pyretStack.push($al862);
}
throw $e870;
}
};
var anf_shared1367 = R.makeMethod1($temp_full858);
var $temp_full872 = function($self873,$other874,$eq875) {
var $step871 = 0;
var $ans876 = D;
var $al877 = L[390];
try {
if(R.isActivationRecord($self873)) {
$step871 = $self873.step;
$al877 = $self873.from;
$ans876 = $self873.ans;
self873 = $self873.args[0];
other874 = $self873.args[1];
eq875 = $self873.args[2];
anf_arg888 = $self873.vars[0];
other$list884 = $self873.vars[1];
self$list886 = $self873.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[390],3,$t);
}
var self873 = $self873;
var other874 = $other874;
var eq875 = $eq875;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step871) {
case 0: $step871 = 1;
$al877 = L[389];
if(!(R.isFunction(Set878.$var === D?U(L[375],"Set"):Set878.$var))) {
R.ffi.throwNonFunApp($al877,Set878.$var === D?U(L[375],"Set"):Set878.$var);
}
$ans876 = Set878.$var === D?U(L[375],"Set"):Set878.$var.app(other874);
break;
case 1: var anf_arg879 = $ans876;
$step871 = 2;
$al877 = L[376];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al877,not1);
}
$ans876 = not1.app(anf_arg879);
break;
case 2: var anf_arg880 = $ans876;
$al877 = L[376];
var anf_if907 = R.checkWrapBoolean(anf_arg880);
if(R.isPyretTrue(anf_if907)) {
$step871 = 3;
} else {
$step871 = 4;
}
break;
case 3: $step871 = 13;
$al877 = L[377];
$field881 = R.getColonFieldLoc(equality22,"NotEqual",L[377]);
if(R.isMethod($field881)) {
$ans876 = $field881.full_meth(equality22,("Non-Set"),self873,other874);
} else {
if(!(R.isFunction($field881))) {
R.ffi.throwNonFunApp(L[377],$field881);
}
$ans876 = $field881.app(("Non-Set"),self873,other874);
}
break;
case 4: $step871 = 5;
$al877 = L[378];
$field882 = R.getColonFieldLoc(self873,"to-list",L[378]);
if(R.isMethod($field882)) {
$ans876 = $field882.full_meth(self873);
} else {
if(!(R.isFunction($field882))) {
R.ffi.throwNonFunApp(L[378],$field882);
}
$ans876 = $field882.app();
}
break;
case 5: var self$list886 = $ans876;
$step871 = 6;
$al877 = L[379];
$field883 = R.getColonFieldLoc(other874,"to-list",L[379]);
if(R.isMethod($field883)) {
$ans876 = $field883.full_meth(other874);
} else {
if(!(R.isFunction($field883))) {
R.ffi.throwNonFunApp(L[379],$field883);
}
$ans876 = $field883.app();
}
break;
case 6: var other$list884 = $ans876;
$step871 = 7;
$al877 = L[380];
$field885 = R.getColonFieldLoc(other$list884,"length",L[380]);
if(R.isMethod($field885)) {
$ans876 = $field885.full_meth(other$list884);
} else {
if(!(R.isFunction($field885))) {
R.ffi.throwNonFunApp(L[380],$field885);
}
$ans876 = $field885.app();
}
break;
case 7: var anf_arg888 = $ans876;
$step871 = 8;
$al877 = L[381];
$field887 = R.getColonFieldLoc(self$list886,"length",L[381]);
if(R.isMethod($field887)) {
$ans876 = $field887.full_meth(self$list886);
} else {
if(!(R.isFunction($field887))) {
R.ffi.throwNonFunApp(L[381],$field887);
}
$ans876 = $field887.app();
}
break;
case 8: var anf_arg889 = $ans876;
$step871 = 9;
$al877 = L[388];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al877,equal$always4);
}
$ans876 = equal$always4.app(anf_arg888,anf_arg889);
break;
case 9: var anf_arg890 = $ans876;
$step871 = 10;
$al877 = L[382];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al877,not1);
}
$ans876 = not1.app(anf_arg890);
break;
case 10: var anf_arg891 = $ans876;
$al877 = L[382];
var anf_if906 = R.checkWrapBoolean(anf_arg891);
if(R.isPyretTrue(anf_if906)) {
$step871 = 11;
} else {
$step871 = 12;
}
break;
case 11: $step871 = 13;
$al877 = L[383];
$field892 = R.getColonFieldLoc(equality22,"NotEqual",L[383]);
if(R.isMethod($field892)) {
$ans876 = $field892.full_meth(equality22,("set size"),self873,other874);
} else {
if(!(R.isFunction($field892))) {
R.ffi.throwNonFunApp(L[383],$field892);
}
$ans876 = $field892.app(("set size"),self873,other874);
}
break;
case 12: var $temp_lam894 = function($result895,$elt896) {
var $step893 = 0;
var $ans897 = D;
var $al898 = L[386];
try {
if(R.isActivationRecord($result895)) {
$step893 = $result895.step;
$al898 = $result895.from;
$ans897 = $result895.ans;
result895 = $result895.args[0];
elt896 = $result895.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[386],2,$t);
}
var result895 = $result895;
var elt896 = $elt896;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step893) {
case 0: $step893 = 1;
$al898 = L[384];
$field899 = R.getColonFieldLoc(lists24,"member-with",L[384]);
if(R.isMethod($field899)) {
$ans897 = $field899.full_meth(lists24,other$list884,elt896,eq875);
} else {
if(!(R.isFunction($field899))) {
R.ffi.throwNonFunApp(L[384],$field899);
}
$ans897 = $field899.app(other$list884,elt896,eq875);
}
break;
case 1: var result$for$elt900 = $ans897;
$step893 = 2;
$al898 = L[385];
$field901 = R.getColonFieldLoc(equality22,"equal-and",L[385]);
if(R.isMethod($field901)) {
$ans897 = $field901.full_meth(equality22,result895,result$for$elt900);
} else {
if(!(R.isFunction($field901))) {
R.ffi.throwNonFunApp(L[385],$field901);
}
$ans897 = $field901.app(result895,result$for$elt900);
}
break;
case 2: ++R.GAS;
return $ans897;
default: throw "No case numbered " + $step893 + " in $temp_lam894";
}
}
} catch($e902) {
if(R.isCont($e902) && ($step893 !== 2)) {
$e902.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al898,$temp_lam894,$step893,[result895,elt896],[]);
}
if(R.isPyretException($e902)) {
$e902.pyretStack.push($al898);
}
throw $e902;
}
};
var anf_arg904 = R.makeFunction($temp_lam894);
var anf_arg905 = G(equality22,"Equal",L[387]);
$step871 = 13;
$al877 = L[386];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al877,fold903);
}
$ans876 = fold903.app(anf_arg904,anf_arg905,self$list886);
break;
case 13: ++R.GAS;
return $ans876;
default: throw "No case numbered " + $step871 + " in $temp_full872";
}
}
} catch($e908) {
if(R.isCont($e908) && ($step871 !== 13)) {
$e908.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al877,$temp_full872,$step871,[self873,other874,eq875],[anf_arg888,other$list884,self$list886]);
}
if(R.isPyretException($e908)) {
$e908.pyretStack.push($al877);
}
throw $e908;
}
};
var anf_shared1368 = R.makeMethod2($temp_full872);
var $temp_full910 = function($self911) {
var $step909 = 0;
var $ans912 = D;
var $al913 = L[415];
try {
if(R.isActivationRecord($self911)) {
$step909 = $self911.step;
$al913 = $self911.from;
$ans912 = $self911.ans;
self911 = $self911.args[0];
cases915 = $self911.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[415],1,$t);
}
var self911 = $self911;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step909) {
case 0: var lst914 = G(self911,"elems",L[391]);
var cases915 = lst914;
$step909 = 1;
$al913 = L[414];
R._checkAnn(L[414],List937,cases915);
break;
case 1: var $cases_dispatch949 = {"empty":2,
"link":3};
$al913 = L[413];
$step909 = $cases_dispatch949[cases915.$name] || 4;
break;
case 2: if(cases915.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[392],false);
}
$step909 = 5;
$ans912 = pick$none916;
break;
case 3: if(cases915.$arity >= 0) {
if(2 !== cases915.$arity) {
R.ffi.throwCasesArityErrorC(L[411],2,cases915.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[411],true);
}
$step909 = 5;
$al913 = L[412];
var $temp_branch938 = function($f921,$r917) {
var $step939 = 0;
var $ans940 = D;
var $al941 = L[409];
try {
if(R.isActivationRecord($f921)) {
$step939 = $f921.step;
$al941 = $f921.from;
$ans940 = $f921.ans;
f921 = $f921.args[0];
r917 = $f921.args[1];
cases918 = $f921.vars[0];
} else {
var f921 = $f921;
var r917 = $r917;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step939) {
case 0: var cases918 = r917;
$step939 = 1;
$al941 = L[410];
R._checkAnn(L[410],List937,cases918);
break;
case 1: var $cases_dispatch947 = {"empty":2,
"link":4};
$al941 = L[409];
$step939 = $cases_dispatch947[cases918.$name] || 5;
break;
case 2: if(cases918.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[396],false);
}
$step939 = 3;
$al941 = L[395];
if(!(R.isFunction(list$set919.$var === D?U(L[393],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al941,list$set919.$var === D?U(L[393],"list-set"):list$set919.$var);
}
$ans940 = list$set919.$var === D?U(L[393],"list-set"):list$set919.$var.app(empty114);
break;
case 3: var anf_arg922 = $ans940;
$step939 = 6;
$al941 = L[394];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al941,pick$some920);
}
$ans940 = pick$some920.app(f921,anf_arg922);
break;
case 4: if(cases918.$arity >= 0) {
if(2 !== cases918.$arity) {
R.ffi.throwCasesArityErrorC(L[407],2,cases918.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[407],true);
}
$step939 = 6;
$al941 = L[408];
var $temp_branch942 = function($f2928,$r2926) {
var $step943 = 0;
var $ans944 = D;
var $al945 = L[406];
try {
if(R.isActivationRecord($f2928)) {
$step943 = $f2928.step;
$al945 = $f2928.from;
$ans944 = $f2928.ans;
f2928 = $f2928.args[0];
r2926 = $f2928.args[1];
} else {
var f2928 = $f2928;
var r2926 = $r2926;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step943) {
case 0: $step943 = 1;
$al945 = L[405];
if(!(R.isFunction(random14))) {
R.ffi.throwNonFunApp($al945,random14);
}
$ans944 = random14.app((2));
break;
case 1: var get$first923 = $ans944;
$step943 = 2;
$al945 = L[397];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al945,equal$always4);
}
$ans944 = equal$always4.app(get$first923,(0));
break;
case 2: var anf_arg924 = $ans944;
$al945 = L[397];
var anf_if930 = R.checkWrapBoolean(anf_arg924);
if(R.isPyretTrue(anf_if930)) {
$step943 = 3;
} else {
$step943 = 5;
}
break;
case 3: $step943 = 4;
$al945 = L[400];
if(!(R.isFunction(list$set919.$var === D?U(L[398],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al945,list$set919.$var === D?U(L[398],"list-set"):list$set919.$var);
}
$ans944 = list$set919.$var === D?U(L[398],"list-set"):list$set919.$var.app(r917);
break;
case 4: var anf_arg925 = $ans944;
$step943 = 8;
$al945 = L[399];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al945,pick$some920);
}
$ans944 = pick$some920.app(f921,anf_arg925);
break;
case 5: $step943 = 6;
$al945 = L[404];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al945,link312);
}
$ans944 = link312.app(f921,r2926);
break;
case 6: var anf_arg927 = $ans944;
$step943 = 7;
$al945 = L[403];
if(!(R.isFunction(list$set919.$var === D?U(L[401],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al945,list$set919.$var === D?U(L[401],"list-set"):list$set919.$var);
}
$ans944 = list$set919.$var === D?U(L[401],"list-set"):list$set919.$var.app(anf_arg927);
break;
case 7: var anf_arg929 = $ans944;
$step943 = 8;
$al945 = L[402];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al945,pick$some920);
}
$ans944 = pick$some920.app(f2928,anf_arg929);
break;
case 8: ++R.GAS;
return $ans944;
default: throw "No case numbered " + $step943 + " in $temp_branch942";
}
}
} catch($e946) {
if(R.isCont($e946) && ($step943 !== 8)) {
$e946.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al945,$temp_branch942,$step943,[f2928,r2926],[]);
}
if(R.isPyretException($e946)) {
$e946.pyretStack.push($al945);
}
throw $e946;
}
};
$ans940 = cases918.$app_fields($temp_branch942,[false,false]);
break;
case 5: $step939 = 6;
$al941 = L[409];
$ans940 = R.throwNoCasesMatched(L[409],cases918);
break;
case 6: ++R.GAS;
return $ans940;
default: throw "No case numbered " + $step939 + " in $temp_branch938";
}
}
} catch($e948) {
if(R.isCont($e948) && ($step939 !== 6)) {
$e948.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al941,$temp_branch938,$step939,[f921,r917],[cases918]);
}
if(R.isPyretException($e948)) {
$e948.pyretStack.push($al941);
}
throw $e948;
}
};
$ans912 = cases915.$app_fields($temp_branch938,[false,false]);
break;
case 4: $step909 = 5;
$al913 = L[413];
$ans912 = R.throwNoCasesMatched(L[413],cases915);
break;
case 5: ++R.GAS;
return $ans912;
default: throw "No case numbered " + $step909 + " in $temp_full910";
}
}
} catch($e950) {
if(R.isCont($e950) && ($step909 !== 5)) {
$e950.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al913,$temp_full910,$step909,[self911],[cases915]);
}
if(R.isPyretException($e950)) {
$e950.pyretStack.push($al913);
}
throw $e950;
}
};
var anf_variant_member1372 = R.makeMethod0($temp_full910);
var $temp_full952 = function($self953,$tostring954) {
var $step951 = 0;
var $ans955 = D;
var $al956 = L[424];
try {
if(R.isActivationRecord($self953)) {
$step951 = $self953.step;
$al956 = $self953.from;
$ans955 = $self953.ans;
self953 = $self953.args[0];
tostring954 = $self953.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[424],2,$t);
}
var self953 = $self953;
var tostring954 = $tostring954;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step951) {
case 0: var anf_method_obj968 = G(self953,"elems",L[416]);
var $temp_lam958 = function($elem959,$acc960) {
var $step957 = 0;
var $ans961 = D;
var $al962 = L[421];
try {
if(R.isActivationRecord($elem959)) {
$step957 = $elem959.step;
$al962 = $elem959.from;
$ans961 = $elem959.ans;
elem959 = $elem959.args[0];
acc960 = $elem959.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[421],2,$t);
}
var elem959 = $elem959;
var acc960 = $acc960;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step957) {
case 0: $step957 = 1;
$al962 = L[417];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al962,equal$always4);
}
$ans961 = equal$always4.app(acc960,(""));
break;
case 1: var anf_arg963 = $ans961;
$al962 = L[417];
var anf_if966 = R.checkWrapBoolean(anf_arg963);
if(R.isPyretTrue(anf_if966)) {
$step957 = 2;
} else {
$step957 = 3;
}
break;
case 2: $step957 = 6;
$al962 = L[418];
if(!(R.isFunction(tostring954))) {
R.ffi.throwNonFunApp($al962,tostring954);
}
$ans961 = tostring954.app(elem959);
break;
case 3: $step957 = 4;
$al962 = L[420];
if(!(R.isFunction(tostring954))) {
R.ffi.throwNonFunApp($al962,tostring954);
}
$ans961 = tostring954.app(elem959);
break;
case 4: var anf_arg964 = $ans961;
$step957 = 5;
$al962 = L[419];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al962,_plus6);
}
$ans961 = _plus6.app(anf_arg964,(", "));
break;
case 5: var anf_arg965 = $ans961;
$step957 = 6;
$al962 = L[419];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al962,_plus6);
}
$ans961 = _plus6.app(anf_arg965,acc960);
break;
case 6: ++R.GAS;
return $ans961;
default: throw "No case numbered " + $step957 + " in $temp_lam958";
}
}
} catch($e967) {
if(R.isCont($e967) && ($step957 !== 6)) {
$e967.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al962,$temp_lam958,$step957,[elem959,acc960],[]);
}
if(R.isPyretException($e967)) {
$e967.pyretStack.push($al962);
}
throw $e967;
}
};
var anf_arg969 = R.makeFunction($temp_lam958);
$step951 = 1;
$al956 = L[422];
$field970 = R.getColonFieldLoc(anf_method_obj968,"foldl",L[422]);
if(R.isMethod($field970)) {
$ans955 = $field970.full_meth(anf_method_obj968,anf_arg969,(""));
} else {
if(!(R.isFunction($field970))) {
R.ffi.throwNonFunApp(L[422],$field970);
}
$ans955 = $field970.app(anf_arg969,(""));
}
break;
case 1: var anf_arg971 = $ans955;
$step951 = 2;
$al956 = L[423];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al956,_plus6);
}
$ans955 = _plus6.app(("[set: "),anf_arg971);
break;
case 2: var anf_arg972 = $ans955;
$step951 = 3;
$al956 = L[423];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al956,_plus6);
}
$ans955 = _plus6.app(anf_arg972,("]"));
break;
case 3: ++R.GAS;
return $ans955;
default: throw "No case numbered " + $step951 + " in $temp_full952";
}
}
} catch($e973) {
if(R.isCont($e973) && ($step951 !== 3)) {
$e973.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al956,$temp_full952,$step951,[self953,tostring954],[]);
}
if(R.isPyretException($e973)) {
$e973.pyretStack.push($al956);
}
throw $e973;
}
};
var anf_variant_member1373 = R.makeMethod1($temp_full952);
var $temp_full975 = function($self976,$torepr977) {
var $step974 = 0;
var $ans978 = D;
var $al979 = L[433];
try {
if(R.isActivationRecord($self976)) {
$step974 = $self976.step;
$al979 = $self976.from;
$ans978 = $self976.ans;
self976 = $self976.args[0];
torepr977 = $self976.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[433],2,$t);
}
var self976 = $self976;
var torepr977 = $torepr977;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step974) {
case 0: var anf_method_obj991 = G(self976,"elems",L[425]);
var $temp_lam981 = function($elem982,$acc983) {
var $step980 = 0;
var $ans984 = D;
var $al985 = L[430];
try {
if(R.isActivationRecord($elem982)) {
$step980 = $elem982.step;
$al985 = $elem982.from;
$ans984 = $elem982.ans;
elem982 = $elem982.args[0];
acc983 = $elem982.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[430],2,$t);
}
var elem982 = $elem982;
var acc983 = $acc983;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step980) {
case 0: $step980 = 1;
$al985 = L[426];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al985,equal$always4);
}
$ans984 = equal$always4.app(acc983,(""));
break;
case 1: var anf_arg986 = $ans984;
$al985 = L[426];
var anf_if989 = R.checkWrapBoolean(anf_arg986);
if(R.isPyretTrue(anf_if989)) {
$step980 = 2;
} else {
$step980 = 3;
}
break;
case 2: $step980 = 6;
$al985 = L[427];
if(!(R.isFunction(torepr977))) {
R.ffi.throwNonFunApp($al985,torepr977);
}
$ans984 = torepr977.app(elem982);
break;
case 3: $step980 = 4;
$al985 = L[429];
if(!(R.isFunction(torepr977))) {
R.ffi.throwNonFunApp($al985,torepr977);
}
$ans984 = torepr977.app(elem982);
break;
case 4: var anf_arg987 = $ans984;
$step980 = 5;
$al985 = L[428];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al985,_plus6);
}
$ans984 = _plus6.app(anf_arg987,(", "));
break;
case 5: var anf_arg988 = $ans984;
$step980 = 6;
$al985 = L[428];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al985,_plus6);
}
$ans984 = _plus6.app(anf_arg988,acc983);
break;
case 6: ++R.GAS;
return $ans984;
default: throw "No case numbered " + $step980 + " in $temp_lam981";
}
}
} catch($e990) {
if(R.isCont($e990) && ($step980 !== 6)) {
$e990.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al985,$temp_lam981,$step980,[elem982,acc983],[]);
}
if(R.isPyretException($e990)) {
$e990.pyretStack.push($al985);
}
throw $e990;
}
};
var anf_arg992 = R.makeFunction($temp_lam981);
$step974 = 1;
$al979 = L[431];
$field993 = R.getColonFieldLoc(anf_method_obj991,"foldl",L[431]);
if(R.isMethod($field993)) {
$ans978 = $field993.full_meth(anf_method_obj991,anf_arg992,(""));
} else {
if(!(R.isFunction($field993))) {
R.ffi.throwNonFunApp(L[431],$field993);
}
$ans978 = $field993.app(anf_arg992,(""));
}
break;
case 1: var anf_arg994 = $ans978;
$step974 = 2;
$al979 = L[432];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al979,_plus6);
}
$ans978 = _plus6.app(("[list-set: "),anf_arg994);
break;
case 2: var anf_arg995 = $ans978;
$step974 = 3;
$al979 = L[432];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al979,_plus6);
}
$ans978 = _plus6.app(anf_arg995,("]"));
break;
case 3: ++R.GAS;
return $ans978;
default: throw "No case numbered " + $step974 + " in $temp_full975";
}
}
} catch($e996) {
if(R.isCont($e996) && ($step974 !== 3)) {
$e996.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al979,$temp_full975,$step974,[self976,torepr977],[]);
}
if(R.isPyretException($e996)) {
$e996.pyretStack.push($al979);
}
throw $e996;
}
};
var anf_variant_member1374 = R.makeMethod1($temp_full975);
var $temp_full998 = function($self999) {
var $step997 = 0;
var $ans1000 = D;
var $al1001 = L[438];
try {
if(R.isActivationRecord($self999)) {
$step997 = $self999.step;
$al1001 = $self999.from;
$ans1000 = $self999.ans;
self999 = $self999.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[438],1,$t);
}
var self999 = $self999;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step997) {
case 0: $step997 = 1;
$al1001 = L[434];
$field1002 = R.getColonFieldLoc(self999,"to-list",L[434]);
if(R.isMethod($field1002)) {
$ans1000 = $field1002.full_meth(self999);
} else {
if(!(R.isFunction($field1002))) {
R.ffi.throwNonFunApp(L[434],$field1002);
}
$ans1000 = $field1002.app();
}
break;
case 1: var anf_method_obj1003 = $ans1000;
var anf_arg1004 = G(VS27,"vs-value",L[435]);
$step997 = 2;
$al1001 = L[436];
$field1005 = R.getColonFieldLoc(anf_method_obj1003,"map",L[436]);
if(R.isMethod($field1005)) {
$ans1000 = $field1005.full_meth(anf_method_obj1003,anf_arg1004);
} else {
if(!(R.isFunction($field1005))) {
R.ffi.throwNonFunApp(L[436],$field1005);
}
$ans1000 = $field1005.app(anf_arg1004);
}
break;
case 2: var anf_arg1006 = $ans1000;
$step997 = 3;
$al1001 = L[437];
$field1007 = R.getColonFieldLoc(VS27,"vs-collection",L[437]);
if(R.isMethod($field1007)) {
$ans1000 = $field1007.full_meth(VS27,("list-set"),anf_arg1006);
} else {
if(!(R.isFunction($field1007))) {
R.ffi.throwNonFunApp(L[437],$field1007);
}
$ans1000 = $field1007.app(("list-set"),anf_arg1006);
}
break;
case 3: ++R.GAS;
return $ans1000;
default: throw "No case numbered " + $step997 + " in $temp_full998";
}
}
} catch($e1008) {
if(R.isCont($e1008) && ($step997 !== 3)) {
$e1008.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1001,$temp_full998,$step997,[self999],[]);
}
if(R.isPyretException($e1008)) {
$e1008.pyretStack.push($al1001);
}
throw $e1008;
}
};
var anf_variant_member1375 = R.makeMethod0($temp_full998);
var $temp_full1010 = function($self1011,$f1012,$base1013) {
var $step1009 = 0;
var $ans1014 = D;
var $al1015 = L[442];
try {
if(R.isActivationRecord($self1011)) {
$step1009 = $self1011.step;
$al1015 = $self1011.from;
$ans1014 = $self1011.ans;
self1011 = $self1011.args[0];
f1012 = $self1011.args[1];
base1013 = $self1011.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[442],3,$t);
}
var self1011 = $self1011;
var f1012 = $f1012;
var base1013 = $base1013;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1009) {
case 0: $step1009 = 1;
$al1015 = L[441];
R._checkAnn(L[441],R.Function,f1012);
break;
case 1: var anf_arg1016 = G(self1011,"elems",L[439]);
$step1009 = 2;
$al1015 = L[440];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1015,fold903);
}
$ans1014 = fold903.app(f1012,base1013,anf_arg1016);
break;
case 2: ++R.GAS;
return $ans1014;
default: throw "No case numbered " + $step1009 + " in $temp_full1010";
}
}
} catch($e1017) {
if(R.isCont($e1017) && ($step1009 !== 2)) {
$e1017.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1015,$temp_full1010,$step1009,[self1011,f1012,base1013],[]);
}
if(R.isPyretException($e1017)) {
$e1017.pyretStack.push($al1015);
}
throw $e1017;
}
};
var anf_variant_member1376 = R.makeMethod2($temp_full1010);
var $temp_full1019 = function($self1020,$elem1021) {
var $step1018 = 0;
var $ans1022 = D;
var $al1023 = L[446];
try {
if(R.isActivationRecord($self1020)) {
$step1018 = $self1020.step;
$al1023 = $self1020.from;
$ans1022 = $self1020.ans;
self1020 = $self1020.args[0];
elem1021 = $self1020.args[1];
ann_check_temp1026 = $self1020.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[446],2,$t);
}
var self1020 = $self1020;
var elem1021 = $elem1021;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1018) {
case 0: var anf_method_obj1024 = G(self1020,"elems",L[443]);
$step1018 = 1;
$al1023 = L[444];
$field1025 = R.getColonFieldLoc(anf_method_obj1024,"member",L[444]);
if(R.isMethod($field1025)) {
$ans1022 = $field1025.full_meth(anf_method_obj1024,elem1021);
} else {
if(!(R.isFunction($field1025))) {
R.ffi.throwNonFunApp(L[444],$field1025);
}
$ans1022 = $field1025.app(elem1021);
}
break;
case 1: var ann_check_temp1026 = $ans1022;
$step1018 = 2;
$al1023 = L[445];
R._checkAnn(L[445],$type$Boolean3,ann_check_temp1026);
break;
case 2: $step1018 = 3;
$ans1022 = ann_check_temp1026;
break;
case 3: ++R.GAS;
return $ans1022;
default: throw "No case numbered " + $step1018 + " in $temp_full1019";
}
}
} catch($e1027) {
if(R.isCont($e1027) && ($step1018 !== 3)) {
$e1027.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1023,$temp_full1019,$step1018,[self1020,elem1021],[ann_check_temp1026]);
}
if(R.isPyretException($e1027)) {
$e1027.pyretStack.push($al1023);
}
throw $e1027;
}
};
var anf_variant_member1377 = R.makeMethod1($temp_full1019);
var $temp_full1029 = function($self1030,$elem1031) {
var $step1028 = 0;
var $ans1032 = D;
var $al1033 = L[455];
try {
if(R.isActivationRecord($self1030)) {
$step1028 = $self1030.step;
$al1033 = $self1030.from;
$ans1032 = $self1030.ans;
self1030 = $self1030.args[0];
elem1031 = $self1030.args[1];
ann_check_temp1039 = $self1030.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[455],2,$t);
}
var self1030 = $self1030;
var elem1031 = $elem1031;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1028) {
case 0: var anf_method_obj1034 = G(self1030,"elems",L[447]);
$step1028 = 1;
$al1033 = L[448];
$field1035 = R.getColonFieldLoc(anf_method_obj1034,"member",L[448]);
if(R.isMethod($field1035)) {
$ans1032 = $field1035.full_meth(anf_method_obj1034,elem1031);
} else {
if(!(R.isFunction($field1035))) {
R.ffi.throwNonFunApp(L[448],$field1035);
}
$ans1032 = $field1035.app(elem1031);
}
break;
case 1: var anf_arg1036 = $ans1032;
$al1033 = L[449];
var anf_if1040 = R.checkWrapBoolean(anf_arg1036);
if(R.isPyretTrue(anf_if1040)) {
$step1028 = 2;
} else {
$step1028 = 3;
}
break;
case 2: $step1028 = 5;
$ans1032 = self1030;
break;
case 3: var anf_arg1037 = G(self1030,"elems",L[450]);
$step1028 = 4;
$al1033 = L[453];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1033,link312);
}
$ans1032 = link312.app(elem1031,anf_arg1037);
break;
case 4: var anf_arg1038 = $ans1032;
$step1028 = 5;
$al1033 = L[452];
if(!(R.isFunction(list$set919.$var === D?U(L[451],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1033,list$set919.$var === D?U(L[451],"list-set"):list$set919.$var);
}
$ans1032 = list$set919.$var === D?U(L[451],"list-set"):list$set919.$var.app(anf_arg1038);
break;
case 5: var ann_check_temp1039 = $ans1032;
$step1028 = 6;
$al1033 = L[454];
R._checkAnn(L[454],Set869,ann_check_temp1039);
break;
case 6: $step1028 = 7;
$ans1032 = ann_check_temp1039;
break;
case 7: ++R.GAS;
return $ans1032;
default: throw "No case numbered " + $step1028 + " in $temp_full1029";
}
}
} catch($e1041) {
if(R.isCont($e1041) && ($step1028 !== 7)) {
$e1041.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1033,$temp_full1029,$step1028,[self1030,elem1031],[ann_check_temp1039]);
}
if(R.isPyretException($e1041)) {
$e1041.pyretStack.push($al1033);
}
throw $e1041;
}
};
var anf_variant_member1378 = R.makeMethod1($temp_full1029);
var $temp_full1043 = function($self1044,$elem1045) {
var $step1042 = 0;
var $ans1046 = D;
var $al1047 = L[461];
try {
if(R.isActivationRecord($self1044)) {
$step1042 = $self1044.step;
$al1047 = $self1044.from;
$ans1046 = $self1044.ans;
self1044 = $self1044.args[0];
elem1045 = $self1044.args[1];
ann_check_temp1051 = $self1044.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[461],2,$t);
}
var self1044 = $self1044;
var elem1045 = $elem1045;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1042) {
case 0: var anf_method_obj1048 = G(self1044,"elems",L[456]);
$step1042 = 1;
$al1047 = L[457];
$field1049 = R.getColonFieldLoc(anf_method_obj1048,"remove",L[457]);
if(R.isMethod($field1049)) {
$ans1046 = $field1049.full_meth(anf_method_obj1048,elem1045);
} else {
if(!(R.isFunction($field1049))) {
R.ffi.throwNonFunApp(L[457],$field1049);
}
$ans1046 = $field1049.app(elem1045);
}
break;
case 1: var anf_arg1050 = $ans1046;
$step1042 = 2;
$al1047 = L[460];
if(!(R.isFunction(list$set919.$var === D?U(L[458],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1047,list$set919.$var === D?U(L[458],"list-set"):list$set919.$var);
}
$ans1046 = list$set919.$var === D?U(L[458],"list-set"):list$set919.$var.app(anf_arg1050);
break;
case 2: var ann_check_temp1051 = $ans1046;
$step1042 = 3;
$al1047 = L[459];
R._checkAnn(L[459],Set869,ann_check_temp1051);
break;
case 3: $step1042 = 4;
$ans1046 = ann_check_temp1051;
break;
case 4: ++R.GAS;
return $ans1046;
default: throw "No case numbered " + $step1042 + " in $temp_full1043";
}
}
} catch($e1052) {
if(R.isCont($e1052) && ($step1042 !== 4)) {
$e1052.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1047,$temp_full1043,$step1042,[self1044,elem1045],[ann_check_temp1051]);
}
if(R.isPyretException($e1052)) {
$e1052.pyretStack.push($al1047);
}
throw $e1052;
}
};
var anf_variant_member1379 = R.makeMethod1($temp_full1043);
var $temp_full1054 = function($self1055) {
var $step1053 = 0;
var $ans1056 = D;
var $al1057 = L[464];
try {
if(R.isActivationRecord($self1055)) {
$step1053 = $self1055.step;
$al1057 = $self1055.from;
$ans1056 = $self1055.ans;
self1055 = $self1055.args[0];
ann_check_temp1058 = $self1055.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[464],1,$t);
}
var self1055 = $self1055;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1053) {
case 0: var ann_check_temp1058 = G(self1055,"elems",L[462]);
$step1053 = 1;
$al1057 = L[463];
R._checkAnn(L[463],R.getDotAnn(L[463],"lists",lists31,"List"),ann_check_temp1058);
break;
case 1: $step1053 = 2;
$ans1056 = ann_check_temp1058;
break;
case 2: ++R.GAS;
return $ans1056;
default: throw "No case numbered " + $step1053 + " in $temp_full1054";
}
}
} catch($e1059) {
if(R.isCont($e1059) && ($step1053 !== 2)) {
$e1059.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1057,$temp_full1054,$step1053,[self1055],[ann_check_temp1058]);
}
if(R.isPyretException($e1059)) {
$e1059.pyretStack.push($al1057);
}
throw $e1059;
}
};
var anf_variant_member1380 = R.makeMethod0($temp_full1054);
var $temp_full1061 = function($self1062,$other1063) {
var $step1060 = 0;
var $ans1064 = D;
var $al1065 = L[471];
try {
if(R.isActivationRecord($self1062)) {
$step1060 = $self1062.step;
$al1065 = $self1062.from;
$ans1064 = $self1062.ans;
self1062 = $self1062.args[0];
other1063 = $self1062.args[1];
ann_check_temp1076 = $self1062.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[471],2,$t);
}
var self1062 = $self1062;
var other1063 = $other1063;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1060) {
case 0: $step1060 = 1;
$al1065 = L[469];
R._checkAnn(L[469],Set869,self1062);
break;
case 1: $step1060 = 2;
$al1065 = L[470];
R._checkAnn(L[470],Set869,other1063);
break;
case 2: var $temp_lam1067 = function($u1068,$elem1069) {
var $step1066 = 0;
var $ans1070 = D;
var $al1071 = L[466];
try {
if(R.isActivationRecord($u1068)) {
$step1066 = $u1068.step;
$al1071 = $u1068.from;
$ans1070 = $u1068.ans;
u1068 = $u1068.args[0];
elem1069 = $u1068.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[466],2,$t);
}
var u1068 = $u1068;
var elem1069 = $elem1069;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1066) {
case 0: $step1066 = 1;
$al1071 = L[465];
$field1072 = R.getColonFieldLoc(u1068,"add",L[465]);
if(R.isMethod($field1072)) {
$ans1070 = $field1072.full_meth(u1068,elem1069);
} else {
if(!(R.isFunction($field1072))) {
R.ffi.throwNonFunApp(L[465],$field1072);
}
$ans1070 = $field1072.app(elem1069);
}
break;
case 1: ++R.GAS;
return $ans1070;
default: throw "No case numbered " + $step1066 + " in $temp_lam1067";
}
}
} catch($e1073) {
if(R.isCont($e1073) && ($step1066 !== 1)) {
$e1073.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1071,$temp_lam1067,$step1066,[u1068,elem1069],[]);
}
if(R.isPyretException($e1073)) {
$e1073.pyretStack.push($al1071);
}
throw $e1073;
}
};
var anf_arg1074 = R.makeFunction($temp_lam1067);
$step1060 = 3;
$al1065 = L[467];
$field1075 = R.getColonFieldLoc(other1063,"fold",L[467]);
if(R.isMethod($field1075)) {
$ans1064 = $field1075.full_meth(other1063,anf_arg1074,self1062);
} else {
if(!(R.isFunction($field1075))) {
R.ffi.throwNonFunApp(L[467],$field1075);
}
$ans1064 = $field1075.app(anf_arg1074,self1062);
}
break;
case 3: var ann_check_temp1076 = $ans1064;
$step1060 = 4;
$al1065 = L[468];
R._checkAnn(L[468],Set869,ann_check_temp1076);
break;
case 4: $step1060 = 5;
$ans1064 = ann_check_temp1076;
break;
case 5: ++R.GAS;
return $ans1064;
default: throw "No case numbered " + $step1060 + " in $temp_full1061";
}
}
} catch($e1077) {
if(R.isCont($e1077) && ($step1060 !== 5)) {
$e1077.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1065,$temp_full1061,$step1060,[self1062,other1063],[ann_check_temp1076]);
}
if(R.isPyretException($e1077)) {
$e1077.pyretStack.push($al1065);
}
throw $e1077;
}
};
var anf_variant_member1381 = R.makeMethod1($temp_full1061);
var $temp_full1079 = function($self1080,$other1081) {
var $step1078 = 0;
var $ans1082 = D;
var $al1083 = L[482];
try {
if(R.isActivationRecord($self1080)) {
$step1078 = $self1080.step;
$al1083 = $self1080.from;
$ans1082 = $self1080.ans;
self1080 = $self1080.args[0];
other1081 = $self1080.args[1];
ann_check_temp1099 = $self1080.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[482],2,$t);
}
var self1080 = $self1080;
var other1081 = $other1081;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1078) {
case 0: $step1078 = 1;
$al1083 = L[480];
R._checkAnn(L[480],Set869,self1080);
break;
case 1: $step1078 = 2;
$al1083 = L[481];
R._checkAnn(L[481],Set869,other1081);
break;
case 2: var $temp_lam1085 = function($elems1086,$elem1087) {
var $step1084 = 0;
var $ans1088 = D;
var $al1089 = L[474];
try {
if(R.isActivationRecord($elems1086)) {
$step1084 = $elems1086.step;
$al1089 = $elems1086.from;
$ans1088 = $elems1086.ans;
elems1086 = $elems1086.args[0];
elem1087 = $elems1086.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[474],2,$t);
}
var elems1086 = $elems1086;
var elem1087 = $elem1087;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1084) {
case 0: $step1084 = 1;
$al1089 = L[472];
$field1090 = R.getColonFieldLoc(other1081,"member",L[472]);
if(R.isMethod($field1090)) {
$ans1088 = $field1090.full_meth(other1081,elem1087);
} else {
if(!(R.isFunction($field1090))) {
R.ffi.throwNonFunApp(L[472],$field1090);
}
$ans1088 = $field1090.app(elem1087);
}
break;
case 1: var anf_arg1091 = $ans1088;
$al1089 = L[472];
var anf_if1093 = R.checkWrapBoolean(anf_arg1091);
if(R.isPyretTrue(anf_if1093)) {
$step1084 = 2;
} else {
$step1084 = 3;
}
break;
case 2: $step1084 = 4;
$ans1088 = elems1086;
break;
case 3: $step1084 = 4;
$al1089 = L[473];
$field1092 = R.getColonFieldLoc(elems1086,"remove",L[473]);
if(R.isMethod($field1092)) {
$ans1088 = $field1092.full_meth(elems1086,elem1087);
} else {
if(!(R.isFunction($field1092))) {
R.ffi.throwNonFunApp(L[473],$field1092);
}
$ans1088 = $field1092.app(elem1087);
}
break;
case 4: ++R.GAS;
return $ans1088;
default: throw "No case numbered " + $step1084 + " in $temp_lam1085";
}
}
} catch($e1094) {
if(R.isCont($e1094) && ($step1084 !== 4)) {
$e1094.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1089,$temp_lam1085,$step1084,[elems1086,elem1087],[]);
}
if(R.isPyretException($e1094)) {
$e1094.pyretStack.push($al1089);
}
throw $e1094;
}
};
var anf_arg1095 = R.makeFunction($temp_lam1085);
var anf_arg1096 = G(self1080,"elems",L[475]);
var anf_arg1097 = G(self1080,"elems",L[476]);
$step1078 = 3;
$al1083 = L[474];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1083,fold903);
}
$ans1082 = fold903.app(anf_arg1095,anf_arg1096,anf_arg1097);
break;
case 3: var new$elems1098 = $ans1082;
$step1078 = 4;
$al1083 = L[479];
if(!(R.isFunction(list$set919.$var === D?U(L[477],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1083,list$set919.$var === D?U(L[477],"list-set"):list$set919.$var);
}
$ans1082 = list$set919.$var === D?U(L[477],"list-set"):list$set919.$var.app(new$elems1098);
break;
case 4: var ann_check_temp1099 = $ans1082;
$step1078 = 5;
$al1083 = L[478];
R._checkAnn(L[478],Set869,ann_check_temp1099);
break;
case 5: $step1078 = 6;
$ans1082 = ann_check_temp1099;
break;
case 6: ++R.GAS;
return $ans1082;
default: throw "No case numbered " + $step1078 + " in $temp_full1079";
}
}
} catch($e1100) {
if(R.isCont($e1100) && ($step1078 !== 6)) {
$e1100.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1083,$temp_full1079,$step1078,[self1080,other1081],[ann_check_temp1099]);
}
if(R.isPyretException($e1100)) {
$e1100.pyretStack.push($al1083);
}
throw $e1100;
}
};
var anf_variant_member1382 = R.makeMethod1($temp_full1079);
var $temp_full1102 = function($self1103,$other1104) {
var $step1101 = 0;
var $ans1105 = D;
var $al1106 = L[488];
try {
if(R.isActivationRecord($self1103)) {
$step1101 = $self1103.step;
$al1106 = $self1103.from;
$ans1105 = $self1103.ans;
self1103 = $self1103.args[0];
other1104 = $self1103.args[1];
ann_check_temp1109 = $self1103.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[488],2,$t);
}
var self1103 = $self1103;
var other1104 = $other1104;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1101) {
case 0: $step1101 = 1;
$al1106 = L[486];
R._checkAnn(L[486],Set869,self1103);
break;
case 1: $step1101 = 2;
$al1106 = L[487];
R._checkAnn(L[487],Set869,other1104);
break;
case 2: var anf_arg1107 = G(other1104,"member",L[483]);
$step1101 = 3;
$al1106 = L[484];
$field1108 = R.getColonFieldLoc(self1103,"any",L[484]);
if(R.isMethod($field1108)) {
$ans1105 = $field1108.full_meth(self1103,anf_arg1107);
} else {
if(!(R.isFunction($field1108))) {
R.ffi.throwNonFunApp(L[484],$field1108);
}
$ans1105 = $field1108.app(anf_arg1107);
}
break;
case 3: var ann_check_temp1109 = $ans1105;
$step1101 = 4;
$al1106 = L[485];
R._checkAnn(L[485],$type$Boolean3,ann_check_temp1109);
break;
case 4: $step1101 = 5;
$ans1105 = ann_check_temp1109;
break;
case 5: ++R.GAS;
return $ans1105;
default: throw "No case numbered " + $step1101 + " in $temp_full1102";
}
}
} catch($e1110) {
if(R.isCont($e1110) && ($step1101 !== 5)) {
$e1110.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1106,$temp_full1102,$step1101,[self1103,other1104],[ann_check_temp1109]);
}
if(R.isPyretException($e1110)) {
$e1110.pyretStack.push($al1106);
}
throw $e1110;
}
};
var anf_variant_member1383 = R.makeMethod1($temp_full1102);
var $temp_full1112 = function($self1113,$other1114) {
var $step1111 = 0;
var $ans1115 = D;
var $al1116 = L[499];
try {
if(R.isActivationRecord($self1113)) {
$step1111 = $self1113.step;
$al1116 = $self1113.from;
$ans1115 = $self1113.ans;
self1113 = $self1113.args[0];
other1114 = $self1113.args[1];
ann_check_temp1132 = $self1113.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[499],2,$t);
}
var self1113 = $self1113;
var other1114 = $other1114;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1111) {
case 0: $step1111 = 1;
$al1116 = L[497];
R._checkAnn(L[497],Set869,self1113);
break;
case 1: $step1111 = 2;
$al1116 = L[498];
R._checkAnn(L[498],Set869,other1114);
break;
case 2: var $temp_lam1118 = function($elems1119,$elem1120) {
var $step1117 = 0;
var $ans1121 = D;
var $al1122 = L[491];
try {
if(R.isActivationRecord($elems1119)) {
$step1117 = $elems1119.step;
$al1122 = $elems1119.from;
$ans1121 = $elems1119.ans;
elems1119 = $elems1119.args[0];
elem1120 = $elems1119.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[491],2,$t);
}
var elems1119 = $elems1119;
var elem1120 = $elem1120;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1117) {
case 0: $step1117 = 1;
$al1122 = L[489];
$field1123 = R.getColonFieldLoc(other1114,"member",L[489]);
if(R.isMethod($field1123)) {
$ans1121 = $field1123.full_meth(other1114,elem1120);
} else {
if(!(R.isFunction($field1123))) {
R.ffi.throwNonFunApp(L[489],$field1123);
}
$ans1121 = $field1123.app(elem1120);
}
break;
case 1: var anf_arg1124 = $ans1121;
$al1122 = L[489];
var anf_if1126 = R.checkWrapBoolean(anf_arg1124);
if(R.isPyretTrue(anf_if1126)) {
$step1117 = 2;
} else {
$step1117 = 3;
}
break;
case 2: $step1117 = 4;
$al1122 = L[490];
$field1125 = R.getColonFieldLoc(elems1119,"remove",L[490]);
if(R.isMethod($field1125)) {
$ans1121 = $field1125.full_meth(elems1119,elem1120);
} else {
if(!(R.isFunction($field1125))) {
R.ffi.throwNonFunApp(L[490],$field1125);
}
$ans1121 = $field1125.app(elem1120);
}
break;
case 3: $step1117 = 4;
$ans1121 = elems1119;
break;
case 4: ++R.GAS;
return $ans1121;
default: throw "No case numbered " + $step1117 + " in $temp_lam1118";
}
}
} catch($e1127) {
if(R.isCont($e1127) && ($step1117 !== 4)) {
$e1127.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1122,$temp_lam1118,$step1117,[elems1119,elem1120],[]);
}
if(R.isPyretException($e1127)) {
$e1127.pyretStack.push($al1122);
}
throw $e1127;
}
};
var anf_arg1128 = R.makeFunction($temp_lam1118);
var anf_arg1129 = G(self1113,"elems",L[492]);
var anf_arg1130 = G(self1113,"elems",L[493]);
$step1111 = 3;
$al1116 = L[491];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1116,fold903);
}
$ans1115 = fold903.app(anf_arg1128,anf_arg1129,anf_arg1130);
break;
case 3: var new$elems1131 = $ans1115;
$step1111 = 4;
$al1116 = L[496];
if(!(R.isFunction(list$set919.$var === D?U(L[494],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1116,list$set919.$var === D?U(L[494],"list-set"):list$set919.$var);
}
$ans1115 = list$set919.$var === D?U(L[494],"list-set"):list$set919.$var.app(new$elems1131);
break;
case 4: var ann_check_temp1132 = $ans1115;
$step1111 = 5;
$al1116 = L[495];
R._checkAnn(L[495],Set869,ann_check_temp1132);
break;
case 5: $step1111 = 6;
$ans1115 = ann_check_temp1132;
break;
case 6: ++R.GAS;
return $ans1115;
default: throw "No case numbered " + $step1111 + " in $temp_full1112";
}
}
} catch($e1133) {
if(R.isCont($e1133) && ($step1111 !== 6)) {
$e1133.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1116,$temp_full1112,$step1111,[self1113,other1114],[ann_check_temp1132]);
}
if(R.isPyretException($e1133)) {
$e1133.pyretStack.push($al1116);
}
throw $e1133;
}
};
var anf_variant_member1384 = R.makeMethod1($temp_full1112);
var $temp_full1135 = function($self1136) {
var $step1134 = 0;
var $ans1137 = D;
var $al1138 = L[504];
try {
if(R.isActivationRecord($self1136)) {
$step1134 = $self1136.step;
$al1138 = $self1136.from;
$ans1137 = $self1136.ans;
self1136 = $self1136.args[0];
ann_check_temp1141 = $self1136.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[504],1,$t);
}
var self1136 = $self1136;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1134) {
case 0: $step1134 = 1;
$al1138 = L[503];
R._checkAnn(L[503],Set869,self1136);
break;
case 1: var anf_method_obj1139 = G(self1136,"elems",L[500]);
$step1134 = 2;
$al1138 = L[501];
$field1140 = R.getColonFieldLoc(anf_method_obj1139,"length",L[501]);
if(R.isMethod($field1140)) {
$ans1137 = $field1140.full_meth(anf_method_obj1139);
} else {
if(!(R.isFunction($field1140))) {
R.ffi.throwNonFunApp(L[501],$field1140);
}
$ans1137 = $field1140.app();
}
break;
case 2: var ann_check_temp1141 = $ans1137;
$step1134 = 3;
$al1138 = L[502];
R._checkAnn(L[502],$type$Number2,ann_check_temp1141);
break;
case 3: $step1134 = 4;
$ans1137 = ann_check_temp1141;
break;
case 4: ++R.GAS;
return $ans1137;
default: throw "No case numbered " + $step1134 + " in $temp_full1135";
}
}
} catch($e1142) {
if(R.isCont($e1142) && ($step1134 !== 4)) {
$e1142.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1138,$temp_full1135,$step1134,[self1136],[ann_check_temp1141]);
}
if(R.isPyretException($e1142)) {
$e1142.pyretStack.push($al1138);
}
throw $e1142;
}
};
var anf_variant_member1385 = R.makeMethod0($temp_full1135);
var $temp_full1144 = function($self1145) {
var $step1143 = 0;
var $ans1146 = D;
var $al1147 = L[507];
try {
if(R.isActivationRecord($self1145)) {
$step1143 = $self1145.step;
$al1147 = $self1145.from;
$ans1146 = $self1145.ans;
self1145 = $self1145.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[507],1,$t);
}
var self1145 = $self1145;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1143) {
case 0: var anf_arg1149 = G(self1145,"elems",L[505]);
$step1143 = 1;
$al1147 = L[506];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1147,is$empty1148);
}
$ans1146 = is$empty1148.app(anf_arg1149);
break;
case 1: ++R.GAS;
return $ans1146;
default: throw "No case numbered " + $step1143 + " in $temp_full1144";
}
}
} catch($e1150) {
if(R.isCont($e1150) && ($step1143 !== 1)) {
$e1150.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1147,$temp_full1144,$step1143,[self1145],[]);
}
if(R.isPyretException($e1150)) {
$e1150.pyretStack.push($al1147);
}
throw $e1150;
}
};
var anf_variant_member1386 = R.makeMethod0($temp_full1144);
var $temp_full1152 = function($self1153,$f1154) {
var $step1151 = 0;
var $ans1155 = D;
var $al1156 = L[511];
try {
if(R.isActivationRecord($self1153)) {
$step1151 = $self1153.step;
$al1156 = $self1153.from;
$ans1155 = $self1153.ans;
self1153 = $self1153.args[0];
f1154 = $self1153.args[1];
ann_check_temp1159 = $self1153.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[511],2,$t);
}
var self1153 = $self1153;
var f1154 = $f1154;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1151) {
case 0: var anf_method_obj1157 = G(self1153,"elems",L[508]);
$step1151 = 1;
$al1156 = L[509];
$field1158 = R.getColonFieldLoc(anf_method_obj1157,"all",L[509]);
if(R.isMethod($field1158)) {
$ans1155 = $field1158.full_meth(anf_method_obj1157,f1154);
} else {
if(!(R.isFunction($field1158))) {
R.ffi.throwNonFunApp(L[509],$field1158);
}
$ans1155 = $field1158.app(f1154);
}
break;
case 1: var ann_check_temp1159 = $ans1155;
$step1151 = 2;
$al1156 = L[510];
R._checkAnn(L[510],$type$Boolean3,ann_check_temp1159);
break;
case 2: $step1151 = 3;
$ans1155 = ann_check_temp1159;
break;
case 3: ++R.GAS;
return $ans1155;
default: throw "No case numbered " + $step1151 + " in $temp_full1152";
}
}
} catch($e1160) {
if(R.isCont($e1160) && ($step1151 !== 3)) {
$e1160.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1156,$temp_full1152,$step1151,[self1153,f1154],[ann_check_temp1159]);
}
if(R.isPyretException($e1160)) {
$e1160.pyretStack.push($al1156);
}
throw $e1160;
}
};
var anf_variant_member1387 = R.makeMethod1($temp_full1152);
var $temp_full1162 = function($self1163,$f1164) {
var $step1161 = 0;
var $ans1165 = D;
var $al1166 = L[515];
try {
if(R.isActivationRecord($self1163)) {
$step1161 = $self1163.step;
$al1166 = $self1163.from;
$ans1165 = $self1163.ans;
self1163 = $self1163.args[0];
f1164 = $self1163.args[1];
ann_check_temp1169 = $self1163.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[515],2,$t);
}
var self1163 = $self1163;
var f1164 = $f1164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1161) {
case 0: var anf_method_obj1167 = G(self1163,"elems",L[512]);
$step1161 = 1;
$al1166 = L[513];
$field1168 = R.getColonFieldLoc(anf_method_obj1167,"any",L[513]);
if(R.isMethod($field1168)) {
$ans1165 = $field1168.full_meth(anf_method_obj1167,f1164);
} else {
if(!(R.isFunction($field1168))) {
R.ffi.throwNonFunApp(L[513],$field1168);
}
$ans1165 = $field1168.app(f1164);
}
break;
case 1: var ann_check_temp1169 = $ans1165;
$step1161 = 2;
$al1166 = L[514];
R._checkAnn(L[514],$type$Boolean3,ann_check_temp1169);
break;
case 2: $step1161 = 3;
$ans1165 = ann_check_temp1169;
break;
case 3: ++R.GAS;
return $ans1165;
default: throw "No case numbered " + $step1161 + " in $temp_full1162";
}
}
} catch($e1170) {
if(R.isCont($e1170) && ($step1161 !== 3)) {
$e1170.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1166,$temp_full1162,$step1161,[self1163,f1164],[ann_check_temp1169]);
}
if(R.isPyretException($e1170)) {
$e1170.pyretStack.push($al1166);
}
throw $e1170;
}
};
var anf_variant_member1388 = R.makeMethod1($temp_full1162);
var $temp_full1172 = function($self1173) {
var $step1171 = 0;
var $ans1174 = D;
var $al1175 = L[525];
try {
if(R.isActivationRecord($self1173)) {
$step1171 = $self1173.step;
$al1175 = $self1173.from;
$ans1174 = $self1173.ans;
self1173 = $self1173.args[0];
v1178 = $self1173.vars[0];
cases1177 = $self1173.vars[1];
t1176 = $self1173.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[525],1,$t);
}
var self1173 = $self1173;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1171) {
case 0: var t1176 = G(self1173,"elems",L[516]);
var cases1177 = t1176;
$step1171 = 1;
$al1175 = L[524];
R._checkAnn(L[524],AVLTree99,cases1177);
break;
case 1: var $cases_dispatch1186 = {"leaf":2,
"branch":3};
$al1175 = L[523];
$step1171 = $cases_dispatch1186[cases1177.$name] || 6;
break;
case 2: if(cases1177.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[517],false);
}
$step1171 = 7;
$ans1174 = pick$none916;
break;
case 3: if(cases1177.$arity >= 0) {
if(4 !== cases1177.$arity) {
R.ffi.throwCasesArityErrorC(L[522],4,cases1177.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[522],true);
}
var $fn818 = cases1177.$constructor.$fieldNames;
var v1178 = R.derefField(cases1177.dict[$fn818[0]],cases1177.$mut_fields_mask[0],false);
R.derefField(cases1177.dict[$fn818[1]],cases1177.$mut_fields_mask[1],false);
R.derefField(cases1177.dict[$fn818[2]],cases1177.$mut_fields_mask[2],false);
R.derefField(cases1177.dict[$fn818[3]],cases1177.$mut_fields_mask[3],false);
$step1171 = 4;
$al1175 = L[518];
$field1179 = R.getColonFieldLoc(t1176,"remove",L[518]);
if(R.isMethod($field1179)) {
$ans1174 = $field1179.full_meth(t1176,v1178);
} else {
if(!(R.isFunction($field1179))) {
R.ffi.throwNonFunApp(L[518],$field1179);
}
$ans1174 = $field1179.app(v1178);
}
break;
case 4: var anf_arg1181 = $ans1174;
$step1171 = 5;
$al1175 = L[521];
if(!(R.isFunction(tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1175,tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var);
}
$ans1174 = tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var.app(anf_arg1181);
break;
case 5: var anf_arg1182 = $ans1174;
$step1171 = 7;
$al1175 = L[520];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al1175,pick$some920);
}
$ans1174 = pick$some920.app(v1178,anf_arg1182);
break;
case 6: $step1171 = 7;
$al1175 = L[523];
$ans1174 = R.throwNoCasesMatched(L[523],cases1177);
break;
case 7: ++R.GAS;
return $ans1174;
default: throw "No case numbered " + $step1171 + " in $temp_full1172";
}
}
} catch($e1187) {
if(R.isCont($e1187) && ($step1171 !== 7)) {
$e1187.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1175,$temp_full1172,$step1171,[self1173],[v1178,cases1177,t1176]);
}
if(R.isPyretException($e1187)) {
$e1187.pyretStack.push($al1175);
}
throw $e1187;
}
};
var anf_variant_member1398 = R.makeMethod0($temp_full1172);
var $temp_full1189 = function($self1190,$tostring1191) {
var $step1188 = 0;
var $ans1192 = D;
var $al1193 = L[534];
try {
if(R.isActivationRecord($self1190)) {
$step1188 = $self1190.step;
$al1193 = $self1190.from;
$ans1192 = $self1190.ans;
self1190 = $self1190.args[0];
tostring1191 = $self1190.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[534],2,$t);
}
var self1190 = $self1190;
var tostring1191 = $tostring1191;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1188) {
case 0: var anf_method_obj1205 = G(self1190,"elems",L[526]);
var $temp_lam1195 = function($acc1196,$elem1197) {
var $step1194 = 0;
var $ans1198 = D;
var $al1199 = L[531];
try {
if(R.isActivationRecord($acc1196)) {
$step1194 = $acc1196.step;
$al1199 = $acc1196.from;
$ans1198 = $acc1196.ans;
acc1196 = $acc1196.args[0];
elem1197 = $acc1196.args[1];
anf_arg1201 = $acc1196.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[531],2,$t);
}
var acc1196 = $acc1196;
var elem1197 = $elem1197;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1194) {
case 0: $step1194 = 1;
$al1199 = L[527];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1199,equal$always4);
}
$ans1198 = equal$always4.app(acc1196,(""));
break;
case 1: var anf_arg1200 = $ans1198;
$al1199 = L[527];
var anf_if1203 = R.checkWrapBoolean(anf_arg1200);
if(R.isPyretTrue(anf_if1203)) {
$step1194 = 2;
} else {
$step1194 = 3;
}
break;
case 2: $step1194 = 6;
$al1199 = L[528];
if(!(R.isFunction(tostring1191))) {
R.ffi.throwNonFunApp($al1199,tostring1191);
}
$ans1198 = tostring1191.app(elem1197);
break;
case 3: $step1194 = 4;
$al1199 = L[529];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1199,_plus6);
}
$ans1198 = _plus6.app(acc1196,(", "));
break;
case 4: var anf_arg1201 = $ans1198;
$step1194 = 5;
$al1199 = L[530];
if(!(R.isFunction(tostring1191))) {
R.ffi.throwNonFunApp($al1199,tostring1191);
}
$ans1198 = tostring1191.app(elem1197);
break;
case 5: var anf_arg1202 = $ans1198;
$step1194 = 6;
$al1199 = L[529];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1199,_plus6);
}
$ans1198 = _plus6.app(anf_arg1201,anf_arg1202);
break;
case 6: ++R.GAS;
return $ans1198;
default: throw "No case numbered " + $step1194 + " in $temp_lam1195";
}
}
} catch($e1204) {
if(R.isCont($e1204) && ($step1194 !== 6)) {
$e1204.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1199,$temp_lam1195,$step1194,[acc1196,elem1197],[anf_arg1201]);
}
if(R.isPyretException($e1204)) {
$e1204.pyretStack.push($al1199);
}
throw $e1204;
}
};
var anf_arg1206 = R.makeFunction($temp_lam1195);
$step1188 = 1;
$al1193 = L[532];
$field1207 = R.getColonFieldLoc(anf_method_obj1205,"fold",L[532]);
if(R.isMethod($field1207)) {
$ans1192 = $field1207.full_meth(anf_method_obj1205,anf_arg1206,(""));
} else {
if(!(R.isFunction($field1207))) {
R.ffi.throwNonFunApp(L[532],$field1207);
}
$ans1192 = $field1207.app(anf_arg1206,(""));
}
break;
case 1: var anf_arg1208 = $ans1192;
$step1188 = 2;
$al1193 = L[533];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1193,_plus6);
}
$ans1192 = _plus6.app(("[tree-set: "),anf_arg1208);
break;
case 2: var anf_arg1209 = $ans1192;
$step1188 = 3;
$al1193 = L[533];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1193,_plus6);
}
$ans1192 = _plus6.app(anf_arg1209,("]"));
break;
case 3: ++R.GAS;
return $ans1192;
default: throw "No case numbered " + $step1188 + " in $temp_full1189";
}
}
} catch($e1210) {
if(R.isCont($e1210) && ($step1188 !== 3)) {
$e1210.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1193,$temp_full1189,$step1188,[self1190,tostring1191],[]);
}
if(R.isPyretException($e1210)) {
$e1210.pyretStack.push($al1193);
}
throw $e1210;
}
};
var anf_variant_member1399 = R.makeMethod1($temp_full1189);
var $temp_full1212 = function($self1213,$torepr1214) {
var $step1211 = 0;
var $ans1215 = D;
var $al1216 = L[543];
try {
if(R.isActivationRecord($self1213)) {
$step1211 = $self1213.step;
$al1216 = $self1213.from;
$ans1215 = $self1213.ans;
self1213 = $self1213.args[0];
torepr1214 = $self1213.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[543],2,$t);
}
var self1213 = $self1213;
var torepr1214 = $torepr1214;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1211) {
case 0: var anf_method_obj1228 = G(self1213,"elems",L[535]);
var $temp_lam1218 = function($acc1219,$elem1220) {
var $step1217 = 0;
var $ans1221 = D;
var $al1222 = L[540];
try {
if(R.isActivationRecord($acc1219)) {
$step1217 = $acc1219.step;
$al1222 = $acc1219.from;
$ans1221 = $acc1219.ans;
acc1219 = $acc1219.args[0];
elem1220 = $acc1219.args[1];
anf_arg1224 = $acc1219.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[540],2,$t);
}
var acc1219 = $acc1219;
var elem1220 = $elem1220;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1217) {
case 0: $step1217 = 1;
$al1222 = L[536];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1222,equal$always4);
}
$ans1221 = equal$always4.app(acc1219,(""));
break;
case 1: var anf_arg1223 = $ans1221;
$al1222 = L[536];
var anf_if1226 = R.checkWrapBoolean(anf_arg1223);
if(R.isPyretTrue(anf_if1226)) {
$step1217 = 2;
} else {
$step1217 = 3;
}
break;
case 2: $step1217 = 6;
$al1222 = L[537];
if(!(R.isFunction(torepr1214))) {
R.ffi.throwNonFunApp($al1222,torepr1214);
}
$ans1221 = torepr1214.app(elem1220);
break;
case 3: $step1217 = 4;
$al1222 = L[538];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1222,_plus6);
}
$ans1221 = _plus6.app(acc1219,(", "));
break;
case 4: var anf_arg1224 = $ans1221;
$step1217 = 5;
$al1222 = L[539];
if(!(R.isFunction(torepr1214))) {
R.ffi.throwNonFunApp($al1222,torepr1214);
}
$ans1221 = torepr1214.app(elem1220);
break;
case 5: var anf_arg1225 = $ans1221;
$step1217 = 6;
$al1222 = L[538];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1222,_plus6);
}
$ans1221 = _plus6.app(anf_arg1224,anf_arg1225);
break;
case 6: ++R.GAS;
return $ans1221;
default: throw "No case numbered " + $step1217 + " in $temp_lam1218";
}
}
} catch($e1227) {
if(R.isCont($e1227) && ($step1217 !== 6)) {
$e1227.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1222,$temp_lam1218,$step1217,[acc1219,elem1220],[anf_arg1224]);
}
if(R.isPyretException($e1227)) {
$e1227.pyretStack.push($al1222);
}
throw $e1227;
}
};
var anf_arg1229 = R.makeFunction($temp_lam1218);
$step1211 = 1;
$al1216 = L[541];
$field1230 = R.getColonFieldLoc(anf_method_obj1228,"fold",L[541]);
if(R.isMethod($field1230)) {
$ans1215 = $field1230.full_meth(anf_method_obj1228,anf_arg1229,(""));
} else {
if(!(R.isFunction($field1230))) {
R.ffi.throwNonFunApp(L[541],$field1230);
}
$ans1215 = $field1230.app(anf_arg1229,(""));
}
break;
case 1: var anf_arg1231 = $ans1215;
$step1211 = 2;
$al1216 = L[542];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1216,_plus6);
}
$ans1215 = _plus6.app(("[tree-set: "),anf_arg1231);
break;
case 2: var anf_arg1232 = $ans1215;
$step1211 = 3;
$al1216 = L[542];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1216,_plus6);
}
$ans1215 = _plus6.app(anf_arg1232,("]"));
break;
case 3: ++R.GAS;
return $ans1215;
default: throw "No case numbered " + $step1211 + " in $temp_full1212";
}
}
} catch($e1233) {
if(R.isCont($e1233) && ($step1211 !== 3)) {
$e1233.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1216,$temp_full1212,$step1211,[self1213,torepr1214],[]);
}
if(R.isPyretException($e1233)) {
$e1233.pyretStack.push($al1216);
}
throw $e1233;
}
};
var anf_variant_member1400 = R.makeMethod1($temp_full1212);
var $temp_full1235 = function($self1236) {
var $step1234 = 0;
var $ans1237 = D;
var $al1238 = L[548];
try {
if(R.isActivationRecord($self1236)) {
$step1234 = $self1236.step;
$al1238 = $self1236.from;
$ans1237 = $self1236.ans;
self1236 = $self1236.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[548],1,$t);
}
var self1236 = $self1236;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1234) {
case 0: $step1234 = 1;
$al1238 = L[544];
$field1239 = R.getColonFieldLoc(self1236,"to-list",L[544]);
if(R.isMethod($field1239)) {
$ans1237 = $field1239.full_meth(self1236);
} else {
if(!(R.isFunction($field1239))) {
R.ffi.throwNonFunApp(L[544],$field1239);
}
$ans1237 = $field1239.app();
}
break;
case 1: var anf_method_obj1240 = $ans1237;
var anf_arg1241 = G(VS27,"vs-value",L[545]);
$step1234 = 2;
$al1238 = L[546];
$field1242 = R.getColonFieldLoc(anf_method_obj1240,"map",L[546]);
if(R.isMethod($field1242)) {
$ans1237 = $field1242.full_meth(anf_method_obj1240,anf_arg1241);
} else {
if(!(R.isFunction($field1242))) {
R.ffi.throwNonFunApp(L[546],$field1242);
}
$ans1237 = $field1242.app(anf_arg1241);
}
break;
case 2: var anf_arg1243 = $ans1237;
$step1234 = 3;
$al1238 = L[547];
$field1244 = R.getColonFieldLoc(VS27,"vs-collection",L[547]);
if(R.isMethod($field1244)) {
$ans1237 = $field1244.full_meth(VS27,("tree-set"),anf_arg1243);
} else {
if(!(R.isFunction($field1244))) {
R.ffi.throwNonFunApp(L[547],$field1244);
}
$ans1237 = $field1244.app(("tree-set"),anf_arg1243);
}
break;
case 3: ++R.GAS;
return $ans1237;
default: throw "No case numbered " + $step1234 + " in $temp_full1235";
}
}
} catch($e1245) {
if(R.isCont($e1245) && ($step1234 !== 3)) {
$e1245.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1238,$temp_full1235,$step1234,[self1236],[]);
}
if(R.isPyretException($e1245)) {
$e1245.pyretStack.push($al1238);
}
throw $e1245;
}
};
var anf_variant_member1401 = R.makeMethod0($temp_full1235);
var $temp_full1247 = function($self1248,$f1249,$base1250) {
var $step1246 = 0;
var $ans1251 = D;
var $al1252 = L[552];
try {
if(R.isActivationRecord($self1248)) {
$step1246 = $self1248.step;
$al1252 = $self1248.from;
$ans1251 = $self1248.ans;
self1248 = $self1248.args[0];
f1249 = $self1248.args[1];
base1250 = $self1248.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[552],3,$t);
}
var self1248 = $self1248;
var f1249 = $f1249;
var base1250 = $base1250;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1246) {
case 0: $step1246 = 1;
$al1252 = L[551];
R._checkAnn(L[551],R.Function,f1249);
break;
case 1: var anf_arg1253 = G(self1248,"elems",L[549]);
$step1246 = 2;
$al1252 = L[550];
if(!(R.isFunction(tree$fold623.$var))) {
R.ffi.throwNonFunApp($al1252,tree$fold623.$var);
}
$ans1251 = tree$fold623.$var.app(f1249,base1250,anf_arg1253);
break;
case 2: ++R.GAS;
return $ans1251;
default: throw "No case numbered " + $step1246 + " in $temp_full1247";
}
}
} catch($e1254) {
if(R.isCont($e1254) && ($step1246 !== 2)) {
$e1254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1252,$temp_full1247,$step1246,[self1248,f1249,base1250],[]);
}
if(R.isPyretException($e1254)) {
$e1254.pyretStack.push($al1252);
}
throw $e1254;
}
};
var anf_variant_member1402 = R.makeMethod2($temp_full1247);
var $temp_full1256 = function($self1257,$elem1258) {
var $step1255 = 0;
var $ans1259 = D;
var $al1260 = L[556];
try {
if(R.isActivationRecord($self1257)) {
$step1255 = $self1257.step;
$al1260 = $self1257.from;
$ans1259 = $self1257.ans;
self1257 = $self1257.args[0];
elem1258 = $self1257.args[1];
ann_check_temp1263 = $self1257.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[556],2,$t);
}
var self1257 = $self1257;
var elem1258 = $elem1258;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1255) {
case 0: var anf_method_obj1261 = G(self1257,"elems",L[553]);
$step1255 = 1;
$al1260 = L[554];
$field1262 = R.getColonFieldLoc(anf_method_obj1261,"contains",L[554]);
if(R.isMethod($field1262)) {
$ans1259 = $field1262.full_meth(anf_method_obj1261,elem1258);
} else {
if(!(R.isFunction($field1262))) {
R.ffi.throwNonFunApp(L[554],$field1262);
}
$ans1259 = $field1262.app(elem1258);
}
break;
case 1: var ann_check_temp1263 = $ans1259;
$step1255 = 2;
$al1260 = L[555];
R._checkAnn(L[555],$type$Boolean3,ann_check_temp1263);
break;
case 2: $step1255 = 3;
$ans1259 = ann_check_temp1263;
break;
case 3: ++R.GAS;
return $ans1259;
default: throw "No case numbered " + $step1255 + " in $temp_full1256";
}
}
} catch($e1264) {
if(R.isCont($e1264) && ($step1255 !== 3)) {
$e1264.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1260,$temp_full1256,$step1255,[self1257,elem1258],[ann_check_temp1263]);
}
if(R.isPyretException($e1264)) {
$e1264.pyretStack.push($al1260);
}
throw $e1264;
}
};
var anf_variant_member1403 = R.makeMethod1($temp_full1256);
var $temp_full1266 = function($self1267,$elem1268) {
var $step1265 = 0;
var $ans1269 = D;
var $al1270 = L[562];
try {
if(R.isActivationRecord($self1267)) {
$step1265 = $self1267.step;
$al1270 = $self1267.from;
$ans1269 = $self1267.ans;
self1267 = $self1267.args[0];
elem1268 = $self1267.args[1];
ann_check_temp1274 = $self1267.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[562],2,$t);
}
var self1267 = $self1267;
var elem1268 = $elem1268;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1265) {
case 0: var anf_method_obj1271 = G(self1267,"elems",L[557]);
$step1265 = 1;
$al1270 = L[558];
$field1272 = R.getColonFieldLoc(anf_method_obj1271,"insert",L[558]);
if(R.isMethod($field1272)) {
$ans1269 = $field1272.full_meth(anf_method_obj1271,elem1268);
} else {
if(!(R.isFunction($field1272))) {
R.ffi.throwNonFunApp(L[558],$field1272);
}
$ans1269 = $field1272.app(elem1268);
}
break;
case 1: var anf_arg1273 = $ans1269;
$step1265 = 2;
$al1270 = L[561];
if(!(R.isFunction(tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1270,tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var);
}
$ans1269 = tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var.app(anf_arg1273);
break;
case 2: var ann_check_temp1274 = $ans1269;
$step1265 = 3;
$al1270 = L[560];
R._checkAnn(L[560],Set869,ann_check_temp1274);
break;
case 3: $step1265 = 4;
$ans1269 = ann_check_temp1274;
break;
case 4: ++R.GAS;
return $ans1269;
default: throw "No case numbered " + $step1265 + " in $temp_full1266";
}
}
} catch($e1275) {
if(R.isCont($e1275) && ($step1265 !== 4)) {
$e1275.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1270,$temp_full1266,$step1265,[self1267,elem1268],[ann_check_temp1274]);
}
if(R.isPyretException($e1275)) {
$e1275.pyretStack.push($al1270);
}
throw $e1275;
}
};
var anf_variant_member1404 = R.makeMethod1($temp_full1266);
var $temp_full1277 = function($self1278,$elem1279) {
var $step1276 = 0;
var $ans1280 = D;
var $al1281 = L[568];
try {
if(R.isActivationRecord($self1278)) {
$step1276 = $self1278.step;
$al1281 = $self1278.from;
$ans1280 = $self1278.ans;
self1278 = $self1278.args[0];
elem1279 = $self1278.args[1];
ann_check_temp1285 = $self1278.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[568],2,$t);
}
var self1278 = $self1278;
var elem1279 = $elem1279;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1276) {
case 0: var anf_method_obj1282 = G(self1278,"elems",L[563]);
$step1276 = 1;
$al1281 = L[564];
$field1283 = R.getColonFieldLoc(anf_method_obj1282,"remove",L[564]);
if(R.isMethod($field1283)) {
$ans1280 = $field1283.full_meth(anf_method_obj1282,elem1279);
} else {
if(!(R.isFunction($field1283))) {
R.ffi.throwNonFunApp(L[564],$field1283);
}
$ans1280 = $field1283.app(elem1279);
}
break;
case 1: var anf_arg1284 = $ans1280;
$step1276 = 2;
$al1281 = L[567];
if(!(R.isFunction(tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1281,tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var);
}
$ans1280 = tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var.app(anf_arg1284);
break;
case 2: var ann_check_temp1285 = $ans1280;
$step1276 = 3;
$al1281 = L[566];
R._checkAnn(L[566],Set869,ann_check_temp1285);
break;
case 3: $step1276 = 4;
$ans1280 = ann_check_temp1285;
break;
case 4: ++R.GAS;
return $ans1280;
default: throw "No case numbered " + $step1276 + " in $temp_full1277";
}
}
} catch($e1286) {
if(R.isCont($e1286) && ($step1276 !== 4)) {
$e1286.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1281,$temp_full1277,$step1276,[self1278,elem1279],[ann_check_temp1285]);
}
if(R.isPyretException($e1286)) {
$e1286.pyretStack.push($al1281);
}
throw $e1286;
}
};
var anf_variant_member1405 = R.makeMethod1($temp_full1277);
var $temp_full1288 = function($self1289) {
var $step1287 = 0;
var $ans1290 = D;
var $al1291 = L[572];
try {
if(R.isActivationRecord($self1289)) {
$step1287 = $self1289.step;
$al1291 = $self1289.from;
$ans1290 = $self1289.ans;
self1289 = $self1289.args[0];
ann_check_temp1294 = $self1289.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[572],1,$t);
}
var self1289 = $self1289;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1287) {
case 0: var anf_method_obj1292 = G(self1289,"elems",L[569]);
$step1287 = 1;
$al1291 = L[570];
$field1293 = R.getColonFieldLoc(anf_method_obj1292,"inorder",L[570]);
if(R.isMethod($field1293)) {
$ans1290 = $field1293.full_meth(anf_method_obj1292);
} else {
if(!(R.isFunction($field1293))) {
R.ffi.throwNonFunApp(L[570],$field1293);
}
$ans1290 = $field1293.app();
}
break;
case 1: var ann_check_temp1294 = $ans1290;
$step1287 = 2;
$al1291 = L[571];
R._checkAnn(L[571],R.getDotAnn(L[571],"lists",lists31,"List"),ann_check_temp1294);
break;
case 2: $step1287 = 3;
$ans1290 = ann_check_temp1294;
break;
case 3: ++R.GAS;
return $ans1290;
default: throw "No case numbered " + $step1287 + " in $temp_full1288";
}
}
} catch($e1295) {
if(R.isCont($e1295) && ($step1287 !== 3)) {
$e1295.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1291,$temp_full1288,$step1287,[self1289],[ann_check_temp1294]);
}
if(R.isPyretException($e1295)) {
$e1295.pyretStack.push($al1291);
}
throw $e1295;
}
};
var anf_variant_member1406 = R.makeMethod0($temp_full1288);
var $temp_full1297 = function($self1298,$other1299) {
var $step1296 = 0;
var $ans1300 = D;
var $al1301 = L[575];
try {
if(R.isActivationRecord($self1298)) {
$step1296 = $self1298.step;
$al1301 = $self1298.from;
$ans1300 = $self1298.ans;
self1298 = $self1298.args[0];
other1299 = $self1298.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[575],2,$t);
}
var self1298 = $self1298;
var other1299 = $other1299;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1296) {
case 0: $step1296 = 1;
$al1301 = L[574];
if(!(R.isFunction(tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var))) {
R.ffi.throwNonFunApp($al1301,tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var);
}
$ans1300 = tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var.app(self1298,other1299);
break;
case 1: ++R.GAS;
return $ans1300;
default: throw "No case numbered " + $step1296 + " in $temp_full1297";
}
}
} catch($e1303) {
if(R.isCont($e1303) && ($step1296 !== 1)) {
$e1303.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1301,$temp_full1297,$step1296,[self1298,other1299],[]);
}
if(R.isPyretException($e1303)) {
$e1303.pyretStack.push($al1301);
}
throw $e1303;
}
};
var anf_variant_member1407 = R.makeMethod1($temp_full1297);
var $temp_full1305 = function($self1306,$other1307) {
var $step1304 = 0;
var $ans1308 = D;
var $al1309 = L[578];
try {
if(R.isActivationRecord($self1306)) {
$step1304 = $self1306.step;
$al1309 = $self1306.from;
$ans1308 = $self1306.ans;
self1306 = $self1306.args[0];
other1307 = $self1306.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[578],2,$t);
}
var self1306 = $self1306;
var other1307 = $other1307;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1304) {
case 0: $step1304 = 1;
$al1309 = L[577];
if(!(R.isFunction(tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var))) {
R.ffi.throwNonFunApp($al1309,tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var);
}
$ans1308 = tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var.app(self1306,other1307);
break;
case 1: ++R.GAS;
return $ans1308;
default: throw "No case numbered " + $step1304 + " in $temp_full1305";
}
}
} catch($e1311) {
if(R.isCont($e1311) && ($step1304 !== 1)) {
$e1311.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1309,$temp_full1305,$step1304,[self1306,other1307],[]);
}
if(R.isPyretException($e1311)) {
$e1311.pyretStack.push($al1309);
}
throw $e1311;
}
};
var anf_variant_member1408 = R.makeMethod1($temp_full1305);
var $temp_full1313 = function($self1314,$other1315) {
var $step1312 = 0;
var $ans1316 = D;
var $al1317 = L[584];
try {
if(R.isActivationRecord($self1314)) {
$step1312 = $self1314.step;
$al1317 = $self1314.from;
$ans1316 = $self1314.ans;
self1314 = $self1314.args[0];
other1315 = $self1314.args[1];
ann_check_temp1320 = $self1314.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[584],2,$t);
}
var self1314 = $self1314;
var other1315 = $other1315;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1312) {
case 0: $step1312 = 1;
$al1317 = L[582];
R._checkAnn(L[582],Set869,self1314);
break;
case 1: $step1312 = 2;
$al1317 = L[583];
R._checkAnn(L[583],Set869,other1315);
break;
case 2: var anf_arg1318 = G(other1315,"member",L[579]);
$step1312 = 3;
$al1317 = L[580];
$field1319 = R.getColonFieldLoc(self1314,"any",L[580]);
if(R.isMethod($field1319)) {
$ans1316 = $field1319.full_meth(self1314,anf_arg1318);
} else {
if(!(R.isFunction($field1319))) {
R.ffi.throwNonFunApp(L[580],$field1319);
}
$ans1316 = $field1319.app(anf_arg1318);
}
break;
case 3: var ann_check_temp1320 = $ans1316;
$step1312 = 4;
$al1317 = L[581];
R._checkAnn(L[581],$type$Boolean3,ann_check_temp1320);
break;
case 4: $step1312 = 5;
$ans1316 = ann_check_temp1320;
break;
case 5: ++R.GAS;
return $ans1316;
default: throw "No case numbered " + $step1312 + " in $temp_full1313";
}
}
} catch($e1321) {
if(R.isCont($e1321) && ($step1312 !== 5)) {
$e1321.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1317,$temp_full1313,$step1312,[self1314,other1315],[ann_check_temp1320]);
}
if(R.isPyretException($e1321)) {
$e1321.pyretStack.push($al1317);
}
throw $e1321;
}
};
var anf_variant_member1409 = R.makeMethod1($temp_full1313);
var $temp_full1323 = function($self1324,$other1325) {
var $step1322 = 0;
var $ans1326 = D;
var $al1327 = L[590];
try {
if(R.isActivationRecord($self1324)) {
$step1322 = $self1324.step;
$al1327 = $self1324.from;
$ans1326 = $self1324.ans;
self1324 = $self1324.args[0];
other1325 = $self1324.args[1];
ann_check_temp1329 = $self1324.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[590],2,$t);
}
var self1324 = $self1324;
var other1325 = $other1325;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1322) {
case 0: $step1322 = 1;
$al1327 = L[588];
R._checkAnn(L[588],Set869,self1324);
break;
case 1: $step1322 = 2;
$al1327 = L[589];
R._checkAnn(L[589],Set869,other1325);
break;
case 2: $step1322 = 3;
$al1327 = L[587];
if(!(R.isFunction(tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var))) {
R.ffi.throwNonFunApp($al1327,tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var);
}
$ans1326 = tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var.app(self1324,other1325);
break;
case 3: var ann_check_temp1329 = $ans1326;
$step1322 = 4;
$al1327 = L[586];
R._checkAnn(L[586],Set869,ann_check_temp1329);
break;
case 4: $step1322 = 5;
$ans1326 = ann_check_temp1329;
break;
case 5: ++R.GAS;
return $ans1326;
default: throw "No case numbered " + $step1322 + " in $temp_full1323";
}
}
} catch($e1330) {
if(R.isCont($e1330) && ($step1322 !== 5)) {
$e1330.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1327,$temp_full1323,$step1322,[self1324,other1325],[ann_check_temp1329]);
}
if(R.isPyretException($e1330)) {
$e1330.pyretStack.push($al1327);
}
throw $e1330;
}
};
var anf_variant_member1410 = R.makeMethod1($temp_full1323);
var $temp_full1332 = function($self1333) {
var $step1331 = 0;
var $ans1334 = D;
var $al1335 = L[595];
try {
if(R.isActivationRecord($self1333)) {
$step1331 = $self1333.step;
$al1335 = $self1333.from;
$ans1334 = $self1333.ans;
self1333 = $self1333.args[0];
ann_check_temp1338 = $self1333.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[595],1,$t);
}
var self1333 = $self1333;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1331) {
case 0: $step1331 = 1;
$al1335 = L[594];
R._checkAnn(L[594],Set869,self1333);
break;
case 1: var anf_method_obj1336 = G(self1333,"elems",L[591]);
$step1331 = 2;
$al1335 = L[592];
$field1337 = R.getColonFieldLoc(anf_method_obj1336,"count",L[592]);
if(R.isMethod($field1337)) {
$ans1334 = $field1337.full_meth(anf_method_obj1336);
} else {
if(!(R.isFunction($field1337))) {
R.ffi.throwNonFunApp(L[592],$field1337);
}
$ans1334 = $field1337.app();
}
break;
case 2: var ann_check_temp1338 = $ans1334;
$step1331 = 3;
$al1335 = L[593];
R._checkAnn(L[593],$type$Number2,ann_check_temp1338);
break;
case 3: $step1331 = 4;
$ans1334 = ann_check_temp1338;
break;
case 4: ++R.GAS;
return $ans1334;
default: throw "No case numbered " + $step1331 + " in $temp_full1332";
}
}
} catch($e1339) {
if(R.isCont($e1339) && ($step1331 !== 4)) {
$e1339.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1335,$temp_full1332,$step1331,[self1333],[ann_check_temp1338]);
}
if(R.isPyretException($e1339)) {
$e1339.pyretStack.push($al1335);
}
throw $e1339;
}
};
var anf_variant_member1411 = R.makeMethod0($temp_full1332);
var $temp_full1341 = function($self1342) {
var $step1340 = 0;
var $ans1343 = D;
var $al1344 = L[598];
try {
if(R.isActivationRecord($self1342)) {
$step1340 = $self1342.step;
$al1344 = $self1342.from;
$ans1343 = $self1342.ans;
self1342 = $self1342.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[598],1,$t);
}
var self1342 = $self1342;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1340) {
case 0: var anf_arg1345 = G(self1342,"elems",L[596]);
$step1340 = 1;
$al1344 = L[597];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al1344,is$leaf607.$var);
}
$ans1343 = is$leaf607.$var.app(anf_arg1345);
break;
case 1: ++R.GAS;
return $ans1343;
default: throw "No case numbered " + $step1340 + " in $temp_full1341";
}
}
} catch($e1346) {
if(R.isCont($e1346) && ($step1340 !== 1)) {
$e1346.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1344,$temp_full1341,$step1340,[self1342],[]);
}
if(R.isPyretException($e1346)) {
$e1346.pyretStack.push($al1344);
}
throw $e1346;
}
};
var anf_variant_member1412 = R.makeMethod0($temp_full1341);
var $temp_full1348 = function($self1349,$f1350) {
var $step1347 = 0;
var $ans1351 = D;
var $al1352 = L[602];
try {
if(R.isActivationRecord($self1349)) {
$step1347 = $self1349.step;
$al1352 = $self1349.from;
$ans1351 = $self1349.ans;
self1349 = $self1349.args[0];
f1350 = $self1349.args[1];
ann_check_temp1355 = $self1349.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[602],2,$t);
}
var self1349 = $self1349;
var f1350 = $f1350;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1347) {
case 0: var anf_method_obj1353 = G(self1349,"elems",L[599]);
$step1347 = 1;
$al1352 = L[600];
$field1354 = R.getColonFieldLoc(anf_method_obj1353,"all",L[600]);
if(R.isMethod($field1354)) {
$ans1351 = $field1354.full_meth(anf_method_obj1353,f1350);
} else {
if(!(R.isFunction($field1354))) {
R.ffi.throwNonFunApp(L[600],$field1354);
}
$ans1351 = $field1354.app(f1350);
}
break;
case 1: var ann_check_temp1355 = $ans1351;
$step1347 = 2;
$al1352 = L[601];
R._checkAnn(L[601],$type$Boolean3,ann_check_temp1355);
break;
case 2: $step1347 = 3;
$ans1351 = ann_check_temp1355;
break;
case 3: ++R.GAS;
return $ans1351;
default: throw "No case numbered " + $step1347 + " in $temp_full1348";
}
}
} catch($e1356) {
if(R.isCont($e1356) && ($step1347 !== 3)) {
$e1356.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1352,$temp_full1348,$step1347,[self1349,f1350],[ann_check_temp1355]);
}
if(R.isPyretException($e1356)) {
$e1356.pyretStack.push($al1352);
}
throw $e1356;
}
};
var anf_variant_member1413 = R.makeMethod1($temp_full1348);
var $temp_full1358 = function($self1359,$f1360) {
var $step1357 = 0;
var $ans1361 = D;
var $al1362 = L[606];
try {
if(R.isActivationRecord($self1359)) {
$step1357 = $self1359.step;
$al1362 = $self1359.from;
$ans1361 = $self1359.ans;
self1359 = $self1359.args[0];
f1360 = $self1359.args[1];
ann_check_temp1365 = $self1359.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[606],2,$t);
}
var self1359 = $self1359;
var f1360 = $f1360;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1357) {
case 0: var anf_method_obj1363 = G(self1359,"elems",L[603]);
$step1357 = 1;
$al1362 = L[604];
$field1364 = R.getColonFieldLoc(anf_method_obj1363,"any",L[604]);
if(R.isMethod($field1364)) {
$ans1361 = $field1364.full_meth(anf_method_obj1363,f1360);
} else {
if(!(R.isFunction($field1364))) {
R.ffi.throwNonFunApp(L[604],$field1364);
}
$ans1361 = $field1364.app(f1360);
}
break;
case 1: var ann_check_temp1365 = $ans1361;
$step1357 = 2;
$al1362 = L[605];
R._checkAnn(L[605],$type$Boolean3,ann_check_temp1365);
break;
case 2: $step1357 = 3;
$ans1361 = ann_check_temp1365;
break;
case 3: ++R.GAS;
return $ans1361;
default: throw "No case numbered " + $step1357 + " in $temp_full1358";
}
}
} catch($e1366) {
if(R.isCont($e1366) && ($step1357 !== 3)) {
$e1366.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1362,$temp_full1358,$step1357,[self1359,f1360],[ann_check_temp1365]);
}
if(R.isPyretException($e1366)) {
$e1366.pyretStack.push($al1362);
}
throw $e1366;
}
};
var anf_variant_member1414 = R.makeMethod1($temp_full1358);
var $list$set_getfields1391 = function(f) {
return f(this.dict["elems"]);
};
var $list$set_getfieldsref1389 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $list$set_mutablemask1390 = [false];
var $list$set$base1369 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1367,
"_equals":anf_shared1368,
"pick":anf_variant_member1372,
"_tostring":anf_variant_member1373,
"_torepr":anf_variant_member1374,
"_output":anf_variant_member1375,
"fold":anf_variant_member1376,
"member":anf_variant_member1377,
"add":anf_variant_member1378,
"remove":anf_variant_member1379,
"to-list":anf_variant_member1380,
"union":anf_variant_member1381,
"intersect":anf_variant_member1382,
"overlaps":anf_variant_member1383,
"difference":anf_variant_member1384,
"size":anf_variant_member1385,
"is-empty":anf_variant_member1386,
"all":anf_variant_member1387,
"any":anf_variant_member1388,
"_match":R.makeMatch("list-set",1)};
var $list$set$brands1371 = {"$brand$list$set":true};
$list$set$brands1371[Set49._brand] = true;
var list$set1393 = R.makeVariantConstructor(L[609],function() {
return [R.getDotAnn(L[608],"lists",lists31,"List")];
},["elems1394"],[L[608]],[false],["elems1394"],$list$set_mutablemask1390,$list$set$base1369,$list$set$brands1371,"list-set",$list$set_getfieldsref1389,$list$set_getfields1391,$list$set$base1369);
var $tree$set_getfields1417 = function(f) {
return f(this.dict["elems"]);
};
var $tree$set_getfieldsref1415 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $tree$set_mutablemask1416 = [false];
var $tree$set$base1395 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1367,
"_equals":anf_shared1368,
"pick":anf_variant_member1398,
"_tostring":anf_variant_member1399,
"_torepr":anf_variant_member1400,
"_output":anf_variant_member1401,
"fold":anf_variant_member1402,
"member":anf_variant_member1403,
"add":anf_variant_member1404,
"remove":anf_variant_member1405,
"to-list":anf_variant_member1406,
"union":anf_variant_member1407,
"intersect":anf_variant_member1408,
"overlaps":anf_variant_member1409,
"difference":anf_variant_member1410,
"size":anf_variant_member1411,
"is-empty":anf_variant_member1412,
"all":anf_variant_member1413,
"any":anf_variant_member1414,
"_match":R.makeMatch("tree-set",1)};
var $tree$set$brands1397 = {"$brand$tree$set":true};
$tree$set$brands1397[Set49._brand] = true;
var tree$set1419 = R.makeVariantConstructor(L[612],function() {
return [AVLTree99];
},["elems1420"],[L[611]],[false],["elems1420"],$tree$set_mutablemask1416,$tree$set$base1395,$tree$set$brands1397,"tree-set",$tree$set_getfieldsref1415,$tree$set_getfields1417,$tree$set$base1395);
var anf_assign1422 = R.makeObject({"Set":R.makeFunction(function($val1421) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[613],1,$t);
}
return R.makeBoolean(R.hasBrand($val1421,Set49._brand));
}),
"is-list-set":R.makeFunction(function($val1392) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[607],1,$t);
}
return R.makeBoolean(R.hasBrand($val1392,"$brand$list$set"));
}),
"list-set":list$set1393,
"is-tree-set":R.makeFunction(function($val1418) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[610],1,$t);
}
return R.makeBoolean(R.hasBrand($val1418,"$brand$tree$set"));
}),
"tree-set":tree$set1419});
Set1423.$var = anf_assign1422;
var anf_assign1424 = G(Set1423.$var,"Set",L[613]);
Set878.$var = anf_assign1424;
var anf_assign1425 = G(Set1423.$var,"Set",L[613]);
is$Set1426.$var = anf_assign1425;
var anf_assign1427 = G(Set1423.$var,"is-list-set",L[607]);
is$list$set1428.$var = anf_assign1427;
var anf_assign1429 = G(Set1423.$var,"list-set",L[607]);
list$set919.$var = anf_assign1429;
var anf_assign1430 = G(Set1423.$var,"is-tree-set",L[610]);
is$tree$set1431.$var = anf_assign1430;
var anf_assign1432 = G(Set1423.$var,"tree-set",L[610]);
tree$set1180.$var = anf_assign1432;
var $temp_lam1434 = function($s1435) {
var $step1433 = 0;
var $ans1436 = D;
var $al1437 = L[620];
try {
if(R.isActivationRecord($s1435)) {
$step1433 = $s1435.step;
$al1437 = $s1435.from;
$ans1436 = $s1435.ans;
s1435 = $s1435.args[0];
cases1438 = $s1435.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[620],1,$t);
}
var s1435 = $s1435;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1433) {
case 0: var cases1438 = s1435;
$step1433 = 1;
$al1437 = L[619];
R._checkAnn(L[619],Set869,cases1438);
break;
case 1: var $cases_dispatch1443 = {"list-set":2,
"tree-set":3};
$al1437 = L[618];
$step1433 = $cases_dispatch1443[cases1438.$name] || 4;
break;
case 2: if(cases1438.$arity >= 0) {
if(1 !== cases1438.$arity) {
R.ffi.throwCasesArityErrorC(L[615],1,cases1438.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[615],true);
}
var $fn818 = cases1438.$constructor.$fieldNames;
var elems1439 = R.derefField(cases1438.dict[$fn818[0]],cases1438.$mut_fields_mask[0],false);
$step1433 = 5;
$al1437 = L[614];
$field1440 = R.getColonFieldLoc(elems1439,"sort",L[614]);
if(R.isMethod($field1440)) {
$ans1436 = $field1440.full_meth(elems1439);
} else {
if(!(R.isFunction($field1440))) {
R.ffi.throwNonFunApp(L[614],$field1440);
}
$ans1436 = $field1440.app();
}
break;
case 3: if(cases1438.$arity >= 0) {
if(1 !== cases1438.$arity) {
R.ffi.throwCasesArityErrorC(L[617],1,cases1438.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[617],true);
}
var $fn818 = cases1438.$constructor.$fieldNames;
var elems1441 = R.derefField(cases1438.dict[$fn818[0]],cases1438.$mut_fields_mask[0],false);
$step1433 = 5;
$al1437 = L[616];
$field1442 = R.getColonFieldLoc(elems1441,"inorder",L[616]);
if(R.isMethod($field1442)) {
$ans1436 = $field1442.full_meth(elems1441);
} else {
if(!(R.isFunction($field1442))) {
R.ffi.throwNonFunApp(L[616],$field1442);
}
$ans1436 = $field1442.app();
}
break;
case 4: $step1433 = 5;
$al1437 = L[618];
$ans1436 = R.throwNoCasesMatched(L[618],cases1438);
break;
case 5: ++R.GAS;
return $ans1436;
default: throw "No case numbered " + $step1433 + " in $temp_lam1434";
}
}
} catch($e1444) {
if(R.isCont($e1444) && ($step1433 !== 5)) {
$e1444.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1437,$temp_lam1434,$step1433,[s1435],[cases1438]);
}
if(R.isPyretException($e1444)) {
$e1444.pyretStack.push($al1437);
}
throw $e1444;
}
};
var anf_assign1445 = R.makeFunction($temp_lam1434);
set$to$sorted$elems1446.$var = anf_assign1445;
var $temp_lam1448 = function($elems1449) {
var $step1447 = 0;
var $ans1450 = D;
var $al1451 = L[639];
try {
if(R.isActivationRecord($elems1449)) {
$step1447 = $elems1449.step;
$al1451 = $elems1449.from;
$ans1450 = $elems1449.ans;
elems1449 = $elems1449.args[0];
head1459 = $elems1449.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[639],1,$t);
}
var elems1449 = $elems1449;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1447) {
case 0: var head1459 = {"$var":elems1449};
$step1447 = 1;
$al1451 = L[621];
$field1452 = R.getColonFieldLoc(elems1449,"length",L[621]);
if(R.isMethod($field1452)) {
$ans1450 = $field1452.full_meth(elems1449);
} else {
if(!(R.isFunction($field1452))) {
R.ffi.throwNonFunApp(L[621],$field1452);
}
$ans1450 = $field1452.app();
}
break;
case 1: var len1478 = $ans1450;
var helper1462 = {"$var":D};
var $temp_lam1454 = function($l1455) {
var $step1453 = 0;
var $ans1456 = D;
var $al1457 = L[637];
try {
if(R.isActivationRecord($l1455)) {
$step1453 = $l1455.step;
$al1457 = $l1455.from;
$ans1456 = $l1455.ans;
l1455 = $l1455.args[0];
anf_arg1472 = $l1455.vars[0];
item1471 = $l1455.vars[1];
left1465 = $l1455.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[637],1,$t);
}
var l1455 = $l1455;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1453) {
case 0: $step1453 = 1;
$al1457 = L[622];
if(!(R.isFunction(_lessequal10))) {
R.ffi.throwNonFunApp($al1457,_lessequal10);
}
$ans1456 = _lessequal10.app(l1455,(0));
break;
case 1: var anf_arg1458 = $ans1456;
$al1457 = L[622];
var anf_if1475 = R.checkWrapBoolean(anf_arg1458);
if(R.isPyretTrue(anf_if1475)) {
$step1453 = 2;
} else {
$step1453 = 3;
}
break;
case 2: $step1453 = 16;
$ans1456 = leaf97.$var;
break;
case 3: $step1453 = 4;
$al1457 = L[636];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1457,is$empty1148);
}
$ans1456 = is$empty1148.app(head1459.$var);
break;
case 4: var anf_arg1460 = $ans1456;
$al1457 = L[623];
var anf_if1474 = R.checkWrapBoolean(anf_arg1460);
if(R.isPyretTrue(anf_if1474)) {
$step1453 = 5;
} else {
$step1453 = 6;
}
break;
case 5: $step1453 = 16;
$ans1456 = leaf97.$var;
break;
case 6: $step1453 = 7;
$al1457 = L[635];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1457,_divide15);
}
$ans1456 = _divide15.app(l1455,(2));
break;
case 7: var anf_arg1461 = $ans1456;
$step1453 = 8;
$al1457 = L[634];
if(!(R.isFunction(num$floor16))) {
R.ffi.throwNonFunApp($al1457,num$floor16);
}
$ans1456 = num$floor16.app(anf_arg1461);
break;
case 8: var anf_arg1463 = $ans1456;
$step1453 = 9;
$al1457 = L[633];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1457,helper1462.$var);
}
$ans1456 = helper1462.$var.app(anf_arg1463);
break;
case 9: var left1465 = $ans1456;
var item1471 = G(head1459.$var,"first",L[624]);
var anf_assign1464 = G(head1459.$var,"rest",L[625]);
head1459.$var = anf_assign1464;
$step1453 = 10;
$al1457 = L[626];
$field1466 = R.getColonFieldLoc(left1465,"height",L[626]);
if(R.isMethod($field1466)) {
$ans1456 = $field1466.full_meth(left1465);
} else {
if(!(R.isFunction($field1466))) {
R.ffi.throwNonFunApp(L[626],$field1466);
}
$ans1456 = $field1466.app();
}
break;
case 10: var anf_arg1467 = $ans1456;
$step1453 = 11;
$al1457 = L[632];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1457,_plus6);
}
$ans1456 = _plus6.app(anf_arg1467,(1));
break;
case 11: var anf_arg1472 = $ans1456;
$step1453 = 12;
$al1457 = L[631];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1457,_divide15);
}
$ans1456 = _divide15.app(l1455,(2));
break;
case 12: var anf_arg1468 = $ans1456;
$step1453 = 13;
$al1457 = L[630];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al1457,_minus8);
}
$ans1456 = _minus8.app(anf_arg1468,(1));
break;
case 13: var anf_arg1469 = $ans1456;
$step1453 = 14;
$al1457 = L[629];
if(!(R.isFunction(num$ceiling17))) {
R.ffi.throwNonFunApp($al1457,num$ceiling17);
}
$ans1456 = num$ceiling17.app(anf_arg1469);
break;
case 14: var anf_arg1470 = $ans1456;
$step1453 = 15;
$al1457 = L[628];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1457,helper1462.$var);
}
$ans1456 = helper1462.$var.app(anf_arg1470);
break;
case 15: var anf_arg1473 = $ans1456;
$step1453 = 16;
$al1457 = L[627];
if(!(R.isFunction(branch612.$var))) {
R.ffi.throwNonFunApp($al1457,branch612.$var);
}
$ans1456 = branch612.$var.app(item1471,anf_arg1472,left1465,anf_arg1473);
break;
case 16: ++R.GAS;
return $ans1456;
default: throw "No case numbered " + $step1453 + " in $temp_lam1454";
}
}
} catch($e1476) {
if(R.isCont($e1476) && ($step1453 !== 16)) {
$e1476.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1457,$temp_lam1454,$step1453,[l1455],[anf_arg1472,item1471,left1465]);
}
if(R.isPyretException($e1476)) {
$e1476.pyretStack.push($al1457);
}
throw $e1476;
}
};
var anf_assign1477 = R.makeFunction($temp_lam1454);
helper1462.$var = anf_assign1477;
$step1447 = 2;
$al1451 = L[638];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1451,helper1462.$var);
}
$ans1450 = helper1462.$var.app(len1478);
break;
case 2: ++R.GAS;
return $ans1450;
default: throw "No case numbered " + $step1447 + " in $temp_lam1448";
}
}
} catch($e1479) {
if(R.isCont($e1479) && ($step1447 !== 2)) {
$e1479.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1451,$temp_lam1448,$step1447,[elems1449],[head1459]);
}
if(R.isPyretException($e1479)) {
$e1479.pyretStack.push($al1451);
}
throw $e1479;
}
};
var anf_assign1480 = R.makeFunction($temp_lam1448);
elems$to$balanced$avl1481.$var = anf_assign1480;
var $temp_lam1483 = function($l11484,$l21485) {
var $step1482 = 0;
var $ans1486 = D;
var $al1487 = L[661];
try {
if(R.isActivationRecord($l11484)) {
$step1482 = $l11484.step;
$al1487 = $l11484.from;
$ans1486 = $l11484.ans;
l11484 = $l11484.args[0];
l21485 = $l11484.args[1];
anf_arg1502 = $l11484.vars[0];
anf_arg1495 = $l11484.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[661],2,$t);
}
var l11484 = $l11484;
var l21485 = $l21485;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1482) {
case 0: $step1482 = 1;
$al1487 = L[640];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1487,is$empty1148);
}
$ans1486 = is$empty1148.app(l11484);
break;
case 1: var anf_arg1488 = $ans1486;
$al1487 = L[640];
var anf_if1507 = R.checkWrapBoolean(anf_arg1488);
if(R.isPyretTrue(anf_if1507)) {
$step1482 = 2;
} else {
$step1482 = 3;
}
break;
case 2: $step1482 = 15;
$ans1486 = l21485;
break;
case 3: $step1482 = 4;
$al1487 = L[660];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1487,is$empty1148);
}
$ans1486 = is$empty1148.app(l21485);
break;
case 4: var anf_arg1489 = $ans1486;
$al1487 = L[641];
var anf_if1506 = R.checkWrapBoolean(anf_arg1489);
if(R.isPyretTrue(anf_if1506)) {
$step1482 = 5;
} else {
$step1482 = 6;
}
break;
case 5: $step1482 = 15;
$ans1486 = l11484;
break;
case 6: var anf_arg1490 = G(l11484,"first",L[642]);
var anf_arg1491 = G(l21485,"first",L[643]);
$step1482 = 7;
$al1487 = L[659];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1487,_lessthan5);
}
$ans1486 = _lessthan5.app(anf_arg1490,anf_arg1491);
break;
case 7: var anf_arg1492 = $ans1486;
$al1487 = L[644];
var anf_if1505 = R.checkWrapBoolean(anf_arg1492);
if(R.isPyretTrue(anf_if1505)) {
$step1482 = 8;
} else {
$step1482 = 10;
}
break;
case 8: var anf_arg1495 = G(l11484,"first",L[645]);
var anf_arg1494 = G(l11484,"rest",L[646]);
$step1482 = 9;
$al1487 = L[648];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(anf_arg1494,l21485);
break;
case 9: var anf_arg1496 = $ans1486;
$step1482 = 15;
$al1487 = L[647];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1487,link312);
}
$ans1486 = link312.app(anf_arg1495,anf_arg1496);
break;
case 10: var anf_arg1497 = G(l11484,"first",L[649]);
var anf_arg1498 = G(l21485,"first",L[650]);
$step1482 = 11;
$al1487 = L[658];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1487,equal$always4);
}
$ans1486 = equal$always4.app(anf_arg1497,anf_arg1498);
break;
case 11: var anf_arg1499 = $ans1486;
$al1487 = L[651];
var anf_if1504 = R.checkWrapBoolean(anf_arg1499);
if(R.isPyretTrue(anf_if1504)) {
$step1482 = 12;
} else {
$step1482 = 13;
}
break;
case 12: var anf_arg1500 = G(l11484,"rest",L[652]);
$step1482 = 15;
$al1487 = L[653];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(anf_arg1500,l21485);
break;
case 13: var anf_arg1502 = G(l21485,"first",L[654]);
var anf_arg1501 = G(l21485,"rest",L[655]);
$step1482 = 14;
$al1487 = L[657];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(l11484,anf_arg1501);
break;
case 14: var anf_arg1503 = $ans1486;
$step1482 = 15;
$al1487 = L[656];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1487,link312);
}
$ans1486 = link312.app(anf_arg1502,anf_arg1503);
break;
case 15: ++R.GAS;
return $ans1486;
default: throw "No case numbered " + $step1482 + " in $temp_lam1483";
}
}
} catch($e1508) {
if(R.isCont($e1508) && ($step1482 !== 15)) {
$e1508.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1487,$temp_lam1483,$step1482,[l11484,l21485],[anf_arg1502,anf_arg1495]);
}
if(R.isPyretException($e1508)) {
$e1508.pyretStack.push($al1487);
}
throw $e1508;
}
};
var anf_assign1509 = R.makeFunction($temp_lam1483);
merge$no$dups1493.$var = anf_assign1509;
var $temp_lam1511 = function($s11512,$s21513) {
var $step1510 = 0;
var $ans1514 = D;
var $al1515 = L[668];
try {
if(R.isActivationRecord($s11512)) {
$step1510 = $s11512.step;
$al1515 = $s11512.from;
$ans1514 = $s11512.ans;
s11512 = $s11512.args[0];
s21513 = $s11512.args[1];
ann_check_temp1520 = $s11512.vars[0];
s1$elems1516 = $s11512.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[668],2,$t);
}
var s11512 = $s11512;
var s21513 = $s21513;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1510) {
case 0: $step1510 = 1;
$al1515 = L[667];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1515,set$to$sorted$elems1446.$var);
}
$ans1514 = set$to$sorted$elems1446.$var.app(s11512);
break;
case 1: var s1$elems1516 = $ans1514;
$step1510 = 2;
$al1515 = L[666];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1515,set$to$sorted$elems1446.$var);
}
$ans1514 = set$to$sorted$elems1446.$var.app(s21513);
break;
case 2: var s2$elems1517 = $ans1514;
$step1510 = 3;
$al1515 = L[665];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1515,merge$no$dups1493.$var);
}
$ans1514 = merge$no$dups1493.$var.app(s1$elems1516,s2$elems1517);
break;
case 3: var new$elems1518 = $ans1514;
$step1510 = 4;
$al1515 = L[664];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1515,elems$to$balanced$avl1481.$var);
}
$ans1514 = elems$to$balanced$avl1481.$var.app(new$elems1518);
break;
case 4: var anf_arg1519 = $ans1514;
$step1510 = 5;
$al1515 = L[663];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1515,tree$set1180.$var);
}
$ans1514 = tree$set1180.$var.app(anf_arg1519);
break;
case 5: var ann_check_temp1520 = $ans1514;
$step1510 = 6;
$al1515 = L[662];
R._checkAnn(L[662],Set869,ann_check_temp1520);
break;
case 6: $step1510 = 7;
$ans1514 = ann_check_temp1520;
break;
case 7: ++R.GAS;
return $ans1514;
default: throw "No case numbered " + $step1510 + " in $temp_lam1511";
}
}
} catch($e1521) {
if(R.isCont($e1521) && ($step1510 !== 7)) {
$e1521.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1515,$temp_lam1511,$step1510,[s11512,s21513],[ann_check_temp1520,s1$elems1516]);
}
if(R.isPyretException($e1521)) {
$e1521.pyretStack.push($al1515);
}
throw $e1521;
}
};
var anf_assign1522 = R.makeFunction($temp_lam1511);
tree$set$union1302.$var = anf_assign1522;
var $temp_lam1524 = function($l11525,$l21526) {
var $step1523 = 0;
var $ans1527 = D;
var $al1528 = L[689];
try {
if(R.isActivationRecord($l11525)) {
$step1523 = $l11525.step;
$al1528 = $l11525.from;
$ans1527 = $l11525.ans;
l11525 = $l11525.args[0];
l21526 = $l11525.args[1];
anf_arg1542 = $l11525.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[689],2,$t);
}
var l11525 = $l11525;
var l21526 = $l21526;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1523) {
case 0: $step1523 = 1;
$al1528 = L[688];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1528,is$empty1148);
}
$ans1527 = is$empty1148.app(l11525);
break;
case 1: var anf_arg1529 = $ans1527;
$al1528 = L[669];
var anf_if1548 = R.checkWrapBoolean(anf_arg1529);
if(R.isPyretTrue(anf_if1548)) {
$step1523 = 2;
} else {
$step1523 = 3;
}
break;
case 2: $step1523 = 5;
$ans1527 = (true);
break;
case 3: $step1523 = 4;
$al1528 = L[670];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1528,is$empty1148);
}
$ans1527 = is$empty1148.app(l21526);
break;
case 4: var anf_arg1530 = $ans1527;
$step1523 = 5;
$al1528 = L[669];
$ans1527 = R.checkWrapBoolean(anf_arg1530);
break;
case 5: var anf_arg1531 = $ans1527;
$al1528 = L[669];
var anf_if1547 = R.checkWrapBoolean(anf_arg1531);
if(R.isPyretTrue(anf_if1547)) {
$step1523 = 6;
} else {
$step1523 = 7;
}
break;
case 6: $step1523 = 15;
$ans1527 = empty114;
break;
case 7: var anf_arg1532 = G(l11525,"first",L[671]);
var anf_arg1533 = G(l21526,"first",L[672]);
$step1523 = 8;
$al1528 = L[687];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1528,_lessthan5);
}
$ans1527 = _lessthan5.app(anf_arg1532,anf_arg1533);
break;
case 8: var anf_arg1534 = $ans1527;
$al1528 = L[673];
var anf_if1546 = R.checkWrapBoolean(anf_arg1534);
if(R.isPyretTrue(anf_if1546)) {
$step1523 = 9;
} else {
$step1523 = 10;
}
break;
case 9: var anf_arg1536 = G(l11525,"rest",L[674]);
$step1523 = 15;
$al1528 = L[675];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(anf_arg1536,l21526);
break;
case 10: var anf_arg1537 = G(l11525,"first",L[676]);
var anf_arg1538 = G(l21526,"first",L[677]);
$step1523 = 11;
$al1528 = L[686];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1528,equal$always4);
}
$ans1527 = equal$always4.app(anf_arg1537,anf_arg1538);
break;
case 11: var anf_arg1539 = $ans1527;
$al1528 = L[678];
var anf_if1545 = R.checkWrapBoolean(anf_arg1539);
if(R.isPyretTrue(anf_if1545)) {
$step1523 = 12;
} else {
$step1523 = 14;
}
break;
case 12: var anf_arg1542 = G(l11525,"first",L[679]);
var anf_arg1540 = G(l11525,"rest",L[680]);
var anf_arg1541 = G(l21526,"rest",L[681]);
$step1523 = 13;
$al1528 = L[683];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(anf_arg1540,anf_arg1541);
break;
case 13: var anf_arg1543 = $ans1527;
$step1523 = 15;
$al1528 = L[682];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1528,link312);
}
$ans1527 = link312.app(anf_arg1542,anf_arg1543);
break;
case 14: var anf_arg1544 = G(l21526,"rest",L[684]);
$step1523 = 15;
$al1528 = L[685];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(l11525,anf_arg1544);
break;
case 15: ++R.GAS;
return $ans1527;
default: throw "No case numbered " + $step1523 + " in $temp_lam1524";
}
}
} catch($e1549) {
if(R.isCont($e1549) && ($step1523 !== 15)) {
$e1549.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1528,$temp_lam1524,$step1523,[l11525,l21526],[anf_arg1542]);
}
if(R.isPyretException($e1549)) {
$e1549.pyretStack.push($al1528);
}
throw $e1549;
}
};
var anf_assign1550 = R.makeFunction($temp_lam1524);
merge$only$dups1535.$var = anf_assign1550;
var $temp_lam1552 = function($s11553,$s21554) {
var $step1551 = 0;
var $ans1555 = D;
var $al1556 = L[696];
try {
if(R.isActivationRecord($s11553)) {
$step1551 = $s11553.step;
$al1556 = $s11553.from;
$ans1555 = $s11553.ans;
s11553 = $s11553.args[0];
s21554 = $s11553.args[1];
ann_check_temp1561 = $s11553.vars[0];
s1$elems1557 = $s11553.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[696],2,$t);
}
var s11553 = $s11553;
var s21554 = $s21554;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1551) {
case 0: $step1551 = 1;
$al1556 = L[695];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1556,set$to$sorted$elems1446.$var);
}
$ans1555 = set$to$sorted$elems1446.$var.app(s11553);
break;
case 1: var s1$elems1557 = $ans1555;
$step1551 = 2;
$al1556 = L[694];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1556,set$to$sorted$elems1446.$var);
}
$ans1555 = set$to$sorted$elems1446.$var.app(s21554);
break;
case 2: var s2$elems1558 = $ans1555;
$step1551 = 3;
$al1556 = L[693];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1556,merge$only$dups1535.$var);
}
$ans1555 = merge$only$dups1535.$var.app(s1$elems1557,s2$elems1558);
break;
case 3: var new$elems1559 = $ans1555;
$step1551 = 4;
$al1556 = L[692];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1556,elems$to$balanced$avl1481.$var);
}
$ans1555 = elems$to$balanced$avl1481.$var.app(new$elems1559);
break;
case 4: var anf_arg1560 = $ans1555;
$step1551 = 5;
$al1556 = L[691];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1556,tree$set1180.$var);
}
$ans1555 = tree$set1180.$var.app(anf_arg1560);
break;
case 5: var ann_check_temp1561 = $ans1555;
$step1551 = 6;
$al1556 = L[690];
R._checkAnn(L[690],Set869,ann_check_temp1561);
break;
case 6: $step1551 = 7;
$ans1555 = ann_check_temp1561;
break;
case 7: ++R.GAS;
return $ans1555;
default: throw "No case numbered " + $step1551 + " in $temp_lam1552";
}
}
} catch($e1562) {
if(R.isCont($e1562) && ($step1551 !== 7)) {
$e1562.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1556,$temp_lam1552,$step1551,[s11553,s21554],[ann_check_temp1561,s1$elems1557]);
}
if(R.isPyretException($e1562)) {
$e1562.pyretStack.push($al1556);
}
throw $e1562;
}
};
var anf_assign1563 = R.makeFunction($temp_lam1552);
tree$set$intersect1310.$var = anf_assign1563;
var $temp_lam1565 = function($l11566,$l21567) {
var $step1564 = 0;
var $ans1568 = D;
var $al1569 = L[717];
try {
if(R.isActivationRecord($l11566)) {
$step1564 = $l11566.step;
$al1569 = $l11566.from;
$ans1568 = $l11566.ans;
l11566 = $l11566.args[0];
l21567 = $l11566.args[1];
anf_arg1583 = $l11566.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[717],2,$t);
}
var l11566 = $l11566;
var l21567 = $l21567;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1564) {
case 0: $step1564 = 1;
$al1569 = L[716];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1569,is$empty1148);
}
$ans1568 = is$empty1148.app(l11566);
break;
case 1: var anf_arg1570 = $ans1568;
$al1569 = L[697];
var anf_if1589 = R.checkWrapBoolean(anf_arg1570);
if(R.isPyretTrue(anf_if1589)) {
$step1564 = 2;
} else {
$step1564 = 3;
}
break;
case 2: $step1564 = 5;
$ans1568 = (true);
break;
case 3: $step1564 = 4;
$al1569 = L[698];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1569,is$empty1148);
}
$ans1568 = is$empty1148.app(l21567);
break;
case 4: var anf_arg1571 = $ans1568;
$step1564 = 5;
$al1569 = L[697];
$ans1568 = R.checkWrapBoolean(anf_arg1571);
break;
case 5: var anf_arg1572 = $ans1568;
$al1569 = L[697];
var anf_if1588 = R.checkWrapBoolean(anf_arg1572);
if(R.isPyretTrue(anf_if1588)) {
$step1564 = 6;
} else {
$step1564 = 7;
}
break;
case 6: $step1564 = 15;
$ans1568 = l11566;
break;
case 7: var anf_arg1573 = G(l11566,"first",L[699]);
var anf_arg1574 = G(l21567,"first",L[700]);
$step1564 = 8;
$al1569 = L[715];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1569,equal$always4);
}
$ans1568 = equal$always4.app(anf_arg1573,anf_arg1574);
break;
case 8: var anf_arg1575 = $ans1568;
$al1569 = L[701];
var anf_if1587 = R.checkWrapBoolean(anf_arg1575);
if(R.isPyretTrue(anf_if1587)) {
$step1564 = 9;
} else {
$step1564 = 10;
}
break;
case 9: var anf_arg1577 = G(l11566,"rest",L[702]);
var anf_arg1578 = G(l21567,"rest",L[703]);
$step1564 = 15;
$al1569 = L[704];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(anf_arg1577,anf_arg1578);
break;
case 10: var anf_arg1579 = G(l11566,"first",L[705]);
var anf_arg1580 = G(l21567,"first",L[706]);
$step1564 = 11;
$al1569 = L[714];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1569,_lessthan5);
}
$ans1568 = _lessthan5.app(anf_arg1579,anf_arg1580);
break;
case 11: var anf_arg1581 = $ans1568;
$al1569 = L[707];
var anf_if1586 = R.checkWrapBoolean(anf_arg1581);
if(R.isPyretTrue(anf_if1586)) {
$step1564 = 12;
} else {
$step1564 = 14;
}
break;
case 12: var anf_arg1583 = G(l11566,"first",L[708]);
var anf_arg1582 = G(l11566,"rest",L[709]);
$step1564 = 13;
$al1569 = L[711];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(anf_arg1582,l21567);
break;
case 13: var anf_arg1584 = $ans1568;
$step1564 = 15;
$al1569 = L[710];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1569,link312);
}
$ans1568 = link312.app(anf_arg1583,anf_arg1584);
break;
case 14: var anf_arg1585 = G(l21567,"rest",L[712]);
$step1564 = 15;
$al1569 = L[713];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(l11566,anf_arg1585);
break;
case 15: ++R.GAS;
return $ans1568;
default: throw "No case numbered " + $step1564 + " in $temp_lam1565";
}
}
} catch($e1590) {
if(R.isCont($e1590) && ($step1564 !== 15)) {
$e1590.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1569,$temp_lam1565,$step1564,[l11566,l21567],[anf_arg1583]);
}
if(R.isPyretException($e1590)) {
$e1590.pyretStack.push($al1569);
}
throw $e1590;
}
};
var anf_assign1591 = R.makeFunction($temp_lam1565);
merge$drop$l21576.$var = anf_assign1591;
var $temp_lam1593 = function($s11594,$s21595) {
var $step1592 = 0;
var $ans1596 = D;
var $al1597 = L[724];
try {
if(R.isActivationRecord($s11594)) {
$step1592 = $s11594.step;
$al1597 = $s11594.from;
$ans1596 = $s11594.ans;
s11594 = $s11594.args[0];
s21595 = $s11594.args[1];
ann_check_temp1602 = $s11594.vars[0];
s1$elems1598 = $s11594.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[724],2,$t);
}
var s11594 = $s11594;
var s21595 = $s21595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1592) {
case 0: $step1592 = 1;
$al1597 = L[723];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1597,set$to$sorted$elems1446.$var);
}
$ans1596 = set$to$sorted$elems1446.$var.app(s11594);
break;
case 1: var s1$elems1598 = $ans1596;
$step1592 = 2;
$al1597 = L[722];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1597,set$to$sorted$elems1446.$var);
}
$ans1596 = set$to$sorted$elems1446.$var.app(s21595);
break;
case 2: var s2$elems1599 = $ans1596;
$step1592 = 3;
$al1597 = L[721];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1597,merge$drop$l21576.$var);
}
$ans1596 = merge$drop$l21576.$var.app(s1$elems1598,s2$elems1599);
break;
case 3: var new$elems1600 = $ans1596;
$step1592 = 4;
$al1597 = L[720];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1597,elems$to$balanced$avl1481.$var);
}
$ans1596 = elems$to$balanced$avl1481.$var.app(new$elems1600);
break;
case 4: var anf_arg1601 = $ans1596;
$step1592 = 5;
$al1597 = L[719];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1597,tree$set1180.$var);
}
$ans1596 = tree$set1180.$var.app(anf_arg1601);
break;
case 5: var ann_check_temp1602 = $ans1596;
$step1592 = 6;
$al1597 = L[718];
R._checkAnn(L[718],Set869,ann_check_temp1602);
break;
case 6: $step1592 = 7;
$ans1596 = ann_check_temp1602;
break;
case 7: ++R.GAS;
return $ans1596;
default: throw "No case numbered " + $step1592 + " in $temp_lam1593";
}
}
} catch($e1603) {
if(R.isCont($e1603) && ($step1592 !== 7)) {
$e1603.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1597,$temp_lam1593,$step1592,[s11594,s21595],[ann_check_temp1602,s1$elems1598]);
}
if(R.isPyretException($e1603)) {
$e1603.pyretStack.push($al1597);
}
throw $e1603;
}
};
var anf_assign1604 = R.makeFunction($temp_lam1593);
tree$set$difference1328.$var = anf_assign1604;
var $temp_lam1606 = function($f1607,$s1608) {
var $step1605 = 0;
var $ans1609 = D;
var $al1610 = L[728];
try {
if(R.isActivationRecord($f1607)) {
$step1605 = $f1607.step;
$al1610 = $f1607.from;
$ans1609 = $f1607.ans;
f1607 = $f1607.args[0];
s1608 = $f1607.args[1];
ann_check_temp1612 = $f1607.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[728],2,$t);
}
var f1607 = $f1607;
var s1608 = $s1608;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1605) {
case 0: $step1605 = 1;
$al1610 = L[727];
R._checkAnn(L[727],Set869,s1608);
break;
case 1: $step1605 = 2;
$al1610 = L[725];
$field1611 = R.getColonFieldLoc(s1608,"all",L[725]);
if(R.isMethod($field1611)) {
$ans1609 = $field1611.full_meth(s1608,f1607);
} else {
if(!(R.isFunction($field1611))) {
R.ffi.throwNonFunApp(L[725],$field1611);
}
$ans1609 = $field1611.app(f1607);
}
break;
case 2: var ann_check_temp1612 = $ans1609;
$step1605 = 3;
$al1610 = L[726];
R._checkAnn(L[726],$type$Boolean3,ann_check_temp1612);
break;
case 3: $step1605 = 4;
$ans1609 = ann_check_temp1612;
break;
case 4: ++R.GAS;
return $ans1609;
default: throw "No case numbered " + $step1605 + " in $temp_lam1606";
}
}
} catch($e1613) {
if(R.isCont($e1613) && ($step1605 !== 4)) {
$e1613.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1610,$temp_lam1606,$step1605,[f1607,s1608],[ann_check_temp1612]);
}
if(R.isPyretException($e1613)) {
$e1613.pyretStack.push($al1610);
}
throw $e1613;
}
};
var anf_assign1614 = R.makeFunction($temp_lam1606);
set$all1615.$var = anf_assign1614;
var $temp_lam1617 = function($f1618,$s1619) {
var $step1616 = 0;
var $ans1620 = D;
var $al1621 = L[732];
try {
if(R.isActivationRecord($f1618)) {
$step1616 = $f1618.step;
$al1621 = $f1618.from;
$ans1620 = $f1618.ans;
f1618 = $f1618.args[0];
s1619 = $f1618.args[1];
ann_check_temp1623 = $f1618.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[732],2,$t);
}
var f1618 = $f1618;
var s1619 = $s1619;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1616) {
case 0: $step1616 = 1;
$al1621 = L[731];
R._checkAnn(L[731],Set869,s1619);
break;
case 1: $step1616 = 2;
$al1621 = L[729];
$field1622 = R.getColonFieldLoc(s1619,"any",L[729]);
if(R.isMethod($field1622)) {
$ans1620 = $field1622.full_meth(s1619,f1618);
} else {
if(!(R.isFunction($field1622))) {
R.ffi.throwNonFunApp(L[729],$field1622);
}
$ans1620 = $field1622.app(f1618);
}
break;
case 2: var ann_check_temp1623 = $ans1620;
$step1616 = 3;
$al1621 = L[730];
R._checkAnn(L[730],$type$Boolean3,ann_check_temp1623);
break;
case 3: $step1616 = 4;
$ans1620 = ann_check_temp1623;
break;
case 4: ++R.GAS;
return $ans1620;
default: throw "No case numbered " + $step1616 + " in $temp_lam1617";
}
}
} catch($e1624) {
if(R.isCont($e1624) && ($step1616 !== 4)) {
$e1624.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1621,$temp_lam1617,$step1616,[f1618,s1619],[ann_check_temp1623]);
}
if(R.isPyretException($e1624)) {
$e1624.pyretStack.push($al1621);
}
throw $e1624;
}
};
var anf_assign1625 = R.makeFunction($temp_lam1617);
set$any1626.$var = anf_assign1625;
var $temp_lam1628 = function($f1629,$base1630,$s1631) {
var $step1627 = 0;
var $ans1632 = D;
var $al1633 = L[735];
try {
if(R.isActivationRecord($f1629)) {
$step1627 = $f1629.step;
$al1633 = $f1629.from;
$ans1632 = $f1629.ans;
f1629 = $f1629.args[0];
base1630 = $f1629.args[1];
s1631 = $f1629.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[735],3,$t);
}
var f1629 = $f1629;
var base1630 = $base1630;
var s1631 = $s1631;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1627) {
case 0: $step1627 = 1;
$al1633 = L[734];
R._checkAnn(L[734],Set869,s1631);
break;
case 1: $step1627 = 2;
$al1633 = L[733];
$field1634 = R.getColonFieldLoc(s1631,"fold",L[733]);
if(R.isMethod($field1634)) {
$ans1632 = $field1634.full_meth(s1631,f1629,base1630);
} else {
if(!(R.isFunction($field1634))) {
R.ffi.throwNonFunApp(L[733],$field1634);
}
$ans1632 = $field1634.app(f1629,base1630);
}
break;
case 2: ++R.GAS;
return $ans1632;
default: throw "No case numbered " + $step1627 + " in $temp_lam1628";
}
}
} catch($e1635) {
if(R.isCont($e1635) && ($step1627 !== 2)) {
$e1635.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1633,$temp_lam1628,$step1627,[f1629,base1630,s1631],[]);
}
if(R.isPyretException($e1635)) {
$e1635.pyretStack.push($al1633);
}
throw $e1635;
}
};
var anf_assign1636 = R.makeFunction($temp_lam1628);
set$fold1637.$var = anf_assign1636;
var $temp_lam1639 = function($lst1640,$base$set1641) {
var $step1638 = 0;
var $ans1642 = D;
var $al1643 = L[741];
try {
if(R.isActivationRecord($lst1640)) {
$step1638 = $lst1640.step;
$al1643 = $lst1640.from;
$ans1642 = $lst1640.ans;
lst1640 = $lst1640.args[0];
base$set1641 = $lst1640.args[1];
ann_check_temp1654 = $lst1640.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[741],2,$t);
}
var lst1640 = $lst1640;
var base$set1641 = $base$set1641;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1638) {
case 0: $step1638 = 1;
$al1643 = L[739];
R._checkAnn(L[739],R.getDotAnn(L[739],"lists",lists31,"List"),lst1640);
break;
case 1: $step1638 = 2;
$al1643 = L[740];
R._checkAnn(L[740],Set869,base$set1641);
break;
case 2: var $temp_lam1645 = function($s1646,$elem1647) {
var $step1644 = 0;
var $ans1648 = D;
var $al1649 = L[737];
try {
if(R.isActivationRecord($s1646)) {
$step1644 = $s1646.step;
$al1649 = $s1646.from;
$ans1648 = $s1646.ans;
s1646 = $s1646.args[0];
elem1647 = $s1646.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[737],2,$t);
}
var s1646 = $s1646;
var elem1647 = $elem1647;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1644) {
case 0: $step1644 = 1;
$al1649 = L[736];
$field1650 = R.getColonFieldLoc(s1646,"add",L[736]);
if(R.isMethod($field1650)) {
$ans1648 = $field1650.full_meth(s1646,elem1647);
} else {
if(!(R.isFunction($field1650))) {
R.ffi.throwNonFunApp(L[736],$field1650);
}
$ans1648 = $field1650.app(elem1647);
}
break;
case 1: ++R.GAS;
return $ans1648;
default: throw "No case numbered " + $step1644 + " in $temp_lam1645";
}
}
} catch($e1651) {
if(R.isCont($e1651) && ($step1644 !== 1)) {
$e1651.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1649,$temp_lam1645,$step1644,[s1646,elem1647],[]);
}
if(R.isPyretException($e1651)) {
$e1651.pyretStack.push($al1649);
}
throw $e1651;
}
};
var anf_arg1652 = R.makeFunction($temp_lam1645);
$step1638 = 3;
$al1643 = L[737];
$field1653 = R.getColonFieldLoc(lists24,"fold",L[737]);
if(R.isMethod($field1653)) {
$ans1642 = $field1653.full_meth(lists24,anf_arg1652,base$set1641,lst1640);
} else {
if(!(R.isFunction($field1653))) {
R.ffi.throwNonFunApp(L[737],$field1653);
}
$ans1642 = $field1653.app(anf_arg1652,base$set1641,lst1640);
}
break;
case 3: var ann_check_temp1654 = $ans1642;
$step1638 = 4;
$al1643 = L[738];
R._checkAnn(L[738],Set869,ann_check_temp1654);
break;
case 4: $step1638 = 5;
$ans1642 = ann_check_temp1654;
break;
case 5: ++R.GAS;
return $ans1642;
default: throw "No case numbered " + $step1638 + " in $temp_lam1639";
}
}
} catch($e1655) {
if(R.isCont($e1655) && ($step1638 !== 5)) {
$e1655.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1643,$temp_lam1639,$step1638,[lst1640,base$set1641],[ann_check_temp1654]);
}
if(R.isPyretException($e1655)) {
$e1655.pyretStack.push($al1643);
}
throw $e1655;
}
};
var anf_assign1656 = R.makeFunction($temp_lam1639);
list$to$set1657.$var = anf_assign1656;
var $temp_lam1659 = function($lst1660) {
var $step1658 = 0;
var $ans1661 = D;
var $al1662 = L[746];
try {
if(R.isActivationRecord($lst1660)) {
$step1658 = $lst1660.step;
$al1662 = $lst1660.from;
$ans1661 = $lst1660.ans;
lst1660 = $lst1660.args[0];
ann_check_temp1664 = $lst1660.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[746],1,$t);
}
var lst1660 = $lst1660;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1658) {
case 0: $step1658 = 1;
$al1662 = L[745];
R._checkAnn(L[745],R.getDotAnn(L[745],"lists",lists31,"List"),lst1660);
break;
case 1: $step1658 = 2;
$al1662 = L[744];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1662,list$set919.$var);
}
$ans1661 = list$set919.$var.app(empty114);
break;
case 2: var anf_arg1663 = $ans1661;
$step1658 = 3;
$al1662 = L[743];
if(!(R.isFunction(list$to$set1657.$var))) {
R.ffi.throwNonFunApp($al1662,list$to$set1657.$var);
}
$ans1661 = list$to$set1657.$var.app(lst1660,anf_arg1663);
break;
case 3: var ann_check_temp1664 = $ans1661;
$step1658 = 4;
$al1662 = L[742];
R._checkAnn(L[742],Set869,ann_check_temp1664);
break;
case 4: $step1658 = 5;
$ans1661 = ann_check_temp1664;
break;
case 5: ++R.GAS;
return $ans1661;
default: throw "No case numbered " + $step1658 + " in $temp_lam1659";
}
}
} catch($e1665) {
if(R.isCont($e1665) && ($step1658 !== 5)) {
$e1665.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1662,$temp_lam1659,$step1658,[lst1660],[ann_check_temp1664]);
}
if(R.isPyretException($e1665)) {
$e1665.pyretStack.push($al1662);
}
throw $e1665;
}
};
var anf_assign1666 = R.makeFunction($temp_lam1659);
list$to$list$set1667.$var = anf_assign1666;
var $temp_lam1669 = function($lst1670) {
var $step1668 = 0;
var $ans1671 = D;
var $al1672 = L[751];
try {
if(R.isActivationRecord($lst1670)) {
$step1668 = $lst1670.step;
$al1672 = $lst1670.from;
$ans1671 = $lst1670.ans;
lst1670 = $lst1670.args[0];
ann_check_temp1674 = $lst1670.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[751],1,$t);
}
var lst1670 = $lst1670;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1668) {
case 0: $step1668 = 1;
$al1672 = L[750];
R._checkAnn(L[750],R.getDotAnn(L[750],"lists",lists31,"List"),lst1670);
break;
case 1: $step1668 = 2;
$al1672 = L[749];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1672,tree$set1180.$var);
}
$ans1671 = tree$set1180.$var.app(leaf97.$var);
break;
case 2: var anf_arg1673 = $ans1671;
$step1668 = 3;
$al1672 = L[748];
if(!(R.isFunction(list$to$set1657.$var))) {
R.ffi.throwNonFunApp($al1672,list$to$set1657.$var);
}
$ans1671 = list$to$set1657.$var.app(lst1670,anf_arg1673);
break;
case 3: var ann_check_temp1674 = $ans1671;
$step1668 = 4;
$al1672 = L[747];
R._checkAnn(L[747],Set869,ann_check_temp1674);
break;
case 4: $step1668 = 5;
$ans1671 = ann_check_temp1674;
break;
case 5: ++R.GAS;
return $ans1671;
default: throw "No case numbered " + $step1668 + " in $temp_lam1669";
}
}
} catch($e1675) {
if(R.isCont($e1675) && ($step1668 !== 5)) {
$e1675.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1672,$temp_lam1669,$step1668,[lst1670],[ann_check_temp1674]);
}
if(R.isPyretException($e1675)) {
$e1675.pyretStack.push($al1672);
}
throw $e1675;
}
};
var anf_assign1676 = R.makeFunction($temp_lam1669);
list$to$tree$set1677.$var = anf_assign1676;
var $temp_lam1679 = function($lst1680) {
var $step1678 = 0;
var $ans1681 = D;
var $al1682 = L[755];
try {
if(R.isActivationRecord($lst1680)) {
$step1678 = $lst1680.step;
$al1682 = $lst1680.from;
$ans1681 = $lst1680.ans;
lst1680 = $lst1680.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[755],1,$t);
}
var lst1680 = $lst1680;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1678) {
case 0: $step1678 = 1;
$al1682 = L[754];
R._checkAnn(L[754],R.getDotAnn(L[754],"lists",lists31,"List"),lst1680);
break;
case 1: var $temp_lam1684 = function($tree1685,$elt1686) {
var $step1683 = 0;
var $ans1687 = D;
var $al1688 = L[753];
try {
if(R.isActivationRecord($tree1685)) {
$step1683 = $tree1685.step;
$al1688 = $tree1685.from;
$ans1687 = $tree1685.ans;
tree1685 = $tree1685.args[0];
elt1686 = $tree1685.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[753],2,$t);
}
var tree1685 = $tree1685;
var elt1686 = $elt1686;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1683) {
case 0: $step1683 = 1;
$al1688 = L[752];
$field1689 = R.getColonFieldLoc(tree1685,"insert",L[752]);
if(R.isMethod($field1689)) {
$ans1687 = $field1689.full_meth(tree1685,elt1686);
} else {
if(!(R.isFunction($field1689))) {
R.ffi.throwNonFunApp(L[752],$field1689);
}
$ans1687 = $field1689.app(elt1686);
}
break;
case 1: ++R.GAS;
return $ans1687;
default: throw "No case numbered " + $step1683 + " in $temp_lam1684";
}
}
} catch($e1690) {
if(R.isCont($e1690) && ($step1683 !== 1)) {
$e1690.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1688,$temp_lam1684,$step1683,[tree1685,elt1686],[]);
}
if(R.isPyretException($e1690)) {
$e1690.pyretStack.push($al1688);
}
throw $e1690;
}
};
var anf_arg1691 = R.makeFunction($temp_lam1684);
$step1678 = 2;
$al1682 = L[753];
$field1692 = R.getColonFieldLoc(lists24,"fold",L[753]);
if(R.isMethod($field1692)) {
$ans1681 = $field1692.full_meth(lists24,anf_arg1691,leaf97.$var,lst1680);
} else {
if(!(R.isFunction($field1692))) {
R.ffi.throwNonFunApp(L[753],$field1692);
}
$ans1681 = $field1692.app(anf_arg1691,leaf97.$var,lst1680);
}
break;
case 2: ++R.GAS;
return $ans1681;
default: throw "No case numbered " + $step1678 + " in $temp_lam1679";
}
}
} catch($e1693) {
if(R.isCont($e1693) && ($step1678 !== 2)) {
$e1693.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1682,$temp_lam1679,$step1678,[lst1680],[]);
}
if(R.isPyretException($e1693)) {
$e1693.pyretStack.push($al1682);
}
throw $e1693;
}
};
var anf_assign1694 = R.makeFunction($temp_lam1679);
list$to$tree1695.$var = anf_assign1694;
var $temp_lam1697 = function($arr1698) {
var $step1696 = 0;
var $ans1699 = D;
var $al1700 = L[761];
try {
if(R.isActivationRecord($arr1698)) {
$step1696 = $arr1698.step;
$al1700 = $arr1698.from;
$ans1699 = $arr1698.ans;
arr1698 = $arr1698.args[0];
ann_check_temp1712 = $arr1698.vars[0];
anf_arg1710 = $arr1698.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[761],1,$t);
}
var arr1698 = $arr1698;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1696) {
case 0: $step1696 = 1;
$al1700 = L[760];
R._checkAnn(L[760],$type$RawArray18,arr1698);
break;
case 1: var $temp_lam1702 = function($ls1703,$elt1704,$$underscore1705) {
var $step1701 = 0;
var $ans1706 = D;
var $al1707 = L[757];
try {
if(R.isActivationRecord($ls1703)) {
$step1701 = $ls1703.step;
$al1707 = $ls1703.from;
$ans1706 = $ls1703.ans;
ls1703 = $ls1703.args[0];
elt1704 = $ls1703.args[1];
$underscore1705 = $ls1703.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[757],3,$t);
}
var ls1703 = $ls1703;
var elt1704 = $elt1704;
var $underscore1705 = $$underscore1705;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1701) {
case 0: $step1701 = 1;
$al1707 = L[756];
$field1708 = R.getColonFieldLoc(ls1703,"add",L[756]);
if(R.isMethod($field1708)) {
$ans1706 = $field1708.full_meth(ls1703,elt1704);
} else {
if(!(R.isFunction($field1708))) {
R.ffi.throwNonFunApp(L[756],$field1708);
}
$ans1706 = $field1708.app(elt1704);
}
break;
case 1: ++R.GAS;
return $ans1706;
default: throw "No case numbered " + $step1701 + " in $temp_lam1702";
}
}
} catch($e1709) {
if(R.isCont($e1709) && ($step1701 !== 1)) {
$e1709.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1707,$temp_lam1702,$step1701,[ls1703,elt1704,$underscore1705],[]);
}
if(R.isPyretException($e1709)) {
$e1709.pyretStack.push($al1707);
}
throw $e1709;
}
};
var anf_arg1710 = R.makeFunction($temp_lam1702);
$step1696 = 2;
$al1700 = L[759];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1700,list$set919.$var);
}
$ans1699 = list$set919.$var.app(empty114);
break;
case 2: var anf_arg1711 = $ans1699;
$step1696 = 3;
$al1700 = L[757];
if(!(R.isFunction(raw$array$fold19))) {
R.ffi.throwNonFunApp($al1700,raw$array$fold19);
}
$ans1699 = raw$array$fold19.app(anf_arg1710,anf_arg1711,arr1698,(0));
break;
case 3: var ann_check_temp1712 = $ans1699;
$step1696 = 4;
$al1700 = L[758];
R._checkAnn(L[758],Set869,ann_check_temp1712);
break;
case 4: $step1696 = 5;
$ans1699 = ann_check_temp1712;
break;
case 5: ++R.GAS;
return $ans1699;
default: throw "No case numbered " + $step1696 + " in $temp_lam1697";
}
}
} catch($e1713) {
if(R.isCont($e1713) && ($step1696 !== 5)) {
$e1713.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1700,$temp_lam1697,$step1696,[arr1698],[ann_check_temp1712,anf_arg1710]);
}
if(R.isPyretException($e1713)) {
$e1713.pyretStack.push($al1700);
}
throw $e1713;
}
};
var anf_assign1714 = R.makeFunction($temp_lam1697);
arr$to$list$set1715.$var = anf_assign1714;
var $temp_lam1717 = function($arr1718) {
var $step1716 = 0;
var $ans1719 = D;
var $al1720 = L[767];
try {
if(R.isActivationRecord($arr1718)) {
$step1716 = $arr1718.step;
$al1720 = $arr1718.from;
$ans1719 = $arr1718.ans;
arr1718 = $arr1718.args[0];
ann_check_temp1732 = $arr1718.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[767],1,$t);
}
var arr1718 = $arr1718;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1716) {
case 0: $step1716 = 1;
$al1720 = L[766];
R._checkAnn(L[766],$type$RawArray18,arr1718);
break;
case 1: var $temp_lam1722 = function($t1723,$elt1724,$$underscore1725) {
var $step1721 = 0;
var $ans1726 = D;
var $al1727 = L[763];
try {
if(R.isActivationRecord($t1723)) {
$step1721 = $t1723.step;
$al1727 = $t1723.from;
$ans1726 = $t1723.ans;
t1723 = $t1723.args[0];
elt1724 = $t1723.args[1];
$underscore1725 = $t1723.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[763],3,$t);
}
var t1723 = $t1723;
var elt1724 = $elt1724;
var $underscore1725 = $$underscore1725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1721) {
case 0: $step1721 = 1;
$al1727 = L[762];
$field1728 = R.getColonFieldLoc(t1723,"insert",L[762]);
if(R.isMethod($field1728)) {
$ans1726 = $field1728.full_meth(t1723,elt1724);
} else {
if(!(R.isFunction($field1728))) {
R.ffi.throwNonFunApp(L[762],$field1728);
}
$ans1726 = $field1728.app(elt1724);
}
break;
case 1: ++R.GAS;
return $ans1726;
default: throw "No case numbered " + $step1721 + " in $temp_lam1722";
}
}
} catch($e1729) {
if(R.isCont($e1729) && ($step1721 !== 1)) {
$e1729.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1727,$temp_lam1722,$step1721,[t1723,elt1724,$underscore1725],[]);
}
if(R.isPyretException($e1729)) {
$e1729.pyretStack.push($al1727);
}
throw $e1729;
}
};
var anf_arg1730 = R.makeFunction($temp_lam1722);
$step1716 = 2;
$al1720 = L[763];
if(!(R.isFunction(raw$array$fold19))) {
R.ffi.throwNonFunApp($al1720,raw$array$fold19);
}
$ans1719 = raw$array$fold19.app(anf_arg1730,leaf97.$var,arr1718,(0));
break;
case 2: var tree1731 = $ans1719;
$step1716 = 3;
$al1720 = L[765];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1720,tree$set1180.$var);
}
$ans1719 = tree$set1180.$var.app(tree1731);
break;
case 3: var ann_check_temp1732 = $ans1719;
$step1716 = 4;
$al1720 = L[764];
R._checkAnn(L[764],Set869,ann_check_temp1732);
break;
case 4: $step1716 = 5;
$ans1719 = ann_check_temp1732;
break;
case 5: ++R.GAS;
return $ans1719;
default: throw "No case numbered " + $step1716 + " in $temp_lam1717";
}
}
} catch($e1733) {
if(R.isCont($e1733) && ($step1716 !== 5)) {
$e1733.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1720,$temp_lam1717,$step1716,[arr1718],[ann_check_temp1732]);
}
if(R.isPyretException($e1733)) {
$e1733.pyretStack.push($al1720);
}
throw $e1733;
}
};
var anf_assign1734 = R.makeFunction($temp_lam1717);
arr$to$tree$set1735.$var = anf_assign1734;
$step43 = 1;
$al47 = L[844];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al47,list$set919.$var);
}
$ans46 = list$set919.$var.app(empty114);
break;
case 1: var empty$list$set1807 = $ans46;
$step43 = 2;
$al47 = L[843];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al47,tree$set1180.$var);
}
$ans46 = tree$set1180.$var.app(leaf97.$var);
break;
case 2: var empty$tree$set1864 = $ans46;
var makeSet21747 = {"$var":D};
var makeSet31762 = {"$var":D};
var makeSet41780 = {"$var":D};
var makeSet51801 = {"$var":D};
var $temp_lam1737 = function($a1738,$b1739) {
var $step1736 = 0;
var $ans1740 = D;
var $al1741 = L[772];
try {
if(R.isActivationRecord($a1738)) {
$step1736 = $a1738.step;
$al1741 = $a1738.from;
$ans1740 = $a1738.ans;
a1738 = $a1738.args[0];
b1739 = $a1738.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[772],2,$t);
}
var a1738 = $a1738;
var b1739 = $b1739;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1736) {
case 0: $step1736 = 1;
$al1741 = L[768];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1741,equal$always4);
}
$ans1740 = equal$always4.app(a1738,b1739);
break;
case 1: var anf_arg1742 = $ans1740;
$al1741 = L[768];
var anf_if1744 = R.checkWrapBoolean(anf_arg1742);
if(R.isPyretTrue(anf_if1744)) {
$step1736 = 2;
} else {
$step1736 = 3;
}
break;
case 2: $step1736 = 5;
$al1741 = L[769];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(a1738,empty114);
break;
case 3: $step1736 = 4;
$al1741 = L[771];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(b1739,empty114);
break;
case 4: var anf_arg1743 = $ans1740;
$step1736 = 5;
$al1741 = L[770];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(a1738,anf_arg1743);
break;
case 5: ++R.GAS;
return $ans1740;
default: throw "No case numbered " + $step1736 + " in $temp_lam1737";
}
}
} catch($e1745) {
if(R.isCont($e1745) && ($step1736 !== 5)) {
$e1745.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1741,$temp_lam1737,$step1736,[a1738,b1739],[]);
}
if(R.isPyretException($e1745)) {
$e1745.pyretStack.push($al1741);
}
throw $e1745;
}
};
var anf_assign1746 = R.makeFunction($temp_lam1737);
makeSet21747.$var = anf_assign1746;
var $temp_lam1749 = function($a1750,$b1751,$c1752) {
var $step1748 = 0;
var $ans1753 = D;
var $al1754 = L[780];
try {
if(R.isActivationRecord($a1750)) {
$step1748 = $a1750.step;
$al1754 = $a1750.from;
$ans1753 = $a1750.ans;
a1750 = $a1750.args[0];
b1751 = $a1750.args[1];
c1752 = $a1750.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[780],3,$t);
}
var a1750 = $a1750;
var b1751 = $b1751;
var c1752 = $c1752;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1748) {
case 0: $step1748 = 1;
$al1754 = L[773];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1754,equal$always4);
}
$ans1753 = equal$always4.app(a1750,b1751);
break;
case 1: var anf_arg1755 = $ans1753;
$al1754 = L[773];
var anf_if1759 = R.checkWrapBoolean(anf_arg1755);
if(R.isPyretTrue(anf_if1759)) {
$step1748 = 2;
} else {
$step1748 = 3;
}
break;
case 2: $step1748 = 8;
$al1754 = L[774];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(b1751,c1752);
break;
case 3: $step1748 = 4;
$al1754 = L[779];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1754,equal$always4);
}
$ans1753 = equal$always4.app(a1750,c1752);
break;
case 4: var anf_arg1756 = $ans1753;
$al1754 = L[775];
var anf_if1758 = R.checkWrapBoolean(anf_arg1756);
if(R.isPyretTrue(anf_if1758)) {
$step1748 = 5;
} else {
$step1748 = 6;
}
break;
case 5: $step1748 = 8;
$al1754 = L[776];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(a1750,c1752);
break;
case 6: $step1748 = 7;
$al1754 = L[778];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(b1751,c1752);
break;
case 7: var anf_arg1757 = $ans1753;
$step1748 = 8;
$al1754 = L[777];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1754,link312);
}
$ans1753 = link312.app(a1750,anf_arg1757);
break;
case 8: ++R.GAS;
return $ans1753;
default: throw "No case numbered " + $step1748 + " in $temp_lam1749";
}
}
} catch($e1760) {
if(R.isCont($e1760) && ($step1748 !== 8)) {
$e1760.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1754,$temp_lam1749,$step1748,[a1750,b1751,c1752],[]);
}
if(R.isPyretException($e1760)) {
$e1760.pyretStack.push($al1754);
}
throw $e1760;
}
};
var anf_assign1761 = R.makeFunction($temp_lam1749);
makeSet31762.$var = anf_assign1761;
var $temp_lam1764 = function($a1765,$b1766,$c1767,$d1768) {
var $step1763 = 0;
var $ans1769 = D;
var $al1770 = L[791];
try {
if(R.isActivationRecord($a1765)) {
$step1763 = $a1765.step;
$al1770 = $a1765.from;
$ans1769 = $a1765.ans;
a1765 = $a1765.args[0];
b1766 = $a1765.args[1];
c1767 = $a1765.args[2];
d1768 = $a1765.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[791],4,$t);
}
var a1765 = $a1765;
var b1766 = $b1766;
var c1767 = $c1767;
var d1768 = $d1768;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1763) {
case 0: $step1763 = 1;
$al1770 = L[781];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,b1766);
break;
case 1: var anf_arg1771 = $ans1769;
$al1770 = L[781];
var anf_if1777 = R.checkWrapBoolean(anf_arg1771);
if(R.isPyretTrue(anf_if1777)) {
$step1763 = 2;
} else {
$step1763 = 3;
}
break;
case 2: $step1763 = 11;
$al1770 = L[782];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(b1766,c1767,d1768);
break;
case 3: $step1763 = 4;
$al1770 = L[790];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,c1767);
break;
case 4: var anf_arg1772 = $ans1769;
$al1770 = L[783];
var anf_if1776 = R.checkWrapBoolean(anf_arg1772);
if(R.isPyretTrue(anf_if1776)) {
$step1763 = 5;
} else {
$step1763 = 6;
}
break;
case 5: $step1763 = 11;
$al1770 = L[784];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(a1765,c1767,d1768);
break;
case 6: $step1763 = 7;
$al1770 = L[789];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,d1768);
break;
case 7: var anf_arg1773 = $ans1769;
$al1770 = L[785];
var anf_if1775 = R.checkWrapBoolean(anf_arg1773);
if(R.isPyretTrue(anf_if1775)) {
$step1763 = 8;
} else {
$step1763 = 9;
}
break;
case 8: $step1763 = 11;
$al1770 = L[786];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(a1765,b1766,c1767);
break;
case 9: $step1763 = 10;
$al1770 = L[788];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(b1766,c1767,d1768);
break;
case 10: var anf_arg1774 = $ans1769;
$step1763 = 11;
$al1770 = L[787];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1770,link312);
}
$ans1769 = link312.app(a1765,anf_arg1774);
break;
case 11: ++R.GAS;
return $ans1769;
default: throw "No case numbered " + $step1763 + " in $temp_lam1764";
}
}
} catch($e1778) {
if(R.isCont($e1778) && ($step1763 !== 11)) {
$e1778.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1770,$temp_lam1764,$step1763,[a1765,b1766,c1767,d1768],[]);
}
if(R.isPyretException($e1778)) {
$e1778.pyretStack.push($al1770);
}
throw $e1778;
}
};
var anf_assign1779 = R.makeFunction($temp_lam1764);
makeSet41780.$var = anf_assign1779;
var $temp_lam1782 = function($a1783,$b1784,$c1785,$d1786,$e1787) {
var $step1781 = 0;
var $ans1788 = D;
var $al1789 = L[805];
try {
if(R.isActivationRecord($a1783)) {
$step1781 = $a1783.step;
$al1789 = $a1783.from;
$ans1788 = $a1783.ans;
a1783 = $a1783.args[0];
b1784 = $a1783.args[1];
c1785 = $a1783.args[2];
d1786 = $a1783.args[3];
e1787 = $a1783.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[805],5,$t);
}
var a1783 = $a1783;
var b1784 = $b1784;
var c1785 = $c1785;
var d1786 = $d1786;
var e1787 = $e1787;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1781) {
case 0: $step1781 = 1;
$al1789 = L[792];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,b1784);
break;
case 1: var anf_arg1790 = $ans1788;
$al1789 = L[792];
var anf_if1798 = R.checkWrapBoolean(anf_arg1790);
if(R.isPyretTrue(anf_if1798)) {
$step1781 = 2;
} else {
$step1781 = 3;
}
break;
case 2: $step1781 = 14;
$al1789 = L[793];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(b1784,c1785,d1786,e1787);
break;
case 3: $step1781 = 4;
$al1789 = L[804];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,c1785);
break;
case 4: var anf_arg1791 = $ans1788;
$al1789 = L[794];
var anf_if1797 = R.checkWrapBoolean(anf_arg1791);
if(R.isPyretTrue(anf_if1797)) {
$step1781 = 5;
} else {
$step1781 = 6;
}
break;
case 5: $step1781 = 14;
$al1789 = L[795];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,c1785,d1786,e1787);
break;
case 6: $step1781 = 7;
$al1789 = L[803];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,d1786);
break;
case 7: var anf_arg1792 = $ans1788;
$al1789 = L[796];
var anf_if1796 = R.checkWrapBoolean(anf_arg1792);
if(R.isPyretTrue(anf_if1796)) {
$step1781 = 8;
} else {
$step1781 = 9;
}
break;
case 8: $step1781 = 14;
$al1789 = L[797];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,b1784,c1785,e1787);
break;
case 9: $step1781 = 10;
$al1789 = L[802];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,e1787);
break;
case 10: var anf_arg1793 = $ans1788;
$al1789 = L[798];
var anf_if1795 = R.checkWrapBoolean(anf_arg1793);
if(R.isPyretTrue(anf_if1795)) {
$step1781 = 11;
} else {
$step1781 = 12;
}
break;
case 11: $step1781 = 14;
$al1789 = L[799];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,b1784,c1785,d1786);
break;
case 12: $step1781 = 13;
$al1789 = L[801];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(b1784,c1785,d1786,e1787);
break;
case 13: var anf_arg1794 = $ans1788;
$step1781 = 14;
$al1789 = L[800];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1789,link312);
}
$ans1788 = link312.app(a1783,anf_arg1794);
break;
case 14: ++R.GAS;
return $ans1788;
default: throw "No case numbered " + $step1781 + " in $temp_lam1782";
}
}
} catch($e1799) {
if(R.isCont($e1799) && ($step1781 !== 14)) {
$e1799.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1789,$temp_lam1782,$step1781,[a1783,b1784,c1785,d1786,e1787],[]);
}
if(R.isPyretException($e1799)) {
$e1799.pyretStack.push($al1789);
}
throw $e1799;
}
};
var anf_assign1800 = R.makeFunction($temp_lam1782);
makeSet51801.$var = anf_assign1800;
var $temp_lam1803 = function($$resumer1804) {
var $step1802 = 0;
var $ans1805 = D;
var $al1806 = L[806];
try {
if(R.isActivationRecord($$resumer1804)) {
$step1802 = $$resumer1804.step;
$al1806 = $$resumer1804.from;
$ans1805 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[806],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1802) {
case 0: $step1802 = 1;
$ans1805 = empty$list$set1807;
break;
case 1: ++R.GAS;
return $ans1805;
default: throw "No case numbered " + $step1802 + " in $temp_lam1803";
}
}
} catch($e1808) {
if(R.isCont($e1808) && ($step1802 !== 1)) {
$e1808.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1806,$temp_lam1803,$step1802,[],[]);
}
if(R.isPyretException($e1808)) {
$e1808.pyretStack.push($al1806);
}
throw $e1808;
}
};
var anf_obj1854 = R.makeFunction($temp_lam1803);
var $temp_lam1810 = function($a1811) {
var $step1809 = 0;
var $ans1812 = D;
var $al1813 = L[809];
try {
if(R.isActivationRecord($a1811)) {
$step1809 = $a1811.step;
$al1813 = $a1811.from;
$ans1812 = $a1811.ans;
a1811 = $a1811.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[809],1,$t);
}
var a1811 = $a1811;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1809) {
case 0: $step1809 = 1;
$al1813 = L[808];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1813,link312);
}
$ans1812 = link312.app(a1811,empty114);
break;
case 1: var anf_arg1814 = $ans1812;
$step1809 = 2;
$al1813 = L[807];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1813,list$set919.$var);
}
$ans1812 = list$set919.$var.app(anf_arg1814);
break;
case 2: ++R.GAS;
return $ans1812;
default: throw "No case numbered " + $step1809 + " in $temp_lam1810";
}
}
} catch($e1815) {
if(R.isCont($e1815) && ($step1809 !== 2)) {
$e1815.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1813,$temp_lam1810,$step1809,[a1811],[]);
}
if(R.isPyretException($e1815)) {
$e1815.pyretStack.push($al1813);
}
throw $e1815;
}
};
var anf_obj1855 = R.makeFunction($temp_lam1810);
var $temp_lam1817 = function($a1818,$b1819) {
var $step1816 = 0;
var $ans1820 = D;
var $al1821 = L[812];
try {
if(R.isActivationRecord($a1818)) {
$step1816 = $a1818.step;
$al1821 = $a1818.from;
$ans1820 = $a1818.ans;
a1818 = $a1818.args[0];
b1819 = $a1818.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[812],2,$t);
}
var a1818 = $a1818;
var b1819 = $b1819;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1816) {
case 0: $step1816 = 1;
$al1821 = L[811];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1821,makeSet21747.$var);
}
$ans1820 = makeSet21747.$var.app(a1818,b1819);
break;
case 1: var anf_arg1822 = $ans1820;
$step1816 = 2;
$al1821 = L[810];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1821,list$set919.$var);
}
$ans1820 = list$set919.$var.app(anf_arg1822);
break;
case 2: ++R.GAS;
return $ans1820;
default: throw "No case numbered " + $step1816 + " in $temp_lam1817";
}
}
} catch($e1823) {
if(R.isCont($e1823) && ($step1816 !== 2)) {
$e1823.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1821,$temp_lam1817,$step1816,[a1818,b1819],[]);
}
if(R.isPyretException($e1823)) {
$e1823.pyretStack.push($al1821);
}
throw $e1823;
}
};
var anf_obj1856 = R.makeFunction($temp_lam1817);
var $temp_lam1825 = function($a1826,$b1827,$c1828) {
var $step1824 = 0;
var $ans1829 = D;
var $al1830 = L[815];
try {
if(R.isActivationRecord($a1826)) {
$step1824 = $a1826.step;
$al1830 = $a1826.from;
$ans1829 = $a1826.ans;
a1826 = $a1826.args[0];
b1827 = $a1826.args[1];
c1828 = $a1826.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[815],3,$t);
}
var a1826 = $a1826;
var b1827 = $b1827;
var c1828 = $c1828;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1824) {
case 0: $step1824 = 1;
$al1830 = L[814];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1830,makeSet31762.$var);
}
$ans1829 = makeSet31762.$var.app(a1826,b1827,c1828);
break;
case 1: var anf_arg1831 = $ans1829;
$step1824 = 2;
$al1830 = L[813];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1830,list$set919.$var);
}
$ans1829 = list$set919.$var.app(anf_arg1831);
break;
case 2: ++R.GAS;
return $ans1829;
default: throw "No case numbered " + $step1824 + " in $temp_lam1825";
}
}
} catch($e1832) {
if(R.isCont($e1832) && ($step1824 !== 2)) {
$e1832.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1830,$temp_lam1825,$step1824,[a1826,b1827,c1828],[]);
}
if(R.isPyretException($e1832)) {
$e1832.pyretStack.push($al1830);
}
throw $e1832;
}
};
var anf_obj1857 = R.makeFunction($temp_lam1825);
var $temp_lam1834 = function($a1835,$b1836,$c1837,$d1838) {
var $step1833 = 0;
var $ans1839 = D;
var $al1840 = L[818];
try {
if(R.isActivationRecord($a1835)) {
$step1833 = $a1835.step;
$al1840 = $a1835.from;
$ans1839 = $a1835.ans;
a1835 = $a1835.args[0];
b1836 = $a1835.args[1];
c1837 = $a1835.args[2];
d1838 = $a1835.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[818],4,$t);
}
var a1835 = $a1835;
var b1836 = $b1836;
var c1837 = $c1837;
var d1838 = $d1838;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1833) {
case 0: $step1833 = 1;
$al1840 = L[817];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1840,makeSet41780.$var);
}
$ans1839 = makeSet41780.$var.app(a1835,b1836,c1837,d1838);
break;
case 1: var anf_arg1841 = $ans1839;
$step1833 = 2;
$al1840 = L[816];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1840,list$set919.$var);
}
$ans1839 = list$set919.$var.app(anf_arg1841);
break;
case 2: ++R.GAS;
return $ans1839;
default: throw "No case numbered " + $step1833 + " in $temp_lam1834";
}
}
} catch($e1842) {
if(R.isCont($e1842) && ($step1833 !== 2)) {
$e1842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1840,$temp_lam1834,$step1833,[a1835,b1836,c1837,d1838],[]);
}
if(R.isPyretException($e1842)) {
$e1842.pyretStack.push($al1840);
}
throw $e1842;
}
};
var anf_obj1858 = R.makeFunction($temp_lam1834);
var $temp_lam1844 = function($a1845,$b1846,$c1847,$d1848,$e1849) {
var $step1843 = 0;
var $ans1850 = D;
var $al1851 = L[821];
try {
if(R.isActivationRecord($a1845)) {
$step1843 = $a1845.step;
$al1851 = $a1845.from;
$ans1850 = $a1845.ans;
a1845 = $a1845.args[0];
b1846 = $a1845.args[1];
c1847 = $a1845.args[2];
d1848 = $a1845.args[3];
e1849 = $a1845.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[821],5,$t);
}
var a1845 = $a1845;
var b1846 = $b1846;
var c1847 = $c1847;
var d1848 = $d1848;
var e1849 = $e1849;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1843) {
case 0: $step1843 = 1;
$al1851 = L[820];
if(!(R.isFunction(makeSet51801.$var))) {
R.ffi.throwNonFunApp($al1851,makeSet51801.$var);
}
$ans1850 = makeSet51801.$var.app(a1845,b1846,c1847,d1848,e1849);
break;
case 1: var anf_arg1852 = $ans1850;
$step1843 = 2;
$al1851 = L[819];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1851,list$set919.$var);
}
$ans1850 = list$set919.$var.app(anf_arg1852);
break;
case 2: ++R.GAS;
return $ans1850;
default: throw "No case numbered " + $step1843 + " in $temp_lam1844";
}
}
} catch($e1853) {
if(R.isCont($e1853) && ($step1843 !== 2)) {
$e1853.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1851,$temp_lam1844,$step1843,[a1845,b1846,c1847,d1848,e1849],[]);
}
if(R.isPyretException($e1853)) {
$e1853.pyretStack.push($al1851);
}
throw $e1853;
}
};
var anf_obj1859 = R.makeFunction($temp_lam1844);
var list$set$maker1937 = R.makeObject({"make":arr$to$list$set1715.$var,
"make0":anf_obj1854,
"make1":anf_obj1855,
"make2":anf_obj1856,
"make3":anf_obj1857,
"make4":anf_obj1858,
"make5":anf_obj1859});
var $temp_lam1861 = function($$resumer1804) {
var $step1860 = 0;
var $ans1862 = D;
var $al1863 = L[822];
try {
if(R.isActivationRecord($$resumer1804)) {
$step1860 = $$resumer1804.step;
$al1863 = $$resumer1804.from;
$ans1862 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[822],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1860) {
case 0: $step1860 = 1;
$ans1862 = empty$tree$set1864;
break;
case 1: ++R.GAS;
return $ans1862;
default: throw "No case numbered " + $step1860 + " in $temp_lam1861";
}
}
} catch($e1865) {
if(R.isCont($e1865) && ($step1860 !== 1)) {
$e1865.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1863,$temp_lam1861,$step1860,[],[]);
}
if(R.isPyretException($e1865)) {
$e1865.pyretStack.push($al1863);
}
throw $e1865;
}
};
var anf_obj1931 = R.makeFunction($temp_lam1861);
var $temp_lam1867 = function($a1868) {
var $step1866 = 0;
var $ans1869 = D;
var $al1870 = L[824];
try {
if(R.isActivationRecord($a1868)) {
$step1866 = $a1868.step;
$al1870 = $a1868.from;
$ans1869 = $a1868.ans;
a1868 = $a1868.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[824],1,$t);
}
var a1868 = $a1868;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1866) {
case 0: $step1866 = 1;
$al1870 = L[823];
$field1871 = R.getColonFieldLoc(empty$tree$set1864,"add",L[823]);
if(R.isMethod($field1871)) {
$ans1869 = $field1871.full_meth(empty$tree$set1864,a1868);
} else {
if(!(R.isFunction($field1871))) {
R.ffi.throwNonFunApp(L[823],$field1871);
}
$ans1869 = $field1871.app(a1868);
}
break;
case 1: ++R.GAS;
return $ans1869;
default: throw "No case numbered " + $step1866 + " in $temp_lam1867";
}
}
} catch($e1872) {
if(R.isCont($e1872) && ($step1866 !== 1)) {
$e1872.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1870,$temp_lam1867,$step1866,[a1868],[]);
}
if(R.isPyretException($e1872)) {
$e1872.pyretStack.push($al1870);
}
throw $e1872;
}
};
var anf_obj1932 = R.makeFunction($temp_lam1867);
var $temp_lam1874 = function($a1875,$b1876) {
var $step1873 = 0;
var $ans1877 = D;
var $al1878 = L[827];
try {
if(R.isActivationRecord($a1875)) {
$step1873 = $a1875.step;
$al1878 = $a1875.from;
$ans1877 = $a1875.ans;
a1875 = $a1875.args[0];
b1876 = $a1875.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[827],2,$t);
}
var a1875 = $a1875;
var b1876 = $b1876;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1873) {
case 0: $step1873 = 1;
$al1878 = L[825];
$field1879 = R.getColonFieldLoc(empty$tree$set1864,"add",L[825]);
if(R.isMethod($field1879)) {
$ans1877 = $field1879.full_meth(empty$tree$set1864,a1875);
} else {
if(!(R.isFunction($field1879))) {
R.ffi.throwNonFunApp(L[825],$field1879);
}
$ans1877 = $field1879.app(a1875);
}
break;
case 1: var anf_method_obj1880 = $ans1877;
$step1873 = 2;
$al1878 = L[826];
$field1881 = R.getColonFieldLoc(anf_method_obj1880,"add",L[826]);
if(R.isMethod($field1881)) {
$ans1877 = $field1881.full_meth(anf_method_obj1880,b1876);
} else {
if(!(R.isFunction($field1881))) {
R.ffi.throwNonFunApp(L[826],$field1881);
}
$ans1877 = $field1881.app(b1876);
}
break;
case 2: ++R.GAS;
return $ans1877;
default: throw "No case numbered " + $step1873 + " in $temp_lam1874";
}
}
} catch($e1882) {
if(R.isCont($e1882) && ($step1873 !== 2)) {
$e1882.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1878,$temp_lam1874,$step1873,[a1875,b1876],[]);
}
if(R.isPyretException($e1882)) {
$e1882.pyretStack.push($al1878);
}
throw $e1882;
}
};
var anf_obj1933 = R.makeFunction($temp_lam1874);
var $temp_lam1884 = function($a1885,$b1886,$c1887) {
var $step1883 = 0;
var $ans1888 = D;
var $al1889 = L[831];
try {
if(R.isActivationRecord($a1885)) {
$step1883 = $a1885.step;
$al1889 = $a1885.from;
$ans1888 = $a1885.ans;
a1885 = $a1885.args[0];
b1886 = $a1885.args[1];
c1887 = $a1885.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[831],3,$t);
}
var a1885 = $a1885;
var b1886 = $b1886;
var c1887 = $c1887;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1883) {
case 0: $step1883 = 1;
$al1889 = L[828];
$field1890 = R.getColonFieldLoc(empty$tree$set1864,"add",L[828]);
if(R.isMethod($field1890)) {
$ans1888 = $field1890.full_meth(empty$tree$set1864,a1885);
} else {
if(!(R.isFunction($field1890))) {
R.ffi.throwNonFunApp(L[828],$field1890);
}
$ans1888 = $field1890.app(a1885);
}
break;
case 1: var anf_method_obj1891 = $ans1888;
$step1883 = 2;
$al1889 = L[829];
$field1892 = R.getColonFieldLoc(anf_method_obj1891,"add",L[829]);
if(R.isMethod($field1892)) {
$ans1888 = $field1892.full_meth(anf_method_obj1891,b1886);
} else {
if(!(R.isFunction($field1892))) {
R.ffi.throwNonFunApp(L[829],$field1892);
}
$ans1888 = $field1892.app(b1886);
}
break;
case 2: var anf_method_obj1893 = $ans1888;
$step1883 = 3;
$al1889 = L[830];
$field1894 = R.getColonFieldLoc(anf_method_obj1893,"add",L[830]);
if(R.isMethod($field1894)) {
$ans1888 = $field1894.full_meth(anf_method_obj1893,c1887);
} else {
if(!(R.isFunction($field1894))) {
R.ffi.throwNonFunApp(L[830],$field1894);
}
$ans1888 = $field1894.app(c1887);
}
break;
case 3: ++R.GAS;
return $ans1888;
default: throw "No case numbered " + $step1883 + " in $temp_lam1884";
}
}
} catch($e1895) {
if(R.isCont($e1895) && ($step1883 !== 3)) {
$e1895.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1889,$temp_lam1884,$step1883,[a1885,b1886,c1887],[]);
}
if(R.isPyretException($e1895)) {
$e1895.pyretStack.push($al1889);
}
throw $e1895;
}
};
var anf_obj1934 = R.makeFunction($temp_lam1884);
var $temp_lam1897 = function($a1898,$b1899,$c1900,$d1901) {
var $step1896 = 0;
var $ans1902 = D;
var $al1903 = L[836];
try {
if(R.isActivationRecord($a1898)) {
$step1896 = $a1898.step;
$al1903 = $a1898.from;
$ans1902 = $a1898.ans;
a1898 = $a1898.args[0];
b1899 = $a1898.args[1];
c1900 = $a1898.args[2];
d1901 = $a1898.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[836],4,$t);
}
var a1898 = $a1898;
var b1899 = $b1899;
var c1900 = $c1900;
var d1901 = $d1901;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1896) {
case 0: $step1896 = 1;
$al1903 = L[832];
$field1904 = R.getColonFieldLoc(empty$tree$set1864,"add",L[832]);
if(R.isMethod($field1904)) {
$ans1902 = $field1904.full_meth(empty$tree$set1864,a1898);
} else {
if(!(R.isFunction($field1904))) {
R.ffi.throwNonFunApp(L[832],$field1904);
}
$ans1902 = $field1904.app(a1898);
}
break;
case 1: var anf_method_obj1905 = $ans1902;
$step1896 = 2;
$al1903 = L[833];
$field1906 = R.getColonFieldLoc(anf_method_obj1905,"add",L[833]);
if(R.isMethod($field1906)) {
$ans1902 = $field1906.full_meth(anf_method_obj1905,b1899);
} else {
if(!(R.isFunction($field1906))) {
R.ffi.throwNonFunApp(L[833],$field1906);
}
$ans1902 = $field1906.app(b1899);
}
break;
case 2: var anf_method_obj1907 = $ans1902;
$step1896 = 3;
$al1903 = L[834];
$field1908 = R.getColonFieldLoc(anf_method_obj1907,"add",L[834]);
if(R.isMethod($field1908)) {
$ans1902 = $field1908.full_meth(anf_method_obj1907,c1900);
} else {
if(!(R.isFunction($field1908))) {
R.ffi.throwNonFunApp(L[834],$field1908);
}
$ans1902 = $field1908.app(c1900);
}
break;
case 3: var anf_method_obj1909 = $ans1902;
$step1896 = 4;
$al1903 = L[835];
$field1910 = R.getColonFieldLoc(anf_method_obj1909,"add",L[835]);
if(R.isMethod($field1910)) {
$ans1902 = $field1910.full_meth(anf_method_obj1909,d1901);
} else {
if(!(R.isFunction($field1910))) {
R.ffi.throwNonFunApp(L[835],$field1910);
}
$ans1902 = $field1910.app(d1901);
}
break;
case 4: ++R.GAS;
return $ans1902;
default: throw "No case numbered " + $step1896 + " in $temp_lam1897";
}
}
} catch($e1911) {
if(R.isCont($e1911) && ($step1896 !== 4)) {
$e1911.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1903,$temp_lam1897,$step1896,[a1898,b1899,c1900,d1901],[]);
}
if(R.isPyretException($e1911)) {
$e1911.pyretStack.push($al1903);
}
throw $e1911;
}
};
var anf_obj1935 = R.makeFunction($temp_lam1897);
var $temp_lam1913 = function($a1914,$b1915,$c1916,$d1917,$e1918) {
var $step1912 = 0;
var $ans1919 = D;
var $al1920 = L[842];
try {
if(R.isActivationRecord($a1914)) {
$step1912 = $a1914.step;
$al1920 = $a1914.from;
$ans1919 = $a1914.ans;
a1914 = $a1914.args[0];
b1915 = $a1914.args[1];
c1916 = $a1914.args[2];
d1917 = $a1914.args[3];
e1918 = $a1914.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[842],5,$t);
}
var a1914 = $a1914;
var b1915 = $b1915;
var c1916 = $c1916;
var d1917 = $d1917;
var e1918 = $e1918;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1912) {
case 0: $step1912 = 1;
$al1920 = L[837];
$field1921 = R.getColonFieldLoc(empty$tree$set1864,"add",L[837]);
if(R.isMethod($field1921)) {
$ans1919 = $field1921.full_meth(empty$tree$set1864,a1914);
} else {
if(!(R.isFunction($field1921))) {
R.ffi.throwNonFunApp(L[837],$field1921);
}
$ans1919 = $field1921.app(a1914);
}
break;
case 1: var anf_method_obj1922 = $ans1919;
$step1912 = 2;
$al1920 = L[838];
$field1923 = R.getColonFieldLoc(anf_method_obj1922,"add",L[838]);
if(R.isMethod($field1923)) {
$ans1919 = $field1923.full_meth(anf_method_obj1922,b1915);
} else {
if(!(R.isFunction($field1923))) {
R.ffi.throwNonFunApp(L[838],$field1923);
}
$ans1919 = $field1923.app(b1915);
}
break;
case 2: var anf_method_obj1924 = $ans1919;
$step1912 = 3;
$al1920 = L[839];
$field1925 = R.getColonFieldLoc(anf_method_obj1924,"add",L[839]);
if(R.isMethod($field1925)) {
$ans1919 = $field1925.full_meth(anf_method_obj1924,c1916);
} else {
if(!(R.isFunction($field1925))) {
R.ffi.throwNonFunApp(L[839],$field1925);
}
$ans1919 = $field1925.app(c1916);
}
break;
case 3: var anf_method_obj1926 = $ans1919;
$step1912 = 4;
$al1920 = L[840];
$field1927 = R.getColonFieldLoc(anf_method_obj1926,"add",L[840]);
if(R.isMethod($field1927)) {
$ans1919 = $field1927.full_meth(anf_method_obj1926,d1917);
} else {
if(!(R.isFunction($field1927))) {
R.ffi.throwNonFunApp(L[840],$field1927);
}
$ans1919 = $field1927.app(d1917);
}
break;
case 4: var anf_method_obj1928 = $ans1919;
$step1912 = 5;
$al1920 = L[841];
$field1929 = R.getColonFieldLoc(anf_method_obj1928,"add",L[841]);
if(R.isMethod($field1929)) {
$ans1919 = $field1929.full_meth(anf_method_obj1928,e1918);
} else {
if(!(R.isFunction($field1929))) {
R.ffi.throwNonFunApp(L[841],$field1929);
}
$ans1919 = $field1929.app(e1918);
}
break;
case 5: ++R.GAS;
return $ans1919;
default: throw "No case numbered " + $step1912 + " in $temp_lam1913";
}
}
} catch($e1930) {
if(R.isCont($e1930) && ($step1912 !== 5)) {
$e1930.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1920,$temp_lam1913,$step1912,[a1914,b1915,c1916,d1917,e1918],[]);
}
if(R.isPyretException($e1930)) {
$e1930.pyretStack.push($al1920);
}
throw $e1930;
}
};
var anf_obj1936 = R.makeFunction($temp_lam1913);
var tree$set$maker1938 = R.makeObject({"make":arr$to$tree$set1735.$var,
"make0":anf_obj1931,
"make1":anf_obj1932,
"make2":anf_obj1933,
"make3":anf_obj1934,
"make4":anf_obj1935,
"make5":anf_obj1936});
var provides1943 = R.makeObject({"set":list$set$maker1937,
"list-set":list$set$maker1937,
"tree-set":tree$set$maker1938,
"empty-set":empty$list$set1807,
"empty-list-set":empty$list$set1807,
"empty-tree-set":empty$tree$set1864,
"list-to-set":list$to$list$set1667.$var,
"list-to-list-set":list$to$list$set1667.$var,
"list-to-tree-set":list$to$tree$set1677.$var,
"fold":set$fold1637.$var,
"all":set$all1615.$var,
"any":set$any1626.$var});
$step43 = 3;
$al47 = L[218];
$field1939 = R.getColonFieldLoc(builtins20,"current-checker",L[218]);
if(R.isMethod($field1939)) {
$ans46 = $field1939.full_meth(builtins20);
} else {
if(!(R.isFunction($field1939))) {
R.ffi.throwNonFunApp(L[218],$field1939);
}
$ans46 = $field1939.app();
}
break;
case 3: var anf_method_obj1940 = $ans46;
$step43 = 4;
$al47 = L[218];
$field1941 = R.getColonFieldLoc(anf_method_obj1940,"results",L[218]);
if(R.isMethod($field1941)) {
$ans46 = $field1941.full_meth(anf_method_obj1940);
} else {
if(!(R.isFunction($field1941))) {
R.ffi.throwNonFunApp(L[218],$field1941);
}
$ans46 = $field1941.app();
}
break;
case 4: var checks1944 = $ans46;
$step43 = 5;
$ans46 = R.makeObject({"answer":nothing13,
"namespace":NAMESPACE,
"defined-values":{"tree-set-maker":tree$set$maker1938,
"list-set-maker":list$set$maker1937,
"arr-to-tree-set":arr$to$tree$set1735.$var,
"empty-tree-set":empty$tree$set1864,
"makeSet5":makeSet51801.$var,
"arr-to-list-set":arr$to$list$set1715.$var,
"empty-list-set":empty$list$set1807,
"makeSet4":makeSet41780.$var,
"makeSet3":makeSet31762.$var,
"makeSet2":makeSet21747.$var,
"tree-set":tree$set1180.$var,
"leaf":leaf97.$var,
"list-set":list$set919.$var,
"empty":empty114,
"list-to-tree":list$to$tree1695.$var,
"list-to-tree-set":list$to$tree$set1677.$var,
"list-to-list-set":list$to$list$set1667.$var,
"list-to-set":list$to$set1657.$var,
"set-fold":set$fold1637.$var,
"set-any":set$any1626.$var,
"set-all":set$all1615.$var,
"tree-set-difference":tree$set$difference1328.$var,
"merge-drop-l2":merge$drop$l21576.$var,
"tree-set-intersect":tree$set$intersect1310.$var,
"merge-only-dups":merge$only$dups1535.$var,
"tree-set-union":tree$set$union1302.$var,
"merge-no-dups":merge$no$dups1493.$var,
"elems-to-balanced-avl":elems$to$balanced$avl1481.$var,
"set-to-sorted-elems":set$to$sorted$elems1446.$var,
"is-tree-set":is$tree$set1431.$var,
"is-list-set":is$list$set1428.$var,
"is-Set":is$Set1426.$var,
"Set":Set878.$var,
"swap-next-lowest":swap$next$lowest798.$var,
"remove-root":remove$root282.$var,
"rebalance":rebalance262.$var,
"mkbranch":mkbranch96.$var,
"tree-any":tree$any643.$var,
"tree-all":tree$all633.$var,
"tree-fold":tree$fold623.$var,
"branch":branch612.$var,
"is-branch":is$branch610.$var,
"is-leaf":is$leaf607.$var,
"is-AVLTree":is$AVLTree605.$var,
"AVLTree":AVLTree65.$var,
"pick-some":pick$some920,
"pick-none":pick$none916,
"pick":pick26,
"fold":fold903,
"is-empty":is$empty1148,
"lists":lists24,
"link":link312,
"List":List1945,
"VS":VS27,
"equality":equality22,
"arrays":arrays21,
"option":option25,
"error":error23},
"defined-types":{"Pick":Pick1942,
"AVLTree":AVLTree99,
"lists":lists31,
"List":List937,
"Set":Set869,
"pick":pick33,
"VS":VS34,
"equality":equality29,
"arrays":arrays28,
"option":option32,
"error":error30},
"provide-plus-types":R.makeObject({"values":provides1943,
"types":{"List":List937,
"Pick":Pick1942,
"AVLTree":AVLTree99,
"Set":Set869}}),
"checks":checks1944});
break;
case 5: ++R.GAS;
return $ans46;
default: throw "No case numbered " + $step43 + " in $toplevel44";
}
}
} catch($e1946) {
if(R.isCont($e1946) && ($step43 !== 5)) {
$e1946.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al47,$toplevel44,$step43,[],[provides1943,tree$set$maker1938,list$set$maker1937,makeSet51801,makeSet41780,makeSet31762,makeSet21747,empty$tree$set1864,empty$list$set1807,arr$to$tree$set1735,arr$to$list$set1715,list$to$tree1695,list$to$tree$set1677,list$to$list$set1667,list$to$set1657,set$fold1637,set$any1626,set$all1615,tree$set$difference1328,merge$drop$l21576,tree$set$intersect1310,merge$only$dups1535,tree$set$union1302,merge$no$dups1493,elems$to$balanced$avl1481,set$to$sorted$elems1446,tree$set1180,is$tree$set1431,list$set919,is$list$set1428,is$Set1426,Set878,swap$next$lowest798,remove$root282,rebalance262,mkbranch96,tree$any643,tree$all633,tree$fold623,branch612,is$branch610,leaf97,is$leaf607,is$AVLTree605,AVLTree65,pick$some920,pick$none916,Pick1942,fold903,is$empty1148,link312,empty114,List1945,List937,Set869,AVLTree99]);
}
if(R.isPyretException($e1946)) {
$e1946.pyretStack.push($al47);
}
throw $e1946;
}
};
return R.safeCall($toplevel44,function(moduleVal) {
R.modules["$src/arr/base/sets.arr35"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://srcloc": ({
"requires":[{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE, M, $VS15) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,82,29,2625,82,46,2642],
[M,82,17,2613,82,47,2643],
[M,82,2,2598,82,51,2647],
[M,83,22,2671,83,40,2689],
[M,83,2,2651,83,44,2693],
[M,11,20,161,11,36,177],
[M,11,6,147,11,42,183],
[M,10,4,124,12,7,191],
[M,13,15,208,13,31,224],
[M,13,4,197,13,35,228],
[M,15,6,264,15,16,274],
[M,15,6,264,15,67,325],
[M,15,29,287,15,46,304],
[M,15,50,308,15,66,324],
[M,15,29,287,15,66,324],
[M,15,6,264,15,23,281],
[M,14,4,234,16,7,333],
[M,19,35,422,19,51,438],
[M,19,54,441,19,71,458],
[M,19,35,422,19,71,458],
[M,19,10,397,19,30,417],
[M,20,10,470,20,37,497],
[M,18,6,366,21,9,516],
[M,18,12,372,18,18,378],
[M,17,4,339,22,7,524],
[M,23,4,530,23,30,556],
[M,35,9,923,35,18,932],
[M,35,20,934,35,31,945],
[M,35,20,934,35,38,952],
[M,36,29,995,36,44,1010],
[M,37,33,1045,37,50,1062],
[M,35,6,920,37,51,1063],
[M,37,24,1036,37,51,1063],
[M,36,20,986,36,45,1011],
[M,33,4,790,38,7,1071],
[M,39,15,1088,39,26,1099],
[M,39,44,1117,39,59,1132],
[M,39,78,1151,39,91,1164],
[M,39,15,1088,39,92,1165],
[M,39,69,1142,39,92,1165],
[M,39,35,1108,39,60,1133],
[M,39,4,1077,39,96,1169],
[M,41,6,1215,41,15,1224],
[M,41,6,1215,41,56,1265],
[M,41,28,1237,41,39,1248],
[M,41,43,1252,41,55,1264],
[M,41,28,1237,41,55,1264],
[M,41,6,1215,41,22,1231],
[M,40,29,1200,40,35,1206],
[M,40,4,1175,42,7,1273],
[M,46,10,1456,46,20,1466],
[M,47,18,1493,47,33,1508],
[M,47,36,1511,47,52,1527],
[M,47,18,1493,47,52,1527],
[M,45,6,1425,48,9,1537],
[M,45,12,1431,45,18,1437],
[M,43,26,1301,43,32,1307],
[M,43,4,1279,49,7,1545],
[M,51,13,1580,51,24,1591],
[M,52,8,1601,52,23,1616],
[M,52,25,1618,52,42,1635],
[M,52,44,1637,52,59,1652],
[M,53,8,1662,53,23,1677],
[M,53,25,1679,53,42,1696],
[M,53,44,1698,53,59,1713],
[M,51,6,1573,51,12,1579],
[M,51,6,1573,53,60,1714],
[M,50,4,1551,54,7,1722],
[M,56,13,1755,56,24,1766],
[M,57,8,1776,57,21,1789],
[M,57,23,1791,57,38,1806],
[M,57,40,1808,57,53,1821],
[M,58,8,1831,58,21,1844],
[M,58,23,1846,58,38,1861],
[M,58,40,1863,58,53,1876],
[M,56,6,1748,56,12,1754],
[M,56,6,1748,58,54,1877],
[M,55,4,1728,59,7,1885],
[M,62,9,2003,62,24,2018],
[M,62,28,2022,62,44,2038],
[M,62,9,2003,62,44,2038],
[M,63,11,2051,63,24,2064],
[M,63,28,2068,63,42,2082],
[M,63,11,2051,63,42,2082],
[M,66,17,2130,66,28,2141],
[M,67,12,2155,67,27,2170],
[M,67,29,2172,67,46,2189],
[M,67,48,2191,67,63,2206],
[M,68,12,2220,68,26,2234],
[M,68,28,2236,68,44,2252],
[M,68,46,2254,68,60,2268],
[M,66,10,2123,66,16,2129],
[M,66,10,2123,68,61,2269],
[M,71,11,2305,71,24,2318],
[M,71,27,2321,71,41,2335],
[M,71,11,2305,71,41,2335],
[M,72,17,2354,72,28,2365],
[M,73,12,2379,73,28,2395],
[M,73,30,2397,73,48,2415],
[M,73,50,2417,73,66,2433],
[M,74,12,2447,74,25,2460],
[M,74,27,2462,74,42,2477],
[M,74,44,2479,74,57,2492],
[M,72,10,2347,72,16,2353],
[M,72,10,2347,74,58,2493],
[M,60,33,1920,60,42,1929],
[M,60,25,1912,60,43,1930],
[M,60,4,1891,79,7,2553],
[M,80,4,2559,80,31,2586],
[M,9,2,91,23,30,556],
[M,9,4,93,9,24,113],
[M,24,2,559,80,31,2586],
[M,25,18,587,25,24,593],
[M,26,22,617,26,28,623],
[M,27,24,649,27,30,655],
[M,28,22,679,28,28,685],
[M,29,20,707,29,26,713],
[M,30,22,737,30,28,743],
[M,31,20,765,31,26,771],
[M,24,4,561,32,7,779],
[M,8,0,76,84,3,2697],
[M,3,0,21,84,3,2697]];
var _plus1 = NAMESPACE.get("_plus");
var equal$always2 = NAMESPACE.get("equal-always");
var _lessthan3 = NAMESPACE.get("_lessthan");
var tostring4 = NAMESPACE.get("tostring");
var _lessequal5 = NAMESPACE.get("_lessequal");
var _greaterthan6 = NAMESPACE.get("_greaterthan");
var _greaterequal7 = NAMESPACE.get("_greaterequal");
var $type$Number8 = NAMESPACE.get("$type$Number");
var $type$String9 = NAMESPACE.get("$type$String");
var builtins10 = NAMESPACE.get("builtins");
var nothing11 = NAMESPACE.get("nothing");
var VS12 = R.getField($VS15,"values");
var VS13 = R.getField($VS15,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS15);
var $toplevel17 = function($$resumer272) {
var $step16 = 0;
var $ans19 = D;
var $al20 = L[121];
try {
if(R.isActivationRecord($$resumer272)) {
$step16 = $$resumer272.step;
$al20 = $$resumer272.from;
$ans19 = $$resumer272.ans;
$resumer272 = $$resumer272.args[0];
provides270 = $$resumer272.vars[0];
srcloc155 = $$resumer272.vars[1];
is$srcloc131 = $$resumer272.vars[2];
builtin264 = $$resumer272.vars[3];
is$builtin60 = $$resumer272.vars[4];
is$Srcloc261 = $$resumer272.vars[5];
Srcloc259 = $$resumer272.vars[6];
Srcloc86 = $$resumer272.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step16) {
case 0: var Srcloc21 = R.namedBrander("Srcloc");
var Srcloc86 = R.makeBranderAnn(Srcloc21,"Srcloc");
var Srcloc257 = {"$var":D};
var Srcloc259 = {"$var":D};
var is$Srcloc261 = {"$var":D};
var is$builtin60 = {"$var":D};
var builtin264 = {"$var":D};
var is$srcloc131 = {"$var":D};
var srcloc155 = {"$var":D};
var $temp_full23 = function($self24) {
var $step22 = 0;
var $ans25 = D;
var $al26 = L[2];
try {
if(R.isActivationRecord($self24)) {
$step22 = $self24.step;
$al26 = $self24.from;
$ans25 = $self24.ans;
self24 = $self24.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
var self24 = $self24;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step22) {
case 0: $step22 = 1;
$al26 = L[0];
$field27 = R.getColonFieldLoc(self24,"format",L[0]);
if(R.isMethod($field27)) {
$ans25 = $field27.full_meth(self24,(true));
} else {
if(!(R.isFunction($field27))) {
R.ffi.throwNonFunApp(L[0],$field27);
}
$ans25 = $field27.app((true));
}
break;
case 1: var anf_arg28 = $ans25;
$step22 = 2;
$al26 = L[1];
$field29 = R.getColonFieldLoc(VS12,"vs-value",L[1]);
if(R.isMethod($field29)) {
$ans25 = $field29.full_meth(VS12,anf_arg28);
} else {
if(!(R.isFunction($field29))) {
R.ffi.throwNonFunApp(L[1],$field29);
}
$ans25 = $field29.app(anf_arg28);
}
break;
case 2: ++R.GAS;
return $ans25;
default: throw "No case numbered " + $step22 + " in $temp_full23";
}
}
} catch($e30) {
if(R.isCont($e30) && ($step22 !== 2)) {
$e30.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al26,$temp_full23,$step22,[self24],[]);
}
if(R.isPyretException($e30)) {
$e30.pyretStack.push($al26);
}
throw $e30;
}
};
var anf_shared216 = R.makeMethod0($temp_full23);
var $temp_full32 = function($self33,$other34) {
var $step31 = 0;
var $ans35 = D;
var $al36 = L[4];
try {
if(R.isActivationRecord($self33)) {
$step31 = $self33.step;
$al36 = $self33.from;
$ans35 = $self33.ans;
self33 = $self33.args[0];
other34 = $self33.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[4],2,$t);
}
var self33 = $self33;
var other34 = $other34;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step31) {
case 0: $step31 = 1;
$al36 = L[3];
$field37 = R.getColonFieldLoc(other34,"before",L[3]);
if(R.isMethod($field37)) {
$ans35 = $field37.full_meth(other34,self33);
} else {
if(!(R.isFunction($field37))) {
R.ffi.throwNonFunApp(L[3],$field37);
}
$ans35 = $field37.app(self33);
}
break;
case 1: ++R.GAS;
return $ans35;
default: throw "No case numbered " + $step31 + " in $temp_full32";
}
}
} catch($e38) {
if(R.isCont($e38) && ($step31 !== 1)) {
$e38.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al36,$temp_full32,$step31,[self33,other34],[]);
}
if(R.isPyretException($e38)) {
$e38.pyretStack.push($al36);
}
throw $e38;
}
};
var anf_shared217 = R.makeMethod1($temp_full32);
var $temp_full40 = function($self41,$$underscore42) {
var $step39 = 0;
var $ans43 = D;
var $al44 = L[7];
try {
if(R.isActivationRecord($self41)) {
$step39 = $self41.step;
$al44 = $self41.from;
$ans43 = $self41.ans;
self41 = $self41.args[0];
$underscore42 = $self41.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[7],2,$t);
}
var self41 = $self41;
var $underscore42 = $$underscore42;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step39) {
case 0: var anf_arg45 = G(self41,"module-name",L[5]);
$step39 = 1;
$al44 = L[6];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al44,_plus1);
}
$ans43 = _plus1.app(("<builtin "),anf_arg45);
break;
case 1: var anf_arg46 = $ans43;
$step39 = 2;
$al44 = L[6];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al44,_plus1);
}
$ans43 = _plus1.app(anf_arg46,(">"));
break;
case 2: ++R.GAS;
return $ans43;
default: throw "No case numbered " + $step39 + " in $temp_full40";
}
}
} catch($e47) {
if(R.isCont($e47) && ($step39 !== 2)) {
$e47.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al44,$temp_full40,$step39,[self41,$underscore42],[]);
}
if(R.isPyretException($e47)) {
$e47.pyretStack.push($al44);
}
throw $e47;
}
};
var anf_variant_member221 = R.makeMethod1($temp_full40);
var $temp_full49 = function($self50) {
var $step48 = 0;
var $ans51 = D;
var $al52 = L[9];
try {
if(R.isActivationRecord($self50)) {
$step48 = $self50.step;
$al52 = $self50.from;
$ans51 = $self50.ans;
self50 = $self50.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],1,$t);
}
var self50 = $self50;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step48) {
case 0: $step48 = 1;
$ans51 = G(self50,"module-name",L[8]);
break;
case 1: ++R.GAS;
return $ans51;
default: throw "No case numbered " + $step48 + " in $temp_full49";
}
}
} catch($e53) {
if(R.isCont($e53) && ($step48 !== 1)) {
$e53.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al52,$temp_full49,$step48,[self50],[]);
}
if(R.isPyretException($e53)) {
$e53.pyretStack.push($al52);
}
throw $e53;
}
};
var anf_variant_member222 = R.makeMethod0($temp_full49);
var $temp_full55 = function($self56,$other57) {
var $step54 = 0;
var $ans58 = D;
var $al59 = L[16];
try {
if(R.isActivationRecord($self56)) {
$step54 = $self56.step;
$al59 = $self56.from;
$ans58 = $self56.ans;
self56 = $self56.args[0];
other57 = $self56.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[16],2,$t);
}
var self56 = $self56;
var other57 = $other57;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step54) {
case 0: $step54 = 1;
$al59 = L[15];
if(!(R.isFunction(is$builtin60.$var === D?U(L[10],"is-builtin"):is$builtin60.$var))) {
R.ffi.throwNonFunApp($al59,is$builtin60.$var === D?U(L[10],"is-builtin"):is$builtin60.$var);
}
$ans58 = is$builtin60.$var === D?U(L[10],"is-builtin"):is$builtin60.$var.app(other57);
break;
case 1: var anf_arg61 = $ans58;
$al59 = L[11];
var anf_if65 = R.checkWrapBoolean(anf_arg61);
if(R.isPyretTrue(anf_if65)) {
$step54 = 2;
} else {
$step54 = 4;
}
break;
case 2: var anf_arg62 = G(other57,"module-name",L[12]);
var anf_arg63 = G(self56,"module-name",L[13]);
$step54 = 3;
$al59 = L[14];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al59,equal$always2);
}
$ans58 = equal$always2.app(anf_arg62,anf_arg63);
break;
case 3: var anf_arg64 = $ans58;
$step54 = 5;
$al59 = L[11];
$ans58 = R.checkWrapBoolean(anf_arg64);
break;
case 4: $step54 = 5;
$ans58 = (false);
break;
case 5: ++R.GAS;
return $ans58;
default: throw "No case numbered " + $step54 + " in $temp_full55";
}
}
} catch($e66) {
if(R.isCont($e66) && ($step54 !== 5)) {
$e66.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al59,$temp_full55,$step54,[self56,other57],[]);
}
if(R.isPyretException($e66)) {
$e66.pyretStack.push($al59);
}
throw $e66;
}
};
var anf_variant_member223 = R.makeMethod1($temp_full55);
var $temp_full68 = function($self69,$other70) {
var $step67 = 0;
var $ans71 = D;
var $al72 = L[24];
try {
if(R.isActivationRecord($self69)) {
$step67 = $self69.step;
$al72 = $self69.from;
$ans71 = $self69.ans;
self69 = $self69.args[0];
other70 = $self69.args[1];
cases73 = $self69.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[24],2,$t);
}
var self69 = $self69;
var other70 = $other70;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step67) {
case 0: var cases73 = other70;
$step67 = 1;
$al72 = L[23];
R._checkAnn(L[23],Srcloc86,cases73);
break;
case 1: var $cases_dispatch85 = {"builtin":2,
"srcloc":3};
$al72 = L[22];
$step67 = $cases_dispatch85[cases73.$name] || 4;
break;
case 2: if(cases73.$arity >= 0) {
if(1 !== cases73.$arity) {
R.ffi.throwCasesArityErrorC(L[20],1,cases73.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[20],true);
}
var $fn76 = cases73.$constructor.$fieldNames;
R.derefField(cases73.dict[$fn76[0]],cases73.$mut_fields_mask[0],false);
var anf_arg74 = G(self69,"module-name",L[17]);
var anf_arg75 = G(other70,"module-name",L[18]);
$step67 = 5;
$al72 = L[19];
if(!(R.isFunction(_lessthan3))) {
R.ffi.throwNonFunApp($al72,_lessthan3);
}
$ans71 = _lessthan3.app(anf_arg74,anf_arg75);
break;
case 3: if(cases73.$arity >= 0) {
if(7 !== cases73.$arity) {
R.ffi.throwCasesArityErrorC(L[21],7,cases73.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[21],true);
}
var $fn76 = cases73.$constructor.$fieldNames;
R.derefField(cases73.dict[$fn76[0]],cases73.$mut_fields_mask[0],false);
R.derefField(cases73.dict[$fn76[1]],cases73.$mut_fields_mask[1],false);
R.derefField(cases73.dict[$fn76[2]],cases73.$mut_fields_mask[2],false);
R.derefField(cases73.dict[$fn76[3]],cases73.$mut_fields_mask[3],false);
R.derefField(cases73.dict[$fn76[4]],cases73.$mut_fields_mask[4],false);
R.derefField(cases73.dict[$fn76[5]],cases73.$mut_fields_mask[5],false);
R.derefField(cases73.dict[$fn76[6]],cases73.$mut_fields_mask[6],false);
$step67 = 5;
$ans71 = (false);
break;
case 4: $step67 = 5;
$al72 = L[22];
$ans71 = R.throwNoCasesMatched(L[22],cases73);
break;
case 5: ++R.GAS;
return $ans71;
default: throw "No case numbered " + $step67 + " in $temp_full68";
}
}
} catch($e87) {
if(R.isCont($e87) && ($step67 !== 5)) {
$e87.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al72,$temp_full68,$step67,[self69,other70],[cases73]);
}
if(R.isPyretException($e87)) {
$e87.pyretStack.push($al72);
}
throw $e87;
}
};
var anf_variant_member224 = R.makeMethod1($temp_full68);
var $temp_full89 = function($self90) {
var $step88 = 0;
var $ans91 = D;
var $al92 = L[25];
try {
if(R.isActivationRecord($self90)) {
$step88 = $self90.step;
$al92 = $self90.from;
$ans91 = $self90.ans;
self90 = $self90.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[25],1,$t);
}
var self90 = $self90;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step88) {
case 0: $step88 = 1;
$ans91 = (true);
break;
case 1: ++R.GAS;
return $ans91;
default: throw "No case numbered " + $step88 + " in $temp_full89";
}
}
} catch($e93) {
if(R.isCont($e93) && ($step88 !== 1)) {
$e93.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al92,$temp_full89,$step88,[self90],[]);
}
if(R.isPyretException($e93)) {
$e93.pyretStack.push($al92);
}
throw $e93;
}
};
var anf_variant_member225 = R.makeMethod0($temp_full89);
var $temp_full95 = function($self96,$show$file97) {
var $step94 = 0;
var $ans98 = D;
var $al99 = L[34];
try {
if(R.isActivationRecord($self96)) {
$step94 = $self96.step;
$al99 = $self96.from;
$ans98 = $self96.ans;
self96 = $self96.args[0];
show$file97 = $self96.args[1];
anf_arg107 = $self96.vars[0];
anf_arg103 = $self96.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[34],2,$t);
}
var self96 = $self96;
var show$file97 = $show$file97;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step94) {
case 0: $al99 = L[26];
var anf_if109 = R.checkWrapBoolean(show$file97);
if(R.isPyretTrue(anf_if109)) {
$step94 = 1;
} else {
$step94 = 2;
}
break;
case 1: var anf_arg100 = G(self96,"source",L[27]);
$step94 = 3;
$al99 = L[28];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al99,_plus1);
}
$ans98 = _plus1.app(anf_arg100,(": "));
break;
case 2: $step94 = 3;
$ans98 = ("");
break;
case 3: var anf_arg101 = $ans98;
$step94 = 4;
$al99 = L[31];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al99,_plus1);
}
$ans98 = _plus1.app(anf_arg101,("line "));
break;
case 4: var anf_arg103 = $ans98;
var anf_arg102 = G(self96,"start-line",L[29]);
$step94 = 5;
$al99 = L[33];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al99,tostring4);
}
$ans98 = tostring4.app(anf_arg102);
break;
case 5: var anf_arg104 = $ans98;
$step94 = 6;
$al99 = L[31];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al99,_plus1);
}
$ans98 = _plus1.app(anf_arg103,anf_arg104);
break;
case 6: var anf_arg105 = $ans98;
$step94 = 7;
$al99 = L[31];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al99,_plus1);
}
$ans98 = _plus1.app(anf_arg105,(", column "));
break;
case 7: var anf_arg107 = $ans98;
var anf_arg106 = G(self96,"start-column",L[30]);
$step94 = 8;
$al99 = L[32];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al99,tostring4);
}
$ans98 = tostring4.app(anf_arg106);
break;
case 8: var anf_arg108 = $ans98;
$step94 = 9;
$al99 = L[31];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al99,_plus1);
}
$ans98 = _plus1.app(anf_arg107,anf_arg108);
break;
case 9: ++R.GAS;
return $ans98;
default: throw "No case numbered " + $step94 + " in $temp_full95";
}
}
} catch($e110) {
if(R.isCont($e110) && ($step94 !== 9)) {
$e110.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al99,$temp_full95,$step94,[self96,show$file97],[anf_arg107,anf_arg103]);
}
if(R.isPyretException($e110)) {
$e110.pyretStack.push($al99);
}
throw $e110;
}
};
var anf_variant_member235 = R.makeMethod1($temp_full95);
var $temp_full112 = function($self113) {
var $step111 = 0;
var $ans114 = D;
var $al115 = L[41];
try {
if(R.isActivationRecord($self113)) {
$step111 = $self113.step;
$al115 = $self113.from;
$ans114 = $self113.ans;
self113 = $self113.args[0];
anf_arg122 = $self113.vars[0];
anf_arg118 = $self113.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[41],1,$t);
}
var self113 = $self113;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step111) {
case 0: var anf_arg116 = G(self113,"source",L[35]);
$step111 = 1;
$al115 = L[38];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al115,_plus1);
}
$ans114 = _plus1.app(anf_arg116,(":"));
break;
case 1: var anf_arg118 = $ans114;
var anf_arg117 = G(self113,"start-char",L[36]);
$step111 = 2;
$al115 = L[40];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al115,tostring4);
}
$ans114 = tostring4.app(anf_arg117);
break;
case 2: var anf_arg119 = $ans114;
$step111 = 3;
$al115 = L[38];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al115,_plus1);
}
$ans114 = _plus1.app(anf_arg118,anf_arg119);
break;
case 3: var anf_arg120 = $ans114;
$step111 = 4;
$al115 = L[38];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al115,_plus1);
}
$ans114 = _plus1.app(anf_arg120,("-"));
break;
case 4: var anf_arg122 = $ans114;
var anf_arg121 = G(self113,"end-char",L[37]);
$step111 = 5;
$al115 = L[39];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al115,tostring4);
}
$ans114 = tostring4.app(anf_arg121);
break;
case 5: var anf_arg123 = $ans114;
$step111 = 6;
$al115 = L[38];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al115,_plus1);
}
$ans114 = _plus1.app(anf_arg122,anf_arg123);
break;
case 6: ++R.GAS;
return $ans114;
default: throw "No case numbered " + $step111 + " in $temp_full112";
}
}
} catch($e124) {
if(R.isCont($e124) && ($step111 !== 6)) {
$e124.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al115,$temp_full112,$step111,[self113],[anf_arg122,anf_arg118]);
}
if(R.isPyretException($e124)) {
$e124.pyretStack.push($al115);
}
throw $e124;
}
};
var anf_variant_member236 = R.makeMethod0($temp_full112);
var $temp_full126 = function($self127,$other128) {
var $step125 = 0;
var $ans129 = D;
var $al130 = L[49];
try {
if(R.isActivationRecord($self127)) {
$step125 = $self127.step;
$al130 = $self127.from;
$ans129 = $self127.ans;
self127 = $self127.args[0];
other128 = $self127.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[49],2,$t);
}
var self127 = $self127;
var other128 = $other128;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step125) {
case 0: $step125 = 1;
$al130 = L[48];
R._checkAnn(L[48],Srcloc86,other128);
break;
case 1: $step125 = 2;
$al130 = L[47];
if(!(R.isFunction(is$srcloc131.$var === D?U(L[42],"is-srcloc"):is$srcloc131.$var))) {
R.ffi.throwNonFunApp($al130,is$srcloc131.$var === D?U(L[42],"is-srcloc"):is$srcloc131.$var);
}
$ans129 = is$srcloc131.$var === D?U(L[42],"is-srcloc"):is$srcloc131.$var.app(other128);
break;
case 2: var anf_arg132 = $ans129;
$al130 = L[43];
var anf_if136 = R.checkWrapBoolean(anf_arg132);
if(R.isPyretTrue(anf_if136)) {
$step125 = 3;
} else {
$step125 = 5;
}
break;
case 3: var anf_arg133 = G(self127,"source",L[44]);
var anf_arg134 = G(other128,"source",L[45]);
$step125 = 4;
$al130 = L[46];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al130,equal$always2);
}
$ans129 = equal$always2.app(anf_arg133,anf_arg134);
break;
case 4: var anf_arg135 = $ans129;
$step125 = 6;
$al130 = L[43];
$ans129 = R.checkWrapBoolean(anf_arg135);
break;
case 5: $step125 = 6;
$ans129 = (false);
break;
case 6: ++R.GAS;
return $ans129;
default: throw "No case numbered " + $step125 + " in $temp_full126";
}
}
} catch($e137) {
if(R.isCont($e137) && ($step125 !== 6)) {
$e137.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al130,$temp_full126,$step125,[self127,other128],[]);
}
if(R.isPyretException($e137)) {
$e137.pyretStack.push($al130);
}
throw $e137;
}
};
var anf_variant_member237 = R.makeMethod1($temp_full126);
var $temp_full139 = function($self140,$other141) {
var $step138 = 0;
var $ans142 = D;
var $al143 = L[57];
try {
if(R.isActivationRecord($self140)) {
$step138 = $self140.step;
$al143 = $self140.from;
$ans142 = $self140.ans;
self140 = $self140.args[0];
other141 = $self140.args[1];
cases144 = $self140.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[57],2,$t);
}
var self140 = $self140;
var other141 = $other141;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step138) {
case 0: $step138 = 1;
$al143 = L[56];
R._checkAnn(L[56],Srcloc86,other141);
break;
case 1: var cases144 = other141;
$step138 = 2;
$al143 = L[55];
R._checkAnn(L[55],Srcloc86,cases144);
break;
case 2: var $cases_dispatch148 = {"builtin":3};
$al143 = L[54];
$step138 = $cases_dispatch148[cases144.$name] || 4;
break;
case 3: if(cases144.$arity >= 0) {
if(1 !== cases144.$arity) {
R.ffi.throwCasesArityErrorC(L[50],1,cases144.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[50],true);
}
var $fn76 = cases144.$constructor.$fieldNames;
R.derefField(cases144.dict[$fn76[0]],cases144.$mut_fields_mask[0],false);
$step138 = 5;
$ans142 = (true);
break;
case 4: var anf_arg146 = G(self140,"start-char",L[51]);
var anf_arg147 = G(other141,"start-char",L[52]);
$step138 = 5;
$al143 = L[53];
if(!(R.isFunction(_lessthan3))) {
R.ffi.throwNonFunApp($al143,_lessthan3);
}
$ans142 = _lessthan3.app(anf_arg146,anf_arg147);
break;
case 5: ++R.GAS;
return $ans142;
default: throw "No case numbered " + $step138 + " in $temp_full139";
}
}
} catch($e149) {
if(R.isCont($e149) && ($step138 !== 5)) {
$e149.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al143,$temp_full139,$step138,[self140,other141],[cases144]);
}
if(R.isPyretException($e149)) {
$e149.pyretStack.push($al143);
}
throw $e149;
}
};
var anf_variant_member238 = R.makeMethod1($temp_full139);
var $temp_full151 = function($self152) {
var $step150 = 0;
var $ans153 = D;
var $al154 = L[67];
try {
if(R.isActivationRecord($self152)) {
$step150 = $self152.step;
$al154 = $self152.from;
$ans153 = $self152.ans;
self152 = $self152.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[67],1,$t);
}
var self152 = $self152;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step150) {
case 0: var anf_arg156 = G(self152,"source",L[58]);
var anf_arg157 = G(self152,"start-line",L[59]);
var anf_arg158 = G(self152,"start-column",L[60]);
var anf_arg159 = G(self152,"start-char",L[61]);
var anf_arg160 = G(self152,"start-line",L[62]);
var anf_arg161 = G(self152,"start-column",L[63]);
var anf_arg162 = G(self152,"start-char",L[64]);
$step150 = 1;
$al154 = L[66];
if(!(R.isFunction(srcloc155.$var === D?U(L[65],"srcloc"):srcloc155.$var))) {
R.ffi.throwNonFunApp($al154,srcloc155.$var === D?U(L[65],"srcloc"):srcloc155.$var);
}
$ans153 = srcloc155.$var === D?U(L[65],"srcloc"):srcloc155.$var.app(anf_arg156,anf_arg157,anf_arg158,anf_arg159,anf_arg160,anf_arg161,anf_arg162);
break;
case 1: ++R.GAS;
return $ans153;
default: throw "No case numbered " + $step150 + " in $temp_full151";
}
}
} catch($e163) {
if(R.isCont($e163) && ($step150 !== 1)) {
$e163.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al154,$temp_full151,$step150,[self152],[]);
}
if(R.isPyretException($e163)) {
$e163.pyretStack.push($al154);
}
throw $e163;
}
};
var anf_variant_member239 = R.makeMethod0($temp_full151);
var $temp_full165 = function($self166) {
var $step164 = 0;
var $ans167 = D;
var $al168 = L[77];
try {
if(R.isActivationRecord($self166)) {
$step164 = $self166.step;
$al168 = $self166.from;
$ans167 = $self166.ans;
self166 = $self166.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[77],1,$t);
}
var self166 = $self166;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step164) {
case 0: var anf_arg169 = G(self166,"source",L[68]);
var anf_arg170 = G(self166,"end-line",L[69]);
var anf_arg171 = G(self166,"end-column",L[70]);
var anf_arg172 = G(self166,"end-char",L[71]);
var anf_arg173 = G(self166,"end-line",L[72]);
var anf_arg174 = G(self166,"end-column",L[73]);
var anf_arg175 = G(self166,"end-char",L[74]);
$step164 = 1;
$al168 = L[76];
if(!(R.isFunction(srcloc155.$var === D?U(L[75],"srcloc"):srcloc155.$var))) {
R.ffi.throwNonFunApp($al168,srcloc155.$var === D?U(L[75],"srcloc"):srcloc155.$var);
}
$ans167 = srcloc155.$var === D?U(L[75],"srcloc"):srcloc155.$var.app(anf_arg169,anf_arg170,anf_arg171,anf_arg172,anf_arg173,anf_arg174,anf_arg175);
break;
case 1: ++R.GAS;
return $ans167;
default: throw "No case numbered " + $step164 + " in $temp_full165";
}
}
} catch($e176) {
if(R.isCont($e176) && ($step164 !== 1)) {
$e176.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al168,$temp_full165,$step164,[self166],[]);
}
if(R.isPyretException($e176)) {
$e176.pyretStack.push($al168);
}
throw $e176;
}
};
var anf_variant_member240 = R.makeMethod0($temp_full165);
var $temp_full178 = function($self179,$other180) {
var $step177 = 0;
var $ans181 = D;
var $al182 = L[107];
try {
if(R.isActivationRecord($self179)) {
$step177 = $self179.step;
$al182 = $self179.from;
$ans181 = $self179.ans;
self179 = $self179.args[0];
other180 = $self179.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[107],2,$t);
}
var self179 = $self179;
var other180 = $other180;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step177) {
case 0: $step177 = 1;
$al182 = L[106];
R._checkAnn(L[106],R.makePredAnn(Srcloc86,is$srcloc131.$var === D?U(L[105],"is-srcloc"):is$srcloc131.$var,"is-srcloc"),other180);
break;
case 1: var anf_arg183 = G(self179,"start-char",L[78]);
var anf_arg184 = G(other180,"start-char",L[79]);
$step177 = 2;
$al182 = L[80];
if(!(R.isFunction(_lessequal5))) {
R.ffi.throwNonFunApp($al182,_lessequal5);
}
$ans181 = _lessequal5.app(anf_arg183,anf_arg184);
break;
case 2: var anf_arg185 = $ans181;
$al182 = L[80];
var anf_if208 = R.checkWrapBoolean(anf_arg185);
if(R.isPyretTrue(anf_if208)) {
$step177 = 3;
} else {
$step177 = 7;
}
break;
case 3: var anf_arg186 = G(self179,"end-char",L[81]);
var anf_arg187 = G(other180,"end-char",L[82]);
$step177 = 4;
$al182 = L[83];
if(!(R.isFunction(_greaterequal7))) {
R.ffi.throwNonFunApp($al182,_greaterequal7);
}
$ans181 = _greaterequal7.app(anf_arg186,anf_arg187);
break;
case 4: var anf_arg188 = $ans181;
$al182 = L[83];
var anf_if196 = R.checkWrapBoolean(anf_arg188);
if(R.isPyretTrue(anf_if196)) {
$step177 = 5;
} else {
$step177 = 6;
}
break;
case 5: $step177 = 11;
$ans181 = self179;
break;
case 6: var anf_arg189 = G(self179,"source",L[84]);
var anf_arg190 = G(self179,"start-line",L[85]);
var anf_arg191 = G(self179,"start-column",L[86]);
var anf_arg192 = G(self179,"start-char",L[87]);
var anf_arg193 = G(other180,"end-line",L[88]);
var anf_arg194 = G(other180,"end-column",L[89]);
var anf_arg195 = G(other180,"end-char",L[90]);
$step177 = 11;
$al182 = L[92];
if(!(R.isFunction(srcloc155.$var === D?U(L[91],"srcloc"):srcloc155.$var))) {
R.ffi.throwNonFunApp($al182,srcloc155.$var === D?U(L[91],"srcloc"):srcloc155.$var);
}
$ans181 = srcloc155.$var === D?U(L[91],"srcloc"):srcloc155.$var.app(anf_arg189,anf_arg190,anf_arg191,anf_arg192,anf_arg193,anf_arg194,anf_arg195);
break;
case 7: var anf_arg197 = G(self179,"end-char",L[93]);
var anf_arg198 = G(other180,"end-char",L[94]);
$step177 = 8;
$al182 = L[95];
if(!(R.isFunction(_greaterthan6))) {
R.ffi.throwNonFunApp($al182,_greaterthan6);
}
$ans181 = _greaterthan6.app(anf_arg197,anf_arg198);
break;
case 8: var anf_arg199 = $ans181;
$al182 = L[95];
var anf_if207 = R.checkWrapBoolean(anf_arg199);
if(R.isPyretTrue(anf_if207)) {
$step177 = 9;
} else {
$step177 = 10;
}
break;
case 9: var anf_arg200 = G(self179,"source",L[96]);
var anf_arg201 = G(other180,"start-line",L[97]);
var anf_arg202 = G(other180,"start-column",L[98]);
var anf_arg203 = G(other180,"start-char",L[99]);
var anf_arg204 = G(self179,"end-line",L[100]);
var anf_arg205 = G(self179,"end-column",L[101]);
var anf_arg206 = G(self179,"end-char",L[102]);
$step177 = 11;
$al182 = L[104];
if(!(R.isFunction(srcloc155.$var === D?U(L[103],"srcloc"):srcloc155.$var))) {
R.ffi.throwNonFunApp($al182,srcloc155.$var === D?U(L[103],"srcloc"):srcloc155.$var);
}
$ans181 = srcloc155.$var === D?U(L[103],"srcloc"):srcloc155.$var.app(anf_arg200,anf_arg201,anf_arg202,anf_arg203,anf_arg204,anf_arg205,anf_arg206);
break;
case 10: $step177 = 11;
$ans181 = other180;
break;
case 11: ++R.GAS;
return $ans181;
default: throw "No case numbered " + $step177 + " in $temp_full178";
}
}
} catch($e209) {
if(R.isCont($e209) && ($step177 !== 11)) {
$e209.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al182,$temp_full178,$step177,[self179,other180],[]);
}
if(R.isPyretException($e209)) {
$e209.pyretStack.push($al182);
}
throw $e209;
}
};
var anf_variant_member241 = R.makeMethod1($temp_full178);
var $temp_full211 = function($self212) {
var $step210 = 0;
var $ans213 = D;
var $al214 = L[108];
try {
if(R.isActivationRecord($self212)) {
$step210 = $self212.step;
$al214 = $self212.from;
$ans213 = $self212.ans;
self212 = $self212.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[108],1,$t);
}
var self212 = $self212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step210) {
case 0: $step210 = 1;
$ans213 = (false);
break;
case 1: ++R.GAS;
return $ans213;
default: throw "No case numbered " + $step210 + " in $temp_full211";
}
}
} catch($e215) {
if(R.isCont($e215) && ($step210 !== 1)) {
$e215.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al214,$temp_full211,$step210,[self212],[]);
}
if(R.isPyretException($e215)) {
$e215.pyretStack.push($al214);
}
throw $e215;
}
};
var anf_variant_member242 = R.makeMethod0($temp_full211);
var $builtin_getfields228 = function(f) {
return f(this.dict["module-name"]);
};
var $builtin_getfieldsref226 = function(f,refmask) {
return f(R.derefField(this.dict["module-name"],false,refmask[0]));
};
var $builtin_mutablemask227 = [false];
var $builtin$base218 = {"$fieldNames":["module-name"],
"_output":anf_shared216,
"after":anf_shared217,
"format":anf_variant_member221,
"key":anf_variant_member222,
"same-file":anf_variant_member223,
"before":anf_variant_member224,
"is-builtin":anf_variant_member225,
"_match":R.makeMatch("builtin",1)};
var $builtin$brands220 = {"$brand$builtin":true};
$builtin$brands220[Srcloc21._brand] = true;
var builtin230 = R.makeVariantConstructor(L[110],function() {
return [];
},[],[],[false],["module$name231"],$builtin_mutablemask227,$builtin$base218,$builtin$brands220,"builtin",$builtin_getfieldsref226,$builtin_getfields228,$builtin$base218);
var $srcloc_getfields245 = function(f) {
return f(this.dict["source"],this.dict["start-line"],this.dict["start-column"],this.dict["start-char"],this.dict["end-line"],this.dict["end-column"],this.dict["end-char"]);
};
var $srcloc_getfieldsref243 = function(f,refmask) {
return f(R.derefField(this.dict["source"],false,refmask[0]),R.derefField(this.dict["start-line"],false,refmask[1]),R.derefField(this.dict["start-column"],false,refmask[2]),R.derefField(this.dict["start-char"],false,refmask[3]),R.derefField(this.dict["end-line"],false,refmask[4]),R.derefField(this.dict["end-column"],false,refmask[5]),R.derefField(this.dict["end-char"],false,refmask[6]));
};
var $srcloc_mutablemask244 = [false,false,false,false,false,false,false];
var $srcloc$base232 = {"$fieldNames":["source","start-line","start-column","start-char","end-line","end-column","end-char"],
"_output":anf_shared216,
"after":anf_shared217,
"format":anf_variant_member235,
"key":anf_variant_member236,
"same-file":anf_variant_member237,
"before":anf_variant_member238,
"at-start":anf_variant_member239,
"at-end":anf_variant_member240,
"_plus":anf_variant_member241,
"is-builtin":anf_variant_member242,
"_match":R.makeMatch("srcloc",7)};
var $srcloc$brands234 = {"$brand$srcloc":true};
$srcloc$brands234[Srcloc21._brand] = true;
var srcloc247 = R.makeVariantConstructor(L[119],function() {
return [$type$String9,$type$Number8,$type$Number8,$type$Number8,$type$Number8,$type$Number8,$type$Number8];
},["source248","start$line249","start$column250","start$char251","end$line252","end$column253","end$char254"],[L[112],L[113],L[114],L[115],L[116],L[117],L[118]],[false,false,false,false,false,false,false],["source248","start$line249","start$column250","start$char251","end$line252","end$column253","end$char254"],$srcloc_mutablemask244,$srcloc$base232,$srcloc$brands234,"srcloc",$srcloc_getfieldsref243,$srcloc_getfields245,$srcloc$base232);
var anf_assign256 = R.makeObject({"Srcloc":R.makeFunction(function($val255) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[120],1,$t);
}
return R.makeBoolean(R.hasBrand($val255,Srcloc21._brand));
}),
"is-builtin":R.makeFunction(function($val229) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[109],1,$t);
}
return R.makeBoolean(R.hasBrand($val229,"$brand$builtin"));
}),
"builtin":builtin230,
"is-srcloc":R.makeFunction(function($val246) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[111],1,$t);
}
return R.makeBoolean(R.hasBrand($val246,"$brand$srcloc"));
}),
"srcloc":srcloc247});
Srcloc257.$var = anf_assign256;
var anf_assign258 = G(Srcloc257.$var,"Srcloc",L[120]);
Srcloc259.$var = anf_assign258;
var anf_assign260 = G(Srcloc257.$var,"Srcloc",L[120]);
is$Srcloc261.$var = anf_assign260;
var anf_assign262 = G(Srcloc257.$var,"is-builtin",L[109]);
is$builtin60.$var = anf_assign262;
var anf_assign263 = G(Srcloc257.$var,"builtin",L[109]);
builtin264.$var = anf_assign263;
var anf_assign265 = G(Srcloc257.$var,"is-srcloc",L[111]);
is$srcloc131.$var = anf_assign265;
var anf_assign266 = G(Srcloc257.$var,"srcloc",L[111]);
srcloc155.$var = anf_assign266;
var provides270 = R.makeObject({"Srcloc":Srcloc259.$var,
"is-Srcloc":is$Srcloc261.$var,
"builtin":builtin264.$var,
"is-builtin":is$builtin60.$var,
"srcloc":srcloc155.$var,
"is-srcloc":is$srcloc131.$var});
$step16 = 1;
$al20 = L[120];
$field267 = R.getColonFieldLoc(builtins10,"current-checker",L[120]);
if(R.isMethod($field267)) {
$ans19 = $field267.full_meth(builtins10);
} else {
if(!(R.isFunction($field267))) {
R.ffi.throwNonFunApp(L[120],$field267);
}
$ans19 = $field267.app();
}
break;
case 1: var anf_method_obj268 = $ans19;
$step16 = 2;
$al20 = L[120];
$field269 = R.getColonFieldLoc(anf_method_obj268,"results",L[120]);
if(R.isMethod($field269)) {
$ans19 = $field269.full_meth(anf_method_obj268);
} else {
if(!(R.isFunction($field269))) {
R.ffi.throwNonFunApp(L[120],$field269);
}
$ans19 = $field269.app();
}
break;
case 2: var checks271 = $ans19;
$step16 = 3;
$ans19 = R.makeObject({"answer":nothing11,
"namespace":NAMESPACE,
"defined-values":{"srcloc":srcloc155.$var,
"is-srcloc":is$srcloc131.$var,
"builtin":builtin264.$var,
"is-builtin":is$builtin60.$var,
"is-Srcloc":is$Srcloc261.$var,
"Srcloc":Srcloc259.$var,
"VS":VS12},
"defined-types":{"Srcloc":Srcloc86,
"VS":VS13},
"provide-plus-types":R.makeObject({"values":provides270,
"types":{"Srcloc":Srcloc86}}),
"checks":checks271});
break;
case 3: ++R.GAS;
return $ans19;
default: throw "No case numbered " + $step16 + " in $toplevel17";
}
}
} catch($e273) {
if(R.isCont($e273) && ($step16 !== 3)) {
$e273.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al20,$toplevel17,$step16,[],[provides270,srcloc155,is$srcloc131,builtin264,is$builtin60,is$Srcloc261,Srcloc259,Srcloc86]);
}
if(R.isPyretException($e273)) {
$e273.pyretStack.push($al20);
}
throw $e273;
}
};
return R.safeCall($toplevel17,function(moduleVal) {
R.modules["$src/arr/base/srcloc.arr14"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtin://valueskeleton": ({
"requires":[],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":
function(R,NAMESPACE, M) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,7,2,62,7,23,83],
[M,7,16,76,7,22,82],
[M,7,4,64,7,23,83],
[M,8,2,86,8,22,106],
[M,8,4,88,8,22,106],
[M,9,2,109,9,40,147],
[M,9,26,133,9,32,139],
[M,9,4,111,9,40,147],
[M,10,2,150,10,35,183],
[M,10,22,170,10,28,176],
[M,10,4,152,10,35,183],
[M,11,2,186,11,17,201],
[M,11,4,188,11,17,201],
[M,6,0,40,12,3,205],
[M,3,0,13,12,3,205]];
var $type$String1 = NAMESPACE.get("$type$String");
var builtins2 = NAMESPACE.get("builtins");
var nothing3 = NAMESPACE.get("nothing");
var $toplevel6 = function($$resumer91) {
var $step5 = 0;
var $ans8 = D;
var $al9 = L[14];
try {
if(R.isActivationRecord($$resumer91)) {
$step5 = $$resumer91.step;
$al9 = $$resumer91.from;
$ans8 = $$resumer91.ans;
$resumer91 = $$resumer91.args[0];
provides89 = $$resumer91.vars[0];
vs$seq84 = $$resumer91.vars[1];
is$vs$seq82 = $$resumer91.vars[2];
vs$constr80 = $$resumer91.vars[3];
is$vs$constr78 = $$resumer91.vars[4];
vs$collection76 = $$resumer91.vars[5];
is$vs$collection74 = $$resumer91.vars[6];
vs$value72 = $$resumer91.vars[7];
is$vs$value70 = $$resumer91.vars[8];
vs$str68 = $$resumer91.vars[9];
is$vs$str66 = $$resumer91.vars[10];
is$ValueSkeleton64 = $$resumer91.vars[11];
ValueSkeleton62 = $$resumer91.vars[12];
ValueSkeleton88 = $$resumer91.vars[13];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5) {
case 0: var ValueSkeleton10 = R.namedBrander("ValueSkeleton");
var ValueSkeleton88 = R.makeBranderAnn(ValueSkeleton10,"ValueSkeleton");
var ValueSkeleton60 = {"$var":D};
var ValueSkeleton62 = {"$var":D};
var is$ValueSkeleton64 = {"$var":D};
var is$vs$str66 = {"$var":D};
var vs$str68 = {"$var":D};
var is$vs$value70 = {"$var":D};
var vs$value72 = {"$var":D};
var is$vs$collection74 = {"$var":D};
var vs$collection76 = {"$var":D};
var is$vs$constr78 = {"$var":D};
var vs$constr80 = {"$var":D};
var is$vs$seq82 = {"$var":D};
var vs$seq84 = {"$var":D};
var $vs$str_getfields16 = function(f) {
return f(this.dict["s"]);
};
var $vs$str_getfieldsref14 = function(f,refmask) {
return f(R.derefField(this.dict["s"],false,refmask[0]));
};
var $vs$str_mutablemask15 = [false];
var $vs$str$base11 = {"$fieldNames":["s"],
"_match":R.makeMatch("vs-str",1)};
var $vs$str$brands13 = {"$brand$vs$str":true};
$vs$str$brands13[ValueSkeleton10._brand] = true;
var vs$str18 = R.makeVariantConstructor(L[2],function() {
return [$type$String1];
},["s19"],[L[1]],[false],["s19"],$vs$str_mutablemask15,$vs$str$base11,$vs$str$brands13,"vs-str",$vs$str_getfieldsref14,$vs$str_getfields16,$vs$str$base11);
var $vs$value_getfields25 = function(f) {
return f(this.dict["v"]);
};
var $vs$value_getfieldsref23 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $vs$value_mutablemask24 = [false];
var $vs$value$base20 = {"$fieldNames":["v"],
"_match":R.makeMatch("vs-value",1)};
var $vs$value$brands22 = {"$brand$vs$value":true};
$vs$value$brands22[ValueSkeleton10._brand] = true;
var vs$value27 = R.makeVariantConstructor(L[4],function() {
return [];
},[],[],[false],["v28"],$vs$value_mutablemask24,$vs$value$base20,$vs$value$brands22,"vs-value",$vs$value_getfieldsref23,$vs$value_getfields25,$vs$value$base20);
var $vs$collection_getfields34 = function(f) {
return f(this.dict["name"],this.dict["items"]);
};
var $vs$collection_getfieldsref32 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["items"],false,refmask[1]));
};
var $vs$collection_mutablemask33 = [false,false];
var $vs$collection$base29 = {"$fieldNames":["name","items"],
"_match":R.makeMatch("vs-collection",2)};
var $vs$collection$brands31 = {"$brand$vs$collection":true};
$vs$collection$brands31[ValueSkeleton10._brand] = true;
var vs$collection36 = R.makeVariantConstructor(L[7],function() {
return [$type$String1];
},["name37"],[L[6]],[false,false],["name37","items38"],$vs$collection_mutablemask33,$vs$collection$base29,$vs$collection$brands31,"vs-collection",$vs$collection_getfieldsref32,$vs$collection_getfields34,$vs$collection$base29);
var $vs$constr_getfields44 = function(f) {
return f(this.dict["name"],this.dict["args"]);
};
var $vs$constr_getfieldsref42 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["args"],false,refmask[1]));
};
var $vs$constr_mutablemask43 = [false,false];
var $vs$constr$base39 = {"$fieldNames":["name","args"],
"_match":R.makeMatch("vs-constr",2)};
var $vs$constr$brands41 = {"$brand$vs$constr":true};
$vs$constr$brands41[ValueSkeleton10._brand] = true;
var vs$constr46 = R.makeVariantConstructor(L[10],function() {
return [$type$String1];
},["name47"],[L[9]],[false,false],["name47","args48"],$vs$constr_mutablemask43,$vs$constr$base39,$vs$constr$brands41,"vs-constr",$vs$constr_getfieldsref42,$vs$constr_getfields44,$vs$constr$base39);
var $vs$seq_getfields54 = function(f) {
return f(this.dict["items"]);
};
var $vs$seq_getfieldsref52 = function(f,refmask) {
return f(R.derefField(this.dict["items"],false,refmask[0]));
};
var $vs$seq_mutablemask53 = [false];
var $vs$seq$base49 = {"$fieldNames":["items"],
"_match":R.makeMatch("vs-seq",1)};
var $vs$seq$brands51 = {"$brand$vs$seq":true};
$vs$seq$brands51[ValueSkeleton10._brand] = true;
var vs$seq56 = R.makeVariantConstructor(L[12],function() {
return [];
},[],[],[false],["items57"],$vs$seq_mutablemask53,$vs$seq$base49,$vs$seq$brands51,"vs-seq",$vs$seq_getfieldsref52,$vs$seq_getfields54,$vs$seq$base49);
var anf_assign59 = R.makeObject({"ValueSkeleton":R.makeFunction(function($val58) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
return R.makeBoolean(R.hasBrand($val58,ValueSkeleton10._brand));
}),
"is-vs-str":R.makeFunction(function($val17) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],1,$t);
}
return R.makeBoolean(R.hasBrand($val17,"$brand$vs$str"));
}),
"vs-str":vs$str18,
"is-vs-value":R.makeFunction(function($val26) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[3],1,$t);
}
return R.makeBoolean(R.hasBrand($val26,"$brand$vs$value"));
}),
"vs-value":vs$value27,
"is-vs-collection":R.makeFunction(function($val35) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],1,$t);
}
return R.makeBoolean(R.hasBrand($val35,"$brand$vs$collection"));
}),
"vs-collection":vs$collection36,
"is-vs-constr":R.makeFunction(function($val45) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],1,$t);
}
return R.makeBoolean(R.hasBrand($val45,"$brand$vs$constr"));
}),
"vs-constr":vs$constr46,
"is-vs-seq":R.makeFunction(function($val55) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
return R.makeBoolean(R.hasBrand($val55,"$brand$vs$seq"));
}),
"vs-seq":vs$seq56});
ValueSkeleton60.$var = anf_assign59;
var anf_assign61 = G(ValueSkeleton60.$var,"ValueSkeleton",L[13]);
ValueSkeleton62.$var = anf_assign61;
var anf_assign63 = G(ValueSkeleton60.$var,"ValueSkeleton",L[13]);
is$ValueSkeleton64.$var = anf_assign63;
var anf_assign65 = G(ValueSkeleton60.$var,"is-vs-str",L[0]);
is$vs$str66.$var = anf_assign65;
var anf_assign67 = G(ValueSkeleton60.$var,"vs-str",L[0]);
vs$str68.$var = anf_assign67;
var anf_assign69 = G(ValueSkeleton60.$var,"is-vs-value",L[3]);
is$vs$value70.$var = anf_assign69;
var anf_assign71 = G(ValueSkeleton60.$var,"vs-value",L[3]);
vs$value72.$var = anf_assign71;
var anf_assign73 = G(ValueSkeleton60.$var,"is-vs-collection",L[5]);
is$vs$collection74.$var = anf_assign73;
var anf_assign75 = G(ValueSkeleton60.$var,"vs-collection",L[5]);
vs$collection76.$var = anf_assign75;
var anf_assign77 = G(ValueSkeleton60.$var,"is-vs-constr",L[8]);
is$vs$constr78.$var = anf_assign77;
var anf_assign79 = G(ValueSkeleton60.$var,"vs-constr",L[8]);
vs$constr80.$var = anf_assign79;
var anf_assign81 = G(ValueSkeleton60.$var,"is-vs-seq",L[11]);
is$vs$seq82.$var = anf_assign81;
var anf_assign83 = G(ValueSkeleton60.$var,"vs-seq",L[11]);
vs$seq84.$var = anf_assign83;
var provides89 = R.makeObject({"ValueSkeleton":ValueSkeleton62.$var,
"is-ValueSkeleton":is$ValueSkeleton64.$var,
"vs-str":vs$str68.$var,
"is-vs-str":is$vs$str66.$var,
"vs-value":vs$value72.$var,
"is-vs-value":is$vs$value70.$var,
"vs-collection":vs$collection76.$var,
"is-vs-collection":is$vs$collection74.$var,
"vs-constr":vs$constr80.$var,
"is-vs-constr":is$vs$constr78.$var,
"vs-seq":vs$seq84.$var,
"is-vs-seq":is$vs$seq82.$var});
$step5 = 1;
$al9 = L[13];
$field85 = R.getColonFieldLoc(builtins2,"current-checker",L[13]);
if(R.isMethod($field85)) {
$ans8 = $field85.full_meth(builtins2);
} else {
if(!(R.isFunction($field85))) {
R.ffi.throwNonFunApp(L[13],$field85);
}
$ans8 = $field85.app();
}
break;
case 1: var anf_method_obj86 = $ans8;
$step5 = 2;
$al9 = L[13];
$field87 = R.getColonFieldLoc(anf_method_obj86,"results",L[13]);
if(R.isMethod($field87)) {
$ans8 = $field87.full_meth(anf_method_obj86);
} else {
if(!(R.isFunction($field87))) {
R.ffi.throwNonFunApp(L[13],$field87);
}
$ans8 = $field87.app();
}
break;
case 2: var checks90 = $ans8;
$step5 = 3;
$ans8 = R.makeObject({"answer":nothing3,
"namespace":NAMESPACE,
"defined-values":{"vs-seq":vs$seq84.$var,
"is-vs-seq":is$vs$seq82.$var,
"vs-constr":vs$constr80.$var,
"is-vs-constr":is$vs$constr78.$var,
"vs-collection":vs$collection76.$var,
"is-vs-collection":is$vs$collection74.$var,
"vs-value":vs$value72.$var,
"is-vs-value":is$vs$value70.$var,
"vs-str":vs$str68.$var,
"is-vs-str":is$vs$str66.$var,
"is-ValueSkeleton":is$ValueSkeleton64.$var,
"ValueSkeleton":ValueSkeleton62.$var},
"defined-types":{"ValueSkeleton":ValueSkeleton88},
"provide-plus-types":R.makeObject({"values":provides89,
"types":{"ValueSkeleton":ValueSkeleton88}}),
"checks":checks90});
break;
case 3: ++R.GAS;
return $ans8;
default: throw "No case numbered " + $step5 + " in $toplevel6";
}
}
} catch($e92) {
if(R.isCont($e92) && ($step5 !== 3)) {
$e92.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al9,$toplevel6,$step5,[],[provides89,vs$seq84,is$vs$seq82,vs$constr80,is$vs$constr78,vs$collection76,is$vs$collection74,vs$value72,is$vs$value70,vs$str68,is$vs$str66,is$ValueSkeleton64,ValueSkeleton62,ValueSkeleton88]);
}
if(R.isPyretException($e92)) {
$e92.pyretStack.push($al9);
}
throw $e92;
}
};
return R.safeCall($toplevel6,function(moduleVal) {
R.modules["$src/arr/base/valueskeleton.arr4"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
,
    "builtinjs://ffi": ({
  requires: [
    { "import-type": "builtin", name: "lists" },
    { "import-type": "builtin", name: "sets" },
    { "import-type": "builtin", name: "option" },
    { "import-type": "builtin", name: "either" },
    { "import-type": "builtin", name: "equality" },
    { "import-type": "builtin", name: "error" },
    { "import-type": "builtin", name: "srcloc" },
    { "import-type": "builtin", name: "contracts" },
    // skipping checker
    { "import-type": "builtin", name: "error-display" },
    { "import-type": "builtin", name: "valueskeleton" }
  ],
  provides: {},
  nativeRequires: [],
  theModule: function(runtime, namespace, uri, L, Se, O, E, EQ, ERR, S, CON, /* CH, */ ED, VS) {
    var gf = runtime.getField;
    L = gf(L, "values");
    Se = gf(Se, "values");
    O = gf(O, "values");
    E = gf(E, "values");
    EQ = gf(EQ, "values");
    ERR = gf(ERR, "values");
    S = gf(S, "values");
    CON = gf(CON, "values");
    ED = gf(ED, "values");
    VS = gf(VS, "values");
    var link = gf(L, "link");
    var lnk = function(first, rest) { return link.app(first, rest); };
    var mt = gf(L, "empty");
    function makeList(arr) {
      if (!arr || typeof arr.length !== "number") {
        throw "Non-array given to makeList " + JSON.stringify(arr);
      }
      var lst = mt;
      for(var i = arr.length - 1; i >= 0; i--) {
        lst = lnk(arr[i], lst);
      }
      return lst;
    }

    function makeTreeSet(arr) {
      return gf(Se, 'list-to-tree-set').app(makeList(arr));
    }
    function toArray(list) {
      var isList = runtime.getField(L, "List");
      var isEmpty = runtime.getField(L, "is-empty");
      var isLink = runtime.getField(L, "is-link");
      // console.error("list is " + JSON.stringify(list).substr(0, 100));
      // console.error("list is Object? " + runtime.isObject(list));
      // console.error("list.brands is " + JSON.stringify(list.brands));
      if(!(runtime.unwrap(isList.app(list)) === true)) {
        throw "Non-list given to toArray " + String(list);
      }
      var arr = [];
      try {
        while(!(runtime.unwrap(isEmpty.app(list)) === true)) {
          try {
            arr.push(runtime.getField(list, "first"));
          } catch(e) {
            console.error("***** getField first failed on list: " + JSON.stringify(list));
            console.error(e);
            throw e;
          }
          try {
            list = runtime.getField(list, "rest");
          } catch(e) {
            console.error("***** getField rest failed on list: " + JSON.stringify(list));
            console.error(e);
            throw e;
          }
        }
      } catch(e) {
        console.error("******* Calling isEmpty failed on list: " + JSON.stringify(list));
        console.error(e);
        throw e;
      }
      return arr;
    }
    var checkSrcloc = runtime.makeCheckType(function(val) {
      return runtime.unwrap(gf(S, "Srcloc").app(val));
    }, "Srcloc");

/* NOTE(joe): skipping checker
    function isTestResult(val) { return runtime.unwrap(runtime.getField(CH, "TestResult").app(val)); }
    var checkTestResult = runtime.makeCheckType(isTestResult, "TestResult");
*/

    function isErrorDisplay(val) { return runtime.unwrap(runtime.getField(ED, "ErrorDisplay").app(val)); }
    var checkErrorDisplay = runtime.makeCheckType(isErrorDisplay, "ErrorDisplay");

    function cases(pred, predName, val, casesObj) {
      if(!pred.app(val)) {
        throwTypeMismatch(val, predName);
      }
      var pyretObj = {}
      var els = runtime.makeFunction(function(v) {
        throwMessageException("No cases matched");
      });
      Object.keys(casesObj).forEach(function(k) {
        if(k !== "else") {
          pyretObj[k] = runtime.makeFunction(casesObj[k]);
        } else {
          els = runtime.makeFunction(casesObj[k]);
        }
      });
      return runtime.safeTail(function() {
        return gf(val, "_match").app(runtime.makeObject(pyretObj), els);
      });
    }

    var checkArity = runtime.checkArity;

/* NOTE(joe): skipping checker
    function checkResultsSummary(checkResults) {
      return runtime.safeCall(
        function() {
          return gf(CH, "results-summary").app(checkResults);
        },
        function(pySummary) {
          return {
            message: gf(pySummary, "message"),
            passed: gf(pySummary, "passed"),
            failed: gf(pySummary, "failed"),
            total: gf(pySummary, "total")
          };
        },
        "results-summary");
    };
*/
    function err(str) { return gf(ERR, str).app; }
    function contract(str) { return gf(CON, str).app; }
    function errPred(str) {
      return function(val) {
        return runtime.unwrap(gf(ERR, str).app(val));
      };
    }
    var raise = runtime.raise;

    function throwInternalError(message, otherArgs) {
      runtime.checkString(message);
      runtime.checkList(otherArgs);
      raise(err("internal-error")(runtime.makeString(message), otherArgs));
    }

    function throwFieldNotFound(loc, object, field) {
      checkSrcloc(loc);
      runtime.checkPyretVal(object);
      runtime.checkString(field);
      raise(err("field-not-found")(loc, object, runtime.makeString(field)));
    }
    function throwLookupNonObject(loc, nonObject, field) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonObject);
      runtime.checkString(field);
      raise(err("lookup-non-object")(loc, nonObject, runtime.makeString(field)));
    }
    function throwExtendNonObject(loc, nonObject) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonObject);
      raise(err("extend-non-object")(loc, nonObject));
    }

    function throwMessageException(message) {
      runtime.checkString(message);
      raise(err("message-exception")(message));
    }

    function makeMessageException(message) {
      runtime.checkString(message);
      return err("message-exception")(message);
    }

    function throwUserException(errVal) {
      runtime.checkPyretVal(errVal);
      raise(err("user-exception")(errVal));
    }
    function makeUserException(errVal) {
      runtime.checkPyretVal(errVal);
      return err("user-exception")(errVal);
    }

    function throwEqualityException(reason, v1, v2) {
      runtime.checkString(reason);
      runtime.checkPyretVal(v1);
      runtime.checkPyretVal(v2);
      raise(err("equality-failure")(reason, v1, v2));
    }

    function throwTypeMismatch(val, typeName) {
      // NOTE(joe): can't use checkPyretVal here, because it will re-enter
      // this function and blow up... so bottom out at "nothing"
      if(!runtime.isPyretVal(val)) {
        val = runtime.namespace.get("nothing");
      }
      runtime.checkString(typeName);
      raise(err("generic-type-mismatch")(val, typeName));
    }

    function throwInvalidArrayIndex(methodName, array, index, reason) {
      runtime.checkString(methodName);
      runtime.checkArray(array);
      runtime.checkNumber(index);
      runtime.checkString(reason);
      raise(err("invalid-array-index")(methodName, array, index, reason));
    }

    function throwNumStringBinopError(left, right, opname, opdesc, methodname) {
      runtime.checkPyretVal(left);
      runtime.checkPyretVal(right);
      runtime.checkString(opname);
      runtime.checkString(opdesc);
      runtime.checkString(methodname);
      raise(err("num-string-binop-error")(left, right, opname, opdesc, methodname));
    }
    function throwNumericBinopError(left, right, opname, methodname) {
      runtime.checkPyretVal(left);
      runtime.checkPyretVal(right);
      runtime.checkString(opname);
      runtime.checkString(methodname);
      raise(err("numeric-binop-error")(left, right, opname, methodname));
    }

    function throwUninitializedId(loc, name) {
      checkSrcloc(loc);
      runtime.checkString(name);
      raise(err("uninitialized-id")(loc, name));
    }

    function throwUninitializedIdMkLoc(loc, name) {
      throwUninitializedId(runtime.makeSrcloc(loc), name);
    }

    function throwArityError(funLoc, arity, args) {
      checkSrcloc(funLoc);
      runtime.checkNumber(arity);
      runtime.checkList(args);
      raise(err("arity-mismatch")(funLoc, arity, args));
    }

    function throwArityErrorC(funLoc, arity, args) {
      var loc = runtime.makeSrcloc(funLoc);
      var argsPyret = makeList(args);
      throwArityError(loc, arity, argsPyret);
    }

    function throwCasesArityError(branchLoc, arity, fields) {
      checkSrcloc(branchLoc);
      runtime.checkNumber(arity);
      runtime.checkNumber(fields);
      raise(err("cases-arity-mismatch")(branchLoc, arity, fields));
    }

    function throwCasesArityErrorC(branchLoc, arity, fields) {
      var loc = runtime.makeSrcloc(branchLoc);
      throwCasesArityError(loc, arity, fields);
    }

    function throwCasesSingletonError(branchLoc, shouldBeSingleton) {
      checkSrcloc(branchLoc);
      runtime.checkBoolean(shouldBeSingleton);
      raise(err("cases-singleton-mismatch")(branchLoc, shouldBeSingleton));
    }

    function throwCasesSingletonErrorC(branchLoc, shouldBeSingleton) {
      var loc = runtime.makeSrcloc(branchLoc);
      throwCasesSingletonError(loc, shouldBeSingleton);
    }

    function throwNonBooleanCondition(locArray, type, val) {
      runtime.checkString(type);
      runtime.checkPyretVal(val);
      raise(err("non-boolean-condition")(runtime.makeSrcloc(locArray), type, val));
    }
    function throwNonBooleanOp(locArray, position, type, val) {
      runtime.checkString(position);
      runtime.checkString(type);
      runtime.checkPyretVal(val);
      raise(err("non-boolean-op")(runtime.makeSrcloc(locArray), position, type, val));
    }
    function throwNoBranchesMatched(locArray, type) {
      runtime.checkString(type);
      raise(err("no-branches-matched")(runtime.makeSrcloc(locArray), type));
    }
    function throwNoCasesMatched(locArray, val) {
      runtime.checkPyretVal(val);
      raise(err("no-cases-matched")(runtime.makeSrcloc(locArray), val));
    }
    function throwNonFunApp(locArray, funVal) {
      runtime.checkPyretVal(funVal);
      raise(err("non-function-app")(runtime.makeSrcloc(locArray), funVal));
    }

    function throwParseErrorNextToken(loc, nextToken) {
      raise(err("parse-error-next-token")(loc, nextToken));
    }
    function throwParseErrorEOF(loc) {
      raise(err("parse-error-eof")(loc));
    }
    function throwParseErrorUnterminatedString(loc) {
      raise(err("parse-error-unterminated-string")(loc));
    }
    function throwParseErrorBadNumber(loc) {
      raise(err("parse-error-bad-number")(loc));
    }
    function throwParseErrorBadOper(loc) {
      raise(err("parse-error-bad-operator")(loc));
    }

    function throwModuleLoadFailureL(names) {
      raise(makeModuleLoadFailureL(names));
    }

    function makeModuleLoadFailureL(names) {
      var namesList = makeList(names);
      return err("module-load-failure")(namesList);
    }

    function makeRecordFieldsFail(value, failures) {
      runtime.checkPyretVal(value);
      return contract("record-fields-fail")(value, failures);
    }

    function makeFieldFailure(loc, field, reason) {
      checkSrcloc(loc);
      runtime.checkString(field);
      return contract("field-failure")(loc, field, reason);
    }

    function makeMissingField(loc, field) {
      checkSrcloc(loc);
      runtime.checkString(field);
      return contract("missing-field")(loc, field);
    }

    function makeTypeMismatch(val, name) {
      runtime.checkString(name);
      runtime.checkPyretVal(val);
      return contract("type-mismatch")(val, name);
    }

    function makeRefInitFail(loc, reason) {
      checkSrcloc(loc);
      return contract("ref-init")(loc, reason);
    }

    function makePredicateFailure(val, name) {
      runtime.checkString(name);
      runtime.checkPyretVal(val);
      return contract("predicate-failure")(val, name);
    }

    function makeDotAnnNotPresent(name, field) {
      runtime.checkString(name);
      runtime.checkPyretVal(field);
      return contract("dot-ann-not-present")(name, field);
    }

    var isOk = contract("is-ok");
    var isFail = contract("is-fail");
    var isFailArg = contract("is-fail-arg");

    var isEqualityResult = gf(EQ, "is-EqualityResult").app;
    var isEqual = gf(EQ, "is-Equal").app;
    var isNotEqual = gf(EQ, "is-NotEqual").app;
    var isUnknown = gf(EQ, "is-Unknown").app

    return runtime.makeJSModuleReturn({
      throwNumStringBinopError: throwNumStringBinopError,
      throwNumericBinopError: throwNumericBinopError,
      throwInternalError: throwInternalError,
      throwFieldNotFound: throwFieldNotFound,
      throwLookupNonObject: throwLookupNonObject,
      throwExtendNonObject: throwExtendNonObject,
      throwTypeMismatch: throwTypeMismatch,
      throwInvalidArrayIndex: throwInvalidArrayIndex,
      throwMessageException: throwMessageException,
      throwUserException: throwUserException,
      throwEqualityException: throwEqualityException,
      throwUninitializedId: throwUninitializedId,
      throwUninitializedIdMkLoc: throwUninitializedIdMkLoc,
      throwArityError: throwArityError,
      throwArityErrorC: throwArityErrorC,
      throwCasesArityError: throwCasesArityError,
      throwCasesArityErrorC: throwCasesArityErrorC,
      throwCasesSingletonError: throwCasesSingletonError,
      throwCasesSingletonErrorC: throwCasesSingletonErrorC,
      throwNonBooleanCondition: throwNonBooleanCondition,
      throwNonBooleanOp: throwNonBooleanOp,
      throwNoBranchesMatched: throwNoBranchesMatched,
      throwNoCasesMatched: throwNoCasesMatched,
      throwNonFunApp: throwNonFunApp,
      throwModuleLoadFailureL: throwModuleLoadFailureL,

      throwParseErrorNextToken: throwParseErrorNextToken,
      throwParseErrorEOF: throwParseErrorEOF,
      throwParseErrorUnterminatedString: throwParseErrorUnterminatedString,
      throwParseErrorBadNumber: throwParseErrorBadNumber,
      throwParseErrorBadOper: throwParseErrorBadOper,

      makeRecordFieldsFail: makeRecordFieldsFail,
      makeFieldFailure: makeFieldFailure,
      makeMissingField: makeMissingField,
      makeTypeMismatch: makeTypeMismatch,
      makeRefInitFail: makeRefInitFail,
      makePredicateFailure: makePredicateFailure,
      makeDotAnnNotPresent: makeDotAnnNotPresent,
      contractOk: gf(CON, "ok"),
      contractFail: contract("fail"),
      contractFailArg: contract("fail-arg"),
      isOk: isOk,
      isFail: isFail,
      isFailArg: isFailArg,

      equal: gf(EQ, "Equal"),
      notEqual: gf(EQ, "NotEqual"),
      unknown: gf(EQ, "Unknown"),
      isEqual: isEqual,
      isNotEqual: isNotEqual,
      isUnknown: isUnknown,
      isEqualityResult: isEqualityResult,

      makeMessageException: makeMessageException,
      makeUserException: makeUserException,
      makeModuleLoadFailureL: makeModuleLoadFailureL,

      userBreak: gf(ERR, "user-break"),
      isUserBreak: errPred("is-user-break"),

      errPred: errPred,

      cases: cases,

      checkArity: checkArity,

      /*checkResultsSummary: checkResultsSummary,*/

      makeList: makeList,
      makeTreeSet: makeTreeSet,
      isNone: function(v) { return runtime.getField(O, "is-none").app(v); },
      isSome: function(v) { return runtime.getField(O, "is-some").app(v); },
      makeNone: function() { return runtime.getField(O, "none"); },
      makeSome: function(v) { return runtime.getField(O, "some").app(v); },

      isEither: runtime.getField(E, "is-Either"),
      isLeft: function(v) { return runtime.getField(E, "is-left").app(v); },
      isRight: function(v) { return runtime.getField(E, "is-right").app(v); },
      makeLeft: function(l) { return runtime.getField(E, "left").app(l); },
      makeRight: function(r) { return runtime.getField(E, "right").app(r); },

      toArray: toArray,
      isList: function(list) { return runtime.unwrap(runtime.getField(L, "List").app(list)); },

      isErrorDisplay: isErrorDisplay,
      checkErrorDisplay: checkErrorDisplay,
// NOTE(joe): skipping checker
//      isTestResult: isTestResult,
//      checkTestResult: checkTestResult,
//      isTestSuccess: function(val) { return runtime.unwrap(runtime.getField(CH, "is-success").app(val)); },

      isValueSkeleton: function(v) { return runtime.unwrap(runtime.getField(VS, "ValueSkeleton").app(v)); },
      isVSValue: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-value").app(v)); },
      isVSCollection: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-collection").app(v)); },
      isVSConstr: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-constr").app(v)); },
      isVSStr: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-str").app(v)); },
      isVSSeq: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-seq").app(v)); },
      vsStr: function(s) {
        runtime.checkString(s);
        return runtime.getField(VS, "vs-str").app(s);
      },

      edEmbed: function(v) {
        runtime.checkPyretVal(v);
        return runtime.getField(ED, "embed").app(v);
      },

      //TODO(joe): add more creation methods for error-display/valueskeleton
      //here, which are super-useful!

      skeletonValues: function(skel) {
        var isValueSkeleton = runtime.getField(VS, "ValueSkeleton");
        var isValue = runtime.getField(VS, "is-vs-value");
        var isCollection = runtime.getField(VS, "is-vs-collection");
        var isConstr = runtime.getField(VS, "is-vs-constr");
        var isStr = runtime.getField(VS, "is-vs-str");
        var isSeq = runtime.getField(VS, "is-vs-seq");
        if(!(runtime.unwrap(isValueSkeleton.app(skel)) === true)) {
          throwTypeMismatch(skel, "ValueSkeleton");
        }
        var arr = [];
        var worklist = [skel];
        try {
          for (var i = 0; i < worklist.length; i++) { // length changes as the loop iterates
            var cur = worklist[i];
            if (runtime.unwrap(isValue.app(cur)) === true) {
              arr.push(runtime.getField(cur, "v"));
            } else if (runtime.unwrap(isCollection.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "items")));
            } else if (runtime.unwrap(isConstr.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "args")));
            } else if (runtime.unwrap(isStr.app(cur)) === true) {
              // nothing
            } else if (runtime.unwrap(isSeq.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "items")));
            } else {
              throwMessageException("Non-value appeared in skeleton: " + String(cur));
            }
          }
        } catch(e) {
          console.error("******* Something went wrong in skeletonValues: " + JSON.stringify(skel));
          console.error(e);
          throw e;
        }
        return arr;
      }
    });
  }
})

  };

  var depMap = {
    "builtin://pick": {},
    "builtin://error-display": {},
    "builtin://either": {},
    "builtin://option": {},
    "builtin://valueskeleton": {},
    "builtin://srcloc": {
      "builtin(valueskeleton)": "builtin://valueskeleton"
    },
    "builtin://arrays": {
      "builtin(valueskeleton)": "builtin://valueskeleton",
      "builtin(lists)": "builtin://lists"
    },
    "builtin://contracts": {
      "builtin(error-display)": "builtin://error-display",
      "builtin(lists)": "builtin://lists"
    },
    "builtin://error": {
      "builtin(error-display)": "builtin://error-display"
    },
    "builtin://equality": {
      "builtin(error)": "builtin://error"
    },
    "builtin://lists": {
      "builtin(equality)": "builtin://equality",
      "builtin(option)": "builtin://option",
      "builtin(either)": "builtin://either",
      "builtin(valueskeleton)": "builtin://valueskeleton"
    },
    "builtin://sets": {
      "builtin(arrays)": "builtin://arrays",
      "builtin(pick)": "builtin://pick",
      "builtin(option)": "builtin://option",
      "builtin(equality)": "builtin://equality",
      "builtin(error)": "builtin://error",
      "builtin(valueskeleton)": "builtin://valueskeleton",
      "builtin(lists)": "builtin://lists"
    },
    "builtinjs://ffi": {
      "builtin(option)": "builtin://option",
      "builtin(sets)": "builtin://sets",
      "builtin(lists)": "builtin://lists",
      "builtin(either)": "builtin://either",
      "builtin(equality)": "builtin://equality",
      "builtin(error)": "builtin://error",
      "builtin(srcloc)": "builtin://srcloc",
      "builtin(contracts)": "builtin://contracts",
      "builtin(error-display)": "builtin://error-display",
      "builtin(valueskeleton)": "builtin://valueskeleton"
    }
  };

  var runtime = runtimeLib.makeRuntime({});

  var baseToLoad = [
    // 0 dependencies
    "builtin://option",
    "builtin://pick",
    "builtin://either",
    "builtin://valueskeleton",
    "builtin://error-display",

    // 1 or more deps
    "builtin://srcloc",
    "builtin://error",
    "builtin://equality",
    "builtin://lists",
    "builtin://contracts",

    "builtin://arrays",
    "builtin://sets"
  ];

  return runtime.loadBaseModules(staticModules, depMap, baseToLoad,  function(/* empty */) {
    console.log("Loaded option");
    return runtime.loadBaseModules(staticModules, depMap, ["builtinjs://ffi"],  function(ffi) {
      console.log("Loaded justopt: ", ffi);
    });
  })

/*
  loadJSModules(thisRuntime.namespace, [require("js/ffi-helpers")], function(f) {
    thisRuntime["ffi"] = ffi;
  });
  loadModulesNew(thisRuntime.namespace,
    [require("trove/srcloc")],
    function(srclocLib) {
      thisRuntime.srcloc = getField(srclocLib, "values");
    });
  loadModulesNew(thisRuntime.namespace, [require("trove/image-lib")], function(i) {
    thisRuntime["imageLib"] = getField(i, "internal");
  });

  // NOTE(joe): set a few of these explicitly to work with s-prim-app
  thisRuntime["throwMessageException"] = ffi.throwMessageException;
  thisRuntime["throwNoBranchesMatched"] = ffi.throwNoBranchesMatched;
  thisRuntime["throwNoCasesMatched"] = ffi.throwNoCasesMatched;
  thisRuntime["throwNonBooleanCondition"] = ffi.throwNonBooleanCondition;
  thisRuntime["throwNonBooleanOp"] = ffi.throwNonBooleanOp;

  var checkList = makeCheckType(ffi.isList, "List");
  thisRuntime["checkList"] = checkList;

  thisRuntime["checkEQ"] = makeCheckType(ffi.isEqualityResult, "EqualityResult");
*/
});
