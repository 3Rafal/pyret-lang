({
"requires":[{"import-type":"builtin",
"name":"arrays"},
{"import-type":"builtin",
"name":"equality"},
{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"pick"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{},
"aliases":{},
"datatypes":{}},
"theModule":function(R, NAMESPACE, M, $arrays36,$equality37,$error38,$lists39,$option40,$pick41,$VS42) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name)};
var D = R.undefined;
var L = [[M,28,7,586,28,17,596],
[M,29,8,605,29,19,616],
[M,30,7,624,30,17,634],
[M,31,11,646,31,25,660],
[M,32,7,668,32,17,678],
[M,35,12,714,35,26,728],
[M,36,12,741,36,26,755],
[M,162,4,6236,162,18,6250],
[M,160,19,6153,160,29,6163],
[M,160,2,6136,163,5,6256],
[M,165,11,6297,165,18,6304],
[M,165,7,6293,165,26,6312],
[M,166,6,6320,166,51,6365],
[M,168,9,6385,168,23,6399],
[M,168,25,6401,168,40,6416],
[M,168,6,6382,168,41,6417],
[M,165,11,6297,165,25,6311],
[M,164,2,6260,170,5,6431],
[M,42,20,814,42,26,820],
[M,42,4,798,42,33,827],
[M,43,34,863,43,41,870],
[M,43,4,833,43,52,881],
[M,44,41,924,44,49,932],
[M,44,55,938,44,59,942],
[M,44,61,944,44,65,948],
[M,44,32,915,44,39,922],
[M,44,41,924,44,66,949],
[M,44,4,887,44,70,953],
[M,45,41,996,45,45,1000],
[M,45,32,987,45,39,994],
[M,45,4,959,45,49,1004],
[M,46,22,1028,46,32,1038],
[M,46,4,1010,46,43,1049],
[M,47,21,1072,47,31,1082],
[M,47,4,1055,47,42,1093],
[M,48,23,1118,48,33,1128],
[M,48,4,1099,48,44,1139],
[M,49,25,1166,49,35,1176],
[M,49,4,1145,49,46,1187],
[M,50,24,1213,50,34,1223],
[M,50,4,1193,50,45,1234],
[M,51,26,1262,51,36,1272],
[M,51,4,1240,51,47,1283],
[M,52,4,1289,52,42,1327],
[M,53,4,1333,53,41,1370],
[M,54,4,1376,54,43,1415],
[M,55,4,1421,55,45,1462],
[M,56,4,1468,56,44,1508],
[M,57,4,1514,57,46,1556],
[M,58,4,1562,58,22,1580],
[M,59,4,1586,59,26,1608],
[M,60,4,1614,60,27,1637],
[M,65,6,1795,65,12,1801],
[M,63,20,1738,63,26,1744],
[M,63,4,1722,66,7,1809],
[M,69,16,1946,69,26,1956],
[M,69,9,1939,69,26,1956],
[M,70,20,1983,70,30,1993],
[M,70,6,1969,70,55,2018],
[M,70,32,1995,70,41,2004],
[M,70,32,1995,70,55,2018],
[M,71,12,2031,71,22,2041],
[M,71,12,2031,71,36,2055],
[M,70,14,1977,70,30,1993],
[M,67,34,1845,67,41,1852],
[M,67,4,1815,73,7,2073],
[M,76,16,2199,76,26,2209],
[M,76,9,2192,76,26,2209],
[M,76,42,2225,76,51,2234],
[M,76,53,2236,76,63,2246],
[M,76,28,2211,76,36,2219],
[M,76,28,2211,76,64,2247],
[M,77,20,2268,77,30,2278],
[M,77,6,2254,78,74,2354],
[M,78,27,2307,78,37,2317],
[M,78,39,2319,78,48,2328],
[M,78,39,2319,78,60,2340],
[M,78,62,2342,78,72,2352],
[M,78,18,2298,78,26,2306],
[M,78,8,2288,78,17,2297],
[M,78,8,2288,78,74,2354],
[M,78,18,2298,78,73,2353],
[M,80,27,2394,80,37,2404],
[M,80,39,2406,80,48,2415],
[M,80,50,2417,80,60,2427],
[M,80,50,2417,80,72,2439],
[M,80,18,2385,80,26,2393],
[M,80,8,2375,80,17,2384],
[M,80,8,2375,80,74,2441],
[M,80,18,2385,80,73,2440],
[M,77,14,2262,77,30,2278],
[M,74,32,2107,74,39,2114],
[M,74,4,2079,82,7,2459],
[M,85,16,2582,85,26,2592],
[M,85,9,2575,85,26,2592],
[M,85,28,2594,85,39,2605],
[M,85,28,2594,85,45,2611],
[M,86,20,2632,86,30,2642],
[M,86,6,2618,87,74,2718],
[M,87,27,2671,87,37,2681],
[M,87,39,2683,87,48,2692],
[M,87,39,2683,87,60,2704],
[M,87,62,2706,87,72,2716],
[M,87,18,2662,87,26,2670],
[M,87,8,2652,87,17,2661],
[M,87,8,2652,87,74,2718],
[M,87,18,2662,87,73,2717],
[M,89,27,2758,89,37,2768],
[M,89,39,2770,89,48,2779],
[M,89,50,2781,89,60,2791],
[M,89,50,2781,89,72,2803],
[M,89,18,2749,89,26,2757],
[M,89,8,2739,89,17,2748],
[M,89,8,2739,89,74,2805],
[M,89,18,2749,89,73,2804],
[M,86,14,2626,86,30,2642],
[M,83,32,2493,83,39,2500],
[M,83,4,2465,91,7,2823],
[M,94,22,2965,94,32,2975],
[M,94,6,2949,94,36,2979],
[M,95,6,3047,95,40,3081],
[M,92,22,2847,92,32,2857],
[M,92,4,2829,96,7,3125],
[M,99,22,3265,99,32,3275],
[M,99,6,3249,99,36,3279],
[M,100,6,3286,100,39,3319],
[M,97,21,3148,97,31,3158],
[M,97,4,3131,101,7,3327],
[M,104,22,3471,104,32,3481],
[M,104,6,3455,104,36,3485],
[M,105,6,3492,105,41,3527],
[M,102,23,3352,102,33,3362],
[M,102,4,3333,106,7,3535],
[M,109,22,3680,109,32,3690],
[M,109,6,3664,109,36,3694],
[M,110,6,3701,110,37,3732],
[M,107,25,3562,107,35,3572],
[M,107,4,3541,111,7,3740],
[M,114,22,3882,114,32,3892],
[M,114,6,3866,114,36,3896],
[M,115,6,3903,115,36,3933],
[M,112,24,3766,112,34,3776],
[M,112,4,3746,116,7,3941],
[M,119,22,4088,119,32,4098],
[M,119,6,4072,119,36,4102],
[M,120,6,4109,120,38,4141],
[M,117,26,3969,117,36,3979],
[M,117,4,3947,121,7,4149],
[M,125,6,4342,125,16,4352],
[M,125,34,4370,125,43,4379],
[M,125,69,4405,125,79,4415],
[M,125,34,4370,125,81,4417],
[M,125,6,4342,125,82,4418],
[M,125,61,4397,125,80,4416],
[M,122,4,4155,126,7,4426],
[M,130,6,4618,130,16,4628],
[M,130,35,4647,130,44,4656],
[M,130,35,4647,130,66,4678],
[M,130,68,4680,130,78,4690],
[M,130,6,4618,130,80,4692],
[M,130,33,4645,130,79,4691],
[M,127,4,4432,131,7,4700],
[M,135,8,4897,135,18,4907],
[M,135,37,4926,135,46,4935],
[M,135,37,4926,135,70,4959],
[M,135,8,4897,135,71,4960],
[M,135,73,4962,135,83,4972],
[M,135,6,4895,135,84,4973],
[M,132,4,4706,136,7,4981],
[M,140,6,5191,140,15,5200],
[M,140,36,5221,140,46,5231],
[M,140,75,5260,140,85,5270],
[M,140,36,5221,140,87,5272],
[M,140,6,5191,140,88,5273],
[M,140,67,5252,140,86,5271],
[M,137,4,4987,141,7,5281],
[M,145,6,5489,145,15,5498],
[M,145,37,5520,145,47,5530],
[M,145,37,5520,145,72,5555],
[M,145,74,5557,145,84,5567],
[M,145,6,5489,145,86,5569],
[M,145,35,5518,145,85,5568],
[M,142,4,5287,146,7,5577],
[M,150,8,5791,150,17,5800],
[M,150,39,5822,150,49,5832],
[M,150,39,5822,150,76,5859],
[M,150,8,5791,150,77,5860],
[M,150,79,5862,150,89,5872],
[M,150,6,5789,150,90,5873],
[M,147,4,5583,151,7,5881],
[M,152,21,5904,152,30,5913],
[M,152,21,5904,152,38,5921],
[M,152,41,5924,152,51,5934],
[M,152,41,5924,152,59,5942],
[M,152,17,5900,152,59,5942],
[M,152,4,5887,152,63,5946],
[M,154,8,5974,154,18,5984],
[M,154,6,5972,154,62,6028],
[M,154,24,5990,154,34,6000],
[M,154,24,5990,154,41,6007],
[M,154,46,6012,154,55,6021],
[M,154,46,6012,154,62,6028],
[M,154,6,5972,154,19,5985],
[M,153,4,5952,155,7,6036],
[M,157,8,6064,157,18,6074],
[M,157,6,6062,157,60,6116],
[M,157,23,6079,157,33,6089],
[M,157,23,6079,157,40,6096],
[M,157,44,6100,157,53,6109],
[M,157,44,6100,157,60,6116],
[M,157,6,6062,157,19,6075],
[M,156,4,6042,158,7,6124],
[M,41,2,781,60,27,1637],
[M,62,2,1641,158,7,6124],
[M,62,30,1669,62,36,1675],
[M,62,46,1685,62,53,1692],
[M,62,64,1703,62,71,1710],
[M,62,4,1643,62,72,1711],
[M,40,0,765,171,3,6435],
[M,173,30,6467,173,57,6494],
[M,173,0,6437,173,61,6498],
[M,174,23,6522,174,34,6533],
[M,174,0,6499,174,38,6537],
[M,175,23,6561,175,34,6572],
[M,175,0,6538,175,38,6576],
[M,178,22,6661,178,35,6674],
[M,178,37,6676,178,51,6690],
[M,178,2,6641,178,70,6709],
[M,178,14,6653,178,56,6695],
[M,178,14,6653,178,52,6691],
[M,177,33,6611,177,40,6618],
[M,177,51,6629,177,58,6636],
[M,177,0,6578,179,3,6713],
[M,183,13,6780,183,19,6786],
[M,183,13,6780,183,25,6792],
[M,183,27,6794,183,33,6800],
[M,183,27,6794,183,38,6805],
[M,183,49,6816,183,56,6823],
[M,183,58,6825,183,64,6831],
[M,183,58,6825,183,70,6837],
[M,183,72,6839,183,79,6846],
[M,183,4,6771,183,81,6848],
[M,183,40,6807,183,80,6847],
[M,182,2,6749,184,5,6854],
[M,186,13,6890,186,20,6897],
[M,186,13,6890,186,26,6903],
[M,186,37,6914,186,44,6921],
[M,186,46,6923,186,52,6929],
[M,186,54,6931,186,61,6938],
[M,186,54,6931,186,66,6943],
[M,186,69,6946,186,76,6953],
[M,186,69,6946,186,82,6959],
[M,186,4,6881,186,83,6960],
[M,186,28,6905,186,67,6944],
[M,185,2,6857,187,5,6966],
[M,189,13,7001,189,19,7007],
[M,189,13,7001,189,25,7013],
[M,189,13,7001,189,31,7019],
[M,190,15,7036,190,21,7042],
[M,190,15,7036,190,27,7048],
[M,190,29,7050,190,35,7056],
[M,190,29,7050,190,40,7061],
[M,190,42,7063,190,48,7069],
[M,190,42,7063,190,54,7075],
[M,190,42,7063,190,59,7080],
[M,191,15,7098,191,22,7105],
[M,191,24,7107,191,30,7113],
[M,191,24,7107,191,36,7119],
[M,191,24,7107,191,42,7125],
[M,191,44,7127,191,51,7134],
[M,189,4,6992,191,53,7136],
[M,191,6,7089,191,52,7135],
[M,190,6,7027,190,60,7081],
[M,188,2,6969,192,5,7142],
[M,194,13,7177,194,20,7184],
[M,194,13,7177,194,25,7189],
[M,194,13,7177,194,31,7195],
[M,195,15,7212,195,22,7219],
[M,195,24,7221,195,30,7227],
[M,195,32,7229,195,39,7236],
[M,195,32,7229,195,44,7241],
[M,195,32,7229,195,49,7246],
[M,196,15,7264,196,22,7271],
[M,196,15,7264,196,28,7277],
[M,196,30,7279,196,37,7286],
[M,196,30,7279,196,42,7291],
[M,196,30,7279,196,48,7297],
[M,196,50,7299,196,57,7306],
[M,196,50,7299,196,63,7312],
[M,194,4,7168,196,65,7314],
[M,196,6,7255,196,64,7313],
[M,195,6,7203,195,50,7247],
[M,193,2,7145,197,5,7320],
[M,198,7,7328,198,16,7337],
[M,198,7,7328,198,25,7346],
[M,199,7,7354,199,17,7364],
[M,199,7,7354,199,26,7373],
[M,200,5,7379,200,26,7400],
[M,202,2,7413,207,7,7559],
[M,203,7,7444,203,16,7453],
[M,203,7,7444,203,21,7458],
[M,203,7,7444,203,30,7467],
[M,203,34,7471,203,43,7480],
[M,203,34,7471,203,49,7486],
[M,203,34,7471,203,58,7495],
[M,203,7,7444,203,58,7495],
[M,204,6,7503,204,21,7518],
[M,206,6,7535,206,22,7551],
[M,208,2,7562,213,7,7712],
[M,209,7,7593,209,17,7603],
[M,209,7,7593,209,23,7609],
[M,209,7,7593,209,32,7618],
[M,209,36,7622,209,46,7632],
[M,209,36,7622,209,51,7637],
[M,209,36,7622,209,60,7646],
[M,209,7,7593,209,60,7646],
[M,210,6,7654,210,23,7671],
[M,212,6,7688,212,22,7704],
[M,215,4,7725,215,48,7769],
[M,208,10,7570,208,24,7584],
[M,208,11,7571,208,18,7578],
[M,202,10,7421,202,24,7435],
[M,202,11,7422,202,18,7429],
[M,200,5,7379,200,21,7395],
[M,200,13,7387,200,20,7394],
[M,181,22,6737,181,29,6744],
[M,181,0,6715,217,3,7779],
[M,220,13,7828,220,22,7837],
[M,220,5,7820,220,23,7838],
[M,221,15,7855,221,25,7865],
[M,221,7,7847,221,26,7866],
[M,224,6,7895,224,16,7905],
[M,227,15,7937,227,25,7947],
[M,227,7,7929,227,26,7948],
[M,228,6,7956,228,15,7965],
[M,230,6,7982,230,22,7998],
[M,230,6,7982,230,28,8004],
[M,219,24,7805,219,31,7812],
[M,219,0,7781,233,3,8022],
[M,238,16,8120,238,55,8159],
[M,238,8,8112,238,12,8116],
[M,239,37,8197,239,51,8211],
[M,239,61,8221,239,76,8236],
[M,239,8,8168,239,30,8190],
[M,237,4,8086,240,7,8248],
[M,237,10,8092,237,17,8099],
[M,236,2,8065,241,5,8254],
[M,244,16,8333,244,53,8370],
[M,244,8,8325,244,12,8329],
[M,246,11,8421,246,25,8435],
[M,249,10,8476,249,78,8544],
[M,249,20,8486,249,77,8543],
[M,249,40,8506,249,76,8542],
[M,245,8,8379,245,35,8406],
[M,245,6,8377,250,11,8556],
[M,243,4,8299,251,7,8564],
[M,243,10,8305,243,17,8312],
[M,242,2,8257,252,5,8570],
[M,253,30,8601,253,39,8610],
[M,253,21,8592,253,46,8617],
[M,254,36,8655,254,45,8664],
[M,255,6,8673,255,16,8683],
[M,253,2,8573,255,18,8685],
[M,253,12,8583,255,17,8684],
[M,254,6,8625,254,46,8665],
[M,253,21,8592,253,40,8611],
[M,235,29,8053,235,36,8060],
[M,235,0,8024,256,3,8689],
[M,480,4,14635,480,21,14652],
[M,480,33,14664,480,54,14685],
[M,480,4,14635,480,55,14686],
[M,478,53,14553,478,56,14556],
[M,478,31,14531,478,34,14534],
[M,478,45,14545,478,48,14548],
[M,478,2,14502,481,5,14692],
[M,484,11,14734,484,14,14737],
[M,484,7,14730,484,22,14745],
[M,485,6,14753,485,47,14794],
[M,487,18,14823,487,32,14837],
[M,488,19,14857,488,34,14872],
[M,489,13,14886,489,32,14905],
[M,489,36,14909,489,54,14927],
[M,489,9,14882,489,55,14928],
[M,490,8,14938,490,50,14980],
[M,493,27,15086,493,65,15124],
[M,494,10,15135,494,52,15177],
[M,492,8,15001,495,11,15189],
[M,492,29,15022,492,43,15036],
[M,489,13,14886,489,54,14927],
[M,484,11,14734,484,21,14744],
[M,483,2,14697,498,5,15213],
[M,275,12,9237,275,22,9247],
[M,277,10,9281,277,15,9286],
[M,280,36,9385,280,44,9393],
[M,280,23,9372,280,52,9401],
[M,280,36,9385,280,51,9400],
[M,280,14,9363,280,19,9368],
[M,283,17,9485,283,31,9499],
[M,284,29,9530,284,37,9538],
[M,284,16,9517,284,41,9542],
[M,284,29,9530,284,40,9541],
[M,286,30,9593,286,38,9601],
[M,286,16,9579,286,52,9615],
[M,286,30,9593,286,51,9614],
[M,286,39,9602,286,50,9613],
[M,282,26,9458,282,35,9467],
[M,282,14,9446,282,35,9467],
[M,281,14,9416,281,26,9428],
[M,281,12,9414,287,17,9633],
[M,279,10,9334,288,13,9647],
[M,279,16,9340,279,20,9344],
[M,278,10,9310,278,20,9320],
[M,278,8,9308,288,13,9647],
[M,276,6,9254,289,9,9657],
[M,276,12,9260,276,16,9264],
[M,274,4,9213,290,7,9665],
[M,293,6,9728,293,16,9738],
[M,294,13,9774,294,22,9783],
[M,294,24,9785,294,38,9799],
[M,295,16,9816,295,43,9843],
[M,295,16,9816,295,30,9830],
[M,293,23,9745,297,11,9869],
[M,293,6,9728,297,16,9874],
[M,292,6,9711,298,9,9886],
[M,291,4,9671,299,7,9894],
[M,302,6,9958,302,16,9968],
[M,303,13,10004,303,22,10013],
[M,303,24,10015,303,36,10027],
[M,304,16,10044,304,41,10069],
[M,304,16,10044,304,28,10056],
[M,302,23,9975,306,11,10095],
[M,302,6,9958,306,16,10100],
[M,301,6,9936,307,9,10112],
[M,300,4,9900,308,7,10120],
[M,309,48,10170,309,62,10184],
[M,309,67,10189,309,78,10200],
[M,309,48,10170,309,79,10201],
[M,309,19,10141,309,80,10202],
[M,309,4,10126,309,84,10206],
[M,312,20,10282,312,30,10292],
[M,312,6,10268,312,31,10293],
[M,311,20,10229,311,37,10246],
[M,311,4,10213,313,7,10301],
[M,317,6,10405,317,16,10415],
[M,317,6,10405,317,29,10428],
[M,315,33,10337,315,40,10344],
[M,315,4,10308,318,7,10436],
[M,322,10,10553,322,20,10563],
[M,322,10,10553,322,33,10576],
[M,322,9,10552,322,34,10577],
[M,325,28,10632,325,38,10642],
[M,325,8,10612,325,16,10620],
[M,325,8,10612,325,40,10644],
[M,325,17,10621,325,39,10643],
[M,320,30,10469,320,33,10472],
[M,320,4,10443,327,7,10662],
[M,331,15,10780,331,25,10790],
[M,331,15,10780,331,38,10803],
[M,331,6,10771,331,14,10779],
[M,329,33,10698,329,36,10701],
[M,331,6,10771,331,39,10804],
[M,329,4,10669,332,7,10812],
[M,336,6,10906,336,16,10916],
[M,334,21,10836,334,31,10846],
[M,334,4,10819,337,7,10924],
[M,342,8,11071,342,19,11082],
[M,341,17,11049,343,9,11092],
[M,341,6,11038,343,16,11099],
[M,339,40,10967,339,43,10970],
[M,339,18,10945,339,21,10948],
[M,339,32,10959,339,35,10962],
[M,339,4,10931,344,7,11107],
[M,349,11,11310,349,29,11328],
[M,352,10,11370,352,28,11388],
[M,348,18,11244,354,9,11410],
[M,348,38,11264,348,48,11274],
[M,348,60,11286,348,70,11296],
[M,355,6,11417,355,14,11425],
[M,346,44,11154,346,47,11157],
[M,355,6,11417,355,25,11436],
[M,346,22,11132,346,25,11135],
[M,346,36,11146,346,39,11149],
[M,346,4,11114,356,7,11444],
[M,360,15,11600,360,27,11612],
[M,360,6,11591,360,28,11613],
[M,358,43,11490,358,50,11497],
[M,358,21,11468,358,24,11471],
[M,358,35,11482,358,38,11485],
[M,358,4,11451,361,7,11621],
[M,366,11,11827,366,29,11845],
[M,367,10,11857,367,28,11875],
[M,365,18,11761,371,9,11927],
[M,365,38,11781,365,48,11791],
[M,365,60,11803,365,70,11813],
[M,372,6,11934,372,14,11942],
[M,363,45,11673,363,48,11676],
[M,372,6,11934,372,25,11953],
[M,363,23,11651,363,26,11654],
[M,363,37,11665,363,40,11668],
[M,363,4,11632,373,7,11961],
[M,376,6,12003,376,16,12013],
[M,376,6,12003,376,25,12022],
[M,375,25,11989,375,31,11995],
[M,375,17,11981,375,20,11984],
[M,375,4,11968,377,7,12030],
[M,379,29,12062,379,39,12072],
[M,379,20,12053,379,40,12073],
[M,379,4,12037,379,44,12077],
[M,382,6,12115,382,16,12125],
[M,382,6,12115,382,23,12132],
[M,381,20,12100,381,27,12107],
[M,381,4,12084,383,7,12140],
[M,386,6,12178,386,16,12188],
[M,386,6,12178,386,23,12195],
[M,385,20,12163,385,27,12170],
[M,385,4,12147,387,7,12203],
[M,391,10,12272,391,20,12282],
[M,393,10,12317,393,14,12321],
[M,395,32,12399,395,43,12410],
[M,395,23,12390,395,31,12398],
[M,395,10,12377,395,45,12412],
[M,395,23,12390,395,44,12411],
[M,394,10,12345,394,28,12363],
[M,392,6,12289,396,9,12422],
[M,392,12,12295,392,19,12302],
[M,390,4,12250,397,7,12430],
[M,400,6,12498,400,16,12508],
[M,401,13,12543,401,22,12552],
[M,401,24,12554,401,38,12568],
[M,402,16,12585,402,43,12612],
[M,402,29,12598,402,43,12612],
[M,400,22,12514,404,11,12638],
[M,400,6,12498,404,16,12643],
[M,399,6,12476,405,9,12655],
[M,398,4,12436,406,7,12663],
[M,409,6,12727,409,16,12737],
[M,410,13,12772,410,22,12781],
[M,410,24,12783,410,36,12795],
[M,411,16,12812,411,41,12837],
[M,411,29,12825,411,41,12837],
[M,409,22,12743,413,11,12863],
[M,409,6,12727,413,16,12868],
[M,408,6,12705,414,9,12880],
[M,407,4,12669,415,7,12888],
[M,416,48,12938,416,62,12952],
[M,416,67,12957,416,78,12968],
[M,416,48,12938,416,79,12969],
[M,416,19,12909,416,80,12970],
[M,416,4,12894,416,84,12974],
[M,419,25,13050,419,35,13060],
[M,419,6,13031,419,36,13061],
[M,418,20,12997,418,32,13009],
[M,418,4,12981,420,7,13069],
[M,424,6,13173,424,16,13183],
[M,424,6,13173,424,31,13198],
[M,422,33,13105,422,40,13112],
[M,422,4,13076,425,7,13206],
[M,429,15,13328,429,25,13338],
[M,429,15,13328,429,38,13351],
[M,429,6,13319,429,14,13327],
[M,427,30,13239,427,33,13242],
[M,429,6,13319,429,39,13352],
[M,427,4,13213,430,7,13360],
[M,434,15,13478,434,25,13488],
[M,434,15,13478,434,38,13501],
[M,434,6,13469,434,14,13477],
[M,432,33,13396,432,36,13399],
[M,434,6,13469,434,39,13502],
[M,432,4,13367,435,7,13510],
[M,439,6,13604,439,16,13614],
[M,439,6,13604,439,26,13624],
[M,437,21,13534,437,31,13544],
[M,437,4,13517,440,7,13632],
[M,444,6,13725,444,20,13739],
[M,444,6,13725,444,33,13752],
[M,442,4,13639,445,7,13760],
[M,449,6,13864,449,24,13882],
[M,449,6,13864,449,37,13895],
[M,447,4,13767,450,7,13903],
[M,454,15,14059,454,27,14071],
[M,454,6,14050,454,28,14072],
[M,452,43,13949,452,50,13956],
[M,452,21,13927,452,24,13930],
[M,452,35,13941,452,38,13944],
[M,452,4,13910,455,7,14080],
[M,459,6,14204,459,25,14223],
[M,457,45,14128,457,48,14131],
[M,459,6,14204,459,38,14236],
[M,457,23,14106,457,26,14109],
[M,457,37,14120,457,40,14123],
[M,457,4,14087,460,7,14244],
[M,463,6,14286,463,16,14296],
[M,463,6,14286,463,24,14304],
[M,462,25,14272,462,31,14278],
[M,462,17,14264,462,20,14267],
[M,462,4,14251,464,7,14312],
[M,466,28,14343,466,38,14353],
[M,466,20,14335,466,39,14354],
[M,466,4,14319,466,43,14358],
[M,469,6,14396,469,16,14406],
[M,469,6,14396,469,23,14413],
[M,468,20,14381,468,27,14388],
[M,468,4,14365,470,7,14421],
[M,473,6,14459,473,16,14469],
[M,473,6,14459,473,23,14476],
[M,472,20,14444,472,27,14451],
[M,472,4,14428,474,7,14484],
[M,273,2,9171,387,7,12203],
[M,273,22,9191,273,32,9201],
[M,273,4,9173,273,33,9202],
[M,389,2,12211,474,7,14484],
[M,389,22,12231,389,29,12238],
[M,389,4,12213,389,30,12239],
[M,272,0,9159,499,3,15217],
[M,503,25,15288,503,37,15300],
[M,503,6,15269,503,21,15284],
[M,504,25,15326,504,40,15341],
[M,504,6,15307,504,21,15322],
[M,502,2,15249,505,5,15347],
[M,502,8,15255,502,11,15258],
[M,501,0,15219,506,3,15351],
[M,515,8,15726,515,22,15740],
[M,517,7,15765,517,13,15771],
[M,518,4,15782,518,32,15810],
[M,521,13,15872,521,23,15882],
[M,522,14,15897,522,23,15906],
[M,523,19,15926,523,32,15939],
[M,523,6,15913,523,77,15984],
[M,523,44,15951,523,76,15983],
[M,523,51,15958,523,75,15982],
[M,523,63,15970,523,74,15981],
[M,523,64,15971,523,69,15976],
[M,523,19,15926,523,36,15943],
[M,520,13,15834,520,37,15858],
[M,520,20,15841,520,36,15857],
[M,520,30,15851,520,35,15856],
[M,518,12,15790,518,26,15804],
[M,516,2,15743,525,5,15998],
[M,526,2,16001,526,13,16012],
[M,508,0,15353,535,3,16407],
[M,539,5,16536,539,17,16548],
[M,540,2,16555,540,26,16579],
[M,541,10,16590,541,18,16598],
[M,541,21,16601,541,29,16609],
[M,541,2,16582,541,74,16654],
[M,541,37,16617,541,45,16625],
[M,541,61,16641,541,68,16648],
[M,541,32,16612,541,74,16654],
[M,541,47,16627,541,73,16653],
[M,542,10,16665,542,18,16673],
[M,542,22,16677,542,30,16685],
[M,542,2,16657,542,58,16713],
[M,542,46,16701,542,53,16708],
[M,542,32,16687,542,58,16713],
[M,543,37,16751,543,45,16759],
[M,543,65,16779,543,72,16786],
[M,543,32,16746,543,74,16788],
[M,543,47,16761,543,73,16787],
[M,542,10,16665,542,30,16685],
[M,541,10,16590,541,29,16609],
[M,540,10,16563,540,22,16575],
[M,537,0,16409,547,3,16889],
[M,549,30,16921,549,33,16924],
[M,553,2,17050,553,44,17092],
[M,553,11,17059,553,43,17091],
[M,552,14,17014,552,47,17047],
[M,551,13,16976,551,36,16999],
[M,550,13,16939,550,36,16962],
[M,549,0,16891,554,3,17096],
[M,558,5,17217,558,33,17245],
[M,558,21,17233,558,33,17245],
[M,559,10,17263,559,18,17271],
[M,559,21,17274,559,29,17282],
[M,559,2,17255,559,60,17313],
[M,559,48,17301,559,55,17308],
[M,559,32,17285,559,60,17313],
[M,560,10,17324,560,18,17332],
[M,560,22,17336,560,30,17344],
[M,560,2,17316,560,81,17395],
[M,560,37,17351,560,45,17359],
[M,560,63,17377,560,70,17384],
[M,560,72,17386,560,79,17393],
[M,560,32,17346,560,81,17395],
[M,560,47,17361,560,80,17394],
[M,561,52,17448,561,59,17455],
[M,561,32,17428,561,60,17456],
[M,560,10,17324,560,30,17344],
[M,559,10,17263,559,29,17282],
[M,558,5,17217,558,17,17229],
[M,556,0,17098,565,3,17547],
[M,567,34,17583,567,37,17586],
[M,571,2,17714,571,44,17756],
[M,571,11,17723,571,43,17755],
[M,570,14,17676,570,49,17711],
[M,569,13,17638,569,36,17661],
[M,568,13,17601,568,36,17624],
[M,567,0,17549,572,3,17760],
[M,576,5,17885,576,33,17913],
[M,576,21,17901,576,33,17913],
[M,577,10,17928,577,18,17936],
[M,577,22,17940,577,30,17948],
[M,577,2,17920,577,63,17981],
[M,577,46,17964,577,53,17971],
[M,577,55,17973,577,62,17980],
[M,577,32,17950,577,63,17981],
[M,578,10,17992,578,18,18000],
[M,578,21,18003,578,29,18011],
[M,578,2,17984,578,74,18056],
[M,578,37,18019,578,45,18027],
[M,578,61,18043,578,68,18050],
[M,578,32,18014,578,74,18056],
[M,578,47,18029,578,73,18055],
[M,579,50,18107,579,57,18114],
[M,579,32,18089,579,58,18115],
[M,578,10,17992,578,29,18011],
[M,577,10,17928,577,30,17948],
[M,576,5,17885,576,17,17897],
[M,574,0,17762,583,3,18204],
[M,585,35,18241,585,38,18244],
[M,589,2,18370,589,44,18412],
[M,589,11,18379,589,43,18411],
[M,588,14,18334,588,47,18367],
[M,587,13,18296,587,36,18319],
[M,586,13,18259,586,36,18282],
[M,585,0,18206,590,3,18416],
[M,593,2,18457,593,10,18465],
[M,592,28,18446,592,35,18453],
[M,592,20,18438,592,23,18441],
[M,592,0,18418,594,3,18469],
[M,597,2,18510,597,10,18518],
[M,596,28,18499,596,35,18506],
[M,596,20,18491,596,23,18494],
[M,596,0,18471,598,3,18522],
[M,601,2,18559,601,17,18574],
[M,600,27,18551,600,30,18554],
[M,600,0,18524,602,3,18578],
[M,607,4,18730,607,15,18741],
[M,606,2,18678,608,5,18747],
[M,604,55,18635,604,58,18638],
[M,604,23,18603,604,33,18613],
[M,604,47,18627,604,50,18630],
[M,604,0,18580,609,3,18751],
[M,611,43,18796,611,46,18799],
[M,613,2,18850,613,35,18883],
[M,613,19,18867,613,34,18882],
[M,611,28,18781,611,38,18791],
[M,611,0,18753,614,3,18887],
[M,616,43,18932,616,46,18935],
[M,618,2,18986,618,34,19018],
[M,618,19,19003,618,33,19017],
[M,616,28,18917,616,38,18927],
[M,616,0,18889,619,3,19022],
[M,623,4,19113,623,20,19129],
[M,622,2,19063,624,5,19135],
[M,621,24,19048,621,34,19058],
[M,621,0,19024,625,3,19139],
[M,629,4,19261,629,15,19272],
[M,628,2,19188,630,5,19278],
[M,627,40,19181,627,43,19184],
[M,628,29,19215,628,44,19230],
[M,627,27,19168,627,35,19176],
[M,627,0,19141,631,3,19282],
[M,635,4,19399,635,17,19412],
[M,634,9,19338,636,5,19418],
[M,633,40,19324,633,43,19327],
[M,637,2,19421,637,16,19435],
[M,633,27,19311,633,35,19319],
[M,633,0,19284,638,3,19439],
[M,644,5,19532,644,11,19538],
[M,644,13,19540,644,27,19554],
[M,645,8,19563,645,31,19586],
[M,645,16,19571,645,30,19585],
[M,643,0,19507,647,3,19596],
[M,649,10,19630,649,16,19636],
[M,649,18,19638,649,32,19652],
[M,650,2,19655,650,32,19685],
[M,650,18,19671,650,32,19685],
[M,651,18,19704,651,41,19727],
[M,651,26,19712,651,40,19726],
[M,650,10,19663,650,16,19669],
[M,648,0,19597,653,3,19737],
[M,655,10,19774,655,16,19780],
[M,655,18,19782,655,35,19799],
[M,656,2,19802,656,35,19835],
[M,656,18,19818,656,35,19835],
[M,657,2,19838,657,35,19871],
[M,657,18,19854,657,35,19871],
[M,658,18,19890,658,44,19916],
[M,658,26,19898,658,43,19915],
[M,657,10,19846,657,16,19852],
[M,656,10,19810,656,16,19816],
[M,654,0,19738,660,3,19926],
[M,662,10,19966,662,16,19972],
[M,662,18,19974,662,38,19994],
[M,663,2,19997,663,38,20033],
[M,663,18,20013,663,38,20033],
[M,664,2,20036,664,38,20072],
[M,664,18,20052,664,38,20072],
[M,665,2,20075,665,38,20111],
[M,665,18,20091,665,38,20111],
[M,666,18,20130,666,47,20159],
[M,666,26,20138,666,46,20158],
[M,665,10,20083,665,16,20089],
[M,664,10,20044,664,16,20050],
[M,663,10,20005,663,16,20011],
[M,661,0,19927,668,3,20169],
[M,672,9,20224,672,34,20249],
[M,673,17,20268,673,41,20292],
[M,673,26,20277,673,40,20291],
[M,673,9,20260,673,45,20296],
[M,674,20,20318,674,44,20342],
[M,674,29,20327,674,43,20341],
[M,674,9,20307,674,48,20346],
[M,675,23,20371,675,50,20398],
[M,675,32,20380,675,49,20397],
[M,675,9,20357,675,54,20402],
[M,676,26,20430,676,56,20460],
[M,676,35,20439,676,55,20459],
[M,676,9,20413,676,60,20464],
[M,677,29,20495,677,62,20528],
[M,677,38,20504,677,61,20527],
[M,677,9,20475,677,66,20532],
[M,682,9,20589,682,34,20614],
[M,683,17,20633,683,38,20654],
[M,683,9,20625,683,42,20658],
[M,684,20,20680,684,41,20701],
[M,684,20,20680,684,48,20708],
[M,684,9,20669,684,52,20712],
[M,685,23,20737,685,44,20758],
[M,685,23,20737,685,51,20765],
[M,685,23,20737,685,58,20772],
[M,685,9,20723,685,62,20776],
[M,686,26,20804,686,47,20825],
[M,686,26,20804,686,54,20832],
[M,686,26,20804,686,61,20839],
[M,686,26,20804,686,68,20846],
[M,686,9,20787,686,72,20850],
[M,687,29,20881,687,50,20902],
[M,687,29,20881,687,57,20909],
[M,687,29,20881,687,64,20916],
[M,687,29,20881,687,71,20923],
[M,687,29,20881,687,78,20930],
[M,687,9,20861,687,82,20934],
[M,641,17,19491,641,31,19505],
[M,640,17,19458,640,32,19473],
[M,34,12,692,34,21,701],
[M,27,12,568,27,22,578],
[M,3,0,21,688,1,20936]];
var not1 = NAMESPACE.get("not");
var $type$Number2 = NAMESPACE.get("$type$Number");
var $type$Boolean3 = NAMESPACE.get("$type$Boolean");
var equal$always4 = NAMESPACE.get("equal-always");
var _lessthan5 = NAMESPACE.get("_lessthan");
var _plus6 = NAMESPACE.get("_plus");
var num$max7 = NAMESPACE.get("num-max");
var _minus8 = NAMESPACE.get("_minus");
var num$abs9 = NAMESPACE.get("num-abs");
var _lessequal10 = NAMESPACE.get("_lessequal");
var raise11 = NAMESPACE.get("raise");
var _greaterequal12 = NAMESPACE.get("_greaterequal");
var nothing13 = NAMESPACE.get("nothing");
var random14 = NAMESPACE.get("random");
var _divide15 = NAMESPACE.get("_divide");
var num$floor16 = NAMESPACE.get("num-floor");
var num$ceiling17 = NAMESPACE.get("num-ceiling");
var $type$RawArray18 = NAMESPACE.get("$type$RawArray");
var raw$array$fold19 = NAMESPACE.get("raw-array-fold");
var builtins20 = NAMESPACE.get("builtins");
var arrays21 = R.getField($arrays36,"values");
var equality22 = R.getField($equality37,"values");
var error23 = R.getField($error38,"values");
var lists24 = R.getField($lists39,"values");
var option25 = R.getField($option40,"values");
var pick26 = R.getField($pick41,"values");
var VS27 = R.getField($VS42,"values");
var arrays28 = R.getField($arrays36,"types");
var equality29 = R.getField($equality37,"types");
var error30 = R.getField($error38,"types");
var lists31 = R.getField($lists39,"types");
var option32 = R.getField($option40,"types");
var pick33 = R.getField($pick41,"types");
var VS34 = R.getField($VS42,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$arrays36);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$equality37);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error38);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists39);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$option40);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$pick41);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS42);
var $toplevel44 = function($$resumer1804) {
var $step43 = 0;
var $ans46 = D;
var $al47 = L[847];
try {
if(R.isActivationRecord($$resumer1804)) {
$step43 = $$resumer1804.step;
$al47 = $$resumer1804.from;
$ans46 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
provides1943 = $$resumer1804.vars[0];
tree$set$maker1938 = $$resumer1804.vars[1];
list$set$maker1937 = $$resumer1804.vars[2];
makeSet51801 = $$resumer1804.vars[3];
makeSet41780 = $$resumer1804.vars[4];
makeSet31762 = $$resumer1804.vars[5];
makeSet21747 = $$resumer1804.vars[6];
empty$tree$set1864 = $$resumer1804.vars[7];
empty$list$set1807 = $$resumer1804.vars[8];
arr$to$tree$set1735 = $$resumer1804.vars[9];
arr$to$list$set1715 = $$resumer1804.vars[10];
list$to$tree1695 = $$resumer1804.vars[11];
list$to$tree$set1677 = $$resumer1804.vars[12];
list$to$list$set1667 = $$resumer1804.vars[13];
list$to$set1657 = $$resumer1804.vars[14];
set$fold1637 = $$resumer1804.vars[15];
set$any1626 = $$resumer1804.vars[16];
set$all1615 = $$resumer1804.vars[17];
tree$set$difference1328 = $$resumer1804.vars[18];
merge$drop$l21576 = $$resumer1804.vars[19];
tree$set$intersect1310 = $$resumer1804.vars[20];
merge$only$dups1535 = $$resumer1804.vars[21];
tree$set$union1302 = $$resumer1804.vars[22];
merge$no$dups1493 = $$resumer1804.vars[23];
elems$to$balanced$avl1481 = $$resumer1804.vars[24];
set$to$sorted$elems1446 = $$resumer1804.vars[25];
tree$set1180 = $$resumer1804.vars[26];
is$tree$set1431 = $$resumer1804.vars[27];
list$set919 = $$resumer1804.vars[28];
is$list$set1428 = $$resumer1804.vars[29];
is$Set1426 = $$resumer1804.vars[30];
Set878 = $$resumer1804.vars[31];
swap$next$lowest798 = $$resumer1804.vars[32];
remove$root282 = $$resumer1804.vars[33];
rebalance262 = $$resumer1804.vars[34];
mkbranch96 = $$resumer1804.vars[35];
tree$any643 = $$resumer1804.vars[36];
tree$all633 = $$resumer1804.vars[37];
tree$fold623 = $$resumer1804.vars[38];
branch612 = $$resumer1804.vars[39];
is$branch610 = $$resumer1804.vars[40];
leaf97 = $$resumer1804.vars[41];
is$leaf607 = $$resumer1804.vars[42];
is$AVLTree605 = $$resumer1804.vars[43];
AVLTree65 = $$resumer1804.vars[44];
pick$some920 = $$resumer1804.vars[45];
pick$none916 = $$resumer1804.vars[46];
Pick1942 = $$resumer1804.vars[47];
fold903 = $$resumer1804.vars[48];
is$empty1148 = $$resumer1804.vars[49];
link312 = $$resumer1804.vars[50];
empty114 = $$resumer1804.vars[51];
List1945 = $$resumer1804.vars[52];
List937 = $$resumer1804.vars[53];
Set869 = $$resumer1804.vars[54];
AVLTree99 = $$resumer1804.vars[55];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step43) {
case 0: var AVLTree48 = R.namedBrander("AVLTree");
var AVLTree99 = R.makeBranderAnn(AVLTree48,"AVLTree");
var Set49 = R.namedBrander("Set");
var Set869 = R.makeBranderAnn(Set49,"Set");
var List937 = R.getDotAnn(L[846],"lists",lists31,"List");
var List1945 = G(lists24,"List",L[0]);
var empty114 = G(lists24,"empty",L[1]);
var link312 = G(lists24,"link",L[2]);
var is$empty1148 = G(lists24,"is-empty",L[3]);
var fold903 = G(lists24,"fold",L[4]);
var Pick1942 = R.getDotAnn(L[845],"pick",pick33,"Pick");
var pick$none916 = G(pick26,"pick-none",L[5]);
var pick$some920 = G(pick26,"pick-some",L[6]);
var AVLTree602 = {"$var":D};
var AVLTree65 = {"$var":D};
var is$AVLTree605 = {"$var":D};
var is$leaf607 = {"$var":D};
var leaf97 = {"$var":D};
var is$branch610 = {"$var":D};
var branch612 = {"$var":D};
var tree$fold623 = {"$var":D};
var tree$all633 = {"$var":D};
var tree$any643 = {"$var":D};
var mkbranch96 = {"$var":D};
var rebalance262 = {"$var":D};
var remove$root282 = {"$var":D};
var swap$next$lowest798 = {"$var":D};
var $temp_full51 = function($self52) {
var $step50 = 0;
var $ans53 = D;
var $al54 = L[9];
try {
if(R.isActivationRecord($self52)) {
$step50 = $self52.step;
$al54 = $self52.from;
$ans53 = $self52.ans;
self52 = $self52.args[0];
ann_check_temp56 = $self52.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],1,$t);
}
var self52 = $self52;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step50) {
case 0: $step50 = 1;
$al54 = L[7];
$field55 = R.getColonFieldLoc(self52,"inorder",L[7]);
if(R.isMethod($field55)) {
$ans53 = $field55.full_meth(self52);
} else {
if(!(R.isFunction($field55))) {
R.ffi.throwNonFunApp(L[7],$field55);
}
$ans53 = $field55.app();
}
break;
case 1: var ann_check_temp56 = $ans53;
$step50 = 2;
$al54 = L[8];
R._checkAnn(L[8],R.getDotAnn(L[8],"lists",lists31,"List"),ann_check_temp56);
break;
case 2: $step50 = 3;
$ans53 = ann_check_temp56;
break;
case 3: ++R.GAS;
return $ans53;
default: throw "No case numbered " + $step50 + " in $temp_full51";
}
}
} catch($e57) {
if(R.isCont($e57) && ($step50 !== 3)) {
$e57.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al54,$temp_full51,$step50,[self52],[ann_check_temp56]);
}
if(R.isPyretException($e57)) {
$e57.pyretStack.push($al54);
}
throw $e57;
}
};
var anf_shared541 = R.makeMethod0($temp_full51);
var $temp_full59 = function($self60,$other61,$eq62) {
var $step58 = 0;
var $ans63 = D;
var $al64 = L[17];
try {
if(R.isActivationRecord($self60)) {
$step58 = $self60.step;
$al64 = $self60.from;
$ans63 = $self60.ans;
self60 = $self60.args[0];
other61 = $self60.args[1];
eq62 = $self60.args[2];
anf_arg71 = $self60.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],3,$t);
}
var self60 = $self60;
var other61 = $other61;
var eq62 = $eq62;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step58) {
case 0: $step58 = 1;
$al64 = L[16];
if(!(R.isFunction(AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var))) {
R.ffi.throwNonFunApp($al64,AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var);
}
$ans63 = AVLTree65.$var === D?U(L[10],"AVLTree"):AVLTree65.$var.app(other61);
break;
case 1: var anf_arg66 = $ans63;
$step58 = 2;
$al64 = L[11];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al64,not1);
}
$ans63 = not1.app(anf_arg66);
break;
case 2: var anf_arg67 = $ans63;
$al64 = L[11];
var anf_if73 = R.checkWrapBoolean(anf_arg67);
if(R.isPyretTrue(anf_if73)) {
$step58 = 3;
} else {
$step58 = 4;
}
break;
case 3: $step58 = 7;
$al64 = L[12];
$field68 = R.getColonFieldLoc(equality22,"NotEqual",L[12]);
if(R.isMethod($field68)) {
$ans63 = $field68.full_meth(equality22,("Non-AVLTree"),self60,other61);
} else {
if(!(R.isFunction($field68))) {
R.ffi.throwNonFunApp(L[12],$field68);
}
$ans63 = $field68.app(("Non-AVLTree"),self60,other61);
}
break;
case 4: $step58 = 5;
$al64 = L[13];
$field69 = R.getColonFieldLoc(self60,"inorder",L[13]);
if(R.isMethod($field69)) {
$ans63 = $field69.full_meth(self60);
} else {
if(!(R.isFunction($field69))) {
R.ffi.throwNonFunApp(L[13],$field69);
}
$ans63 = $field69.app();
}
break;
case 5: var anf_arg71 = $ans63;
$step58 = 6;
$al64 = L[14];
$field70 = R.getColonFieldLoc(other61,"inorder",L[14]);
if(R.isMethod($field70)) {
$ans63 = $field70.full_meth(other61);
} else {
if(!(R.isFunction($field70))) {
R.ffi.throwNonFunApp(L[14],$field70);
}
$ans63 = $field70.app();
}
break;
case 6: var anf_arg72 = $ans63;
$step58 = 7;
$al64 = L[15];
if(!(R.isFunction(eq62))) {
R.ffi.throwNonFunApp($al64,eq62);
}
$ans63 = eq62.app(anf_arg71,anf_arg72);
break;
case 7: ++R.GAS;
return $ans63;
default: throw "No case numbered " + $step58 + " in $temp_full59";
}
}
} catch($e74) {
if(R.isCont($e74) && ($step58 !== 7)) {
$e74.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al64,$temp_full59,$step58,[self60,other61,eq62],[anf_arg71]);
}
if(R.isPyretException($e74)) {
$e74.pyretStack.push($al64);
}
throw $e74;
}
};
var anf_shared542 = R.makeMethod2($temp_full59);
var $temp_full76 = function($self77) {
var $step75 = 0;
var $ans78 = D;
var $al79 = L[19];
try {
if(R.isActivationRecord($self77)) {
$step75 = $self77.step;
$al79 = $self77.from;
$ans78 = $self77.ans;
self77 = $self77.args[0];
ann_check_temp80 = $self77.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[19],1,$t);
}
var self77 = $self77;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step75) {
case 0: var ann_check_temp80 = (0);
$step75 = 1;
$al79 = L[18];
R._checkAnn(L[18],$type$Number2,ann_check_temp80);
break;
case 1: $step75 = 2;
$ans78 = ann_check_temp80;
break;
case 2: ++R.GAS;
return $ans78;
default: throw "No case numbered " + $step75 + " in $temp_full76";
}
}
} catch($e81) {
if(R.isCont($e81) && ($step75 !== 2)) {
$e81.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al79,$temp_full76,$step75,[self77],[ann_check_temp80]);
}
if(R.isPyretException($e81)) {
$e81.pyretStack.push($al79);
}
throw $e81;
}
};
var anf_singleton_variant_member546 = R.makeMethod0($temp_full76);
var $temp_full83 = function($self84,$val85) {
var $step82 = 0;
var $ans86 = D;
var $al87 = L[21];
try {
if(R.isActivationRecord($self84)) {
$step82 = $self84.step;
$al87 = $self84.from;
$ans86 = $self84.ans;
self84 = $self84.args[0];
val85 = $self84.args[1];
ann_check_temp88 = $self84.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],2,$t);
}
var self84 = $self84;
var val85 = $val85;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step82) {
case 0: var ann_check_temp88 = (false);
$step82 = 1;
$al87 = L[20];
R._checkAnn(L[20],$type$Boolean3,ann_check_temp88);
break;
case 1: $step82 = 2;
$ans86 = ann_check_temp88;
break;
case 2: ++R.GAS;
return $ans86;
default: throw "No case numbered " + $step82 + " in $temp_full83";
}
}
} catch($e89) {
if(R.isCont($e89) && ($step82 !== 2)) {
$e89.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al87,$temp_full83,$step82,[self84,val85],[ann_check_temp88]);
}
if(R.isPyretException($e89)) {
$e89.pyretStack.push($al87);
}
throw $e89;
}
};
var anf_singleton_variant_member547 = R.makeMethod1($temp_full83);
var $temp_full91 = function($self92,$val93) {
var $step90 = 0;
var $ans94 = D;
var $al95 = L[27];
try {
if(R.isActivationRecord($self92)) {
$step90 = $self92.step;
$al95 = $self92.from;
$ans94 = $self92.ans;
self92 = $self92.args[0];
val93 = $self92.args[1];
ann_check_temp98 = $self92.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[27],2,$t);
}
var self92 = $self92;
var val93 = $val93;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step90) {
case 0: $step90 = 1;
$al95 = L[26];
if(!(R.isFunction(mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al95,mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var);
}
$ans94 = mkbranch96.$var === D?U(L[22],"mkbranch"):mkbranch96.$var.app(val93,leaf97.$var === D?U(L[23],"leaf"):leaf97.$var,leaf97.$var === D?U(L[24],"leaf"):leaf97.$var);
break;
case 1: var ann_check_temp98 = $ans94;
$step90 = 2;
$al95 = L[25];
R._checkAnn(L[25],AVLTree99,ann_check_temp98);
break;
case 2: $step90 = 3;
$ans94 = ann_check_temp98;
break;
case 3: ++R.GAS;
return $ans94;
default: throw "No case numbered " + $step90 + " in $temp_full91";
}
}
} catch($e100) {
if(R.isCont($e100) && ($step90 !== 3)) {
$e100.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al95,$temp_full91,$step90,[self92,val93],[ann_check_temp98]);
}
if(R.isPyretException($e100)) {
$e100.pyretStack.push($al95);
}
throw $e100;
}
};
var anf_singleton_variant_member548 = R.makeMethod1($temp_full91);
var $temp_full102 = function($self103,$val104) {
var $step101 = 0;
var $ans105 = D;
var $al106 = L[30];
try {
if(R.isActivationRecord($self103)) {
$step101 = $self103.step;
$al106 = $self103.from;
$ans105 = $self103.ans;
self103 = $self103.args[0];
val104 = $self103.args[1];
ann_check_temp107 = $self103.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],2,$t);
}
var self103 = $self103;
var val104 = $val104;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step101) {
case 0: var ann_check_temp107 = leaf97.$var === D?U(L[28],"leaf"):leaf97.$var;
$step101 = 1;
$al106 = L[29];
R._checkAnn(L[29],AVLTree99,ann_check_temp107);
break;
case 1: $step101 = 2;
$ans105 = ann_check_temp107;
break;
case 2: ++R.GAS;
return $ans105;
default: throw "No case numbered " + $step101 + " in $temp_full102";
}
}
} catch($e108) {
if(R.isCont($e108) && ($step101 !== 2)) {
$e108.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al106,$temp_full102,$step101,[self103,val104],[ann_check_temp107]);
}
if(R.isPyretException($e108)) {
$e108.pyretStack.push($al106);
}
throw $e108;
}
};
var anf_singleton_variant_member549 = R.makeMethod1($temp_full102);
var $temp_full110 = function($self111) {
var $step109 = 0;
var $ans112 = D;
var $al113 = L[32];
try {
if(R.isActivationRecord($self111)) {
$step109 = $self111.step;
$al113 = $self111.from;
$ans112 = $self111.ans;
self111 = $self111.args[0];
ann_check_temp115 = $self111.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
var self111 = $self111;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step109) {
case 0: var ann_check_temp115 = empty114;
$step109 = 1;
$al113 = L[31];
R._checkAnn(L[31],R.getDotAnn(L[31],"lists",lists31,"List"),ann_check_temp115);
break;
case 1: $step109 = 2;
$ans112 = ann_check_temp115;
break;
case 2: ++R.GAS;
return $ans112;
default: throw "No case numbered " + $step109 + " in $temp_full110";
}
}
} catch($e116) {
if(R.isCont($e116) && ($step109 !== 2)) {
$e116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al113,$temp_full110,$step109,[self111],[ann_check_temp115]);
}
if(R.isPyretException($e116)) {
$e116.pyretStack.push($al113);
}
throw $e116;
}
};
var anf_singleton_variant_member550 = R.makeMethod0($temp_full110);
var $temp_full118 = function($self119) {
var $step117 = 0;
var $ans120 = D;
var $al121 = L[34];
try {
if(R.isActivationRecord($self119)) {
$step117 = $self119.step;
$al121 = $self119.from;
$ans120 = $self119.ans;
self119 = $self119.args[0];
ann_check_temp122 = $self119.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[34],1,$t);
}
var self119 = $self119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step117) {
case 0: var ann_check_temp122 = empty114;
$step117 = 1;
$al121 = L[33];
R._checkAnn(L[33],R.getDotAnn(L[33],"lists",lists31,"List"),ann_check_temp122);
break;
case 1: $step117 = 2;
$ans120 = ann_check_temp122;
break;
case 2: ++R.GAS;
return $ans120;
default: throw "No case numbered " + $step117 + " in $temp_full118";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step117 !== 2)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al121,$temp_full118,$step117,[self119],[ann_check_temp122]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al121);
}
throw $e123;
}
};
var anf_singleton_variant_member551 = R.makeMethod0($temp_full118);
var $temp_full125 = function($self126) {
var $step124 = 0;
var $ans127 = D;
var $al128 = L[36];
try {
if(R.isActivationRecord($self126)) {
$step124 = $self126.step;
$al128 = $self126.from;
$ans127 = $self126.ans;
self126 = $self126.args[0];
ann_check_temp129 = $self126.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],1,$t);
}
var self126 = $self126;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step124) {
case 0: var ann_check_temp129 = empty114;
$step124 = 1;
$al128 = L[35];
R._checkAnn(L[35],R.getDotAnn(L[35],"lists",lists31,"List"),ann_check_temp129);
break;
case 1: $step124 = 2;
$ans127 = ann_check_temp129;
break;
case 2: ++R.GAS;
return $ans127;
default: throw "No case numbered " + $step124 + " in $temp_full125";
}
}
} catch($e130) {
if(R.isCont($e130) && ($step124 !== 2)) {
$e130.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al128,$temp_full125,$step124,[self126],[ann_check_temp129]);
}
if(R.isPyretException($e130)) {
$e130.pyretStack.push($al128);
}
throw $e130;
}
};
var anf_singleton_variant_member552 = R.makeMethod0($temp_full125);
var $temp_full132 = function($self133) {
var $step131 = 0;
var $ans134 = D;
var $al135 = L[38];
try {
if(R.isActivationRecord($self133)) {
$step131 = $self133.step;
$al135 = $self133.from;
$ans134 = $self133.ans;
self133 = $self133.args[0];
ann_check_temp136 = $self133.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var self133 = $self133;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step131) {
case 0: var ann_check_temp136 = empty114;
$step131 = 1;
$al135 = L[37];
R._checkAnn(L[37],R.getDotAnn(L[37],"lists",lists31,"List"),ann_check_temp136);
break;
case 1: $step131 = 2;
$ans134 = ann_check_temp136;
break;
case 2: ++R.GAS;
return $ans134;
default: throw "No case numbered " + $step131 + " in $temp_full132";
}
}
} catch($e137) {
if(R.isCont($e137) && ($step131 !== 2)) {
$e137.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al135,$temp_full132,$step131,[self133],[ann_check_temp136]);
}
if(R.isPyretException($e137)) {
$e137.pyretStack.push($al135);
}
throw $e137;
}
};
var anf_singleton_variant_member553 = R.makeMethod0($temp_full132);
var $temp_full139 = function($self140) {
var $step138 = 0;
var $ans141 = D;
var $al142 = L[40];
try {
if(R.isActivationRecord($self140)) {
$step138 = $self140.step;
$al142 = $self140.from;
$ans141 = $self140.ans;
self140 = $self140.args[0];
ann_check_temp143 = $self140.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],1,$t);
}
var self140 = $self140;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step138) {
case 0: var ann_check_temp143 = empty114;
$step138 = 1;
$al142 = L[39];
R._checkAnn(L[39],R.getDotAnn(L[39],"lists",lists31,"List"),ann_check_temp143);
break;
case 1: $step138 = 2;
$ans141 = ann_check_temp143;
break;
case 2: ++R.GAS;
return $ans141;
default: throw "No case numbered " + $step138 + " in $temp_full139";
}
}
} catch($e144) {
if(R.isCont($e144) && ($step138 !== 2)) {
$e144.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al142,$temp_full139,$step138,[self140],[ann_check_temp143]);
}
if(R.isPyretException($e144)) {
$e144.pyretStack.push($al142);
}
throw $e144;
}
};
var anf_singleton_variant_member554 = R.makeMethod0($temp_full139);
var $temp_full146 = function($self147) {
var $step145 = 0;
var $ans148 = D;
var $al149 = L[42];
try {
if(R.isActivationRecord($self147)) {
$step145 = $self147.step;
$al149 = $self147.from;
$ans148 = $self147.ans;
self147 = $self147.args[0];
ann_check_temp150 = $self147.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],1,$t);
}
var self147 = $self147;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step145) {
case 0: var ann_check_temp150 = empty114;
$step145 = 1;
$al149 = L[41];
R._checkAnn(L[41],R.getDotAnn(L[41],"lists",lists31,"List"),ann_check_temp150);
break;
case 1: $step145 = 2;
$ans148 = ann_check_temp150;
break;
case 2: ++R.GAS;
return $ans148;
default: throw "No case numbered " + $step145 + " in $temp_full146";
}
}
} catch($e151) {
if(R.isCont($e151) && ($step145 !== 2)) {
$e151.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al149,$temp_full146,$step145,[self147],[ann_check_temp150]);
}
if(R.isPyretException($e151)) {
$e151.pyretStack.push($al149);
}
throw $e151;
}
};
var anf_singleton_variant_member555 = R.makeMethod0($temp_full146);
var $temp_full153 = function($self154,$f155,$base156) {
var $step152 = 0;
var $ans157 = D;
var $al158 = L[43];
try {
if(R.isActivationRecord($self154)) {
$step152 = $self154.step;
$al158 = $self154.from;
$ans157 = $self154.ans;
self154 = $self154.args[0];
f155 = $self154.args[1];
base156 = $self154.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[43],3,$t);
}
var self154 = $self154;
var f155 = $f155;
var base156 = $base156;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step152) {
case 0: $step152 = 1;
$ans157 = base156;
break;
case 1: ++R.GAS;
return $ans157;
default: throw "No case numbered " + $step152 + " in $temp_full153";
}
}
} catch($e159) {
if(R.isCont($e159) && ($step152 !== 1)) {
$e159.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al158,$temp_full153,$step152,[self154,f155,base156],[]);
}
if(R.isPyretException($e159)) {
$e159.pyretStack.push($al158);
}
throw $e159;
}
};
var anf_singleton_variant_member556 = R.makeMethod2($temp_full153);
var $temp_full161 = function($self162,$f163,$base164) {
var $step160 = 0;
var $ans165 = D;
var $al166 = L[44];
try {
if(R.isActivationRecord($self162)) {
$step160 = $self162.step;
$al166 = $self162.from;
$ans165 = $self162.ans;
self162 = $self162.args[0];
f163 = $self162.args[1];
base164 = $self162.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],3,$t);
}
var self162 = $self162;
var f163 = $f163;
var base164 = $base164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step160) {
case 0: $step160 = 1;
$ans165 = base164;
break;
case 1: ++R.GAS;
return $ans165;
default: throw "No case numbered " + $step160 + " in $temp_full161";
}
}
} catch($e167) {
if(R.isCont($e167) && ($step160 !== 1)) {
$e167.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al166,$temp_full161,$step160,[self162,f163,base164],[]);
}
if(R.isPyretException($e167)) {
$e167.pyretStack.push($al166);
}
throw $e167;
}
};
var anf_singleton_variant_member557 = R.makeMethod2($temp_full161);
var $temp_full169 = function($self170,$f171,$base172) {
var $step168 = 0;
var $ans173 = D;
var $al174 = L[45];
try {
if(R.isActivationRecord($self170)) {
$step168 = $self170.step;
$al174 = $self170.from;
$ans173 = $self170.ans;
self170 = $self170.args[0];
f171 = $self170.args[1];
base172 = $self170.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],3,$t);
}
var self170 = $self170;
var f171 = $f171;
var base172 = $base172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step168) {
case 0: $step168 = 1;
$ans173 = base172;
break;
case 1: ++R.GAS;
return $ans173;
default: throw "No case numbered " + $step168 + " in $temp_full169";
}
}
} catch($e175) {
if(R.isCont($e175) && ($step168 !== 1)) {
$e175.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al174,$temp_full169,$step168,[self170,f171,base172],[]);
}
if(R.isPyretException($e175)) {
$e175.pyretStack.push($al174);
}
throw $e175;
}
};
var anf_singleton_variant_member558 = R.makeMethod2($temp_full169);
var $temp_full177 = function($self178,$f179,$base180) {
var $step176 = 0;
var $ans181 = D;
var $al182 = L[46];
try {
if(R.isActivationRecord($self178)) {
$step176 = $self178.step;
$al182 = $self178.from;
$ans181 = $self178.ans;
self178 = $self178.args[0];
f179 = $self178.args[1];
base180 = $self178.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[46],3,$t);
}
var self178 = $self178;
var f179 = $f179;
var base180 = $base180;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step176) {
case 0: $step176 = 1;
$ans181 = base180;
break;
case 1: ++R.GAS;
return $ans181;
default: throw "No case numbered " + $step176 + " in $temp_full177";
}
}
} catch($e183) {
if(R.isCont($e183) && ($step176 !== 1)) {
$e183.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al182,$temp_full177,$step176,[self178,f179,base180],[]);
}
if(R.isPyretException($e183)) {
$e183.pyretStack.push($al182);
}
throw $e183;
}
};
var anf_singleton_variant_member559 = R.makeMethod2($temp_full177);
var $temp_full185 = function($self186,$f187,$base188) {
var $step184 = 0;
var $ans189 = D;
var $al190 = L[47];
try {
if(R.isActivationRecord($self186)) {
$step184 = $self186.step;
$al190 = $self186.from;
$ans189 = $self186.ans;
self186 = $self186.args[0];
f187 = $self186.args[1];
base188 = $self186.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[47],3,$t);
}
var self186 = $self186;
var f187 = $f187;
var base188 = $base188;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step184) {
case 0: $step184 = 1;
$ans189 = base188;
break;
case 1: ++R.GAS;
return $ans189;
default: throw "No case numbered " + $step184 + " in $temp_full185";
}
}
} catch($e191) {
if(R.isCont($e191) && ($step184 !== 1)) {
$e191.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al190,$temp_full185,$step184,[self186,f187,base188],[]);
}
if(R.isPyretException($e191)) {
$e191.pyretStack.push($al190);
}
throw $e191;
}
};
var anf_singleton_variant_member560 = R.makeMethod2($temp_full185);
var $temp_full193 = function($self194,$f195,$base196) {
var $step192 = 0;
var $ans197 = D;
var $al198 = L[48];
try {
if(R.isActivationRecord($self194)) {
$step192 = $self194.step;
$al198 = $self194.from;
$ans197 = $self194.ans;
self194 = $self194.args[0];
f195 = $self194.args[1];
base196 = $self194.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[48],3,$t);
}
var self194 = $self194;
var f195 = $f195;
var base196 = $base196;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step192) {
case 0: $step192 = 1;
$ans197 = base196;
break;
case 1: ++R.GAS;
return $ans197;
default: throw "No case numbered " + $step192 + " in $temp_full193";
}
}
} catch($e199) {
if(R.isCont($e199) && ($step192 !== 1)) {
$e199.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al198,$temp_full193,$step192,[self194,f195,base196],[]);
}
if(R.isPyretException($e199)) {
$e199.pyretStack.push($al198);
}
throw $e199;
}
};
var anf_singleton_variant_member561 = R.makeMethod2($temp_full193);
var $temp_full201 = function($self202) {
var $step200 = 0;
var $ans203 = D;
var $al204 = L[49];
try {
if(R.isActivationRecord($self202)) {
$step200 = $self202.step;
$al204 = $self202.from;
$ans203 = $self202.ans;
self202 = $self202.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[49],1,$t);
}
var self202 = $self202;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step200) {
case 0: $step200 = 1;
$ans203 = (0);
break;
case 1: ++R.GAS;
return $ans203;
default: throw "No case numbered " + $step200 + " in $temp_full201";
}
}
} catch($e205) {
if(R.isCont($e205) && ($step200 !== 1)) {
$e205.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al204,$temp_full201,$step200,[self202],[]);
}
if(R.isPyretException($e205)) {
$e205.pyretStack.push($al204);
}
throw $e205;
}
};
var anf_singleton_variant_member562 = R.makeMethod0($temp_full201);
var $temp_full207 = function($self208,$f209) {
var $step206 = 0;
var $ans210 = D;
var $al211 = L[50];
try {
if(R.isActivationRecord($self208)) {
$step206 = $self208.step;
$al211 = $self208.from;
$ans210 = $self208.ans;
self208 = $self208.args[0];
f209 = $self208.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var self208 = $self208;
var f209 = $f209;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step206) {
case 0: $step206 = 1;
$ans210 = (true);
break;
case 1: ++R.GAS;
return $ans210;
default: throw "No case numbered " + $step206 + " in $temp_full207";
}
}
} catch($e212) {
if(R.isCont($e212) && ($step206 !== 1)) {
$e212.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al211,$temp_full207,$step206,[self208,f209],[]);
}
if(R.isPyretException($e212)) {
$e212.pyretStack.push($al211);
}
throw $e212;
}
};
var anf_singleton_variant_member563 = R.makeMethod1($temp_full207);
var $temp_full214 = function($self215,$f216) {
var $step213 = 0;
var $ans217 = D;
var $al218 = L[51];
try {
if(R.isActivationRecord($self215)) {
$step213 = $self215.step;
$al218 = $self215.from;
$ans217 = $self215.ans;
self215 = $self215.args[0];
f216 = $self215.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],2,$t);
}
var self215 = $self215;
var f216 = $f216;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step213) {
case 0: $step213 = 1;
$ans217 = (false);
break;
case 1: ++R.GAS;
return $ans217;
default: throw "No case numbered " + $step213 + " in $temp_full214";
}
}
} catch($e219) {
if(R.isCont($e219) && ($step213 !== 1)) {
$e219.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al218,$temp_full214,$step213,[self215,f216],[]);
}
if(R.isPyretException($e219)) {
$e219.pyretStack.push($al218);
}
throw $e219;
}
};
var anf_singleton_variant_member564 = R.makeMethod1($temp_full214);
var $temp_full221 = function($self222) {
var $step220 = 0;
var $ans223 = D;
var $al224 = L[54];
try {
if(R.isActivationRecord($self222)) {
$step220 = $self222.step;
$al224 = $self222.from;
$ans223 = $self222.ans;
self222 = $self222.args[0];
ann_check_temp225 = $self222.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],1,$t);
}
var self222 = $self222;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step220) {
case 0: var ann_check_temp225 = G(self222,"h",L[52]);
$step220 = 1;
$al224 = L[53];
R._checkAnn(L[53],$type$Number2,ann_check_temp225);
break;
case 1: $step220 = 2;
$ans223 = ann_check_temp225;
break;
case 2: ++R.GAS;
return $ans223;
default: throw "No case numbered " + $step220 + " in $temp_full221";
}
}
} catch($e226) {
if(R.isCont($e226) && ($step220 !== 2)) {
$e226.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al224,$temp_full221,$step220,[self222],[ann_check_temp225]);
}
if(R.isPyretException($e226)) {
$e226.pyretStack.push($al224);
}
throw $e226;
}
};
var anf_variant_member572 = R.makeMethod0($temp_full221);
var $temp_full228 = function($self229,$val230) {
var $step227 = 0;
var $ans231 = D;
var $al232 = L[65];
try {
if(R.isActivationRecord($self229)) {
$step227 = $self229.step;
$al232 = $self229.from;
$ans231 = $self229.ans;
self229 = $self229.args[0];
val230 = $self229.args[1];
ann_check_temp242 = $self229.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[65],2,$t);
}
var self229 = $self229;
var val230 = $val230;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step227) {
case 0: var anf_arg233 = G(self229,"value",L[55]);
$step227 = 1;
$al232 = L[56];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al232,equal$always4);
}
$ans231 = equal$always4.app(val230,anf_arg233);
break;
case 1: var anf_arg234 = $ans231;
$al232 = L[56];
var anf_if243 = R.checkWrapBoolean(anf_arg234);
if(R.isPyretTrue(anf_if243)) {
$step227 = 2;
} else {
$step227 = 3;
}
break;
case 2: $step227 = 7;
$ans231 = (true);
break;
case 3: var anf_arg235 = G(self229,"value",L[57]);
$step227 = 4;
$al232 = L[63];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al232,_lessthan5);
}
$ans231 = _lessthan5.app(val230,anf_arg235);
break;
case 4: var anf_arg236 = $ans231;
$al232 = L[58];
var anf_if241 = R.checkWrapBoolean(anf_arg236);
if(R.isPyretTrue(anf_if241)) {
$step227 = 5;
} else {
$step227 = 6;
}
break;
case 5: var anf_method_obj237 = G(self229,"left",L[59]);
$step227 = 7;
$al232 = L[60];
$field238 = R.getColonFieldLoc(anf_method_obj237,"contains",L[60]);
if(R.isMethod($field238)) {
$ans231 = $field238.full_meth(anf_method_obj237,val230);
} else {
if(!(R.isFunction($field238))) {
R.ffi.throwNonFunApp(L[60],$field238);
}
$ans231 = $field238.app(val230);
}
break;
case 6: var anf_method_obj239 = G(self229,"right",L[61]);
$step227 = 7;
$al232 = L[62];
$field240 = R.getColonFieldLoc(anf_method_obj239,"contains",L[62]);
if(R.isMethod($field240)) {
$ans231 = $field240.full_meth(anf_method_obj239,val230);
} else {
if(!(R.isFunction($field240))) {
R.ffi.throwNonFunApp(L[62],$field240);
}
$ans231 = $field240.app(val230);
}
break;
case 7: var ann_check_temp242 = $ans231;
$step227 = 8;
$al232 = L[64];
R._checkAnn(L[64],$type$Boolean3,ann_check_temp242);
break;
case 8: $step227 = 9;
$ans231 = ann_check_temp242;
break;
case 9: ++R.GAS;
return $ans231;
default: throw "No case numbered " + $step227 + " in $temp_full228";
}
}
} catch($e244) {
if(R.isCont($e244) && ($step227 !== 9)) {
$e244.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al232,$temp_full228,$step227,[self229,val230],[ann_check_temp242]);
}
if(R.isPyretException($e244)) {
$e244.pyretStack.push($al232);
}
throw $e244;
}
};
var anf_variant_member573 = R.makeMethod1($temp_full228);
var $temp_full246 = function($self247,$val248) {
var $step245 = 0;
var $ans249 = D;
var $al250 = L[92];
try {
if(R.isActivationRecord($self247)) {
$step245 = $self247.step;
$al250 = $self247.from;
$ans249 = $self247.ans;
self247 = $self247.args[0];
val248 = $self247.args[1];
ann_check_temp271 = $self247.vars[0];
anf_arg267 = $self247.vars[1];
anf_arg266 = $self247.vars[2];
anf_arg259 = $self247.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[92],2,$t);
}
var self247 = $self247;
var val248 = $val248;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step245) {
case 0: var anf_arg251 = G(self247,"value",L[66]);
$step245 = 1;
$al250 = L[67];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al250,equal$always4);
}
$ans249 = equal$always4.app(val248,anf_arg251);
break;
case 1: var anf_arg252 = $ans249;
$al250 = L[67];
var anf_if272 = R.checkWrapBoolean(anf_arg252);
if(R.isPyretTrue(anf_if272)) {
$step245 = 2;
} else {
$step245 = 3;
}
break;
case 2: var anf_arg253 = G(self247,"left",L[68]);
var anf_arg254 = G(self247,"right",L[69]);
$step245 = 11;
$al250 = L[71];
if(!(R.isFunction(mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[70],"mkbranch"):mkbranch96.$var.app(val248,anf_arg253,anf_arg254);
break;
case 3: var anf_arg255 = G(self247,"value",L[72]);
$step245 = 4;
$al250 = L[90];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al250,_lessthan5);
}
$ans249 = _lessthan5.app(val248,anf_arg255);
break;
case 4: var anf_arg256 = $ans249;
$al250 = L[73];
var anf_if270 = R.checkWrapBoolean(anf_arg256);
if(R.isPyretTrue(anf_if270)) {
$step245 = 5;
} else {
$step245 = 8;
}
break;
case 5: var anf_arg259 = G(self247,"value",L[74]);
var anf_method_obj257 = G(self247,"left",L[75]);
$step245 = 6;
$al250 = L[76];
$field258 = R.getColonFieldLoc(anf_method_obj257,"insert",L[76]);
if(R.isMethod($field258)) {
$ans249 = $field258.full_meth(anf_method_obj257,val248);
} else {
if(!(R.isFunction($field258))) {
R.ffi.throwNonFunApp(L[76],$field258);
}
$ans249 = $field258.app(val248);
}
break;
case 6: var anf_arg260 = $ans249;
var anf_arg261 = G(self247,"right",L[77]);
$step245 = 7;
$al250 = L[81];
if(!(R.isFunction(mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[78],"mkbranch"):mkbranch96.$var.app(anf_arg259,anf_arg260,anf_arg261);
break;
case 7: var anf_arg263 = $ans249;
$step245 = 11;
$al250 = L[80];
if(!(R.isFunction(rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al250,rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var);
}
$ans249 = rebalance262.$var === D?U(L[79],"rebalance"):rebalance262.$var.app(anf_arg263);
break;
case 8: var anf_arg266 = G(self247,"value",L[82]);
var anf_arg267 = G(self247,"left",L[83]);
var anf_method_obj264 = G(self247,"right",L[84]);
$step245 = 9;
$al250 = L[85];
$field265 = R.getColonFieldLoc(anf_method_obj264,"insert",L[85]);
if(R.isMethod($field265)) {
$ans249 = $field265.full_meth(anf_method_obj264,val248);
} else {
if(!(R.isFunction($field265))) {
R.ffi.throwNonFunApp(L[85],$field265);
}
$ans249 = $field265.app(val248);
}
break;
case 9: var anf_arg268 = $ans249;
$step245 = 10;
$al250 = L[89];
if(!(R.isFunction(mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al250,mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var);
}
$ans249 = mkbranch96.$var === D?U(L[86],"mkbranch"):mkbranch96.$var.app(anf_arg266,anf_arg267,anf_arg268);
break;
case 10: var anf_arg269 = $ans249;
$step245 = 11;
$al250 = L[88];
if(!(R.isFunction(rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al250,rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var);
}
$ans249 = rebalance262.$var === D?U(L[87],"rebalance"):rebalance262.$var.app(anf_arg269);
break;
case 11: var ann_check_temp271 = $ans249;
$step245 = 12;
$al250 = L[91];
R._checkAnn(L[91],AVLTree99,ann_check_temp271);
break;
case 12: $step245 = 13;
$ans249 = ann_check_temp271;
break;
case 13: ++R.GAS;
return $ans249;
default: throw "No case numbered " + $step245 + " in $temp_full246";
}
}
} catch($e273) {
if(R.isCont($e273) && ($step245 !== 13)) {
$e273.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al250,$temp_full246,$step245,[self247,val248],[ann_check_temp271,anf_arg267,anf_arg266,anf_arg259]);
}
if(R.isPyretException($e273)) {
$e273.pyretStack.push($al250);
}
throw $e273;
}
};
var anf_variant_member574 = R.makeMethod1($temp_full246);
var $temp_full275 = function($self276,$val277) {
var $step274 = 0;
var $ans278 = D;
var $al279 = L[117];
try {
if(R.isActivationRecord($self276)) {
$step274 = $self276.step;
$al279 = $self276.from;
$ans278 = $self276.ans;
self276 = $self276.args[0];
val277 = $self276.args[1];
ann_check_temp298 = $self276.vars[0];
anf_arg294 = $self276.vars[1];
anf_arg293 = $self276.vars[2];
anf_arg287 = $self276.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[117],2,$t);
}
var self276 = $self276;
var val277 = $val277;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step274) {
case 0: var anf_arg280 = G(self276,"value",L[93]);
$step274 = 1;
$al279 = L[94];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al279,equal$always4);
}
$ans278 = equal$always4.app(val277,anf_arg280);
break;
case 1: var anf_arg281 = $ans278;
$al279 = L[94];
var anf_if299 = R.checkWrapBoolean(anf_arg281);
if(R.isPyretTrue(anf_if299)) {
$step274 = 2;
} else {
$step274 = 3;
}
break;
case 2: $step274 = 11;
$al279 = L[96];
if(!(R.isFunction(remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var))) {
R.ffi.throwNonFunApp($al279,remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var);
}
$ans278 = remove$root282.$var === D?U(L[95],"remove-root"):remove$root282.$var.app(self276);
break;
case 3: var anf_arg283 = G(self276,"value",L[97]);
$step274 = 4;
$al279 = L[115];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al279,_lessthan5);
}
$ans278 = _lessthan5.app(val277,anf_arg283);
break;
case 4: var anf_arg284 = $ans278;
$al279 = L[98];
var anf_if297 = R.checkWrapBoolean(anf_arg284);
if(R.isPyretTrue(anf_if297)) {
$step274 = 5;
} else {
$step274 = 8;
}
break;
case 5: var anf_arg287 = G(self276,"value",L[99]);
var anf_method_obj285 = G(self276,"left",L[100]);
$step274 = 6;
$al279 = L[101];
$field286 = R.getColonFieldLoc(anf_method_obj285,"remove",L[101]);
if(R.isMethod($field286)) {
$ans278 = $field286.full_meth(anf_method_obj285,val277);
} else {
if(!(R.isFunction($field286))) {
R.ffi.throwNonFunApp(L[101],$field286);
}
$ans278 = $field286.app(val277);
}
break;
case 6: var anf_arg288 = $ans278;
var anf_arg289 = G(self276,"right",L[102]);
$step274 = 7;
$al279 = L[106];
if(!(R.isFunction(mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al279,mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var);
}
$ans278 = mkbranch96.$var === D?U(L[103],"mkbranch"):mkbranch96.$var.app(anf_arg287,anf_arg288,anf_arg289);
break;
case 7: var anf_arg290 = $ans278;
$step274 = 11;
$al279 = L[105];
if(!(R.isFunction(rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al279,rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var);
}
$ans278 = rebalance262.$var === D?U(L[104],"rebalance"):rebalance262.$var.app(anf_arg290);
break;
case 8: var anf_arg293 = G(self276,"value",L[107]);
var anf_arg294 = G(self276,"left",L[108]);
var anf_method_obj291 = G(self276,"right",L[109]);
$step274 = 9;
$al279 = L[110];
$field292 = R.getColonFieldLoc(anf_method_obj291,"remove",L[110]);
if(R.isMethod($field292)) {
$ans278 = $field292.full_meth(anf_method_obj291,val277);
} else {
if(!(R.isFunction($field292))) {
R.ffi.throwNonFunApp(L[110],$field292);
}
$ans278 = $field292.app(val277);
}
break;
case 9: var anf_arg295 = $ans278;
$step274 = 10;
$al279 = L[114];
if(!(R.isFunction(mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var))) {
R.ffi.throwNonFunApp($al279,mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var);
}
$ans278 = mkbranch96.$var === D?U(L[111],"mkbranch"):mkbranch96.$var.app(anf_arg293,anf_arg294,anf_arg295);
break;
case 10: var anf_arg296 = $ans278;
$step274 = 11;
$al279 = L[113];
if(!(R.isFunction(rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var))) {
R.ffi.throwNonFunApp($al279,rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var);
}
$ans278 = rebalance262.$var === D?U(L[112],"rebalance"):rebalance262.$var.app(anf_arg296);
break;
case 11: var ann_check_temp298 = $ans278;
$step274 = 12;
$al279 = L[116];
R._checkAnn(L[116],AVLTree99,ann_check_temp298);
break;
case 12: $step274 = 13;
$ans278 = ann_check_temp298;
break;
case 13: ++R.GAS;
return $ans278;
default: throw "No case numbered " + $step274 + " in $temp_full275";
}
}
} catch($e300) {
if(R.isCont($e300) && ($step274 !== 13)) {
$e300.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al279,$temp_full275,$step274,[self276,val277],[ann_check_temp298,anf_arg294,anf_arg293,anf_arg287]);
}
if(R.isPyretException($e300)) {
$e300.pyretStack.push($al279);
}
throw $e300;
}
};
var anf_variant_member575 = R.makeMethod1($temp_full275);
var $temp_full302 = function($self303) {
var $step301 = 0;
var $ans304 = D;
var $al305 = L[122];
try {
if(R.isActivationRecord($self303)) {
$step301 = $self303.step;
$al305 = $self303.from;
$ans304 = $self303.ans;
self303 = $self303.args[0];
ann_check_temp317 = $self303.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[122],1,$t);
}
var self303 = $self303;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step301) {
case 0: var knil315 = {"$var":D};
var $temp_lam307 = function($l308,$x309) {
var $step306 = 0;
var $ans310 = D;
var $al311 = L[119];
try {
if(R.isActivationRecord($l308)) {
$step306 = $l308.step;
$al311 = $l308.from;
$ans310 = $l308.ans;
l308 = $l308.args[0];
x309 = $l308.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[119],2,$t);
}
var l308 = $l308;
var x309 = $x309;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step306) {
case 0: $step306 = 1;
$al311 = L[118];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al311,link312);
}
$ans310 = link312.app(x309,l308);
break;
case 1: ++R.GAS;
return $ans310;
default: throw "No case numbered " + $step306 + " in $temp_lam307";
}
}
} catch($e313) {
if(R.isCont($e313) && ($step306 !== 1)) {
$e313.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al311,$temp_lam307,$step306,[l308,x309],[]);
}
if(R.isPyretException($e313)) {
$e313.pyretStack.push($al311);
}
throw $e313;
}
};
var anf_assign314 = R.makeFunction($temp_lam307);
knil315.$var = anf_assign314;
$step301 = 1;
$al305 = L[120];
$field316 = R.getColonFieldLoc(self303,"fold-revpreorder",L[120]);
if(R.isMethod($field316)) {
$ans304 = $field316.full_meth(self303,knil315.$var,empty114);
} else {
if(!(R.isFunction($field316))) {
R.ffi.throwNonFunApp(L[120],$field316);
}
$ans304 = $field316.app(knil315.$var,empty114);
}
break;
case 1: var ann_check_temp317 = $ans304;
$step301 = 2;
$al305 = L[121];
R._checkAnn(L[121],R.getDotAnn(L[121],"lists",lists31,"List"),ann_check_temp317);
break;
case 2: $step301 = 3;
$ans304 = ann_check_temp317;
break;
case 3: ++R.GAS;
return $ans304;
default: throw "No case numbered " + $step301 + " in $temp_full302";
}
}
} catch($e318) {
if(R.isCont($e318) && ($step301 !== 3)) {
$e318.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al305,$temp_full302,$step301,[self303],[ann_check_temp317]);
}
if(R.isPyretException($e318)) {
$e318.pyretStack.push($al305);
}
throw $e318;
}
};
var anf_variant_member576 = R.makeMethod0($temp_full302);
var $temp_full320 = function($self321) {
var $step319 = 0;
var $ans322 = D;
var $al323 = L[127];
try {
if(R.isActivationRecord($self321)) {
$step319 = $self321.step;
$al323 = $self321.from;
$ans322 = $self321.ans;
self321 = $self321.args[0];
ann_check_temp334 = $self321.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[127],1,$t);
}
var self321 = $self321;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step319) {
case 0: var knil332 = {"$var":D};
var $temp_lam325 = function($l326,$x327) {
var $step324 = 0;
var $ans328 = D;
var $al329 = L[124];
try {
if(R.isActivationRecord($l326)) {
$step324 = $l326.step;
$al329 = $l326.from;
$ans328 = $l326.ans;
l326 = $l326.args[0];
x327 = $l326.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[124],2,$t);
}
var l326 = $l326;
var x327 = $x327;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step324) {
case 0: $step324 = 1;
$al329 = L[123];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al329,link312);
}
$ans328 = link312.app(x327,l326);
break;
case 1: ++R.GAS;
return $ans328;
default: throw "No case numbered " + $step324 + " in $temp_lam325";
}
}
} catch($e330) {
if(R.isCont($e330) && ($step324 !== 1)) {
$e330.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al329,$temp_lam325,$step324,[l326,x327],[]);
}
if(R.isPyretException($e330)) {
$e330.pyretStack.push($al329);
}
throw $e330;
}
};
var anf_assign331 = R.makeFunction($temp_lam325);
knil332.$var = anf_assign331;
$step319 = 1;
$al323 = L[125];
$field333 = R.getColonFieldLoc(self321,"fold-revinorder",L[125]);
if(R.isMethod($field333)) {
$ans322 = $field333.full_meth(self321,knil332.$var,empty114);
} else {
if(!(R.isFunction($field333))) {
R.ffi.throwNonFunApp(L[125],$field333);
}
$ans322 = $field333.app(knil332.$var,empty114);
}
break;
case 1: var ann_check_temp334 = $ans322;
$step319 = 2;
$al323 = L[126];
R._checkAnn(L[126],R.getDotAnn(L[126],"lists",lists31,"List"),ann_check_temp334);
break;
case 2: $step319 = 3;
$ans322 = ann_check_temp334;
break;
case 3: ++R.GAS;
return $ans322;
default: throw "No case numbered " + $step319 + " in $temp_full320";
}
}
} catch($e335) {
if(R.isCont($e335) && ($step319 !== 3)) {
$e335.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al323,$temp_full320,$step319,[self321],[ann_check_temp334]);
}
if(R.isPyretException($e335)) {
$e335.pyretStack.push($al323);
}
throw $e335;
}
};
var anf_variant_member577 = R.makeMethod0($temp_full320);
var $temp_full337 = function($self338) {
var $step336 = 0;
var $ans339 = D;
var $al340 = L[132];
try {
if(R.isActivationRecord($self338)) {
$step336 = $self338.step;
$al340 = $self338.from;
$ans339 = $self338.ans;
self338 = $self338.args[0];
ann_check_temp351 = $self338.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[132],1,$t);
}
var self338 = $self338;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step336) {
case 0: var knil349 = {"$var":D};
var $temp_lam342 = function($l343,$x344) {
var $step341 = 0;
var $ans345 = D;
var $al346 = L[129];
try {
if(R.isActivationRecord($l343)) {
$step341 = $l343.step;
$al346 = $l343.from;
$ans345 = $l343.ans;
l343 = $l343.args[0];
x344 = $l343.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[129],2,$t);
}
var l343 = $l343;
var x344 = $x344;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step341) {
case 0: $step341 = 1;
$al346 = L[128];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al346,link312);
}
$ans345 = link312.app(x344,l343);
break;
case 1: ++R.GAS;
return $ans345;
default: throw "No case numbered " + $step341 + " in $temp_lam342";
}
}
} catch($e347) {
if(R.isCont($e347) && ($step341 !== 1)) {
$e347.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al346,$temp_lam342,$step341,[l343,x344],[]);
}
if(R.isPyretException($e347)) {
$e347.pyretStack.push($al346);
}
throw $e347;
}
};
var anf_assign348 = R.makeFunction($temp_lam342);
knil349.$var = anf_assign348;
$step336 = 1;
$al340 = L[130];
$field350 = R.getColonFieldLoc(self338,"fold-revpostorder",L[130]);
if(R.isMethod($field350)) {
$ans339 = $field350.full_meth(self338,knil349.$var,empty114);
} else {
if(!(R.isFunction($field350))) {
R.ffi.throwNonFunApp(L[130],$field350);
}
$ans339 = $field350.app(knil349.$var,empty114);
}
break;
case 1: var ann_check_temp351 = $ans339;
$step336 = 2;
$al340 = L[131];
R._checkAnn(L[131],R.getDotAnn(L[131],"lists",lists31,"List"),ann_check_temp351);
break;
case 2: $step336 = 3;
$ans339 = ann_check_temp351;
break;
case 3: ++R.GAS;
return $ans339;
default: throw "No case numbered " + $step336 + " in $temp_full337";
}
}
} catch($e352) {
if(R.isCont($e352) && ($step336 !== 3)) {
$e352.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al340,$temp_full337,$step336,[self338],[ann_check_temp351]);
}
if(R.isPyretException($e352)) {
$e352.pyretStack.push($al340);
}
throw $e352;
}
};
var anf_variant_member578 = R.makeMethod0($temp_full337);
var $temp_full354 = function($self355) {
var $step353 = 0;
var $ans356 = D;
var $al357 = L[137];
try {
if(R.isActivationRecord($self355)) {
$step353 = $self355.step;
$al357 = $self355.from;
$ans356 = $self355.ans;
self355 = $self355.args[0];
ann_check_temp368 = $self355.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[137],1,$t);
}
var self355 = $self355;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step353) {
case 0: var knil366 = {"$var":D};
var $temp_lam359 = function($l360,$x361) {
var $step358 = 0;
var $ans362 = D;
var $al363 = L[134];
try {
if(R.isActivationRecord($l360)) {
$step358 = $l360.step;
$al363 = $l360.from;
$ans362 = $l360.ans;
l360 = $l360.args[0];
x361 = $l360.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[134],2,$t);
}
var l360 = $l360;
var x361 = $x361;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step358) {
case 0: $step358 = 1;
$al363 = L[133];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al363,link312);
}
$ans362 = link312.app(x361,l360);
break;
case 1: ++R.GAS;
return $ans362;
default: throw "No case numbered " + $step358 + " in $temp_lam359";
}
}
} catch($e364) {
if(R.isCont($e364) && ($step358 !== 1)) {
$e364.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al363,$temp_lam359,$step358,[l360,x361],[]);
}
if(R.isPyretException($e364)) {
$e364.pyretStack.push($al363);
}
throw $e364;
}
};
var anf_assign365 = R.makeFunction($temp_lam359);
knil366.$var = anf_assign365;
$step353 = 1;
$al357 = L[135];
$field367 = R.getColonFieldLoc(self355,"fold-preorder",L[135]);
if(R.isMethod($field367)) {
$ans356 = $field367.full_meth(self355,knil366.$var,empty114);
} else {
if(!(R.isFunction($field367))) {
R.ffi.throwNonFunApp(L[135],$field367);
}
$ans356 = $field367.app(knil366.$var,empty114);
}
break;
case 1: var ann_check_temp368 = $ans356;
$step353 = 2;
$al357 = L[136];
R._checkAnn(L[136],R.getDotAnn(L[136],"lists",lists31,"List"),ann_check_temp368);
break;
case 2: $step353 = 3;
$ans356 = ann_check_temp368;
break;
case 3: ++R.GAS;
return $ans356;
default: throw "No case numbered " + $step353 + " in $temp_full354";
}
}
} catch($e369) {
if(R.isCont($e369) && ($step353 !== 3)) {
$e369.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al357,$temp_full354,$step353,[self355],[ann_check_temp368]);
}
if(R.isPyretException($e369)) {
$e369.pyretStack.push($al357);
}
throw $e369;
}
};
var anf_variant_member579 = R.makeMethod0($temp_full354);
var $temp_full371 = function($self372) {
var $step370 = 0;
var $ans373 = D;
var $al374 = L[142];
try {
if(R.isActivationRecord($self372)) {
$step370 = $self372.step;
$al374 = $self372.from;
$ans373 = $self372.ans;
self372 = $self372.args[0];
ann_check_temp385 = $self372.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[142],1,$t);
}
var self372 = $self372;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step370) {
case 0: var knil383 = {"$var":D};
var $temp_lam376 = function($l377,$x378) {
var $step375 = 0;
var $ans379 = D;
var $al380 = L[139];
try {
if(R.isActivationRecord($l377)) {
$step375 = $l377.step;
$al380 = $l377.from;
$ans379 = $l377.ans;
l377 = $l377.args[0];
x378 = $l377.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[139],2,$t);
}
var l377 = $l377;
var x378 = $x378;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step375) {
case 0: $step375 = 1;
$al380 = L[138];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al380,link312);
}
$ans379 = link312.app(x378,l377);
break;
case 1: ++R.GAS;
return $ans379;
default: throw "No case numbered " + $step375 + " in $temp_lam376";
}
}
} catch($e381) {
if(R.isCont($e381) && ($step375 !== 1)) {
$e381.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al380,$temp_lam376,$step375,[l377,x378],[]);
}
if(R.isPyretException($e381)) {
$e381.pyretStack.push($al380);
}
throw $e381;
}
};
var anf_assign382 = R.makeFunction($temp_lam376);
knil383.$var = anf_assign382;
$step370 = 1;
$al374 = L[140];
$field384 = R.getColonFieldLoc(self372,"fold-inorder",L[140]);
if(R.isMethod($field384)) {
$ans373 = $field384.full_meth(self372,knil383.$var,empty114);
} else {
if(!(R.isFunction($field384))) {
R.ffi.throwNonFunApp(L[140],$field384);
}
$ans373 = $field384.app(knil383.$var,empty114);
}
break;
case 1: var ann_check_temp385 = $ans373;
$step370 = 2;
$al374 = L[141];
R._checkAnn(L[141],R.getDotAnn(L[141],"lists",lists31,"List"),ann_check_temp385);
break;
case 2: $step370 = 3;
$ans373 = ann_check_temp385;
break;
case 3: ++R.GAS;
return $ans373;
default: throw "No case numbered " + $step370 + " in $temp_full371";
}
}
} catch($e386) {
if(R.isCont($e386) && ($step370 !== 3)) {
$e386.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al374,$temp_full371,$step370,[self372],[ann_check_temp385]);
}
if(R.isPyretException($e386)) {
$e386.pyretStack.push($al374);
}
throw $e386;
}
};
var anf_variant_member580 = R.makeMethod0($temp_full371);
var $temp_full388 = function($self389) {
var $step387 = 0;
var $ans390 = D;
var $al391 = L[147];
try {
if(R.isActivationRecord($self389)) {
$step387 = $self389.step;
$al391 = $self389.from;
$ans390 = $self389.ans;
self389 = $self389.args[0];
ann_check_temp402 = $self389.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[147],1,$t);
}
var self389 = $self389;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step387) {
case 0: var knil400 = {"$var":D};
var $temp_lam393 = function($l394,$x395) {
var $step392 = 0;
var $ans396 = D;
var $al397 = L[144];
try {
if(R.isActivationRecord($l394)) {
$step392 = $l394.step;
$al397 = $l394.from;
$ans396 = $l394.ans;
l394 = $l394.args[0];
x395 = $l394.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[144],2,$t);
}
var l394 = $l394;
var x395 = $x395;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step392) {
case 0: $step392 = 1;
$al397 = L[143];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al397,link312);
}
$ans396 = link312.app(x395,l394);
break;
case 1: ++R.GAS;
return $ans396;
default: throw "No case numbered " + $step392 + " in $temp_lam393";
}
}
} catch($e398) {
if(R.isCont($e398) && ($step392 !== 1)) {
$e398.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al397,$temp_lam393,$step392,[l394,x395],[]);
}
if(R.isPyretException($e398)) {
$e398.pyretStack.push($al397);
}
throw $e398;
}
};
var anf_assign399 = R.makeFunction($temp_lam393);
knil400.$var = anf_assign399;
$step387 = 1;
$al391 = L[145];
$field401 = R.getColonFieldLoc(self389,"fold-postorder",L[145]);
if(R.isMethod($field401)) {
$ans390 = $field401.full_meth(self389,knil400.$var,empty114);
} else {
if(!(R.isFunction($field401))) {
R.ffi.throwNonFunApp(L[145],$field401);
}
$ans390 = $field401.app(knil400.$var,empty114);
}
break;
case 1: var ann_check_temp402 = $ans390;
$step387 = 2;
$al391 = L[146];
R._checkAnn(L[146],R.getDotAnn(L[146],"lists",lists31,"List"),ann_check_temp402);
break;
case 2: $step387 = 3;
$ans390 = ann_check_temp402;
break;
case 3: ++R.GAS;
return $ans390;
default: throw "No case numbered " + $step387 + " in $temp_full388";
}
}
} catch($e403) {
if(R.isCont($e403) && ($step387 !== 3)) {
$e403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al391,$temp_full388,$step387,[self389],[ann_check_temp402]);
}
if(R.isPyretException($e403)) {
$e403.pyretStack.push($al391);
}
throw $e403;
}
};
var anf_variant_member581 = R.makeMethod0($temp_full388);
var $temp_full405 = function($self406,$f407,$base408) {
var $step404 = 0;
var $ans409 = D;
var $al410 = L[154];
try {
if(R.isActivationRecord($self406)) {
$step404 = $self406.step;
$al410 = $self406.from;
$ans409 = $self406.ans;
self406 = $self406.args[0];
f407 = $self406.args[1];
base408 = $self406.args[2];
anf_method_obj412 = $self406.vars[0];
anf_method_obj415 = $self406.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[154],3,$t);
}
var self406 = $self406;
var f407 = $f407;
var base408 = $base408;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step404) {
case 0: var anf_method_obj415 = G(self406,"right",L[148]);
var anf_method_obj412 = G(self406,"left",L[149]);
var anf_arg411 = G(self406,"value",L[150]);
$step404 = 1;
$al410 = L[153];
if(!(R.isFunction(f407))) {
R.ffi.throwNonFunApp($al410,f407);
}
$ans409 = f407.app(base408,anf_arg411);
break;
case 1: var anf_arg413 = $ans409;
$step404 = 2;
$al410 = L[151];
$field414 = R.getColonFieldLoc(anf_method_obj412,"fold-preorder",L[151]);
if(R.isMethod($field414)) {
$ans409 = $field414.full_meth(anf_method_obj412,f407,anf_arg413);
} else {
if(!(R.isFunction($field414))) {
R.ffi.throwNonFunApp(L[151],$field414);
}
$ans409 = $field414.app(f407,anf_arg413);
}
break;
case 2: var anf_arg416 = $ans409;
$step404 = 3;
$al410 = L[152];
$field417 = R.getColonFieldLoc(anf_method_obj415,"fold-preorder",L[152]);
if(R.isMethod($field417)) {
$ans409 = $field417.full_meth(anf_method_obj415,f407,anf_arg416);
} else {
if(!(R.isFunction($field417))) {
R.ffi.throwNonFunApp(L[152],$field417);
}
$ans409 = $field417.app(f407,anf_arg416);
}
break;
case 3: ++R.GAS;
return $ans409;
default: throw "No case numbered " + $step404 + " in $temp_full405";
}
}
} catch($e418) {
if(R.isCont($e418) && ($step404 !== 3)) {
$e418.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al410,$temp_full405,$step404,[self406,f407,base408],[anf_method_obj412,anf_method_obj415]);
}
if(R.isPyretException($e418)) {
$e418.pyretStack.push($al410);
}
throw $e418;
}
};
var anf_variant_member582 = R.makeMethod2($temp_full405);
var $temp_full420 = function($self421,$f422,$base423) {
var $step419 = 0;
var $ans424 = D;
var $al425 = L[161];
try {
if(R.isActivationRecord($self421)) {
$step419 = $self421.step;
$al425 = $self421.from;
$ans424 = $self421.ans;
self421 = $self421.args[0];
f422 = $self421.args[1];
base423 = $self421.args[2];
anf_method_obj430 = $self421.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[161],3,$t);
}
var self421 = $self421;
var f422 = $f422;
var base423 = $base423;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step419) {
case 0: var anf_method_obj430 = G(self421,"right",L[155]);
var anf_method_obj426 = G(self421,"left",L[156]);
$step419 = 1;
$al425 = L[157];
$field427 = R.getColonFieldLoc(anf_method_obj426,"fold-inorder",L[157]);
if(R.isMethod($field427)) {
$ans424 = $field427.full_meth(anf_method_obj426,f422,base423);
} else {
if(!(R.isFunction($field427))) {
R.ffi.throwNonFunApp(L[157],$field427);
}
$ans424 = $field427.app(f422,base423);
}
break;
case 1: var anf_arg428 = $ans424;
var anf_arg429 = G(self421,"value",L[158]);
$step419 = 2;
$al425 = L[160];
if(!(R.isFunction(f422))) {
R.ffi.throwNonFunApp($al425,f422);
}
$ans424 = f422.app(anf_arg428,anf_arg429);
break;
case 2: var anf_arg431 = $ans424;
$step419 = 3;
$al425 = L[159];
$field432 = R.getColonFieldLoc(anf_method_obj430,"fold-inorder",L[159]);
if(R.isMethod($field432)) {
$ans424 = $field432.full_meth(anf_method_obj430,f422,anf_arg431);
} else {
if(!(R.isFunction($field432))) {
R.ffi.throwNonFunApp(L[159],$field432);
}
$ans424 = $field432.app(f422,anf_arg431);
}
break;
case 3: ++R.GAS;
return $ans424;
default: throw "No case numbered " + $step419 + " in $temp_full420";
}
}
} catch($e433) {
if(R.isCont($e433) && ($step419 !== 3)) {
$e433.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al425,$temp_full420,$step419,[self421,f422,base423],[anf_method_obj430]);
}
if(R.isPyretException($e433)) {
$e433.pyretStack.push($al425);
}
throw $e433;
}
};
var anf_variant_member583 = R.makeMethod2($temp_full420);
var $temp_full435 = function($self436,$f437,$base438) {
var $step434 = 0;
var $ans439 = D;
var $al440 = L[168];
try {
if(R.isActivationRecord($self436)) {
$step434 = $self436.step;
$al440 = $self436.from;
$ans439 = $self436.ans;
self436 = $self436.args[0];
f437 = $self436.args[1];
base438 = $self436.args[2];
anf_method_obj443 = $self436.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[168],3,$t);
}
var self436 = $self436;
var f437 = $f437;
var base438 = $base438;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step434) {
case 0: var anf_method_obj443 = G(self436,"right",L[162]);
var anf_method_obj441 = G(self436,"left",L[163]);
$step434 = 1;
$al440 = L[164];
$field442 = R.getColonFieldLoc(anf_method_obj441,"fold-postorder",L[164]);
if(R.isMethod($field442)) {
$ans439 = $field442.full_meth(anf_method_obj441,f437,base438);
} else {
if(!(R.isFunction($field442))) {
R.ffi.throwNonFunApp(L[164],$field442);
}
$ans439 = $field442.app(f437,base438);
}
break;
case 1: var anf_arg444 = $ans439;
$step434 = 2;
$al440 = L[165];
$field445 = R.getColonFieldLoc(anf_method_obj443,"fold-postorder",L[165]);
if(R.isMethod($field445)) {
$ans439 = $field445.full_meth(anf_method_obj443,f437,anf_arg444);
} else {
if(!(R.isFunction($field445))) {
R.ffi.throwNonFunApp(L[165],$field445);
}
$ans439 = $field445.app(f437,anf_arg444);
}
break;
case 2: var anf_arg446 = $ans439;
var anf_arg447 = G(self436,"value",L[166]);
$step434 = 3;
$al440 = L[167];
if(!(R.isFunction(f437))) {
R.ffi.throwNonFunApp($al440,f437);
}
$ans439 = f437.app(anf_arg446,anf_arg447);
break;
case 3: ++R.GAS;
return $ans439;
default: throw "No case numbered " + $step434 + " in $temp_full435";
}
}
} catch($e448) {
if(R.isCont($e448) && ($step434 !== 3)) {
$e448.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al440,$temp_full435,$step434,[self436,f437,base438],[anf_method_obj443]);
}
if(R.isPyretException($e448)) {
$e448.pyretStack.push($al440);
}
throw $e448;
}
};
var anf_variant_member584 = R.makeMethod2($temp_full435);
var $temp_full450 = function($self451,$f452,$base453) {
var $step449 = 0;
var $ans454 = D;
var $al455 = L[175];
try {
if(R.isActivationRecord($self451)) {
$step449 = $self451.step;
$al455 = $self451.from;
$ans454 = $self451.ans;
self451 = $self451.args[0];
f452 = $self451.args[1];
base453 = $self451.args[2];
anf_method_obj457 = $self451.vars[0];
anf_method_obj460 = $self451.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[175],3,$t);
}
var self451 = $self451;
var f452 = $f452;
var base453 = $base453;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step449) {
case 0: var anf_method_obj460 = G(self451,"left",L[169]);
var anf_method_obj457 = G(self451,"right",L[170]);
var anf_arg456 = G(self451,"value",L[171]);
$step449 = 1;
$al455 = L[174];
if(!(R.isFunction(f452))) {
R.ffi.throwNonFunApp($al455,f452);
}
$ans454 = f452.app(base453,anf_arg456);
break;
case 1: var anf_arg458 = $ans454;
$step449 = 2;
$al455 = L[172];
$field459 = R.getColonFieldLoc(anf_method_obj457,"fold-revpreorder",L[172]);
if(R.isMethod($field459)) {
$ans454 = $field459.full_meth(anf_method_obj457,f452,anf_arg458);
} else {
if(!(R.isFunction($field459))) {
R.ffi.throwNonFunApp(L[172],$field459);
}
$ans454 = $field459.app(f452,anf_arg458);
}
break;
case 2: var anf_arg461 = $ans454;
$step449 = 3;
$al455 = L[173];
$field462 = R.getColonFieldLoc(anf_method_obj460,"fold-revpreorder",L[173]);
if(R.isMethod($field462)) {
$ans454 = $field462.full_meth(anf_method_obj460,f452,anf_arg461);
} else {
if(!(R.isFunction($field462))) {
R.ffi.throwNonFunApp(L[173],$field462);
}
$ans454 = $field462.app(f452,anf_arg461);
}
break;
case 3: ++R.GAS;
return $ans454;
default: throw "No case numbered " + $step449 + " in $temp_full450";
}
}
} catch($e463) {
if(R.isCont($e463) && ($step449 !== 3)) {
$e463.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al455,$temp_full450,$step449,[self451,f452,base453],[anf_method_obj457,anf_method_obj460]);
}
if(R.isPyretException($e463)) {
$e463.pyretStack.push($al455);
}
throw $e463;
}
};
var anf_variant_member585 = R.makeMethod2($temp_full450);
var $temp_full465 = function($self466,$f467,$base468) {
var $step464 = 0;
var $ans469 = D;
var $al470 = L[182];
try {
if(R.isActivationRecord($self466)) {
$step464 = $self466.step;
$al470 = $self466.from;
$ans469 = $self466.ans;
self466 = $self466.args[0];
f467 = $self466.args[1];
base468 = $self466.args[2];
anf_method_obj475 = $self466.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[182],3,$t);
}
var self466 = $self466;
var f467 = $f467;
var base468 = $base468;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step464) {
case 0: var anf_method_obj475 = G(self466,"left",L[176]);
var anf_method_obj471 = G(self466,"right",L[177]);
$step464 = 1;
$al470 = L[178];
$field472 = R.getColonFieldLoc(anf_method_obj471,"fold-revinorder",L[178]);
if(R.isMethod($field472)) {
$ans469 = $field472.full_meth(anf_method_obj471,f467,base468);
} else {
if(!(R.isFunction($field472))) {
R.ffi.throwNonFunApp(L[178],$field472);
}
$ans469 = $field472.app(f467,base468);
}
break;
case 1: var anf_arg473 = $ans469;
var anf_arg474 = G(self466,"value",L[179]);
$step464 = 2;
$al470 = L[181];
if(!(R.isFunction(f467))) {
R.ffi.throwNonFunApp($al470,f467);
}
$ans469 = f467.app(anf_arg473,anf_arg474);
break;
case 2: var anf_arg476 = $ans469;
$step464 = 3;
$al470 = L[180];
$field477 = R.getColonFieldLoc(anf_method_obj475,"fold-revinorder",L[180]);
if(R.isMethod($field477)) {
$ans469 = $field477.full_meth(anf_method_obj475,f467,anf_arg476);
} else {
if(!(R.isFunction($field477))) {
R.ffi.throwNonFunApp(L[180],$field477);
}
$ans469 = $field477.app(f467,anf_arg476);
}
break;
case 3: ++R.GAS;
return $ans469;
default: throw "No case numbered " + $step464 + " in $temp_full465";
}
}
} catch($e478) {
if(R.isCont($e478) && ($step464 !== 3)) {
$e478.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al470,$temp_full465,$step464,[self466,f467,base468],[anf_method_obj475]);
}
if(R.isPyretException($e478)) {
$e478.pyretStack.push($al470);
}
throw $e478;
}
};
var anf_variant_member586 = R.makeMethod2($temp_full465);
var $temp_full480 = function($self481,$f482,$base483) {
var $step479 = 0;
var $ans484 = D;
var $al485 = L[189];
try {
if(R.isActivationRecord($self481)) {
$step479 = $self481.step;
$al485 = $self481.from;
$ans484 = $self481.ans;
self481 = $self481.args[0];
f482 = $self481.args[1];
base483 = $self481.args[2];
anf_method_obj488 = $self481.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],3,$t);
}
var self481 = $self481;
var f482 = $f482;
var base483 = $base483;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step479) {
case 0: var anf_method_obj488 = G(self481,"left",L[183]);
var anf_method_obj486 = G(self481,"right",L[184]);
$step479 = 1;
$al485 = L[185];
$field487 = R.getColonFieldLoc(anf_method_obj486,"fold-revpostorder",L[185]);
if(R.isMethod($field487)) {
$ans484 = $field487.full_meth(anf_method_obj486,f482,base483);
} else {
if(!(R.isFunction($field487))) {
R.ffi.throwNonFunApp(L[185],$field487);
}
$ans484 = $field487.app(f482,base483);
}
break;
case 1: var anf_arg489 = $ans484;
$step479 = 2;
$al485 = L[186];
$field490 = R.getColonFieldLoc(anf_method_obj488,"fold-revpostorder",L[186]);
if(R.isMethod($field490)) {
$ans484 = $field490.full_meth(anf_method_obj488,f482,anf_arg489);
} else {
if(!(R.isFunction($field490))) {
R.ffi.throwNonFunApp(L[186],$field490);
}
$ans484 = $field490.app(f482,anf_arg489);
}
break;
case 2: var anf_arg491 = $ans484;
var anf_arg492 = G(self481,"value",L[187]);
$step479 = 3;
$al485 = L[188];
if(!(R.isFunction(f482))) {
R.ffi.throwNonFunApp($al485,f482);
}
$ans484 = f482.app(anf_arg491,anf_arg492);
break;
case 3: ++R.GAS;
return $ans484;
default: throw "No case numbered " + $step479 + " in $temp_full480";
}
}
} catch($e493) {
if(R.isCont($e493) && ($step479 !== 3)) {
$e493.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al485,$temp_full480,$step479,[self481,f482,base483],[anf_method_obj488]);
}
if(R.isPyretException($e493)) {
$e493.pyretStack.push($al485);
}
throw $e493;
}
};
var anf_variant_member587 = R.makeMethod2($temp_full480);
var $temp_full495 = function($self496) {
var $step494 = 0;
var $ans497 = D;
var $al498 = L[195];
try {
if(R.isActivationRecord($self496)) {
$step494 = $self496.step;
$al498 = $self496.from;
$ans497 = $self496.ans;
self496 = $self496.args[0];
anf_arg504 = $self496.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[195],1,$t);
}
var self496 = $self496;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step494) {
case 0: var anf_method_obj499 = G(self496,"left",L[190]);
$step494 = 1;
$al498 = L[191];
$field500 = R.getColonFieldLoc(anf_method_obj499,"count",L[191]);
if(R.isMethod($field500)) {
$ans497 = $field500.full_meth(anf_method_obj499);
} else {
if(!(R.isFunction($field500))) {
R.ffi.throwNonFunApp(L[191],$field500);
}
$ans497 = $field500.app();
}
break;
case 1: var anf_arg501 = $ans497;
$step494 = 2;
$al498 = L[194];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al498,_plus6);
}
$ans497 = _plus6.app((1),anf_arg501);
break;
case 2: var anf_arg504 = $ans497;
var anf_method_obj502 = G(self496,"right",L[192]);
$step494 = 3;
$al498 = L[193];
$field503 = R.getColonFieldLoc(anf_method_obj502,"count",L[193]);
if(R.isMethod($field503)) {
$ans497 = $field503.full_meth(anf_method_obj502);
} else {
if(!(R.isFunction($field503))) {
R.ffi.throwNonFunApp(L[193],$field503);
}
$ans497 = $field503.app();
}
break;
case 3: var anf_arg505 = $ans497;
$step494 = 4;
$al498 = L[194];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al498,_plus6);
}
$ans497 = _plus6.app(anf_arg504,anf_arg505);
break;
case 4: ++R.GAS;
return $ans497;
default: throw "No case numbered " + $step494 + " in $temp_full495";
}
}
} catch($e506) {
if(R.isCont($e506) && ($step494 !== 4)) {
$e506.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al498,$temp_full495,$step494,[self496],[anf_arg504]);
}
if(R.isPyretException($e506)) {
$e506.pyretStack.push($al498);
}
throw $e506;
}
};
var anf_variant_member588 = R.makeMethod0($temp_full495);
var $temp_full508 = function($self509,$f510) {
var $step507 = 0;
var $ans511 = D;
var $al512 = L[203];
try {
if(R.isActivationRecord($self509)) {
$step507 = $self509.step;
$al512 = $self509.from;
$ans511 = $self509.ans;
self509 = $self509.args[0];
f510 = $self509.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[203],2,$t);
}
var self509 = $self509;
var f510 = $f510;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step507) {
case 0: var anf_arg513 = G(self509,"value",L[196]);
$step507 = 1;
$al512 = L[202];
if(!(R.isFunction(f510))) {
R.ffi.throwNonFunApp($al512,f510);
}
$ans511 = f510.app(anf_arg513);
break;
case 1: var anf_arg514 = $ans511;
$al512 = L[197];
var anf_if522 = R.checkWrapBoolean(anf_arg514);
if(R.isPyretTrue(anf_if522)) {
$step507 = 2;
} else {
$step507 = 7;
}
break;
case 2: var anf_method_obj515 = G(self509,"right",L[198]);
$step507 = 3;
$al512 = L[199];
$field516 = R.getColonFieldLoc(anf_method_obj515,"all",L[199]);
if(R.isMethod($field516)) {
$ans511 = $field516.full_meth(anf_method_obj515,f510);
} else {
if(!(R.isFunction($field516))) {
R.ffi.throwNonFunApp(L[199],$field516);
}
$ans511 = $field516.app(f510);
}
break;
case 3: var anf_arg517 = $ans511;
$al512 = L[197];
var anf_if521 = R.checkWrapBoolean(anf_arg517);
if(R.isPyretTrue(anf_if521)) {
$step507 = 4;
} else {
$step507 = 6;
}
break;
case 4: var anf_method_obj518 = G(self509,"left",L[200]);
$step507 = 5;
$al512 = L[201];
$field519 = R.getColonFieldLoc(anf_method_obj518,"all",L[201]);
if(R.isMethod($field519)) {
$ans511 = $field519.full_meth(anf_method_obj518,f510);
} else {
if(!(R.isFunction($field519))) {
R.ffi.throwNonFunApp(L[201],$field519);
}
$ans511 = $field519.app(f510);
}
break;
case 5: var anf_arg520 = $ans511;
$step507 = 8;
$al512 = L[197];
$ans511 = R.checkWrapBoolean(anf_arg520);
break;
case 6: $step507 = 8;
$ans511 = (false);
break;
case 7: $step507 = 8;
$ans511 = (false);
break;
case 8: ++R.GAS;
return $ans511;
default: throw "No case numbered " + $step507 + " in $temp_full508";
}
}
} catch($e523) {
if(R.isCont($e523) && ($step507 !== 8)) {
$e523.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al512,$temp_full508,$step507,[self509,f510],[]);
}
if(R.isPyretException($e523)) {
$e523.pyretStack.push($al512);
}
throw $e523;
}
};
var anf_variant_member589 = R.makeMethod1($temp_full508);
var $temp_full525 = function($self526,$f527) {
var $step524 = 0;
var $ans528 = D;
var $al529 = L[211];
try {
if(R.isActivationRecord($self526)) {
$step524 = $self526.step;
$al529 = $self526.from;
$ans528 = $self526.ans;
self526 = $self526.args[0];
f527 = $self526.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[211],2,$t);
}
var self526 = $self526;
var f527 = $f527;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step524) {
case 0: var anf_arg530 = G(self526,"value",L[204]);
$step524 = 1;
$al529 = L[210];
if(!(R.isFunction(f527))) {
R.ffi.throwNonFunApp($al529,f527);
}
$ans528 = f527.app(anf_arg530);
break;
case 1: var anf_arg531 = $ans528;
$al529 = L[205];
var anf_if539 = R.checkWrapBoolean(anf_arg531);
if(R.isPyretTrue(anf_if539)) {
$step524 = 2;
} else {
$step524 = 3;
}
break;
case 2: $step524 = 8;
$ans528 = (true);
break;
case 3: var anf_method_obj532 = G(self526,"right",L[206]);
$step524 = 4;
$al529 = L[207];
$field533 = R.getColonFieldLoc(anf_method_obj532,"all",L[207]);
if(R.isMethod($field533)) {
$ans528 = $field533.full_meth(anf_method_obj532,f527);
} else {
if(!(R.isFunction($field533))) {
R.ffi.throwNonFunApp(L[207],$field533);
}
$ans528 = $field533.app(f527);
}
break;
case 4: var anf_arg534 = $ans528;
$al529 = L[205];
var anf_if538 = R.checkWrapBoolean(anf_arg534);
if(R.isPyretTrue(anf_if538)) {
$step524 = 5;
} else {
$step524 = 6;
}
break;
case 5: $step524 = 8;
$ans528 = (true);
break;
case 6: var anf_method_obj535 = G(self526,"left",L[208]);
$step524 = 7;
$al529 = L[209];
$field536 = R.getColonFieldLoc(anf_method_obj535,"all",L[209]);
if(R.isMethod($field536)) {
$ans528 = $field536.full_meth(anf_method_obj535,f527);
} else {
if(!(R.isFunction($field536))) {
R.ffi.throwNonFunApp(L[209],$field536);
}
$ans528 = $field536.app(f527);
}
break;
case 7: var anf_arg537 = $ans528;
$step524 = 8;
$al529 = L[205];
$ans528 = R.checkWrapBoolean(anf_arg537);
break;
case 8: ++R.GAS;
return $ans528;
default: throw "No case numbered " + $step524 + " in $temp_full525";
}
}
} catch($e540) {
if(R.isCont($e540) && ($step524 !== 8)) {
$e540.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al529,$temp_full525,$step524,[self526,f527],[]);
}
if(R.isPyretException($e540)) {
$e540.pyretStack.push($al529);
}
throw $e540;
}
};
var anf_variant_member590 = R.makeMethod1($temp_full525);
var $leaf_getfields567 = function(f) {
return f();
};
var $leaf_getfieldsref565 = function(f) {
return f();
};
var $leaf_mutablemask566 = [];
var $leaf$base543 = {"to-list":anf_shared541,
"_equals":anf_shared542,
"height":anf_singleton_variant_member546,
"contains":anf_singleton_variant_member547,
"insert":anf_singleton_variant_member548,
"remove":anf_singleton_variant_member549,
"preorder":anf_singleton_variant_member550,
"inorder":anf_singleton_variant_member551,
"postorder":anf_singleton_variant_member552,
"revpreorder":anf_singleton_variant_member553,
"revinorder":anf_singleton_variant_member554,
"revpostorder":anf_singleton_variant_member555,
"fold-preorder":anf_singleton_variant_member556,
"fold-inorder":anf_singleton_variant_member557,
"fold-postorder":anf_singleton_variant_member558,
"fold-revpreorder":anf_singleton_variant_member559,
"fold-revinorder":anf_singleton_variant_member560,
"fold-revpostorder":anf_singleton_variant_member561,
"count":anf_singleton_variant_member562,
"all":anf_singleton_variant_member563,
"any":anf_singleton_variant_member564,
"_match":R.makeMatch("leaf",0)};
var $leaf$brands545 = {"$brand$leaf":true};
$leaf$brands545[AVLTree48._brand] = true;
var $branch_getfields593 = function(f) {
return f(this.dict["value"],this.dict["h"],this.dict["left"],this.dict["right"]);
};
var $branch_getfieldsref591 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]),R.derefField(this.dict["h"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["right"],false,refmask[3]));
};
var $branch_mutablemask592 = [false,false,false,false];
var $branch$base569 = {"$fieldNames":["value","h","left","right"],
"to-list":anf_shared541,
"_equals":anf_shared542,
"height":anf_variant_member572,
"contains":anf_variant_member573,
"insert":anf_variant_member574,
"remove":anf_variant_member575,
"preorder":anf_variant_member576,
"inorder":anf_variant_member577,
"postorder":anf_variant_member578,
"revpreorder":anf_variant_member579,
"revinorder":anf_variant_member580,
"revpostorder":anf_variant_member581,
"fold-preorder":anf_variant_member582,
"fold-inorder":anf_variant_member583,
"fold-postorder":anf_variant_member584,
"fold-revpreorder":anf_variant_member585,
"fold-revinorder":anf_variant_member586,
"fold-revpostorder":anf_variant_member587,
"count":anf_variant_member588,
"all":anf_variant_member589,
"any":anf_variant_member590,
"_match":R.makeMatch("branch",4)};
var $branch$brands571 = {"$brand$branch":true};
$branch$brands571[AVLTree48._brand] = true;
var branch595 = R.makeVariantConstructor(L[217],function() {
return [$type$Number2,AVLTree99,AVLTree99];
},["h596","left597","right598"],[L[214],L[215],L[216]],[false,false,false,false],["value599","h596","left597","right598"],$branch_mutablemask592,$branch$base569,$branch$brands571,"branch",$branch_getfieldsref591,$branch_getfields593,$branch$base569);
var anf_assign601 = R.makeObject({"AVLTree":R.makeFunction(function($val600) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[218],1,$t);
}
return R.makeBoolean(R.hasBrand($val600,AVLTree48._brand));
}),
"is-leaf":R.makeFunction(function($val568) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[212],1,$t);
}
return R.makeBoolean(R.hasBrand($val568,"$brand$leaf"));
}),
"leaf":R.makeDataValue($leaf$base543,$leaf$brands545,"leaf",$leaf_getfieldsref565,$leaf_getfields567,-1,$leaf_mutablemask566,$leaf$base543),
"is-branch":R.makeFunction(function($val594) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[213],1,$t);
}
return R.makeBoolean(R.hasBrand($val594,"$brand$branch"));
}),
"branch":branch595});
AVLTree602.$var = anf_assign601;
var anf_assign603 = G(AVLTree602.$var,"AVLTree",L[218]);
AVLTree65.$var = anf_assign603;
var anf_assign604 = G(AVLTree602.$var,"AVLTree",L[218]);
is$AVLTree605.$var = anf_assign604;
var anf_assign606 = G(AVLTree602.$var,"is-leaf",L[212]);
is$leaf607.$var = anf_assign606;
var anf_assign608 = G(AVLTree602.$var,"leaf",L[212]);
leaf97.$var = anf_assign608;
var anf_assign609 = G(AVLTree602.$var,"is-branch",L[213]);
is$branch610.$var = anf_assign609;
var anf_assign611 = G(AVLTree602.$var,"branch",L[213]);
branch612.$var = anf_assign611;
var $temp_lam614 = function($f615,$base616,$tree617) {
var $step613 = 0;
var $ans618 = D;
var $al619 = L[220];
try {
if(R.isActivationRecord($f615)) {
$step613 = $f615.step;
$al619 = $f615.from;
$ans618 = $f615.ans;
f615 = $f615.args[0];
base616 = $f615.args[1];
tree617 = $f615.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[220],3,$t);
}
var f615 = $f615;
var base616 = $base616;
var tree617 = $tree617;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step613) {
case 0: $step613 = 1;
$al619 = L[219];
$field620 = R.getColonFieldLoc(tree617,"fold-preorder",L[219]);
if(R.isMethod($field620)) {
$ans618 = $field620.full_meth(tree617,f615,base616);
} else {
if(!(R.isFunction($field620))) {
R.ffi.throwNonFunApp(L[219],$field620);
}
$ans618 = $field620.app(f615,base616);
}
break;
case 1: ++R.GAS;
return $ans618;
default: throw "No case numbered " + $step613 + " in $temp_lam614";
}
}
} catch($e621) {
if(R.isCont($e621) && ($step613 !== 1)) {
$e621.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al619,$temp_lam614,$step613,[f615,base616,tree617],[]);
}
if(R.isPyretException($e621)) {
$e621.pyretStack.push($al619);
}
throw $e621;
}
};
var anf_assign622 = R.makeFunction($temp_lam614);
tree$fold623.$var = anf_assign622;
var $temp_lam625 = function($f626,$tree627) {
var $step624 = 0;
var $ans628 = D;
var $al629 = L[222];
try {
if(R.isActivationRecord($f626)) {
$step624 = $f626.step;
$al629 = $f626.from;
$ans628 = $f626.ans;
f626 = $f626.args[0];
tree627 = $f626.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[222],2,$t);
}
var f626 = $f626;
var tree627 = $tree627;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step624) {
case 0: $step624 = 1;
$al629 = L[221];
$field630 = R.getColonFieldLoc(tree627,"all",L[221]);
if(R.isMethod($field630)) {
$ans628 = $field630.full_meth(tree627,f626);
} else {
if(!(R.isFunction($field630))) {
R.ffi.throwNonFunApp(L[221],$field630);
}
$ans628 = $field630.app(f626);
}
break;
case 1: ++R.GAS;
return $ans628;
default: throw "No case numbered " + $step624 + " in $temp_lam625";
}
}
} catch($e631) {
if(R.isCont($e631) && ($step624 !== 1)) {
$e631.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al629,$temp_lam625,$step624,[f626,tree627],[]);
}
if(R.isPyretException($e631)) {
$e631.pyretStack.push($al629);
}
throw $e631;
}
};
var anf_assign632 = R.makeFunction($temp_lam625);
tree$all633.$var = anf_assign632;
var $temp_lam635 = function($f636,$tree637) {
var $step634 = 0;
var $ans638 = D;
var $al639 = L[224];
try {
if(R.isActivationRecord($f636)) {
$step634 = $f636.step;
$al639 = $f636.from;
$ans638 = $f636.ans;
f636 = $f636.args[0];
tree637 = $f636.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[224],2,$t);
}
var f636 = $f636;
var tree637 = $tree637;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step634) {
case 0: $step634 = 1;
$al639 = L[223];
$field640 = R.getColonFieldLoc(tree637,"any",L[223]);
if(R.isMethod($field640)) {
$ans638 = $field640.full_meth(tree637,f636);
} else {
if(!(R.isFunction($field640))) {
R.ffi.throwNonFunApp(L[223],$field640);
}
$ans638 = $field640.app(f636);
}
break;
case 1: ++R.GAS;
return $ans638;
default: throw "No case numbered " + $step634 + " in $temp_lam635";
}
}
} catch($e641) {
if(R.isCont($e641) && ($step634 !== 1)) {
$e641.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al639,$temp_lam635,$step634,[f636,tree637],[]);
}
if(R.isPyretException($e641)) {
$e641.pyretStack.push($al639);
}
throw $e641;
}
};
var anf_assign642 = R.makeFunction($temp_lam635);
tree$any643.$var = anf_assign642;
var $temp_lam645 = function($val646,$left647,$right648) {
var $step644 = 0;
var $ans649 = D;
var $al650 = L[232];
try {
if(R.isActivationRecord($val646)) {
$step644 = $val646.step;
$al650 = $val646.from;
$ans649 = $val646.ans;
val646 = $val646.args[0];
left647 = $val646.args[1];
right648 = $val646.args[2];
anf_arg653 = $val646.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[232],3,$t);
}
var val646 = $val646;
var left647 = $left647;
var right648 = $right648;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step644) {
case 0: $step644 = 1;
$al650 = L[230];
R._checkAnn(L[230],AVLTree99,left647);
break;
case 1: $step644 = 2;
$al650 = L[231];
R._checkAnn(L[231],AVLTree99,right648);
break;
case 2: $step644 = 3;
$al650 = L[225];
$field651 = R.getColonFieldLoc(left647,"height",L[225]);
if(R.isMethod($field651)) {
$ans649 = $field651.full_meth(left647);
} else {
if(!(R.isFunction($field651))) {
R.ffi.throwNonFunApp(L[225],$field651);
}
$ans649 = $field651.app();
}
break;
case 3: var anf_arg653 = $ans649;
$step644 = 4;
$al650 = L[226];
$field652 = R.getColonFieldLoc(right648,"height",L[226]);
if(R.isMethod($field652)) {
$ans649 = $field652.full_meth(right648);
} else {
if(!(R.isFunction($field652))) {
R.ffi.throwNonFunApp(L[226],$field652);
}
$ans649 = $field652.app();
}
break;
case 4: var anf_arg654 = $ans649;
$step644 = 5;
$al650 = L[229];
if(!(R.isFunction(num$max7))) {
R.ffi.throwNonFunApp($al650,num$max7);
}
$ans649 = num$max7.app(anf_arg653,anf_arg654);
break;
case 5: var anf_arg655 = $ans649;
$step644 = 6;
$al650 = L[228];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al650,_plus6);
}
$ans649 = _plus6.app(anf_arg655,(1));
break;
case 6: var anf_arg656 = $ans649;
$step644 = 7;
$al650 = L[227];
if(!(R.isFunction(branch612.$var))) {
R.ffi.throwNonFunApp($al650,branch612.$var);
}
$ans649 = branch612.$var.app(val646,anf_arg656,left647,right648);
break;
case 7: ++R.GAS;
return $ans649;
default: throw "No case numbered " + $step644 + " in $temp_lam645";
}
}
} catch($e657) {
if(R.isCont($e657) && ($step644 !== 7)) {
$e657.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al650,$temp_lam645,$step644,[val646,left647,right648],[anf_arg653]);
}
if(R.isPyretException($e657)) {
$e657.pyretStack.push($al650);
}
throw $e657;
}
};
var anf_assign658 = R.makeFunction($temp_lam645);
mkbranch96.$var = anf_assign658;
var $temp_lam660 = function($tree661) {
var $step659 = 0;
var $ans662 = D;
var $al663 = L[326];
try {
if(R.isActivationRecord($tree661)) {
$step659 = $tree661.step;
$al663 = $tree661.from;
$ans662 = $tree661.ans;
tree661 = $tree661.args[0];
anf_arg777 = $tree661.vars[0];
anf_arg765 = $tree661.vars[1];
rh753 = $tree661.vars[2];
lh752 = $tree661.vars[3];
right$left747 = $tree661.vars[4];
left$right722 = $tree661.vars[5];
right$right697 = $tree661.vars[6];
left$left680 = $tree661.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[326],1,$t);
}
var tree661 = $tree661;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step659) {
case 0: $step659 = 1;
$al663 = L[325];
R._checkAnn(L[325],AVLTree99,tree661);
break;
case 1: var left$left680 = {"$var":D};
var right$right697 = {"$var":D};
var left$right722 = {"$var":D};
var right$left747 = {"$var":D};
var $temp_lam665 = function($t666) {
var $step664 = 0;
var $ans667 = D;
var $al668 = L[243];
try {
if(R.isActivationRecord($t666)) {
$step664 = $t666.step;
$al668 = $t666.from;
$ans667 = $t666.ans;
t666 = $t666.args[0];
anf_arg676 = $t666.vars[0];
anf_arg675 = $t666.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[243],1,$t);
}
var t666 = $t666;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step664) {
case 0: var anf_bracket669 = G(t666,"left",L[233]);
var anf_arg675 = G(anf_bracket669,"value",L[234]);
var anf_bracket670 = G(t666,"left",L[235]);
var anf_arg676 = G(anf_bracket670,"left",L[236]);
var anf_arg672 = G(t666,"value",L[237]);
var anf_bracket671 = G(t666,"left",L[238]);
var anf_arg673 = G(anf_bracket671,"right",L[239]);
var anf_arg674 = G(t666,"right",L[240]);
$step664 = 1;
$al668 = L[242];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al668,mkbranch96.$var);
}
$ans667 = mkbranch96.$var.app(anf_arg672,anf_arg673,anf_arg674);
break;
case 1: var anf_arg677 = $ans667;
$step664 = 2;
$al668 = L[241];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al668,mkbranch96.$var);
}
$ans667 = mkbranch96.$var.app(anf_arg675,anf_arg676,anf_arg677);
break;
case 2: ++R.GAS;
return $ans667;
default: throw "No case numbered " + $step664 + " in $temp_lam665";
}
}
} catch($e678) {
if(R.isCont($e678) && ($step664 !== 2)) {
$e678.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al668,$temp_lam665,$step664,[t666],[anf_arg676,anf_arg675]);
}
if(R.isPyretException($e678)) {
$e678.pyretStack.push($al668);
}
throw $e678;
}
};
var anf_assign679 = R.makeFunction($temp_lam665);
left$left680.$var = anf_assign679;
var $temp_lam682 = function($t683) {
var $step681 = 0;
var $ans684 = D;
var $al685 = L[254];
try {
if(R.isActivationRecord($t683)) {
$step681 = $t683.step;
$al685 = $t683.from;
$ans684 = $t683.ans;
t683 = $t683.args[0];
anf_arg692 = $t683.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[254],1,$t);
}
var t683 = $t683;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step681) {
case 0: var anf_bracket686 = G(t683,"right",L[244]);
var anf_arg692 = G(anf_bracket686,"value",L[245]);
var anf_arg688 = G(t683,"value",L[246]);
var anf_arg689 = G(t683,"left",L[247]);
var anf_bracket687 = G(t683,"right",L[248]);
var anf_arg690 = G(anf_bracket687,"left",L[249]);
$step681 = 1;
$al685 = L[253];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al685,mkbranch96.$var);
}
$ans684 = mkbranch96.$var.app(anf_arg688,anf_arg689,anf_arg690);
break;
case 1: var anf_arg693 = $ans684;
var anf_bracket691 = G(t683,"right",L[250]);
var anf_arg694 = G(anf_bracket691,"right",L[251]);
$step681 = 2;
$al685 = L[252];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al685,mkbranch96.$var);
}
$ans684 = mkbranch96.$var.app(anf_arg692,anf_arg693,anf_arg694);
break;
case 2: ++R.GAS;
return $ans684;
default: throw "No case numbered " + $step681 + " in $temp_lam682";
}
}
} catch($e695) {
if(R.isCont($e695) && ($step681 !== 2)) {
$e695.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al685,$temp_lam682,$step681,[t683],[anf_arg692]);
}
if(R.isPyretException($e695)) {
$e695.pyretStack.push($al685);
}
throw $e695;
}
};
var anf_assign696 = R.makeFunction($temp_lam682);
right$right697.$var = anf_assign696;
var $temp_lam699 = function($t700) {
var $step698 = 0;
var $ans701 = D;
var $al702 = L[273];
try {
if(R.isActivationRecord($t700)) {
$step698 = $t700.step;
$al702 = $t700.from;
$ans701 = $t700.ans;
t700 = $t700.args[0];
anf_arg718 = $t700.vars[0];
anf_arg717 = $t700.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[273],1,$t);
}
var t700 = $t700;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step698) {
case 0: var anf_bracket703 = G(t700,"left",L[255]);
var anf_bracket704 = G(anf_bracket703,"right",L[256]);
var anf_arg717 = G(anf_bracket704,"value",L[257]);
var anf_bracket705 = G(t700,"left",L[258]);
var anf_arg709 = G(anf_bracket705,"value",L[259]);
var anf_bracket706 = G(t700,"left",L[260]);
var anf_arg710 = G(anf_bracket706,"left",L[261]);
var anf_bracket707 = G(t700,"left",L[262]);
var anf_bracket708 = G(anf_bracket707,"right",L[263]);
var anf_arg711 = G(anf_bracket708,"left",L[264]);
$step698 = 1;
$al702 = L[272];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg709,anf_arg710,anf_arg711);
break;
case 1: var anf_arg718 = $ans701;
var anf_arg714 = G(t700,"value",L[265]);
var anf_bracket712 = G(t700,"left",L[266]);
var anf_bracket713 = G(anf_bracket712,"right",L[267]);
var anf_arg715 = G(anf_bracket713,"right",L[268]);
var anf_arg716 = G(t700,"right",L[269]);
$step698 = 2;
$al702 = L[271];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg714,anf_arg715,anf_arg716);
break;
case 2: var anf_arg719 = $ans701;
$step698 = 3;
$al702 = L[270];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al702,mkbranch96.$var);
}
$ans701 = mkbranch96.$var.app(anf_arg717,anf_arg718,anf_arg719);
break;
case 3: ++R.GAS;
return $ans701;
default: throw "No case numbered " + $step698 + " in $temp_lam699";
}
}
} catch($e720) {
if(R.isCont($e720) && ($step698 !== 3)) {
$e720.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al702,$temp_lam699,$step698,[t700],[anf_arg718,anf_arg717]);
}
if(R.isPyretException($e720)) {
$e720.pyretStack.push($al702);
}
throw $e720;
}
};
var anf_assign721 = R.makeFunction($temp_lam699);
left$right722.$var = anf_assign721;
var $temp_lam724 = function($t725) {
var $step723 = 0;
var $ans726 = D;
var $al727 = L[292];
try {
if(R.isActivationRecord($t725)) {
$step723 = $t725.step;
$al727 = $t725.from;
$ans726 = $t725.ans;
t725 = $t725.args[0];
anf_arg743 = $t725.vars[0];
anf_arg742 = $t725.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[292],1,$t);
}
var t725 = $t725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step723) {
case 0: var anf_bracket728 = G(t725,"right",L[274]);
var anf_bracket729 = G(anf_bracket728,"left",L[275]);
var anf_arg742 = G(anf_bracket729,"value",L[276]);
var anf_arg732 = G(t725,"value",L[277]);
var anf_arg733 = G(t725,"left",L[278]);
var anf_bracket730 = G(t725,"right",L[279]);
var anf_bracket731 = G(anf_bracket730,"left",L[280]);
var anf_arg734 = G(anf_bracket731,"left",L[281]);
$step723 = 1;
$al727 = L[291];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg732,anf_arg733,anf_arg734);
break;
case 1: var anf_arg743 = $ans726;
var anf_bracket735 = G(t725,"right",L[282]);
var anf_arg739 = G(anf_bracket735,"value",L[283]);
var anf_bracket736 = G(t725,"right",L[284]);
var anf_bracket737 = G(anf_bracket736,"left",L[285]);
var anf_arg740 = G(anf_bracket737,"right",L[286]);
var anf_bracket738 = G(t725,"right",L[287]);
var anf_arg741 = G(anf_bracket738,"right",L[288]);
$step723 = 2;
$al727 = L[290];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg739,anf_arg740,anf_arg741);
break;
case 2: var anf_arg744 = $ans726;
$step723 = 3;
$al727 = L[289];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al727,mkbranch96.$var);
}
$ans726 = mkbranch96.$var.app(anf_arg742,anf_arg743,anf_arg744);
break;
case 3: ++R.GAS;
return $ans726;
default: throw "No case numbered " + $step723 + " in $temp_lam724";
}
}
} catch($e745) {
if(R.isCont($e745) && ($step723 !== 3)) {
$e745.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al727,$temp_lam724,$step723,[t725],[anf_arg743,anf_arg742]);
}
if(R.isPyretException($e745)) {
$e745.pyretStack.push($al727);
}
throw $e745;
}
};
var anf_assign746 = R.makeFunction($temp_lam724);
right$left747.$var = anf_assign746;
var anf_method_obj748 = G(tree661,"left",L[293]);
$step659 = 2;
$al663 = L[294];
$field749 = R.getColonFieldLoc(anf_method_obj748,"height",L[294]);
if(R.isMethod($field749)) {
$ans662 = $field749.full_meth(anf_method_obj748);
} else {
if(!(R.isFunction($field749))) {
R.ffi.throwNonFunApp(L[294],$field749);
}
$ans662 = $field749.app();
}
break;
case 2: var lh752 = $ans662;
var anf_method_obj750 = G(tree661,"right",L[295]);
$step659 = 3;
$al663 = L[296];
$field751 = R.getColonFieldLoc(anf_method_obj750,"height",L[296]);
if(R.isMethod($field751)) {
$ans662 = $field751.full_meth(anf_method_obj750);
} else {
if(!(R.isFunction($field751))) {
R.ffi.throwNonFunApp(L[296],$field751);
}
$ans662 = $field751.app();
}
break;
case 3: var rh753 = $ans662;
$step659 = 4;
$al663 = L[324];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(lh752,rh753);
break;
case 4: var anf_arg754 = $ans662;
$step659 = 5;
$al663 = L[323];
if(!(R.isFunction(num$abs9))) {
R.ffi.throwNonFunApp($al663,num$abs9);
}
$ans662 = num$abs9.app(anf_arg754);
break;
case 5: var anf_arg755 = $ans662;
$step659 = 6;
$al663 = L[297];
if(!(R.isFunction(_lessequal10))) {
R.ffi.throwNonFunApp($al663,_lessequal10);
}
$ans662 = _lessequal10.app(anf_arg755,(1));
break;
case 6: var anf_arg756 = $ans662;
$al663 = L[297];
var anf_if783 = R.checkWrapBoolean(anf_arg756);
if(R.isPyretTrue(anf_if783)) {
$step659 = 7;
} else {
$step659 = 8;
}
break;
case 7: $step659 = 27;
$ans662 = tree661;
break;
case 8: $step659 = 9;
$al663 = L[322];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(lh752,rh753);
break;
case 9: var anf_arg757 = $ans662;
$step659 = 10;
$al663 = L[321];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al663,equal$always4);
}
$ans662 = equal$always4.app(anf_arg757,(2));
break;
case 10: var anf_arg758 = $ans662;
$al663 = L[298];
var anf_if782 = R.checkWrapBoolean(anf_arg758);
if(R.isPyretTrue(anf_if782)) {
$step659 = 11;
} else {
$step659 = 17;
}
break;
case 11: var anf_bracket759 = G(tree661,"left",L[299]);
var anf_method_obj760 = G(anf_bracket759,"left",L[300]);
$step659 = 12;
$al663 = L[301];
$field761 = R.getColonFieldLoc(anf_method_obj760,"height",L[301]);
if(R.isMethod($field761)) {
$ans662 = $field761.full_meth(anf_method_obj760);
} else {
if(!(R.isFunction($field761))) {
R.ffi.throwNonFunApp(L[301],$field761);
}
$ans662 = $field761.app();
}
break;
case 12: var anf_arg765 = $ans662;
var anf_bracket762 = G(tree661,"left",L[302]);
var anf_method_obj763 = G(anf_bracket762,"right",L[303]);
$step659 = 13;
$al663 = L[304];
$field764 = R.getColonFieldLoc(anf_method_obj763,"height",L[304]);
if(R.isMethod($field764)) {
$ans662 = $field764.full_meth(anf_method_obj763);
} else {
if(!(R.isFunction($field764))) {
R.ffi.throwNonFunApp(L[304],$field764);
}
$ans662 = $field764.app();
}
break;
case 13: var anf_arg766 = $ans662;
$step659 = 14;
$al663 = L[305];
if(!(R.isFunction(_greaterequal12))) {
R.ffi.throwNonFunApp($al663,_greaterequal12);
}
$ans662 = _greaterequal12.app(anf_arg765,anf_arg766);
break;
case 14: var anf_arg767 = $ans662;
$al663 = L[305];
var anf_if768 = R.checkWrapBoolean(anf_arg767);
if(R.isPyretTrue(anf_if768)) {
$step659 = 15;
} else {
$step659 = 16;
}
break;
case 15: $step659 = 27;
$al663 = L[306];
if(!(R.isFunction(left$left680.$var))) {
R.ffi.throwNonFunApp($al663,left$left680.$var);
}
$ans662 = left$left680.$var.app(tree661);
break;
case 16: $step659 = 27;
$al663 = L[307];
if(!(R.isFunction(left$right722.$var))) {
R.ffi.throwNonFunApp($al663,left$right722.$var);
}
$ans662 = left$right722.$var.app(tree661);
break;
case 17: $step659 = 18;
$al663 = L[320];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al663,_minus8);
}
$ans662 = _minus8.app(rh753,lh752);
break;
case 18: var anf_arg769 = $ans662;
$step659 = 19;
$al663 = L[319];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al663,equal$always4);
}
$ans662 = equal$always4.app(anf_arg769,(2));
break;
case 19: var anf_arg770 = $ans662;
$al663 = L[308];
var anf_if781 = R.checkWrapBoolean(anf_arg770);
if(R.isPyretTrue(anf_if781)) {
$step659 = 20;
} else {
$step659 = 26;
}
break;
case 20: var anf_bracket771 = G(tree661,"right",L[309]);
var anf_method_obj772 = G(anf_bracket771,"right",L[310]);
$step659 = 21;
$al663 = L[311];
$field773 = R.getColonFieldLoc(anf_method_obj772,"height",L[311]);
if(R.isMethod($field773)) {
$ans662 = $field773.full_meth(anf_method_obj772);
} else {
if(!(R.isFunction($field773))) {
R.ffi.throwNonFunApp(L[311],$field773);
}
$ans662 = $field773.app();
}
break;
case 21: var anf_arg777 = $ans662;
var anf_bracket774 = G(tree661,"right",L[312]);
var anf_method_obj775 = G(anf_bracket774,"left",L[313]);
$step659 = 22;
$al663 = L[314];
$field776 = R.getColonFieldLoc(anf_method_obj775,"height",L[314]);
if(R.isMethod($field776)) {
$ans662 = $field776.full_meth(anf_method_obj775);
} else {
if(!(R.isFunction($field776))) {
R.ffi.throwNonFunApp(L[314],$field776);
}
$ans662 = $field776.app();
}
break;
case 22: var anf_arg778 = $ans662;
$step659 = 23;
$al663 = L[315];
if(!(R.isFunction(_greaterequal12))) {
R.ffi.throwNonFunApp($al663,_greaterequal12);
}
$ans662 = _greaterequal12.app(anf_arg777,anf_arg778);
break;
case 23: var anf_arg779 = $ans662;
$al663 = L[315];
var anf_if780 = R.checkWrapBoolean(anf_arg779);
if(R.isPyretTrue(anf_if780)) {
$step659 = 24;
} else {
$step659 = 25;
}
break;
case 24: $step659 = 27;
$al663 = L[316];
if(!(R.isFunction(right$right697.$var))) {
R.ffi.throwNonFunApp($al663,right$right697.$var);
}
$ans662 = right$right697.$var.app(tree661);
break;
case 25: $step659 = 27;
$al663 = L[317];
if(!(R.isFunction(right$left747.$var))) {
R.ffi.throwNonFunApp($al663,right$left747.$var);
}
$ans662 = right$left747.$var.app(tree661);
break;
case 26: $step659 = 27;
$al663 = L[318];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al663,raise11);
}
$ans662 = raise11.app(("AVL tree invariant has been broken!"));
break;
case 27: ++R.GAS;
return $ans662;
default: throw "No case numbered " + $step659 + " in $temp_lam660";
}
}
} catch($e784) {
if(R.isCont($e784) && ($step659 !== 27)) {
$e784.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al663,$temp_lam660,$step659,[tree661],[anf_arg777,anf_arg765,rh753,lh752,right$left747,left$right722,right$right697,left$left680]);
}
if(R.isPyretException($e784)) {
$e784.pyretStack.push($al663);
}
throw $e784;
}
};
var anf_assign785 = R.makeFunction($temp_lam660);
rebalance262.$var = anf_assign785;
var $temp_lam787 = function($tree788) {
var $step786 = 0;
var $ans789 = D;
var $al790 = L[338];
try {
if(R.isActivationRecord($tree788)) {
$step786 = $tree788.step;
$al790 = $tree788.from;
$ans789 = $tree788.ans;
tree788 = $tree788.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[338],1,$t);
}
var tree788 = $tree788;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step786) {
case 0: $step786 = 1;
$al790 = L[337];
R._checkAnn(L[337],AVLTree99,tree788);
break;
case 1: var anf_arg791 = G(tree788,"left",L[327]);
$step786 = 2;
$al790 = L[328];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg791);
break;
case 2: var anf_arg792 = $ans789;
$al790 = L[328];
var anf_if800 = R.checkWrapBoolean(anf_arg792);
if(R.isPyretTrue(anf_if800)) {
$step786 = 3;
} else {
$step786 = 7;
}
break;
case 3: var anf_arg793 = G(tree788,"right",L[329]);
$step786 = 4;
$al790 = L[330];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg793);
break;
case 4: var anf_arg794 = $ans789;
$al790 = L[330];
var anf_if795 = R.checkWrapBoolean(anf_arg794);
if(R.isPyretTrue(anf_if795)) {
$step786 = 5;
} else {
$step786 = 6;
}
break;
case 5: $step786 = 11;
$ans789 = leaf97.$var;
break;
case 6: $step786 = 11;
$ans789 = G(tree788,"right",L[331]);
break;
case 7: var anf_arg796 = G(tree788,"right",L[332]);
$step786 = 8;
$al790 = L[333];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al790,is$leaf607.$var);
}
$ans789 = is$leaf607.$var.app(anf_arg796);
break;
case 8: var anf_arg797 = $ans789;
$al790 = L[333];
var anf_if799 = R.checkWrapBoolean(anf_arg797);
if(R.isPyretTrue(anf_if799)) {
$step786 = 9;
} else {
$step786 = 10;
}
break;
case 9: $step786 = 11;
$ans789 = G(tree788,"left",L[334]);
break;
case 10: $step786 = 11;
$al790 = L[336];
if(!(R.isFunction(swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var))) {
R.ffi.throwNonFunApp($al790,swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var);
}
$ans789 = swap$next$lowest798.$var === D?U(L[335],"swap-next-lowest"):swap$next$lowest798.$var.app(tree788);
break;
case 11: ++R.GAS;
return $ans789;
default: throw "No case numbered " + $step786 + " in $temp_lam787";
}
}
} catch($e801) {
if(R.isCont($e801) && ($step786 !== 11)) {
$e801.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al790,$temp_lam787,$step786,[tree788],[]);
}
if(R.isPyretException($e801)) {
$e801.pyretStack.push($al790);
}
throw $e801;
}
};
var anf_assign802 = R.makeFunction($temp_lam787);
remove$root282.$var = anf_assign802;
var $temp_lam804 = function($tree805) {
var $step803 = 0;
var $ans806 = D;
var $al807 = L[367];
try {
if(R.isActivationRecord($tree805)) {
$step803 = $tree805.step;
$al807 = $tree805.from;
$ans806 = $tree805.ans;
tree805 = $tree805.args[0];
anf_arg851 = $tree805.vars[0];
remove$greatest$and$rebalance834 = $tree805.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[367],1,$t);
}
var tree805 = $tree805;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step803) {
case 0: $step803 = 1;
$al807 = L[366];
R._checkAnn(L[366],AVLTree99,tree805);
break;
case 1: var greatest816 = {"$var":D};
var remove$greatest$and$rebalance834 = {"$var":D};
var $temp_lam809 = function($t810) {
var $step808 = 0;
var $ans811 = D;
var $al812 = L[346];
try {
if(R.isActivationRecord($t810)) {
$step808 = $t810.step;
$al812 = $t810.from;
$ans811 = $t810.ans;
t810 = $t810.args[0];
right814 = $t810.vars[0];
cases813 = $t810.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[346],1,$t);
}
var t810 = $t810;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step808) {
case 0: var cases813 = t810;
$step808 = 1;
$al812 = L[345];
R._checkAnn(L[345],AVLTree99,cases813);
break;
case 1: var $cases_dispatch822 = {"leaf":2,
"branch":3};
$al812 = L[344];
$step808 = $cases_dispatch822[cases813.$name] || 7;
break;
case 2: if(cases813.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[340],false);
}
$step808 = 8;
$al812 = L[339];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al812,raise11);
}
$ans811 = raise11.app(("Went too far in traversal step"));
break;
case 3: if(cases813.$arity >= 0) {
if(4 !== cases813.$arity) {
R.ffi.throwCasesArityErrorC(L[343],4,cases813.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[343],true);
}
var $fn818 = cases813.$constructor.$fieldNames;
R.derefField(cases813.dict[$fn818[0]],cases813.$mut_fields_mask[0],false);
R.derefField(cases813.dict[$fn818[1]],cases813.$mut_fields_mask[1],false);
R.derefField(cases813.dict[$fn818[2]],cases813.$mut_fields_mask[2],false);
var right814 = R.derefField(cases813.dict[$fn818[3]],cases813.$mut_fields_mask[3],false);
$step808 = 4;
$al812 = L[341];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al812,is$leaf607.$var);
}
$ans811 = is$leaf607.$var.app(right814);
break;
case 4: var anf_arg815 = $ans811;
$al812 = L[341];
var anf_if817 = R.checkWrapBoolean(anf_arg815);
if(R.isPyretTrue(anf_if817)) {
$step808 = 5;
} else {
$step808 = 6;
}
break;
case 5: $step808 = 8;
$ans811 = t810;
break;
case 6: $step808 = 8;
$al812 = L[342];
if(!(R.isFunction(greatest816.$var))) {
R.ffi.throwNonFunApp($al812,greatest816.$var);
}
$ans811 = greatest816.$var.app(right814);
break;
case 7: $step808 = 8;
$al812 = L[344];
$ans811 = R.throwNoCasesMatched(L[344],cases813);
break;
case 8: ++R.GAS;
return $ans811;
default: throw "No case numbered " + $step808 + " in $temp_lam809";
}
}
} catch($e823) {
if(R.isCont($e823) && ($step808 !== 8)) {
$e823.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al812,$temp_lam809,$step808,[t810],[right814,cases813]);
}
if(R.isPyretException($e823)) {
$e823.pyretStack.push($al812);
}
throw $e823;
}
};
var anf_assign824 = R.makeFunction($temp_lam809);
greatest816.$var = anf_assign824;
var $temp_lam826 = function($t827) {
var $step825 = 0;
var $ans828 = D;
var $al829 = L[357];
try {
if(R.isActivationRecord($t827)) {
$step825 = $t827.step;
$al829 = $t827.from;
$ans828 = $t827.ans;
t827 = $t827.args[0];
cases830 = $t827.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[357],1,$t);
}
var t827 = $t827;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step825) {
case 0: var cases830 = t827;
$step825 = 1;
$al829 = L[356];
R._checkAnn(L[356],AVLTree99,cases830);
break;
case 1: var $cases_dispatch845 = {"leaf":2,
"branch":3};
$al829 = L[355];
$step825 = $cases_dispatch845[cases830.$name] || 4;
break;
case 2: if(cases830.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[348],false);
}
$step825 = 5;
$al829 = L[347];
if(!(R.isFunction(raise11))) {
R.ffi.throwNonFunApp($al829,raise11);
}
$ans828 = raise11.app(("Went too far in removal step"));
break;
case 3: if(cases830.$arity >= 0) {
if(4 !== cases830.$arity) {
R.ffi.throwCasesArityErrorC(L[353],4,cases830.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[353],true);
}
$step825 = 5;
$al829 = L[354];
var $temp_branch839 = function($val835,$$underscore843,$left833,$right831) {
var $step840 = 0;
var $ans841 = D;
var $al842 = L[349];
try {
if(R.isActivationRecord($val835)) {
$step840 = $val835.step;
$al842 = $val835.from;
$ans841 = $val835.ans;
val835 = $val835.args[0];
$underscore843 = $val835.args[1];
left833 = $val835.args[2];
right831 = $val835.args[3];
} else {
var val835 = $val835;
var $underscore843 = $$underscore843;
var left833 = $left833;
var right831 = $right831;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step840) {
case 0: $step840 = 1;
$al842 = L[349];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al842,is$leaf607.$var);
}
$ans841 = is$leaf607.$var.app(right831);
break;
case 1: var anf_arg832 = $ans841;
$al842 = L[349];
var anf_if838 = R.checkWrapBoolean(anf_arg832);
if(R.isPyretTrue(anf_if838)) {
$step840 = 2;
} else {
$step840 = 3;
}
break;
case 2: $step840 = 6;
$ans841 = left833;
break;
case 3: $step840 = 4;
$al842 = L[352];
if(!(R.isFunction(remove$greatest$and$rebalance834.$var))) {
R.ffi.throwNonFunApp($al842,remove$greatest$and$rebalance834.$var);
}
$ans841 = remove$greatest$and$rebalance834.$var.app(right831);
break;
case 4: var anf_arg836 = $ans841;
$step840 = 5;
$al842 = L[351];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al842,mkbranch96.$var);
}
$ans841 = mkbranch96.$var.app(val835,left833,anf_arg836);
break;
case 5: var anf_arg837 = $ans841;
$step840 = 6;
$al842 = L[350];
if(!(R.isFunction(rebalance262.$var))) {
R.ffi.throwNonFunApp($al842,rebalance262.$var);
}
$ans841 = rebalance262.$var.app(anf_arg837);
break;
case 6: ++R.GAS;
return $ans841;
default: throw "No case numbered " + $step840 + " in $temp_branch839";
}
}
} catch($e844) {
if(R.isCont($e844) && ($step840 !== 6)) {
$e844.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al842,$temp_branch839,$step840,[val835,$underscore843,left833,right831],[]);
}
if(R.isPyretException($e844)) {
$e844.pyretStack.push($al842);
}
throw $e844;
}
};
$ans828 = cases830.$app_fields($temp_branch839,[false,false,false,false]);
break;
case 4: $step825 = 5;
$al829 = L[355];
$ans828 = R.throwNoCasesMatched(L[355],cases830);
break;
case 5: ++R.GAS;
return $ans828;
default: throw "No case numbered " + $step825 + " in $temp_lam826";
}
}
} catch($e846) {
if(R.isCont($e846) && ($step825 !== 5)) {
$e846.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al829,$temp_lam826,$step825,[t827],[cases830]);
}
if(R.isPyretException($e846)) {
$e846.pyretStack.push($al829);
}
throw $e846;
}
};
var anf_assign847 = R.makeFunction($temp_lam826);
remove$greatest$and$rebalance834.$var = anf_assign847;
var anf_arg848 = G(tree805,"left",L[358]);
$step803 = 2;
$al807 = L[365];
if(!(R.isFunction(greatest816.$var))) {
R.ffi.throwNonFunApp($al807,greatest816.$var);
}
$ans806 = greatest816.$var.app(anf_arg848);
break;
case 2: var anf_bracket849 = $ans806;
var anf_arg851 = G(anf_bracket849,"value",L[359]);
var anf_arg850 = G(tree805,"left",L[360]);
$step803 = 3;
$al807 = L[364];
if(!(R.isFunction(remove$greatest$and$rebalance834.$var))) {
R.ffi.throwNonFunApp($al807,remove$greatest$and$rebalance834.$var);
}
$ans806 = remove$greatest$and$rebalance834.$var.app(anf_arg850);
break;
case 3: var anf_arg852 = $ans806;
var anf_arg853 = G(tree805,"right",L[361]);
$step803 = 4;
$al807 = L[363];
if(!(R.isFunction(mkbranch96.$var))) {
R.ffi.throwNonFunApp($al807,mkbranch96.$var);
}
$ans806 = mkbranch96.$var.app(anf_arg851,anf_arg852,anf_arg853);
break;
case 4: var anf_arg854 = $ans806;
$step803 = 5;
$al807 = L[362];
if(!(R.isFunction(rebalance262.$var))) {
R.ffi.throwNonFunApp($al807,rebalance262.$var);
}
$ans806 = rebalance262.$var.app(anf_arg854);
break;
case 5: ++R.GAS;
return $ans806;
default: throw "No case numbered " + $step803 + " in $temp_lam804";
}
}
} catch($e855) {
if(R.isCont($e855) && ($step803 !== 5)) {
$e855.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al807,$temp_lam804,$step803,[tree805],[anf_arg851,remove$greatest$and$rebalance834]);
}
if(R.isPyretException($e855)) {
$e855.pyretStack.push($al807);
}
throw $e855;
}
};
var anf_assign856 = R.makeFunction($temp_lam804);
swap$next$lowest798.$var = anf_assign856;
nothing13;
var Set1423 = {"$var":D};
var Set878 = {"$var":D};
var is$Set1426 = {"$var":D};
var is$list$set1428 = {"$var":D};
var list$set919 = {"$var":D};
var is$tree$set1431 = {"$var":D};
var tree$set1180 = {"$var":D};
var set$to$sorted$elems1446 = {"$var":D};
var elems$to$balanced$avl1481 = {"$var":D};
var merge$no$dups1493 = {"$var":D};
var tree$set$union1302 = {"$var":D};
var merge$only$dups1535 = {"$var":D};
var tree$set$intersect1310 = {"$var":D};
var merge$drop$l21576 = {"$var":D};
var tree$set$difference1328 = {"$var":D};
var set$all1615 = {"$var":D};
var set$any1626 = {"$var":D};
var set$fold1637 = {"$var":D};
var list$to$set1657 = {"$var":D};
var list$to$list$set1667 = {"$var":D};
var list$to$tree$set1677 = {"$var":D};
var list$to$tree1695 = {"$var":D};
var arr$to$list$set1715 = {"$var":D};
var arr$to$tree$set1735 = {"$var":D};
var $temp_full858 = function($self859,$other860) {
var $step857 = 0;
var $ans861 = D;
var $al862 = L[374];
try {
if(R.isActivationRecord($self859)) {
$step857 = $self859.step;
$al862 = $self859.from;
$ans861 = $self859.ans;
self859 = $self859.args[0];
other860 = $self859.args[1];
ann_check_temp868 = $self859.vars[0];
anf_method_obj865 = $self859.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[374],2,$t);
}
var self859 = $self859;
var other860 = $other860;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step857) {
case 0: $step857 = 1;
$al862 = L[372];
R._checkAnn(L[372],Set869,self859);
break;
case 1: $step857 = 2;
$al862 = L[373];
R._checkAnn(L[373],Set869,other860);
break;
case 2: $step857 = 3;
$al862 = L[368];
$field863 = R.getColonFieldLoc(self859,"union",L[368]);
if(R.isMethod($field863)) {
$ans861 = $field863.full_meth(self859,other860);
} else {
if(!(R.isFunction($field863))) {
R.ffi.throwNonFunApp(L[368],$field863);
}
$ans861 = $field863.app(other860);
}
break;
case 3: var anf_method_obj865 = $ans861;
$step857 = 4;
$al862 = L[369];
$field864 = R.getColonFieldLoc(self859,"intersect",L[369]);
if(R.isMethod($field864)) {
$ans861 = $field864.full_meth(self859,other860);
} else {
if(!(R.isFunction($field864))) {
R.ffi.throwNonFunApp(L[369],$field864);
}
$ans861 = $field864.app(other860);
}
break;
case 4: var anf_arg866 = $ans861;
$step857 = 5;
$al862 = L[370];
$field867 = R.getColonFieldLoc(anf_method_obj865,"difference",L[370]);
if(R.isMethod($field867)) {
$ans861 = $field867.full_meth(anf_method_obj865,anf_arg866);
} else {
if(!(R.isFunction($field867))) {
R.ffi.throwNonFunApp(L[370],$field867);
}
$ans861 = $field867.app(anf_arg866);
}
break;
case 5: var ann_check_temp868 = $ans861;
$step857 = 6;
$al862 = L[371];
R._checkAnn(L[371],Set869,ann_check_temp868);
break;
case 6: $step857 = 7;
$ans861 = ann_check_temp868;
break;
case 7: ++R.GAS;
return $ans861;
default: throw "No case numbered " + $step857 + " in $temp_full858";
}
}
} catch($e870) {
if(R.isCont($e870) && ($step857 !== 7)) {
$e870.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al862,$temp_full858,$step857,[self859,other860],[ann_check_temp868,anf_method_obj865]);
}
if(R.isPyretException($e870)) {
$e870.pyretStack.push($al862);
}
throw $e870;
}
};
var anf_shared1367 = R.makeMethod1($temp_full858);
var $temp_full872 = function($self873,$other874,$eq875) {
var $step871 = 0;
var $ans876 = D;
var $al877 = L[390];
try {
if(R.isActivationRecord($self873)) {
$step871 = $self873.step;
$al877 = $self873.from;
$ans876 = $self873.ans;
self873 = $self873.args[0];
other874 = $self873.args[1];
eq875 = $self873.args[2];
anf_arg888 = $self873.vars[0];
other$list884 = $self873.vars[1];
self$list886 = $self873.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[390],3,$t);
}
var self873 = $self873;
var other874 = $other874;
var eq875 = $eq875;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step871) {
case 0: $step871 = 1;
$al877 = L[389];
if(!(R.isFunction(Set878.$var === D?U(L[375],"Set"):Set878.$var))) {
R.ffi.throwNonFunApp($al877,Set878.$var === D?U(L[375],"Set"):Set878.$var);
}
$ans876 = Set878.$var === D?U(L[375],"Set"):Set878.$var.app(other874);
break;
case 1: var anf_arg879 = $ans876;
$step871 = 2;
$al877 = L[376];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al877,not1);
}
$ans876 = not1.app(anf_arg879);
break;
case 2: var anf_arg880 = $ans876;
$al877 = L[376];
var anf_if907 = R.checkWrapBoolean(anf_arg880);
if(R.isPyretTrue(anf_if907)) {
$step871 = 3;
} else {
$step871 = 4;
}
break;
case 3: $step871 = 13;
$al877 = L[377];
$field881 = R.getColonFieldLoc(equality22,"NotEqual",L[377]);
if(R.isMethod($field881)) {
$ans876 = $field881.full_meth(equality22,("Non-Set"),self873,other874);
} else {
if(!(R.isFunction($field881))) {
R.ffi.throwNonFunApp(L[377],$field881);
}
$ans876 = $field881.app(("Non-Set"),self873,other874);
}
break;
case 4: $step871 = 5;
$al877 = L[378];
$field882 = R.getColonFieldLoc(self873,"to-list",L[378]);
if(R.isMethod($field882)) {
$ans876 = $field882.full_meth(self873);
} else {
if(!(R.isFunction($field882))) {
R.ffi.throwNonFunApp(L[378],$field882);
}
$ans876 = $field882.app();
}
break;
case 5: var self$list886 = $ans876;
$step871 = 6;
$al877 = L[379];
$field883 = R.getColonFieldLoc(other874,"to-list",L[379]);
if(R.isMethod($field883)) {
$ans876 = $field883.full_meth(other874);
} else {
if(!(R.isFunction($field883))) {
R.ffi.throwNonFunApp(L[379],$field883);
}
$ans876 = $field883.app();
}
break;
case 6: var other$list884 = $ans876;
$step871 = 7;
$al877 = L[380];
$field885 = R.getColonFieldLoc(other$list884,"length",L[380]);
if(R.isMethod($field885)) {
$ans876 = $field885.full_meth(other$list884);
} else {
if(!(R.isFunction($field885))) {
R.ffi.throwNonFunApp(L[380],$field885);
}
$ans876 = $field885.app();
}
break;
case 7: var anf_arg888 = $ans876;
$step871 = 8;
$al877 = L[381];
$field887 = R.getColonFieldLoc(self$list886,"length",L[381]);
if(R.isMethod($field887)) {
$ans876 = $field887.full_meth(self$list886);
} else {
if(!(R.isFunction($field887))) {
R.ffi.throwNonFunApp(L[381],$field887);
}
$ans876 = $field887.app();
}
break;
case 8: var anf_arg889 = $ans876;
$step871 = 9;
$al877 = L[388];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al877,equal$always4);
}
$ans876 = equal$always4.app(anf_arg888,anf_arg889);
break;
case 9: var anf_arg890 = $ans876;
$step871 = 10;
$al877 = L[382];
if(!(R.isFunction(not1))) {
R.ffi.throwNonFunApp($al877,not1);
}
$ans876 = not1.app(anf_arg890);
break;
case 10: var anf_arg891 = $ans876;
$al877 = L[382];
var anf_if906 = R.checkWrapBoolean(anf_arg891);
if(R.isPyretTrue(anf_if906)) {
$step871 = 11;
} else {
$step871 = 12;
}
break;
case 11: $step871 = 13;
$al877 = L[383];
$field892 = R.getColonFieldLoc(equality22,"NotEqual",L[383]);
if(R.isMethod($field892)) {
$ans876 = $field892.full_meth(equality22,("set size"),self873,other874);
} else {
if(!(R.isFunction($field892))) {
R.ffi.throwNonFunApp(L[383],$field892);
}
$ans876 = $field892.app(("set size"),self873,other874);
}
break;
case 12: var $temp_lam894 = function($result895,$elt896) {
var $step893 = 0;
var $ans897 = D;
var $al898 = L[386];
try {
if(R.isActivationRecord($result895)) {
$step893 = $result895.step;
$al898 = $result895.from;
$ans897 = $result895.ans;
result895 = $result895.args[0];
elt896 = $result895.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[386],2,$t);
}
var result895 = $result895;
var elt896 = $elt896;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step893) {
case 0: $step893 = 1;
$al898 = L[384];
$field899 = R.getColonFieldLoc(lists24,"member-with",L[384]);
if(R.isMethod($field899)) {
$ans897 = $field899.full_meth(lists24,other$list884,elt896,eq875);
} else {
if(!(R.isFunction($field899))) {
R.ffi.throwNonFunApp(L[384],$field899);
}
$ans897 = $field899.app(other$list884,elt896,eq875);
}
break;
case 1: var result$for$elt900 = $ans897;
$step893 = 2;
$al898 = L[385];
$field901 = R.getColonFieldLoc(equality22,"equal-and",L[385]);
if(R.isMethod($field901)) {
$ans897 = $field901.full_meth(equality22,result895,result$for$elt900);
} else {
if(!(R.isFunction($field901))) {
R.ffi.throwNonFunApp(L[385],$field901);
}
$ans897 = $field901.app(result895,result$for$elt900);
}
break;
case 2: ++R.GAS;
return $ans897;
default: throw "No case numbered " + $step893 + " in $temp_lam894";
}
}
} catch($e902) {
if(R.isCont($e902) && ($step893 !== 2)) {
$e902.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al898,$temp_lam894,$step893,[result895,elt896],[]);
}
if(R.isPyretException($e902)) {
$e902.pyretStack.push($al898);
}
throw $e902;
}
};
var anf_arg904 = R.makeFunction($temp_lam894);
var anf_arg905 = G(equality22,"Equal",L[387]);
$step871 = 13;
$al877 = L[386];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al877,fold903);
}
$ans876 = fold903.app(anf_arg904,anf_arg905,self$list886);
break;
case 13: ++R.GAS;
return $ans876;
default: throw "No case numbered " + $step871 + " in $temp_full872";
}
}
} catch($e908) {
if(R.isCont($e908) && ($step871 !== 13)) {
$e908.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al877,$temp_full872,$step871,[self873,other874,eq875],[anf_arg888,other$list884,self$list886]);
}
if(R.isPyretException($e908)) {
$e908.pyretStack.push($al877);
}
throw $e908;
}
};
var anf_shared1368 = R.makeMethod2($temp_full872);
var $temp_full910 = function($self911) {
var $step909 = 0;
var $ans912 = D;
var $al913 = L[415];
try {
if(R.isActivationRecord($self911)) {
$step909 = $self911.step;
$al913 = $self911.from;
$ans912 = $self911.ans;
self911 = $self911.args[0];
cases915 = $self911.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[415],1,$t);
}
var self911 = $self911;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step909) {
case 0: var lst914 = G(self911,"elems",L[391]);
var cases915 = lst914;
$step909 = 1;
$al913 = L[414];
R._checkAnn(L[414],List937,cases915);
break;
case 1: var $cases_dispatch949 = {"empty":2,
"link":3};
$al913 = L[413];
$step909 = $cases_dispatch949[cases915.$name] || 4;
break;
case 2: if(cases915.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[392],false);
}
$step909 = 5;
$ans912 = pick$none916;
break;
case 3: if(cases915.$arity >= 0) {
if(2 !== cases915.$arity) {
R.ffi.throwCasesArityErrorC(L[411],2,cases915.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[411],true);
}
$step909 = 5;
$al913 = L[412];
var $temp_branch938 = function($f921,$r917) {
var $step939 = 0;
var $ans940 = D;
var $al941 = L[409];
try {
if(R.isActivationRecord($f921)) {
$step939 = $f921.step;
$al941 = $f921.from;
$ans940 = $f921.ans;
f921 = $f921.args[0];
r917 = $f921.args[1];
cases918 = $f921.vars[0];
} else {
var f921 = $f921;
var r917 = $r917;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step939) {
case 0: var cases918 = r917;
$step939 = 1;
$al941 = L[410];
R._checkAnn(L[410],List937,cases918);
break;
case 1: var $cases_dispatch947 = {"empty":2,
"link":4};
$al941 = L[409];
$step939 = $cases_dispatch947[cases918.$name] || 5;
break;
case 2: if(cases918.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[396],false);
}
$step939 = 3;
$al941 = L[395];
if(!(R.isFunction(list$set919.$var === D?U(L[393],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al941,list$set919.$var === D?U(L[393],"list-set"):list$set919.$var);
}
$ans940 = list$set919.$var === D?U(L[393],"list-set"):list$set919.$var.app(empty114);
break;
case 3: var anf_arg922 = $ans940;
$step939 = 6;
$al941 = L[394];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al941,pick$some920);
}
$ans940 = pick$some920.app(f921,anf_arg922);
break;
case 4: if(cases918.$arity >= 0) {
if(2 !== cases918.$arity) {
R.ffi.throwCasesArityErrorC(L[407],2,cases918.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[407],true);
}
$step939 = 6;
$al941 = L[408];
var $temp_branch942 = function($f2928,$r2926) {
var $step943 = 0;
var $ans944 = D;
var $al945 = L[406];
try {
if(R.isActivationRecord($f2928)) {
$step943 = $f2928.step;
$al945 = $f2928.from;
$ans944 = $f2928.ans;
f2928 = $f2928.args[0];
r2926 = $f2928.args[1];
} else {
var f2928 = $f2928;
var r2926 = $r2926;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step943) {
case 0: $step943 = 1;
$al945 = L[405];
if(!(R.isFunction(random14))) {
R.ffi.throwNonFunApp($al945,random14);
}
$ans944 = random14.app((2));
break;
case 1: var get$first923 = $ans944;
$step943 = 2;
$al945 = L[397];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al945,equal$always4);
}
$ans944 = equal$always4.app(get$first923,(0));
break;
case 2: var anf_arg924 = $ans944;
$al945 = L[397];
var anf_if930 = R.checkWrapBoolean(anf_arg924);
if(R.isPyretTrue(anf_if930)) {
$step943 = 3;
} else {
$step943 = 5;
}
break;
case 3: $step943 = 4;
$al945 = L[400];
if(!(R.isFunction(list$set919.$var === D?U(L[398],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al945,list$set919.$var === D?U(L[398],"list-set"):list$set919.$var);
}
$ans944 = list$set919.$var === D?U(L[398],"list-set"):list$set919.$var.app(r917);
break;
case 4: var anf_arg925 = $ans944;
$step943 = 8;
$al945 = L[399];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al945,pick$some920);
}
$ans944 = pick$some920.app(f921,anf_arg925);
break;
case 5: $step943 = 6;
$al945 = L[404];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al945,link312);
}
$ans944 = link312.app(f921,r2926);
break;
case 6: var anf_arg927 = $ans944;
$step943 = 7;
$al945 = L[403];
if(!(R.isFunction(list$set919.$var === D?U(L[401],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al945,list$set919.$var === D?U(L[401],"list-set"):list$set919.$var);
}
$ans944 = list$set919.$var === D?U(L[401],"list-set"):list$set919.$var.app(anf_arg927);
break;
case 7: var anf_arg929 = $ans944;
$step943 = 8;
$al945 = L[402];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al945,pick$some920);
}
$ans944 = pick$some920.app(f2928,anf_arg929);
break;
case 8: ++R.GAS;
return $ans944;
default: throw "No case numbered " + $step943 + " in $temp_branch942";
}
}
} catch($e946) {
if(R.isCont($e946) && ($step943 !== 8)) {
$e946.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al945,$temp_branch942,$step943,[f2928,r2926],[]);
}
if(R.isPyretException($e946)) {
$e946.pyretStack.push($al945);
}
throw $e946;
}
};
$ans940 = cases918.$app_fields($temp_branch942,[false,false]);
break;
case 5: $step939 = 6;
$al941 = L[409];
$ans940 = R.throwNoCasesMatched(L[409],cases918);
break;
case 6: ++R.GAS;
return $ans940;
default: throw "No case numbered " + $step939 + " in $temp_branch938";
}
}
} catch($e948) {
if(R.isCont($e948) && ($step939 !== 6)) {
$e948.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al941,$temp_branch938,$step939,[f921,r917],[cases918]);
}
if(R.isPyretException($e948)) {
$e948.pyretStack.push($al941);
}
throw $e948;
}
};
$ans912 = cases915.$app_fields($temp_branch938,[false,false]);
break;
case 4: $step909 = 5;
$al913 = L[413];
$ans912 = R.throwNoCasesMatched(L[413],cases915);
break;
case 5: ++R.GAS;
return $ans912;
default: throw "No case numbered " + $step909 + " in $temp_full910";
}
}
} catch($e950) {
if(R.isCont($e950) && ($step909 !== 5)) {
$e950.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al913,$temp_full910,$step909,[self911],[cases915]);
}
if(R.isPyretException($e950)) {
$e950.pyretStack.push($al913);
}
throw $e950;
}
};
var anf_variant_member1372 = R.makeMethod0($temp_full910);
var $temp_full952 = function($self953,$tostring954) {
var $step951 = 0;
var $ans955 = D;
var $al956 = L[424];
try {
if(R.isActivationRecord($self953)) {
$step951 = $self953.step;
$al956 = $self953.from;
$ans955 = $self953.ans;
self953 = $self953.args[0];
tostring954 = $self953.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[424],2,$t);
}
var self953 = $self953;
var tostring954 = $tostring954;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step951) {
case 0: var anf_method_obj968 = G(self953,"elems",L[416]);
var $temp_lam958 = function($elem959,$acc960) {
var $step957 = 0;
var $ans961 = D;
var $al962 = L[421];
try {
if(R.isActivationRecord($elem959)) {
$step957 = $elem959.step;
$al962 = $elem959.from;
$ans961 = $elem959.ans;
elem959 = $elem959.args[0];
acc960 = $elem959.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[421],2,$t);
}
var elem959 = $elem959;
var acc960 = $acc960;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step957) {
case 0: $step957 = 1;
$al962 = L[417];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al962,equal$always4);
}
$ans961 = equal$always4.app(acc960,(""));
break;
case 1: var anf_arg963 = $ans961;
$al962 = L[417];
var anf_if966 = R.checkWrapBoolean(anf_arg963);
if(R.isPyretTrue(anf_if966)) {
$step957 = 2;
} else {
$step957 = 3;
}
break;
case 2: $step957 = 6;
$al962 = L[418];
if(!(R.isFunction(tostring954))) {
R.ffi.throwNonFunApp($al962,tostring954);
}
$ans961 = tostring954.app(elem959);
break;
case 3: $step957 = 4;
$al962 = L[420];
if(!(R.isFunction(tostring954))) {
R.ffi.throwNonFunApp($al962,tostring954);
}
$ans961 = tostring954.app(elem959);
break;
case 4: var anf_arg964 = $ans961;
$step957 = 5;
$al962 = L[419];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al962,_plus6);
}
$ans961 = _plus6.app(anf_arg964,(", "));
break;
case 5: var anf_arg965 = $ans961;
$step957 = 6;
$al962 = L[419];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al962,_plus6);
}
$ans961 = _plus6.app(anf_arg965,acc960);
break;
case 6: ++R.GAS;
return $ans961;
default: throw "No case numbered " + $step957 + " in $temp_lam958";
}
}
} catch($e967) {
if(R.isCont($e967) && ($step957 !== 6)) {
$e967.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al962,$temp_lam958,$step957,[elem959,acc960],[]);
}
if(R.isPyretException($e967)) {
$e967.pyretStack.push($al962);
}
throw $e967;
}
};
var anf_arg969 = R.makeFunction($temp_lam958);
$step951 = 1;
$al956 = L[422];
$field970 = R.getColonFieldLoc(anf_method_obj968,"foldl",L[422]);
if(R.isMethod($field970)) {
$ans955 = $field970.full_meth(anf_method_obj968,anf_arg969,(""));
} else {
if(!(R.isFunction($field970))) {
R.ffi.throwNonFunApp(L[422],$field970);
}
$ans955 = $field970.app(anf_arg969,(""));
}
break;
case 1: var anf_arg971 = $ans955;
$step951 = 2;
$al956 = L[423];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al956,_plus6);
}
$ans955 = _plus6.app(("[set: "),anf_arg971);
break;
case 2: var anf_arg972 = $ans955;
$step951 = 3;
$al956 = L[423];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al956,_plus6);
}
$ans955 = _plus6.app(anf_arg972,("]"));
break;
case 3: ++R.GAS;
return $ans955;
default: throw "No case numbered " + $step951 + " in $temp_full952";
}
}
} catch($e973) {
if(R.isCont($e973) && ($step951 !== 3)) {
$e973.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al956,$temp_full952,$step951,[self953,tostring954],[]);
}
if(R.isPyretException($e973)) {
$e973.pyretStack.push($al956);
}
throw $e973;
}
};
var anf_variant_member1373 = R.makeMethod1($temp_full952);
var $temp_full975 = function($self976,$torepr977) {
var $step974 = 0;
var $ans978 = D;
var $al979 = L[433];
try {
if(R.isActivationRecord($self976)) {
$step974 = $self976.step;
$al979 = $self976.from;
$ans978 = $self976.ans;
self976 = $self976.args[0];
torepr977 = $self976.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[433],2,$t);
}
var self976 = $self976;
var torepr977 = $torepr977;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step974) {
case 0: var anf_method_obj991 = G(self976,"elems",L[425]);
var $temp_lam981 = function($elem982,$acc983) {
var $step980 = 0;
var $ans984 = D;
var $al985 = L[430];
try {
if(R.isActivationRecord($elem982)) {
$step980 = $elem982.step;
$al985 = $elem982.from;
$ans984 = $elem982.ans;
elem982 = $elem982.args[0];
acc983 = $elem982.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[430],2,$t);
}
var elem982 = $elem982;
var acc983 = $acc983;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step980) {
case 0: $step980 = 1;
$al985 = L[426];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al985,equal$always4);
}
$ans984 = equal$always4.app(acc983,(""));
break;
case 1: var anf_arg986 = $ans984;
$al985 = L[426];
var anf_if989 = R.checkWrapBoolean(anf_arg986);
if(R.isPyretTrue(anf_if989)) {
$step980 = 2;
} else {
$step980 = 3;
}
break;
case 2: $step980 = 6;
$al985 = L[427];
if(!(R.isFunction(torepr977))) {
R.ffi.throwNonFunApp($al985,torepr977);
}
$ans984 = torepr977.app(elem982);
break;
case 3: $step980 = 4;
$al985 = L[429];
if(!(R.isFunction(torepr977))) {
R.ffi.throwNonFunApp($al985,torepr977);
}
$ans984 = torepr977.app(elem982);
break;
case 4: var anf_arg987 = $ans984;
$step980 = 5;
$al985 = L[428];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al985,_plus6);
}
$ans984 = _plus6.app(anf_arg987,(", "));
break;
case 5: var anf_arg988 = $ans984;
$step980 = 6;
$al985 = L[428];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al985,_plus6);
}
$ans984 = _plus6.app(anf_arg988,acc983);
break;
case 6: ++R.GAS;
return $ans984;
default: throw "No case numbered " + $step980 + " in $temp_lam981";
}
}
} catch($e990) {
if(R.isCont($e990) && ($step980 !== 6)) {
$e990.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al985,$temp_lam981,$step980,[elem982,acc983],[]);
}
if(R.isPyretException($e990)) {
$e990.pyretStack.push($al985);
}
throw $e990;
}
};
var anf_arg992 = R.makeFunction($temp_lam981);
$step974 = 1;
$al979 = L[431];
$field993 = R.getColonFieldLoc(anf_method_obj991,"foldl",L[431]);
if(R.isMethod($field993)) {
$ans978 = $field993.full_meth(anf_method_obj991,anf_arg992,(""));
} else {
if(!(R.isFunction($field993))) {
R.ffi.throwNonFunApp(L[431],$field993);
}
$ans978 = $field993.app(anf_arg992,(""));
}
break;
case 1: var anf_arg994 = $ans978;
$step974 = 2;
$al979 = L[432];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al979,_plus6);
}
$ans978 = _plus6.app(("[list-set: "),anf_arg994);
break;
case 2: var anf_arg995 = $ans978;
$step974 = 3;
$al979 = L[432];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al979,_plus6);
}
$ans978 = _plus6.app(anf_arg995,("]"));
break;
case 3: ++R.GAS;
return $ans978;
default: throw "No case numbered " + $step974 + " in $temp_full975";
}
}
} catch($e996) {
if(R.isCont($e996) && ($step974 !== 3)) {
$e996.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al979,$temp_full975,$step974,[self976,torepr977],[]);
}
if(R.isPyretException($e996)) {
$e996.pyretStack.push($al979);
}
throw $e996;
}
};
var anf_variant_member1374 = R.makeMethod1($temp_full975);
var $temp_full998 = function($self999) {
var $step997 = 0;
var $ans1000 = D;
var $al1001 = L[438];
try {
if(R.isActivationRecord($self999)) {
$step997 = $self999.step;
$al1001 = $self999.from;
$ans1000 = $self999.ans;
self999 = $self999.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[438],1,$t);
}
var self999 = $self999;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step997) {
case 0: $step997 = 1;
$al1001 = L[434];
$field1002 = R.getColonFieldLoc(self999,"to-list",L[434]);
if(R.isMethod($field1002)) {
$ans1000 = $field1002.full_meth(self999);
} else {
if(!(R.isFunction($field1002))) {
R.ffi.throwNonFunApp(L[434],$field1002);
}
$ans1000 = $field1002.app();
}
break;
case 1: var anf_method_obj1003 = $ans1000;
var anf_arg1004 = G(VS27,"vs-value",L[435]);
$step997 = 2;
$al1001 = L[436];
$field1005 = R.getColonFieldLoc(anf_method_obj1003,"map",L[436]);
if(R.isMethod($field1005)) {
$ans1000 = $field1005.full_meth(anf_method_obj1003,anf_arg1004);
} else {
if(!(R.isFunction($field1005))) {
R.ffi.throwNonFunApp(L[436],$field1005);
}
$ans1000 = $field1005.app(anf_arg1004);
}
break;
case 2: var anf_arg1006 = $ans1000;
$step997 = 3;
$al1001 = L[437];
$field1007 = R.getColonFieldLoc(VS27,"vs-collection",L[437]);
if(R.isMethod($field1007)) {
$ans1000 = $field1007.full_meth(VS27,("list-set"),anf_arg1006);
} else {
if(!(R.isFunction($field1007))) {
R.ffi.throwNonFunApp(L[437],$field1007);
}
$ans1000 = $field1007.app(("list-set"),anf_arg1006);
}
break;
case 3: ++R.GAS;
return $ans1000;
default: throw "No case numbered " + $step997 + " in $temp_full998";
}
}
} catch($e1008) {
if(R.isCont($e1008) && ($step997 !== 3)) {
$e1008.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1001,$temp_full998,$step997,[self999],[]);
}
if(R.isPyretException($e1008)) {
$e1008.pyretStack.push($al1001);
}
throw $e1008;
}
};
var anf_variant_member1375 = R.makeMethod0($temp_full998);
var $temp_full1010 = function($self1011,$f1012,$base1013) {
var $step1009 = 0;
var $ans1014 = D;
var $al1015 = L[442];
try {
if(R.isActivationRecord($self1011)) {
$step1009 = $self1011.step;
$al1015 = $self1011.from;
$ans1014 = $self1011.ans;
self1011 = $self1011.args[0];
f1012 = $self1011.args[1];
base1013 = $self1011.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[442],3,$t);
}
var self1011 = $self1011;
var f1012 = $f1012;
var base1013 = $base1013;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1009) {
case 0: $step1009 = 1;
$al1015 = L[441];
R._checkAnn(L[441],R.Function,f1012);
break;
case 1: var anf_arg1016 = G(self1011,"elems",L[439]);
$step1009 = 2;
$al1015 = L[440];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1015,fold903);
}
$ans1014 = fold903.app(f1012,base1013,anf_arg1016);
break;
case 2: ++R.GAS;
return $ans1014;
default: throw "No case numbered " + $step1009 + " in $temp_full1010";
}
}
} catch($e1017) {
if(R.isCont($e1017) && ($step1009 !== 2)) {
$e1017.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1015,$temp_full1010,$step1009,[self1011,f1012,base1013],[]);
}
if(R.isPyretException($e1017)) {
$e1017.pyretStack.push($al1015);
}
throw $e1017;
}
};
var anf_variant_member1376 = R.makeMethod2($temp_full1010);
var $temp_full1019 = function($self1020,$elem1021) {
var $step1018 = 0;
var $ans1022 = D;
var $al1023 = L[446];
try {
if(R.isActivationRecord($self1020)) {
$step1018 = $self1020.step;
$al1023 = $self1020.from;
$ans1022 = $self1020.ans;
self1020 = $self1020.args[0];
elem1021 = $self1020.args[1];
ann_check_temp1026 = $self1020.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[446],2,$t);
}
var self1020 = $self1020;
var elem1021 = $elem1021;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1018) {
case 0: var anf_method_obj1024 = G(self1020,"elems",L[443]);
$step1018 = 1;
$al1023 = L[444];
$field1025 = R.getColonFieldLoc(anf_method_obj1024,"member",L[444]);
if(R.isMethod($field1025)) {
$ans1022 = $field1025.full_meth(anf_method_obj1024,elem1021);
} else {
if(!(R.isFunction($field1025))) {
R.ffi.throwNonFunApp(L[444],$field1025);
}
$ans1022 = $field1025.app(elem1021);
}
break;
case 1: var ann_check_temp1026 = $ans1022;
$step1018 = 2;
$al1023 = L[445];
R._checkAnn(L[445],$type$Boolean3,ann_check_temp1026);
break;
case 2: $step1018 = 3;
$ans1022 = ann_check_temp1026;
break;
case 3: ++R.GAS;
return $ans1022;
default: throw "No case numbered " + $step1018 + " in $temp_full1019";
}
}
} catch($e1027) {
if(R.isCont($e1027) && ($step1018 !== 3)) {
$e1027.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1023,$temp_full1019,$step1018,[self1020,elem1021],[ann_check_temp1026]);
}
if(R.isPyretException($e1027)) {
$e1027.pyretStack.push($al1023);
}
throw $e1027;
}
};
var anf_variant_member1377 = R.makeMethod1($temp_full1019);
var $temp_full1029 = function($self1030,$elem1031) {
var $step1028 = 0;
var $ans1032 = D;
var $al1033 = L[455];
try {
if(R.isActivationRecord($self1030)) {
$step1028 = $self1030.step;
$al1033 = $self1030.from;
$ans1032 = $self1030.ans;
self1030 = $self1030.args[0];
elem1031 = $self1030.args[1];
ann_check_temp1039 = $self1030.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[455],2,$t);
}
var self1030 = $self1030;
var elem1031 = $elem1031;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1028) {
case 0: var anf_method_obj1034 = G(self1030,"elems",L[447]);
$step1028 = 1;
$al1033 = L[448];
$field1035 = R.getColonFieldLoc(anf_method_obj1034,"member",L[448]);
if(R.isMethod($field1035)) {
$ans1032 = $field1035.full_meth(anf_method_obj1034,elem1031);
} else {
if(!(R.isFunction($field1035))) {
R.ffi.throwNonFunApp(L[448],$field1035);
}
$ans1032 = $field1035.app(elem1031);
}
break;
case 1: var anf_arg1036 = $ans1032;
$al1033 = L[449];
var anf_if1040 = R.checkWrapBoolean(anf_arg1036);
if(R.isPyretTrue(anf_if1040)) {
$step1028 = 2;
} else {
$step1028 = 3;
}
break;
case 2: $step1028 = 5;
$ans1032 = self1030;
break;
case 3: var anf_arg1037 = G(self1030,"elems",L[450]);
$step1028 = 4;
$al1033 = L[453];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1033,link312);
}
$ans1032 = link312.app(elem1031,anf_arg1037);
break;
case 4: var anf_arg1038 = $ans1032;
$step1028 = 5;
$al1033 = L[452];
if(!(R.isFunction(list$set919.$var === D?U(L[451],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1033,list$set919.$var === D?U(L[451],"list-set"):list$set919.$var);
}
$ans1032 = list$set919.$var === D?U(L[451],"list-set"):list$set919.$var.app(anf_arg1038);
break;
case 5: var ann_check_temp1039 = $ans1032;
$step1028 = 6;
$al1033 = L[454];
R._checkAnn(L[454],Set869,ann_check_temp1039);
break;
case 6: $step1028 = 7;
$ans1032 = ann_check_temp1039;
break;
case 7: ++R.GAS;
return $ans1032;
default: throw "No case numbered " + $step1028 + " in $temp_full1029";
}
}
} catch($e1041) {
if(R.isCont($e1041) && ($step1028 !== 7)) {
$e1041.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1033,$temp_full1029,$step1028,[self1030,elem1031],[ann_check_temp1039]);
}
if(R.isPyretException($e1041)) {
$e1041.pyretStack.push($al1033);
}
throw $e1041;
}
};
var anf_variant_member1378 = R.makeMethod1($temp_full1029);
var $temp_full1043 = function($self1044,$elem1045) {
var $step1042 = 0;
var $ans1046 = D;
var $al1047 = L[461];
try {
if(R.isActivationRecord($self1044)) {
$step1042 = $self1044.step;
$al1047 = $self1044.from;
$ans1046 = $self1044.ans;
self1044 = $self1044.args[0];
elem1045 = $self1044.args[1];
ann_check_temp1051 = $self1044.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[461],2,$t);
}
var self1044 = $self1044;
var elem1045 = $elem1045;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1042) {
case 0: var anf_method_obj1048 = G(self1044,"elems",L[456]);
$step1042 = 1;
$al1047 = L[457];
$field1049 = R.getColonFieldLoc(anf_method_obj1048,"remove",L[457]);
if(R.isMethod($field1049)) {
$ans1046 = $field1049.full_meth(anf_method_obj1048,elem1045);
} else {
if(!(R.isFunction($field1049))) {
R.ffi.throwNonFunApp(L[457],$field1049);
}
$ans1046 = $field1049.app(elem1045);
}
break;
case 1: var anf_arg1050 = $ans1046;
$step1042 = 2;
$al1047 = L[460];
if(!(R.isFunction(list$set919.$var === D?U(L[458],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1047,list$set919.$var === D?U(L[458],"list-set"):list$set919.$var);
}
$ans1046 = list$set919.$var === D?U(L[458],"list-set"):list$set919.$var.app(anf_arg1050);
break;
case 2: var ann_check_temp1051 = $ans1046;
$step1042 = 3;
$al1047 = L[459];
R._checkAnn(L[459],Set869,ann_check_temp1051);
break;
case 3: $step1042 = 4;
$ans1046 = ann_check_temp1051;
break;
case 4: ++R.GAS;
return $ans1046;
default: throw "No case numbered " + $step1042 + " in $temp_full1043";
}
}
} catch($e1052) {
if(R.isCont($e1052) && ($step1042 !== 4)) {
$e1052.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1047,$temp_full1043,$step1042,[self1044,elem1045],[ann_check_temp1051]);
}
if(R.isPyretException($e1052)) {
$e1052.pyretStack.push($al1047);
}
throw $e1052;
}
};
var anf_variant_member1379 = R.makeMethod1($temp_full1043);
var $temp_full1054 = function($self1055) {
var $step1053 = 0;
var $ans1056 = D;
var $al1057 = L[464];
try {
if(R.isActivationRecord($self1055)) {
$step1053 = $self1055.step;
$al1057 = $self1055.from;
$ans1056 = $self1055.ans;
self1055 = $self1055.args[0];
ann_check_temp1058 = $self1055.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[464],1,$t);
}
var self1055 = $self1055;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1053) {
case 0: var ann_check_temp1058 = G(self1055,"elems",L[462]);
$step1053 = 1;
$al1057 = L[463];
R._checkAnn(L[463],R.getDotAnn(L[463],"lists",lists31,"List"),ann_check_temp1058);
break;
case 1: $step1053 = 2;
$ans1056 = ann_check_temp1058;
break;
case 2: ++R.GAS;
return $ans1056;
default: throw "No case numbered " + $step1053 + " in $temp_full1054";
}
}
} catch($e1059) {
if(R.isCont($e1059) && ($step1053 !== 2)) {
$e1059.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1057,$temp_full1054,$step1053,[self1055],[ann_check_temp1058]);
}
if(R.isPyretException($e1059)) {
$e1059.pyretStack.push($al1057);
}
throw $e1059;
}
};
var anf_variant_member1380 = R.makeMethod0($temp_full1054);
var $temp_full1061 = function($self1062,$other1063) {
var $step1060 = 0;
var $ans1064 = D;
var $al1065 = L[471];
try {
if(R.isActivationRecord($self1062)) {
$step1060 = $self1062.step;
$al1065 = $self1062.from;
$ans1064 = $self1062.ans;
self1062 = $self1062.args[0];
other1063 = $self1062.args[1];
ann_check_temp1076 = $self1062.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[471],2,$t);
}
var self1062 = $self1062;
var other1063 = $other1063;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1060) {
case 0: $step1060 = 1;
$al1065 = L[469];
R._checkAnn(L[469],Set869,self1062);
break;
case 1: $step1060 = 2;
$al1065 = L[470];
R._checkAnn(L[470],Set869,other1063);
break;
case 2: var $temp_lam1067 = function($u1068,$elem1069) {
var $step1066 = 0;
var $ans1070 = D;
var $al1071 = L[466];
try {
if(R.isActivationRecord($u1068)) {
$step1066 = $u1068.step;
$al1071 = $u1068.from;
$ans1070 = $u1068.ans;
u1068 = $u1068.args[0];
elem1069 = $u1068.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[466],2,$t);
}
var u1068 = $u1068;
var elem1069 = $elem1069;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1066) {
case 0: $step1066 = 1;
$al1071 = L[465];
$field1072 = R.getColonFieldLoc(u1068,"add",L[465]);
if(R.isMethod($field1072)) {
$ans1070 = $field1072.full_meth(u1068,elem1069);
} else {
if(!(R.isFunction($field1072))) {
R.ffi.throwNonFunApp(L[465],$field1072);
}
$ans1070 = $field1072.app(elem1069);
}
break;
case 1: ++R.GAS;
return $ans1070;
default: throw "No case numbered " + $step1066 + " in $temp_lam1067";
}
}
} catch($e1073) {
if(R.isCont($e1073) && ($step1066 !== 1)) {
$e1073.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1071,$temp_lam1067,$step1066,[u1068,elem1069],[]);
}
if(R.isPyretException($e1073)) {
$e1073.pyretStack.push($al1071);
}
throw $e1073;
}
};
var anf_arg1074 = R.makeFunction($temp_lam1067);
$step1060 = 3;
$al1065 = L[467];
$field1075 = R.getColonFieldLoc(other1063,"fold",L[467]);
if(R.isMethod($field1075)) {
$ans1064 = $field1075.full_meth(other1063,anf_arg1074,self1062);
} else {
if(!(R.isFunction($field1075))) {
R.ffi.throwNonFunApp(L[467],$field1075);
}
$ans1064 = $field1075.app(anf_arg1074,self1062);
}
break;
case 3: var ann_check_temp1076 = $ans1064;
$step1060 = 4;
$al1065 = L[468];
R._checkAnn(L[468],Set869,ann_check_temp1076);
break;
case 4: $step1060 = 5;
$ans1064 = ann_check_temp1076;
break;
case 5: ++R.GAS;
return $ans1064;
default: throw "No case numbered " + $step1060 + " in $temp_full1061";
}
}
} catch($e1077) {
if(R.isCont($e1077) && ($step1060 !== 5)) {
$e1077.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1065,$temp_full1061,$step1060,[self1062,other1063],[ann_check_temp1076]);
}
if(R.isPyretException($e1077)) {
$e1077.pyretStack.push($al1065);
}
throw $e1077;
}
};
var anf_variant_member1381 = R.makeMethod1($temp_full1061);
var $temp_full1079 = function($self1080,$other1081) {
var $step1078 = 0;
var $ans1082 = D;
var $al1083 = L[482];
try {
if(R.isActivationRecord($self1080)) {
$step1078 = $self1080.step;
$al1083 = $self1080.from;
$ans1082 = $self1080.ans;
self1080 = $self1080.args[0];
other1081 = $self1080.args[1];
ann_check_temp1099 = $self1080.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[482],2,$t);
}
var self1080 = $self1080;
var other1081 = $other1081;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1078) {
case 0: $step1078 = 1;
$al1083 = L[480];
R._checkAnn(L[480],Set869,self1080);
break;
case 1: $step1078 = 2;
$al1083 = L[481];
R._checkAnn(L[481],Set869,other1081);
break;
case 2: var $temp_lam1085 = function($elems1086,$elem1087) {
var $step1084 = 0;
var $ans1088 = D;
var $al1089 = L[474];
try {
if(R.isActivationRecord($elems1086)) {
$step1084 = $elems1086.step;
$al1089 = $elems1086.from;
$ans1088 = $elems1086.ans;
elems1086 = $elems1086.args[0];
elem1087 = $elems1086.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[474],2,$t);
}
var elems1086 = $elems1086;
var elem1087 = $elem1087;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1084) {
case 0: $step1084 = 1;
$al1089 = L[472];
$field1090 = R.getColonFieldLoc(other1081,"member",L[472]);
if(R.isMethod($field1090)) {
$ans1088 = $field1090.full_meth(other1081,elem1087);
} else {
if(!(R.isFunction($field1090))) {
R.ffi.throwNonFunApp(L[472],$field1090);
}
$ans1088 = $field1090.app(elem1087);
}
break;
case 1: var anf_arg1091 = $ans1088;
$al1089 = L[472];
var anf_if1093 = R.checkWrapBoolean(anf_arg1091);
if(R.isPyretTrue(anf_if1093)) {
$step1084 = 2;
} else {
$step1084 = 3;
}
break;
case 2: $step1084 = 4;
$ans1088 = elems1086;
break;
case 3: $step1084 = 4;
$al1089 = L[473];
$field1092 = R.getColonFieldLoc(elems1086,"remove",L[473]);
if(R.isMethod($field1092)) {
$ans1088 = $field1092.full_meth(elems1086,elem1087);
} else {
if(!(R.isFunction($field1092))) {
R.ffi.throwNonFunApp(L[473],$field1092);
}
$ans1088 = $field1092.app(elem1087);
}
break;
case 4: ++R.GAS;
return $ans1088;
default: throw "No case numbered " + $step1084 + " in $temp_lam1085";
}
}
} catch($e1094) {
if(R.isCont($e1094) && ($step1084 !== 4)) {
$e1094.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1089,$temp_lam1085,$step1084,[elems1086,elem1087],[]);
}
if(R.isPyretException($e1094)) {
$e1094.pyretStack.push($al1089);
}
throw $e1094;
}
};
var anf_arg1095 = R.makeFunction($temp_lam1085);
var anf_arg1096 = G(self1080,"elems",L[475]);
var anf_arg1097 = G(self1080,"elems",L[476]);
$step1078 = 3;
$al1083 = L[474];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1083,fold903);
}
$ans1082 = fold903.app(anf_arg1095,anf_arg1096,anf_arg1097);
break;
case 3: var new$elems1098 = $ans1082;
$step1078 = 4;
$al1083 = L[479];
if(!(R.isFunction(list$set919.$var === D?U(L[477],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1083,list$set919.$var === D?U(L[477],"list-set"):list$set919.$var);
}
$ans1082 = list$set919.$var === D?U(L[477],"list-set"):list$set919.$var.app(new$elems1098);
break;
case 4: var ann_check_temp1099 = $ans1082;
$step1078 = 5;
$al1083 = L[478];
R._checkAnn(L[478],Set869,ann_check_temp1099);
break;
case 5: $step1078 = 6;
$ans1082 = ann_check_temp1099;
break;
case 6: ++R.GAS;
return $ans1082;
default: throw "No case numbered " + $step1078 + " in $temp_full1079";
}
}
} catch($e1100) {
if(R.isCont($e1100) && ($step1078 !== 6)) {
$e1100.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1083,$temp_full1079,$step1078,[self1080,other1081],[ann_check_temp1099]);
}
if(R.isPyretException($e1100)) {
$e1100.pyretStack.push($al1083);
}
throw $e1100;
}
};
var anf_variant_member1382 = R.makeMethod1($temp_full1079);
var $temp_full1102 = function($self1103,$other1104) {
var $step1101 = 0;
var $ans1105 = D;
var $al1106 = L[488];
try {
if(R.isActivationRecord($self1103)) {
$step1101 = $self1103.step;
$al1106 = $self1103.from;
$ans1105 = $self1103.ans;
self1103 = $self1103.args[0];
other1104 = $self1103.args[1];
ann_check_temp1109 = $self1103.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[488],2,$t);
}
var self1103 = $self1103;
var other1104 = $other1104;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1101) {
case 0: $step1101 = 1;
$al1106 = L[486];
R._checkAnn(L[486],Set869,self1103);
break;
case 1: $step1101 = 2;
$al1106 = L[487];
R._checkAnn(L[487],Set869,other1104);
break;
case 2: var anf_arg1107 = G(other1104,"member",L[483]);
$step1101 = 3;
$al1106 = L[484];
$field1108 = R.getColonFieldLoc(self1103,"any",L[484]);
if(R.isMethod($field1108)) {
$ans1105 = $field1108.full_meth(self1103,anf_arg1107);
} else {
if(!(R.isFunction($field1108))) {
R.ffi.throwNonFunApp(L[484],$field1108);
}
$ans1105 = $field1108.app(anf_arg1107);
}
break;
case 3: var ann_check_temp1109 = $ans1105;
$step1101 = 4;
$al1106 = L[485];
R._checkAnn(L[485],$type$Boolean3,ann_check_temp1109);
break;
case 4: $step1101 = 5;
$ans1105 = ann_check_temp1109;
break;
case 5: ++R.GAS;
return $ans1105;
default: throw "No case numbered " + $step1101 + " in $temp_full1102";
}
}
} catch($e1110) {
if(R.isCont($e1110) && ($step1101 !== 5)) {
$e1110.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1106,$temp_full1102,$step1101,[self1103,other1104],[ann_check_temp1109]);
}
if(R.isPyretException($e1110)) {
$e1110.pyretStack.push($al1106);
}
throw $e1110;
}
};
var anf_variant_member1383 = R.makeMethod1($temp_full1102);
var $temp_full1112 = function($self1113,$other1114) {
var $step1111 = 0;
var $ans1115 = D;
var $al1116 = L[499];
try {
if(R.isActivationRecord($self1113)) {
$step1111 = $self1113.step;
$al1116 = $self1113.from;
$ans1115 = $self1113.ans;
self1113 = $self1113.args[0];
other1114 = $self1113.args[1];
ann_check_temp1132 = $self1113.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[499],2,$t);
}
var self1113 = $self1113;
var other1114 = $other1114;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1111) {
case 0: $step1111 = 1;
$al1116 = L[497];
R._checkAnn(L[497],Set869,self1113);
break;
case 1: $step1111 = 2;
$al1116 = L[498];
R._checkAnn(L[498],Set869,other1114);
break;
case 2: var $temp_lam1118 = function($elems1119,$elem1120) {
var $step1117 = 0;
var $ans1121 = D;
var $al1122 = L[491];
try {
if(R.isActivationRecord($elems1119)) {
$step1117 = $elems1119.step;
$al1122 = $elems1119.from;
$ans1121 = $elems1119.ans;
elems1119 = $elems1119.args[0];
elem1120 = $elems1119.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[491],2,$t);
}
var elems1119 = $elems1119;
var elem1120 = $elem1120;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1117) {
case 0: $step1117 = 1;
$al1122 = L[489];
$field1123 = R.getColonFieldLoc(other1114,"member",L[489]);
if(R.isMethod($field1123)) {
$ans1121 = $field1123.full_meth(other1114,elem1120);
} else {
if(!(R.isFunction($field1123))) {
R.ffi.throwNonFunApp(L[489],$field1123);
}
$ans1121 = $field1123.app(elem1120);
}
break;
case 1: var anf_arg1124 = $ans1121;
$al1122 = L[489];
var anf_if1126 = R.checkWrapBoolean(anf_arg1124);
if(R.isPyretTrue(anf_if1126)) {
$step1117 = 2;
} else {
$step1117 = 3;
}
break;
case 2: $step1117 = 4;
$al1122 = L[490];
$field1125 = R.getColonFieldLoc(elems1119,"remove",L[490]);
if(R.isMethod($field1125)) {
$ans1121 = $field1125.full_meth(elems1119,elem1120);
} else {
if(!(R.isFunction($field1125))) {
R.ffi.throwNonFunApp(L[490],$field1125);
}
$ans1121 = $field1125.app(elem1120);
}
break;
case 3: $step1117 = 4;
$ans1121 = elems1119;
break;
case 4: ++R.GAS;
return $ans1121;
default: throw "No case numbered " + $step1117 + " in $temp_lam1118";
}
}
} catch($e1127) {
if(R.isCont($e1127) && ($step1117 !== 4)) {
$e1127.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1122,$temp_lam1118,$step1117,[elems1119,elem1120],[]);
}
if(R.isPyretException($e1127)) {
$e1127.pyretStack.push($al1122);
}
throw $e1127;
}
};
var anf_arg1128 = R.makeFunction($temp_lam1118);
var anf_arg1129 = G(self1113,"elems",L[492]);
var anf_arg1130 = G(self1113,"elems",L[493]);
$step1111 = 3;
$al1116 = L[491];
if(!(R.isFunction(fold903))) {
R.ffi.throwNonFunApp($al1116,fold903);
}
$ans1115 = fold903.app(anf_arg1128,anf_arg1129,anf_arg1130);
break;
case 3: var new$elems1131 = $ans1115;
$step1111 = 4;
$al1116 = L[496];
if(!(R.isFunction(list$set919.$var === D?U(L[494],"list-set"):list$set919.$var))) {
R.ffi.throwNonFunApp($al1116,list$set919.$var === D?U(L[494],"list-set"):list$set919.$var);
}
$ans1115 = list$set919.$var === D?U(L[494],"list-set"):list$set919.$var.app(new$elems1131);
break;
case 4: var ann_check_temp1132 = $ans1115;
$step1111 = 5;
$al1116 = L[495];
R._checkAnn(L[495],Set869,ann_check_temp1132);
break;
case 5: $step1111 = 6;
$ans1115 = ann_check_temp1132;
break;
case 6: ++R.GAS;
return $ans1115;
default: throw "No case numbered " + $step1111 + " in $temp_full1112";
}
}
} catch($e1133) {
if(R.isCont($e1133) && ($step1111 !== 6)) {
$e1133.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1116,$temp_full1112,$step1111,[self1113,other1114],[ann_check_temp1132]);
}
if(R.isPyretException($e1133)) {
$e1133.pyretStack.push($al1116);
}
throw $e1133;
}
};
var anf_variant_member1384 = R.makeMethod1($temp_full1112);
var $temp_full1135 = function($self1136) {
var $step1134 = 0;
var $ans1137 = D;
var $al1138 = L[504];
try {
if(R.isActivationRecord($self1136)) {
$step1134 = $self1136.step;
$al1138 = $self1136.from;
$ans1137 = $self1136.ans;
self1136 = $self1136.args[0];
ann_check_temp1141 = $self1136.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[504],1,$t);
}
var self1136 = $self1136;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1134) {
case 0: $step1134 = 1;
$al1138 = L[503];
R._checkAnn(L[503],Set869,self1136);
break;
case 1: var anf_method_obj1139 = G(self1136,"elems",L[500]);
$step1134 = 2;
$al1138 = L[501];
$field1140 = R.getColonFieldLoc(anf_method_obj1139,"length",L[501]);
if(R.isMethod($field1140)) {
$ans1137 = $field1140.full_meth(anf_method_obj1139);
} else {
if(!(R.isFunction($field1140))) {
R.ffi.throwNonFunApp(L[501],$field1140);
}
$ans1137 = $field1140.app();
}
break;
case 2: var ann_check_temp1141 = $ans1137;
$step1134 = 3;
$al1138 = L[502];
R._checkAnn(L[502],$type$Number2,ann_check_temp1141);
break;
case 3: $step1134 = 4;
$ans1137 = ann_check_temp1141;
break;
case 4: ++R.GAS;
return $ans1137;
default: throw "No case numbered " + $step1134 + " in $temp_full1135";
}
}
} catch($e1142) {
if(R.isCont($e1142) && ($step1134 !== 4)) {
$e1142.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1138,$temp_full1135,$step1134,[self1136],[ann_check_temp1141]);
}
if(R.isPyretException($e1142)) {
$e1142.pyretStack.push($al1138);
}
throw $e1142;
}
};
var anf_variant_member1385 = R.makeMethod0($temp_full1135);
var $temp_full1144 = function($self1145) {
var $step1143 = 0;
var $ans1146 = D;
var $al1147 = L[507];
try {
if(R.isActivationRecord($self1145)) {
$step1143 = $self1145.step;
$al1147 = $self1145.from;
$ans1146 = $self1145.ans;
self1145 = $self1145.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[507],1,$t);
}
var self1145 = $self1145;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1143) {
case 0: var anf_arg1149 = G(self1145,"elems",L[505]);
$step1143 = 1;
$al1147 = L[506];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1147,is$empty1148);
}
$ans1146 = is$empty1148.app(anf_arg1149);
break;
case 1: ++R.GAS;
return $ans1146;
default: throw "No case numbered " + $step1143 + " in $temp_full1144";
}
}
} catch($e1150) {
if(R.isCont($e1150) && ($step1143 !== 1)) {
$e1150.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1147,$temp_full1144,$step1143,[self1145],[]);
}
if(R.isPyretException($e1150)) {
$e1150.pyretStack.push($al1147);
}
throw $e1150;
}
};
var anf_variant_member1386 = R.makeMethod0($temp_full1144);
var $temp_full1152 = function($self1153,$f1154) {
var $step1151 = 0;
var $ans1155 = D;
var $al1156 = L[511];
try {
if(R.isActivationRecord($self1153)) {
$step1151 = $self1153.step;
$al1156 = $self1153.from;
$ans1155 = $self1153.ans;
self1153 = $self1153.args[0];
f1154 = $self1153.args[1];
ann_check_temp1159 = $self1153.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[511],2,$t);
}
var self1153 = $self1153;
var f1154 = $f1154;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1151) {
case 0: var anf_method_obj1157 = G(self1153,"elems",L[508]);
$step1151 = 1;
$al1156 = L[509];
$field1158 = R.getColonFieldLoc(anf_method_obj1157,"all",L[509]);
if(R.isMethod($field1158)) {
$ans1155 = $field1158.full_meth(anf_method_obj1157,f1154);
} else {
if(!(R.isFunction($field1158))) {
R.ffi.throwNonFunApp(L[509],$field1158);
}
$ans1155 = $field1158.app(f1154);
}
break;
case 1: var ann_check_temp1159 = $ans1155;
$step1151 = 2;
$al1156 = L[510];
R._checkAnn(L[510],$type$Boolean3,ann_check_temp1159);
break;
case 2: $step1151 = 3;
$ans1155 = ann_check_temp1159;
break;
case 3: ++R.GAS;
return $ans1155;
default: throw "No case numbered " + $step1151 + " in $temp_full1152";
}
}
} catch($e1160) {
if(R.isCont($e1160) && ($step1151 !== 3)) {
$e1160.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1156,$temp_full1152,$step1151,[self1153,f1154],[ann_check_temp1159]);
}
if(R.isPyretException($e1160)) {
$e1160.pyretStack.push($al1156);
}
throw $e1160;
}
};
var anf_variant_member1387 = R.makeMethod1($temp_full1152);
var $temp_full1162 = function($self1163,$f1164) {
var $step1161 = 0;
var $ans1165 = D;
var $al1166 = L[515];
try {
if(R.isActivationRecord($self1163)) {
$step1161 = $self1163.step;
$al1166 = $self1163.from;
$ans1165 = $self1163.ans;
self1163 = $self1163.args[0];
f1164 = $self1163.args[1];
ann_check_temp1169 = $self1163.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[515],2,$t);
}
var self1163 = $self1163;
var f1164 = $f1164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1161) {
case 0: var anf_method_obj1167 = G(self1163,"elems",L[512]);
$step1161 = 1;
$al1166 = L[513];
$field1168 = R.getColonFieldLoc(anf_method_obj1167,"any",L[513]);
if(R.isMethod($field1168)) {
$ans1165 = $field1168.full_meth(anf_method_obj1167,f1164);
} else {
if(!(R.isFunction($field1168))) {
R.ffi.throwNonFunApp(L[513],$field1168);
}
$ans1165 = $field1168.app(f1164);
}
break;
case 1: var ann_check_temp1169 = $ans1165;
$step1161 = 2;
$al1166 = L[514];
R._checkAnn(L[514],$type$Boolean3,ann_check_temp1169);
break;
case 2: $step1161 = 3;
$ans1165 = ann_check_temp1169;
break;
case 3: ++R.GAS;
return $ans1165;
default: throw "No case numbered " + $step1161 + " in $temp_full1162";
}
}
} catch($e1170) {
if(R.isCont($e1170) && ($step1161 !== 3)) {
$e1170.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1166,$temp_full1162,$step1161,[self1163,f1164],[ann_check_temp1169]);
}
if(R.isPyretException($e1170)) {
$e1170.pyretStack.push($al1166);
}
throw $e1170;
}
};
var anf_variant_member1388 = R.makeMethod1($temp_full1162);
var $temp_full1172 = function($self1173) {
var $step1171 = 0;
var $ans1174 = D;
var $al1175 = L[525];
try {
if(R.isActivationRecord($self1173)) {
$step1171 = $self1173.step;
$al1175 = $self1173.from;
$ans1174 = $self1173.ans;
self1173 = $self1173.args[0];
v1178 = $self1173.vars[0];
cases1177 = $self1173.vars[1];
t1176 = $self1173.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[525],1,$t);
}
var self1173 = $self1173;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1171) {
case 0: var t1176 = G(self1173,"elems",L[516]);
var cases1177 = t1176;
$step1171 = 1;
$al1175 = L[524];
R._checkAnn(L[524],AVLTree99,cases1177);
break;
case 1: var $cases_dispatch1186 = {"leaf":2,
"branch":3};
$al1175 = L[523];
$step1171 = $cases_dispatch1186[cases1177.$name] || 6;
break;
case 2: if(cases1177.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[517],false);
}
$step1171 = 7;
$ans1174 = pick$none916;
break;
case 3: if(cases1177.$arity >= 0) {
if(4 !== cases1177.$arity) {
R.ffi.throwCasesArityErrorC(L[522],4,cases1177.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[522],true);
}
var $fn818 = cases1177.$constructor.$fieldNames;
var v1178 = R.derefField(cases1177.dict[$fn818[0]],cases1177.$mut_fields_mask[0],false);
R.derefField(cases1177.dict[$fn818[1]],cases1177.$mut_fields_mask[1],false);
R.derefField(cases1177.dict[$fn818[2]],cases1177.$mut_fields_mask[2],false);
R.derefField(cases1177.dict[$fn818[3]],cases1177.$mut_fields_mask[3],false);
$step1171 = 4;
$al1175 = L[518];
$field1179 = R.getColonFieldLoc(t1176,"remove",L[518]);
if(R.isMethod($field1179)) {
$ans1174 = $field1179.full_meth(t1176,v1178);
} else {
if(!(R.isFunction($field1179))) {
R.ffi.throwNonFunApp(L[518],$field1179);
}
$ans1174 = $field1179.app(v1178);
}
break;
case 4: var anf_arg1181 = $ans1174;
$step1171 = 5;
$al1175 = L[521];
if(!(R.isFunction(tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1175,tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var);
}
$ans1174 = tree$set1180.$var === D?U(L[519],"tree-set"):tree$set1180.$var.app(anf_arg1181);
break;
case 5: var anf_arg1182 = $ans1174;
$step1171 = 7;
$al1175 = L[520];
if(!(R.isFunction(pick$some920))) {
R.ffi.throwNonFunApp($al1175,pick$some920);
}
$ans1174 = pick$some920.app(v1178,anf_arg1182);
break;
case 6: $step1171 = 7;
$al1175 = L[523];
$ans1174 = R.throwNoCasesMatched(L[523],cases1177);
break;
case 7: ++R.GAS;
return $ans1174;
default: throw "No case numbered " + $step1171 + " in $temp_full1172";
}
}
} catch($e1187) {
if(R.isCont($e1187) && ($step1171 !== 7)) {
$e1187.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1175,$temp_full1172,$step1171,[self1173],[v1178,cases1177,t1176]);
}
if(R.isPyretException($e1187)) {
$e1187.pyretStack.push($al1175);
}
throw $e1187;
}
};
var anf_variant_member1398 = R.makeMethod0($temp_full1172);
var $temp_full1189 = function($self1190,$tostring1191) {
var $step1188 = 0;
var $ans1192 = D;
var $al1193 = L[534];
try {
if(R.isActivationRecord($self1190)) {
$step1188 = $self1190.step;
$al1193 = $self1190.from;
$ans1192 = $self1190.ans;
self1190 = $self1190.args[0];
tostring1191 = $self1190.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[534],2,$t);
}
var self1190 = $self1190;
var tostring1191 = $tostring1191;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1188) {
case 0: var anf_method_obj1205 = G(self1190,"elems",L[526]);
var $temp_lam1195 = function($acc1196,$elem1197) {
var $step1194 = 0;
var $ans1198 = D;
var $al1199 = L[531];
try {
if(R.isActivationRecord($acc1196)) {
$step1194 = $acc1196.step;
$al1199 = $acc1196.from;
$ans1198 = $acc1196.ans;
acc1196 = $acc1196.args[0];
elem1197 = $acc1196.args[1];
anf_arg1201 = $acc1196.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[531],2,$t);
}
var acc1196 = $acc1196;
var elem1197 = $elem1197;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1194) {
case 0: $step1194 = 1;
$al1199 = L[527];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1199,equal$always4);
}
$ans1198 = equal$always4.app(acc1196,(""));
break;
case 1: var anf_arg1200 = $ans1198;
$al1199 = L[527];
var anf_if1203 = R.checkWrapBoolean(anf_arg1200);
if(R.isPyretTrue(anf_if1203)) {
$step1194 = 2;
} else {
$step1194 = 3;
}
break;
case 2: $step1194 = 6;
$al1199 = L[528];
if(!(R.isFunction(tostring1191))) {
R.ffi.throwNonFunApp($al1199,tostring1191);
}
$ans1198 = tostring1191.app(elem1197);
break;
case 3: $step1194 = 4;
$al1199 = L[529];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1199,_plus6);
}
$ans1198 = _plus6.app(acc1196,(", "));
break;
case 4: var anf_arg1201 = $ans1198;
$step1194 = 5;
$al1199 = L[530];
if(!(R.isFunction(tostring1191))) {
R.ffi.throwNonFunApp($al1199,tostring1191);
}
$ans1198 = tostring1191.app(elem1197);
break;
case 5: var anf_arg1202 = $ans1198;
$step1194 = 6;
$al1199 = L[529];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1199,_plus6);
}
$ans1198 = _plus6.app(anf_arg1201,anf_arg1202);
break;
case 6: ++R.GAS;
return $ans1198;
default: throw "No case numbered " + $step1194 + " in $temp_lam1195";
}
}
} catch($e1204) {
if(R.isCont($e1204) && ($step1194 !== 6)) {
$e1204.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1199,$temp_lam1195,$step1194,[acc1196,elem1197],[anf_arg1201]);
}
if(R.isPyretException($e1204)) {
$e1204.pyretStack.push($al1199);
}
throw $e1204;
}
};
var anf_arg1206 = R.makeFunction($temp_lam1195);
$step1188 = 1;
$al1193 = L[532];
$field1207 = R.getColonFieldLoc(anf_method_obj1205,"fold",L[532]);
if(R.isMethod($field1207)) {
$ans1192 = $field1207.full_meth(anf_method_obj1205,anf_arg1206,(""));
} else {
if(!(R.isFunction($field1207))) {
R.ffi.throwNonFunApp(L[532],$field1207);
}
$ans1192 = $field1207.app(anf_arg1206,(""));
}
break;
case 1: var anf_arg1208 = $ans1192;
$step1188 = 2;
$al1193 = L[533];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1193,_plus6);
}
$ans1192 = _plus6.app(("[tree-set: "),anf_arg1208);
break;
case 2: var anf_arg1209 = $ans1192;
$step1188 = 3;
$al1193 = L[533];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1193,_plus6);
}
$ans1192 = _plus6.app(anf_arg1209,("]"));
break;
case 3: ++R.GAS;
return $ans1192;
default: throw "No case numbered " + $step1188 + " in $temp_full1189";
}
}
} catch($e1210) {
if(R.isCont($e1210) && ($step1188 !== 3)) {
$e1210.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1193,$temp_full1189,$step1188,[self1190,tostring1191],[]);
}
if(R.isPyretException($e1210)) {
$e1210.pyretStack.push($al1193);
}
throw $e1210;
}
};
var anf_variant_member1399 = R.makeMethod1($temp_full1189);
var $temp_full1212 = function($self1213,$torepr1214) {
var $step1211 = 0;
var $ans1215 = D;
var $al1216 = L[543];
try {
if(R.isActivationRecord($self1213)) {
$step1211 = $self1213.step;
$al1216 = $self1213.from;
$ans1215 = $self1213.ans;
self1213 = $self1213.args[0];
torepr1214 = $self1213.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[543],2,$t);
}
var self1213 = $self1213;
var torepr1214 = $torepr1214;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1211) {
case 0: var anf_method_obj1228 = G(self1213,"elems",L[535]);
var $temp_lam1218 = function($acc1219,$elem1220) {
var $step1217 = 0;
var $ans1221 = D;
var $al1222 = L[540];
try {
if(R.isActivationRecord($acc1219)) {
$step1217 = $acc1219.step;
$al1222 = $acc1219.from;
$ans1221 = $acc1219.ans;
acc1219 = $acc1219.args[0];
elem1220 = $acc1219.args[1];
anf_arg1224 = $acc1219.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[540],2,$t);
}
var acc1219 = $acc1219;
var elem1220 = $elem1220;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1217) {
case 0: $step1217 = 1;
$al1222 = L[536];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1222,equal$always4);
}
$ans1221 = equal$always4.app(acc1219,(""));
break;
case 1: var anf_arg1223 = $ans1221;
$al1222 = L[536];
var anf_if1226 = R.checkWrapBoolean(anf_arg1223);
if(R.isPyretTrue(anf_if1226)) {
$step1217 = 2;
} else {
$step1217 = 3;
}
break;
case 2: $step1217 = 6;
$al1222 = L[537];
if(!(R.isFunction(torepr1214))) {
R.ffi.throwNonFunApp($al1222,torepr1214);
}
$ans1221 = torepr1214.app(elem1220);
break;
case 3: $step1217 = 4;
$al1222 = L[538];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1222,_plus6);
}
$ans1221 = _plus6.app(acc1219,(", "));
break;
case 4: var anf_arg1224 = $ans1221;
$step1217 = 5;
$al1222 = L[539];
if(!(R.isFunction(torepr1214))) {
R.ffi.throwNonFunApp($al1222,torepr1214);
}
$ans1221 = torepr1214.app(elem1220);
break;
case 5: var anf_arg1225 = $ans1221;
$step1217 = 6;
$al1222 = L[538];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1222,_plus6);
}
$ans1221 = _plus6.app(anf_arg1224,anf_arg1225);
break;
case 6: ++R.GAS;
return $ans1221;
default: throw "No case numbered " + $step1217 + " in $temp_lam1218";
}
}
} catch($e1227) {
if(R.isCont($e1227) && ($step1217 !== 6)) {
$e1227.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1222,$temp_lam1218,$step1217,[acc1219,elem1220],[anf_arg1224]);
}
if(R.isPyretException($e1227)) {
$e1227.pyretStack.push($al1222);
}
throw $e1227;
}
};
var anf_arg1229 = R.makeFunction($temp_lam1218);
$step1211 = 1;
$al1216 = L[541];
$field1230 = R.getColonFieldLoc(anf_method_obj1228,"fold",L[541]);
if(R.isMethod($field1230)) {
$ans1215 = $field1230.full_meth(anf_method_obj1228,anf_arg1229,(""));
} else {
if(!(R.isFunction($field1230))) {
R.ffi.throwNonFunApp(L[541],$field1230);
}
$ans1215 = $field1230.app(anf_arg1229,(""));
}
break;
case 1: var anf_arg1231 = $ans1215;
$step1211 = 2;
$al1216 = L[542];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1216,_plus6);
}
$ans1215 = _plus6.app(("[tree-set: "),anf_arg1231);
break;
case 2: var anf_arg1232 = $ans1215;
$step1211 = 3;
$al1216 = L[542];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1216,_plus6);
}
$ans1215 = _plus6.app(anf_arg1232,("]"));
break;
case 3: ++R.GAS;
return $ans1215;
default: throw "No case numbered " + $step1211 + " in $temp_full1212";
}
}
} catch($e1233) {
if(R.isCont($e1233) && ($step1211 !== 3)) {
$e1233.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1216,$temp_full1212,$step1211,[self1213,torepr1214],[]);
}
if(R.isPyretException($e1233)) {
$e1233.pyretStack.push($al1216);
}
throw $e1233;
}
};
var anf_variant_member1400 = R.makeMethod1($temp_full1212);
var $temp_full1235 = function($self1236) {
var $step1234 = 0;
var $ans1237 = D;
var $al1238 = L[548];
try {
if(R.isActivationRecord($self1236)) {
$step1234 = $self1236.step;
$al1238 = $self1236.from;
$ans1237 = $self1236.ans;
self1236 = $self1236.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[548],1,$t);
}
var self1236 = $self1236;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1234) {
case 0: $step1234 = 1;
$al1238 = L[544];
$field1239 = R.getColonFieldLoc(self1236,"to-list",L[544]);
if(R.isMethod($field1239)) {
$ans1237 = $field1239.full_meth(self1236);
} else {
if(!(R.isFunction($field1239))) {
R.ffi.throwNonFunApp(L[544],$field1239);
}
$ans1237 = $field1239.app();
}
break;
case 1: var anf_method_obj1240 = $ans1237;
var anf_arg1241 = G(VS27,"vs-value",L[545]);
$step1234 = 2;
$al1238 = L[546];
$field1242 = R.getColonFieldLoc(anf_method_obj1240,"map",L[546]);
if(R.isMethod($field1242)) {
$ans1237 = $field1242.full_meth(anf_method_obj1240,anf_arg1241);
} else {
if(!(R.isFunction($field1242))) {
R.ffi.throwNonFunApp(L[546],$field1242);
}
$ans1237 = $field1242.app(anf_arg1241);
}
break;
case 2: var anf_arg1243 = $ans1237;
$step1234 = 3;
$al1238 = L[547];
$field1244 = R.getColonFieldLoc(VS27,"vs-collection",L[547]);
if(R.isMethod($field1244)) {
$ans1237 = $field1244.full_meth(VS27,("tree-set"),anf_arg1243);
} else {
if(!(R.isFunction($field1244))) {
R.ffi.throwNonFunApp(L[547],$field1244);
}
$ans1237 = $field1244.app(("tree-set"),anf_arg1243);
}
break;
case 3: ++R.GAS;
return $ans1237;
default: throw "No case numbered " + $step1234 + " in $temp_full1235";
}
}
} catch($e1245) {
if(R.isCont($e1245) && ($step1234 !== 3)) {
$e1245.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1238,$temp_full1235,$step1234,[self1236],[]);
}
if(R.isPyretException($e1245)) {
$e1245.pyretStack.push($al1238);
}
throw $e1245;
}
};
var anf_variant_member1401 = R.makeMethod0($temp_full1235);
var $temp_full1247 = function($self1248,$f1249,$base1250) {
var $step1246 = 0;
var $ans1251 = D;
var $al1252 = L[552];
try {
if(R.isActivationRecord($self1248)) {
$step1246 = $self1248.step;
$al1252 = $self1248.from;
$ans1251 = $self1248.ans;
self1248 = $self1248.args[0];
f1249 = $self1248.args[1];
base1250 = $self1248.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[552],3,$t);
}
var self1248 = $self1248;
var f1249 = $f1249;
var base1250 = $base1250;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1246) {
case 0: $step1246 = 1;
$al1252 = L[551];
R._checkAnn(L[551],R.Function,f1249);
break;
case 1: var anf_arg1253 = G(self1248,"elems",L[549]);
$step1246 = 2;
$al1252 = L[550];
if(!(R.isFunction(tree$fold623.$var))) {
R.ffi.throwNonFunApp($al1252,tree$fold623.$var);
}
$ans1251 = tree$fold623.$var.app(f1249,base1250,anf_arg1253);
break;
case 2: ++R.GAS;
return $ans1251;
default: throw "No case numbered " + $step1246 + " in $temp_full1247";
}
}
} catch($e1254) {
if(R.isCont($e1254) && ($step1246 !== 2)) {
$e1254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1252,$temp_full1247,$step1246,[self1248,f1249,base1250],[]);
}
if(R.isPyretException($e1254)) {
$e1254.pyretStack.push($al1252);
}
throw $e1254;
}
};
var anf_variant_member1402 = R.makeMethod2($temp_full1247);
var $temp_full1256 = function($self1257,$elem1258) {
var $step1255 = 0;
var $ans1259 = D;
var $al1260 = L[556];
try {
if(R.isActivationRecord($self1257)) {
$step1255 = $self1257.step;
$al1260 = $self1257.from;
$ans1259 = $self1257.ans;
self1257 = $self1257.args[0];
elem1258 = $self1257.args[1];
ann_check_temp1263 = $self1257.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[556],2,$t);
}
var self1257 = $self1257;
var elem1258 = $elem1258;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1255) {
case 0: var anf_method_obj1261 = G(self1257,"elems",L[553]);
$step1255 = 1;
$al1260 = L[554];
$field1262 = R.getColonFieldLoc(anf_method_obj1261,"contains",L[554]);
if(R.isMethod($field1262)) {
$ans1259 = $field1262.full_meth(anf_method_obj1261,elem1258);
} else {
if(!(R.isFunction($field1262))) {
R.ffi.throwNonFunApp(L[554],$field1262);
}
$ans1259 = $field1262.app(elem1258);
}
break;
case 1: var ann_check_temp1263 = $ans1259;
$step1255 = 2;
$al1260 = L[555];
R._checkAnn(L[555],$type$Boolean3,ann_check_temp1263);
break;
case 2: $step1255 = 3;
$ans1259 = ann_check_temp1263;
break;
case 3: ++R.GAS;
return $ans1259;
default: throw "No case numbered " + $step1255 + " in $temp_full1256";
}
}
} catch($e1264) {
if(R.isCont($e1264) && ($step1255 !== 3)) {
$e1264.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1260,$temp_full1256,$step1255,[self1257,elem1258],[ann_check_temp1263]);
}
if(R.isPyretException($e1264)) {
$e1264.pyretStack.push($al1260);
}
throw $e1264;
}
};
var anf_variant_member1403 = R.makeMethod1($temp_full1256);
var $temp_full1266 = function($self1267,$elem1268) {
var $step1265 = 0;
var $ans1269 = D;
var $al1270 = L[562];
try {
if(R.isActivationRecord($self1267)) {
$step1265 = $self1267.step;
$al1270 = $self1267.from;
$ans1269 = $self1267.ans;
self1267 = $self1267.args[0];
elem1268 = $self1267.args[1];
ann_check_temp1274 = $self1267.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[562],2,$t);
}
var self1267 = $self1267;
var elem1268 = $elem1268;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1265) {
case 0: var anf_method_obj1271 = G(self1267,"elems",L[557]);
$step1265 = 1;
$al1270 = L[558];
$field1272 = R.getColonFieldLoc(anf_method_obj1271,"insert",L[558]);
if(R.isMethod($field1272)) {
$ans1269 = $field1272.full_meth(anf_method_obj1271,elem1268);
} else {
if(!(R.isFunction($field1272))) {
R.ffi.throwNonFunApp(L[558],$field1272);
}
$ans1269 = $field1272.app(elem1268);
}
break;
case 1: var anf_arg1273 = $ans1269;
$step1265 = 2;
$al1270 = L[561];
if(!(R.isFunction(tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1270,tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var);
}
$ans1269 = tree$set1180.$var === D?U(L[559],"tree-set"):tree$set1180.$var.app(anf_arg1273);
break;
case 2: var ann_check_temp1274 = $ans1269;
$step1265 = 3;
$al1270 = L[560];
R._checkAnn(L[560],Set869,ann_check_temp1274);
break;
case 3: $step1265 = 4;
$ans1269 = ann_check_temp1274;
break;
case 4: ++R.GAS;
return $ans1269;
default: throw "No case numbered " + $step1265 + " in $temp_full1266";
}
}
} catch($e1275) {
if(R.isCont($e1275) && ($step1265 !== 4)) {
$e1275.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1270,$temp_full1266,$step1265,[self1267,elem1268],[ann_check_temp1274]);
}
if(R.isPyretException($e1275)) {
$e1275.pyretStack.push($al1270);
}
throw $e1275;
}
};
var anf_variant_member1404 = R.makeMethod1($temp_full1266);
var $temp_full1277 = function($self1278,$elem1279) {
var $step1276 = 0;
var $ans1280 = D;
var $al1281 = L[568];
try {
if(R.isActivationRecord($self1278)) {
$step1276 = $self1278.step;
$al1281 = $self1278.from;
$ans1280 = $self1278.ans;
self1278 = $self1278.args[0];
elem1279 = $self1278.args[1];
ann_check_temp1285 = $self1278.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[568],2,$t);
}
var self1278 = $self1278;
var elem1279 = $elem1279;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1276) {
case 0: var anf_method_obj1282 = G(self1278,"elems",L[563]);
$step1276 = 1;
$al1281 = L[564];
$field1283 = R.getColonFieldLoc(anf_method_obj1282,"remove",L[564]);
if(R.isMethod($field1283)) {
$ans1280 = $field1283.full_meth(anf_method_obj1282,elem1279);
} else {
if(!(R.isFunction($field1283))) {
R.ffi.throwNonFunApp(L[564],$field1283);
}
$ans1280 = $field1283.app(elem1279);
}
break;
case 1: var anf_arg1284 = $ans1280;
$step1276 = 2;
$al1281 = L[567];
if(!(R.isFunction(tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1281,tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var);
}
$ans1280 = tree$set1180.$var === D?U(L[565],"tree-set"):tree$set1180.$var.app(anf_arg1284);
break;
case 2: var ann_check_temp1285 = $ans1280;
$step1276 = 3;
$al1281 = L[566];
R._checkAnn(L[566],Set869,ann_check_temp1285);
break;
case 3: $step1276 = 4;
$ans1280 = ann_check_temp1285;
break;
case 4: ++R.GAS;
return $ans1280;
default: throw "No case numbered " + $step1276 + " in $temp_full1277";
}
}
} catch($e1286) {
if(R.isCont($e1286) && ($step1276 !== 4)) {
$e1286.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1281,$temp_full1277,$step1276,[self1278,elem1279],[ann_check_temp1285]);
}
if(R.isPyretException($e1286)) {
$e1286.pyretStack.push($al1281);
}
throw $e1286;
}
};
var anf_variant_member1405 = R.makeMethod1($temp_full1277);
var $temp_full1288 = function($self1289) {
var $step1287 = 0;
var $ans1290 = D;
var $al1291 = L[572];
try {
if(R.isActivationRecord($self1289)) {
$step1287 = $self1289.step;
$al1291 = $self1289.from;
$ans1290 = $self1289.ans;
self1289 = $self1289.args[0];
ann_check_temp1294 = $self1289.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[572],1,$t);
}
var self1289 = $self1289;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1287) {
case 0: var anf_method_obj1292 = G(self1289,"elems",L[569]);
$step1287 = 1;
$al1291 = L[570];
$field1293 = R.getColonFieldLoc(anf_method_obj1292,"inorder",L[570]);
if(R.isMethod($field1293)) {
$ans1290 = $field1293.full_meth(anf_method_obj1292);
} else {
if(!(R.isFunction($field1293))) {
R.ffi.throwNonFunApp(L[570],$field1293);
}
$ans1290 = $field1293.app();
}
break;
case 1: var ann_check_temp1294 = $ans1290;
$step1287 = 2;
$al1291 = L[571];
R._checkAnn(L[571],R.getDotAnn(L[571],"lists",lists31,"List"),ann_check_temp1294);
break;
case 2: $step1287 = 3;
$ans1290 = ann_check_temp1294;
break;
case 3: ++R.GAS;
return $ans1290;
default: throw "No case numbered " + $step1287 + " in $temp_full1288";
}
}
} catch($e1295) {
if(R.isCont($e1295) && ($step1287 !== 3)) {
$e1295.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1291,$temp_full1288,$step1287,[self1289],[ann_check_temp1294]);
}
if(R.isPyretException($e1295)) {
$e1295.pyretStack.push($al1291);
}
throw $e1295;
}
};
var anf_variant_member1406 = R.makeMethod0($temp_full1288);
var $temp_full1297 = function($self1298,$other1299) {
var $step1296 = 0;
var $ans1300 = D;
var $al1301 = L[575];
try {
if(R.isActivationRecord($self1298)) {
$step1296 = $self1298.step;
$al1301 = $self1298.from;
$ans1300 = $self1298.ans;
self1298 = $self1298.args[0];
other1299 = $self1298.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[575],2,$t);
}
var self1298 = $self1298;
var other1299 = $other1299;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1296) {
case 0: $step1296 = 1;
$al1301 = L[574];
if(!(R.isFunction(tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var))) {
R.ffi.throwNonFunApp($al1301,tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var);
}
$ans1300 = tree$set$union1302.$var === D?U(L[573],"tree-set-union"):tree$set$union1302.$var.app(self1298,other1299);
break;
case 1: ++R.GAS;
return $ans1300;
default: throw "No case numbered " + $step1296 + " in $temp_full1297";
}
}
} catch($e1303) {
if(R.isCont($e1303) && ($step1296 !== 1)) {
$e1303.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1301,$temp_full1297,$step1296,[self1298,other1299],[]);
}
if(R.isPyretException($e1303)) {
$e1303.pyretStack.push($al1301);
}
throw $e1303;
}
};
var anf_variant_member1407 = R.makeMethod1($temp_full1297);
var $temp_full1305 = function($self1306,$other1307) {
var $step1304 = 0;
var $ans1308 = D;
var $al1309 = L[578];
try {
if(R.isActivationRecord($self1306)) {
$step1304 = $self1306.step;
$al1309 = $self1306.from;
$ans1308 = $self1306.ans;
self1306 = $self1306.args[0];
other1307 = $self1306.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[578],2,$t);
}
var self1306 = $self1306;
var other1307 = $other1307;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1304) {
case 0: $step1304 = 1;
$al1309 = L[577];
if(!(R.isFunction(tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var))) {
R.ffi.throwNonFunApp($al1309,tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var);
}
$ans1308 = tree$set$intersect1310.$var === D?U(L[576],"tree-set-intersect"):tree$set$intersect1310.$var.app(self1306,other1307);
break;
case 1: ++R.GAS;
return $ans1308;
default: throw "No case numbered " + $step1304 + " in $temp_full1305";
}
}
} catch($e1311) {
if(R.isCont($e1311) && ($step1304 !== 1)) {
$e1311.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1309,$temp_full1305,$step1304,[self1306,other1307],[]);
}
if(R.isPyretException($e1311)) {
$e1311.pyretStack.push($al1309);
}
throw $e1311;
}
};
var anf_variant_member1408 = R.makeMethod1($temp_full1305);
var $temp_full1313 = function($self1314,$other1315) {
var $step1312 = 0;
var $ans1316 = D;
var $al1317 = L[584];
try {
if(R.isActivationRecord($self1314)) {
$step1312 = $self1314.step;
$al1317 = $self1314.from;
$ans1316 = $self1314.ans;
self1314 = $self1314.args[0];
other1315 = $self1314.args[1];
ann_check_temp1320 = $self1314.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[584],2,$t);
}
var self1314 = $self1314;
var other1315 = $other1315;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1312) {
case 0: $step1312 = 1;
$al1317 = L[582];
R._checkAnn(L[582],Set869,self1314);
break;
case 1: $step1312 = 2;
$al1317 = L[583];
R._checkAnn(L[583],Set869,other1315);
break;
case 2: var anf_arg1318 = G(other1315,"member",L[579]);
$step1312 = 3;
$al1317 = L[580];
$field1319 = R.getColonFieldLoc(self1314,"any",L[580]);
if(R.isMethod($field1319)) {
$ans1316 = $field1319.full_meth(self1314,anf_arg1318);
} else {
if(!(R.isFunction($field1319))) {
R.ffi.throwNonFunApp(L[580],$field1319);
}
$ans1316 = $field1319.app(anf_arg1318);
}
break;
case 3: var ann_check_temp1320 = $ans1316;
$step1312 = 4;
$al1317 = L[581];
R._checkAnn(L[581],$type$Boolean3,ann_check_temp1320);
break;
case 4: $step1312 = 5;
$ans1316 = ann_check_temp1320;
break;
case 5: ++R.GAS;
return $ans1316;
default: throw "No case numbered " + $step1312 + " in $temp_full1313";
}
}
} catch($e1321) {
if(R.isCont($e1321) && ($step1312 !== 5)) {
$e1321.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1317,$temp_full1313,$step1312,[self1314,other1315],[ann_check_temp1320]);
}
if(R.isPyretException($e1321)) {
$e1321.pyretStack.push($al1317);
}
throw $e1321;
}
};
var anf_variant_member1409 = R.makeMethod1($temp_full1313);
var $temp_full1323 = function($self1324,$other1325) {
var $step1322 = 0;
var $ans1326 = D;
var $al1327 = L[590];
try {
if(R.isActivationRecord($self1324)) {
$step1322 = $self1324.step;
$al1327 = $self1324.from;
$ans1326 = $self1324.ans;
self1324 = $self1324.args[0];
other1325 = $self1324.args[1];
ann_check_temp1329 = $self1324.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[590],2,$t);
}
var self1324 = $self1324;
var other1325 = $other1325;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1322) {
case 0: $step1322 = 1;
$al1327 = L[588];
R._checkAnn(L[588],Set869,self1324);
break;
case 1: $step1322 = 2;
$al1327 = L[589];
R._checkAnn(L[589],Set869,other1325);
break;
case 2: $step1322 = 3;
$al1327 = L[587];
if(!(R.isFunction(tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var))) {
R.ffi.throwNonFunApp($al1327,tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var);
}
$ans1326 = tree$set$difference1328.$var === D?U(L[585],"tree-set-difference"):tree$set$difference1328.$var.app(self1324,other1325);
break;
case 3: var ann_check_temp1329 = $ans1326;
$step1322 = 4;
$al1327 = L[586];
R._checkAnn(L[586],Set869,ann_check_temp1329);
break;
case 4: $step1322 = 5;
$ans1326 = ann_check_temp1329;
break;
case 5: ++R.GAS;
return $ans1326;
default: throw "No case numbered " + $step1322 + " in $temp_full1323";
}
}
} catch($e1330) {
if(R.isCont($e1330) && ($step1322 !== 5)) {
$e1330.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1327,$temp_full1323,$step1322,[self1324,other1325],[ann_check_temp1329]);
}
if(R.isPyretException($e1330)) {
$e1330.pyretStack.push($al1327);
}
throw $e1330;
}
};
var anf_variant_member1410 = R.makeMethod1($temp_full1323);
var $temp_full1332 = function($self1333) {
var $step1331 = 0;
var $ans1334 = D;
var $al1335 = L[595];
try {
if(R.isActivationRecord($self1333)) {
$step1331 = $self1333.step;
$al1335 = $self1333.from;
$ans1334 = $self1333.ans;
self1333 = $self1333.args[0];
ann_check_temp1338 = $self1333.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[595],1,$t);
}
var self1333 = $self1333;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1331) {
case 0: $step1331 = 1;
$al1335 = L[594];
R._checkAnn(L[594],Set869,self1333);
break;
case 1: var anf_method_obj1336 = G(self1333,"elems",L[591]);
$step1331 = 2;
$al1335 = L[592];
$field1337 = R.getColonFieldLoc(anf_method_obj1336,"count",L[592]);
if(R.isMethod($field1337)) {
$ans1334 = $field1337.full_meth(anf_method_obj1336);
} else {
if(!(R.isFunction($field1337))) {
R.ffi.throwNonFunApp(L[592],$field1337);
}
$ans1334 = $field1337.app();
}
break;
case 2: var ann_check_temp1338 = $ans1334;
$step1331 = 3;
$al1335 = L[593];
R._checkAnn(L[593],$type$Number2,ann_check_temp1338);
break;
case 3: $step1331 = 4;
$ans1334 = ann_check_temp1338;
break;
case 4: ++R.GAS;
return $ans1334;
default: throw "No case numbered " + $step1331 + " in $temp_full1332";
}
}
} catch($e1339) {
if(R.isCont($e1339) && ($step1331 !== 4)) {
$e1339.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1335,$temp_full1332,$step1331,[self1333],[ann_check_temp1338]);
}
if(R.isPyretException($e1339)) {
$e1339.pyretStack.push($al1335);
}
throw $e1339;
}
};
var anf_variant_member1411 = R.makeMethod0($temp_full1332);
var $temp_full1341 = function($self1342) {
var $step1340 = 0;
var $ans1343 = D;
var $al1344 = L[598];
try {
if(R.isActivationRecord($self1342)) {
$step1340 = $self1342.step;
$al1344 = $self1342.from;
$ans1343 = $self1342.ans;
self1342 = $self1342.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[598],1,$t);
}
var self1342 = $self1342;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1340) {
case 0: var anf_arg1345 = G(self1342,"elems",L[596]);
$step1340 = 1;
$al1344 = L[597];
if(!(R.isFunction(is$leaf607.$var))) {
R.ffi.throwNonFunApp($al1344,is$leaf607.$var);
}
$ans1343 = is$leaf607.$var.app(anf_arg1345);
break;
case 1: ++R.GAS;
return $ans1343;
default: throw "No case numbered " + $step1340 + " in $temp_full1341";
}
}
} catch($e1346) {
if(R.isCont($e1346) && ($step1340 !== 1)) {
$e1346.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1344,$temp_full1341,$step1340,[self1342],[]);
}
if(R.isPyretException($e1346)) {
$e1346.pyretStack.push($al1344);
}
throw $e1346;
}
};
var anf_variant_member1412 = R.makeMethod0($temp_full1341);
var $temp_full1348 = function($self1349,$f1350) {
var $step1347 = 0;
var $ans1351 = D;
var $al1352 = L[602];
try {
if(R.isActivationRecord($self1349)) {
$step1347 = $self1349.step;
$al1352 = $self1349.from;
$ans1351 = $self1349.ans;
self1349 = $self1349.args[0];
f1350 = $self1349.args[1];
ann_check_temp1355 = $self1349.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[602],2,$t);
}
var self1349 = $self1349;
var f1350 = $f1350;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1347) {
case 0: var anf_method_obj1353 = G(self1349,"elems",L[599]);
$step1347 = 1;
$al1352 = L[600];
$field1354 = R.getColonFieldLoc(anf_method_obj1353,"all",L[600]);
if(R.isMethod($field1354)) {
$ans1351 = $field1354.full_meth(anf_method_obj1353,f1350);
} else {
if(!(R.isFunction($field1354))) {
R.ffi.throwNonFunApp(L[600],$field1354);
}
$ans1351 = $field1354.app(f1350);
}
break;
case 1: var ann_check_temp1355 = $ans1351;
$step1347 = 2;
$al1352 = L[601];
R._checkAnn(L[601],$type$Boolean3,ann_check_temp1355);
break;
case 2: $step1347 = 3;
$ans1351 = ann_check_temp1355;
break;
case 3: ++R.GAS;
return $ans1351;
default: throw "No case numbered " + $step1347 + " in $temp_full1348";
}
}
} catch($e1356) {
if(R.isCont($e1356) && ($step1347 !== 3)) {
$e1356.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1352,$temp_full1348,$step1347,[self1349,f1350],[ann_check_temp1355]);
}
if(R.isPyretException($e1356)) {
$e1356.pyretStack.push($al1352);
}
throw $e1356;
}
};
var anf_variant_member1413 = R.makeMethod1($temp_full1348);
var $temp_full1358 = function($self1359,$f1360) {
var $step1357 = 0;
var $ans1361 = D;
var $al1362 = L[606];
try {
if(R.isActivationRecord($self1359)) {
$step1357 = $self1359.step;
$al1362 = $self1359.from;
$ans1361 = $self1359.ans;
self1359 = $self1359.args[0];
f1360 = $self1359.args[1];
ann_check_temp1365 = $self1359.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[606],2,$t);
}
var self1359 = $self1359;
var f1360 = $f1360;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1357) {
case 0: var anf_method_obj1363 = G(self1359,"elems",L[603]);
$step1357 = 1;
$al1362 = L[604];
$field1364 = R.getColonFieldLoc(anf_method_obj1363,"any",L[604]);
if(R.isMethod($field1364)) {
$ans1361 = $field1364.full_meth(anf_method_obj1363,f1360);
} else {
if(!(R.isFunction($field1364))) {
R.ffi.throwNonFunApp(L[604],$field1364);
}
$ans1361 = $field1364.app(f1360);
}
break;
case 1: var ann_check_temp1365 = $ans1361;
$step1357 = 2;
$al1362 = L[605];
R._checkAnn(L[605],$type$Boolean3,ann_check_temp1365);
break;
case 2: $step1357 = 3;
$ans1361 = ann_check_temp1365;
break;
case 3: ++R.GAS;
return $ans1361;
default: throw "No case numbered " + $step1357 + " in $temp_full1358";
}
}
} catch($e1366) {
if(R.isCont($e1366) && ($step1357 !== 3)) {
$e1366.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1362,$temp_full1358,$step1357,[self1359,f1360],[ann_check_temp1365]);
}
if(R.isPyretException($e1366)) {
$e1366.pyretStack.push($al1362);
}
throw $e1366;
}
};
var anf_variant_member1414 = R.makeMethod1($temp_full1358);
var $list$set_getfields1391 = function(f) {
return f(this.dict["elems"]);
};
var $list$set_getfieldsref1389 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $list$set_mutablemask1390 = [false];
var $list$set$base1369 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1367,
"_equals":anf_shared1368,
"pick":anf_variant_member1372,
"_tostring":anf_variant_member1373,
"_torepr":anf_variant_member1374,
"_output":anf_variant_member1375,
"fold":anf_variant_member1376,
"member":anf_variant_member1377,
"add":anf_variant_member1378,
"remove":anf_variant_member1379,
"to-list":anf_variant_member1380,
"union":anf_variant_member1381,
"intersect":anf_variant_member1382,
"overlaps":anf_variant_member1383,
"difference":anf_variant_member1384,
"size":anf_variant_member1385,
"is-empty":anf_variant_member1386,
"all":anf_variant_member1387,
"any":anf_variant_member1388,
"_match":R.makeMatch("list-set",1)};
var $list$set$brands1371 = {"$brand$list$set":true};
$list$set$brands1371[Set49._brand] = true;
var list$set1393 = R.makeVariantConstructor(L[609],function() {
return [R.getDotAnn(L[608],"lists",lists31,"List")];
},["elems1394"],[L[608]],[false],["elems1394"],$list$set_mutablemask1390,$list$set$base1369,$list$set$brands1371,"list-set",$list$set_getfieldsref1389,$list$set_getfields1391,$list$set$base1369);
var $tree$set_getfields1417 = function(f) {
return f(this.dict["elems"]);
};
var $tree$set_getfieldsref1415 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $tree$set_mutablemask1416 = [false];
var $tree$set$base1395 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1367,
"_equals":anf_shared1368,
"pick":anf_variant_member1398,
"_tostring":anf_variant_member1399,
"_torepr":anf_variant_member1400,
"_output":anf_variant_member1401,
"fold":anf_variant_member1402,
"member":anf_variant_member1403,
"add":anf_variant_member1404,
"remove":anf_variant_member1405,
"to-list":anf_variant_member1406,
"union":anf_variant_member1407,
"intersect":anf_variant_member1408,
"overlaps":anf_variant_member1409,
"difference":anf_variant_member1410,
"size":anf_variant_member1411,
"is-empty":anf_variant_member1412,
"all":anf_variant_member1413,
"any":anf_variant_member1414,
"_match":R.makeMatch("tree-set",1)};
var $tree$set$brands1397 = {"$brand$tree$set":true};
$tree$set$brands1397[Set49._brand] = true;
var tree$set1419 = R.makeVariantConstructor(L[612],function() {
return [AVLTree99];
},["elems1420"],[L[611]],[false],["elems1420"],$tree$set_mutablemask1416,$tree$set$base1395,$tree$set$brands1397,"tree-set",$tree$set_getfieldsref1415,$tree$set_getfields1417,$tree$set$base1395);
var anf_assign1422 = R.makeObject({"Set":R.makeFunction(function($val1421) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[613],1,$t);
}
return R.makeBoolean(R.hasBrand($val1421,Set49._brand));
}),
"is-list-set":R.makeFunction(function($val1392) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[607],1,$t);
}
return R.makeBoolean(R.hasBrand($val1392,"$brand$list$set"));
}),
"list-set":list$set1393,
"is-tree-set":R.makeFunction(function($val1418) {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[610],1,$t);
}
return R.makeBoolean(R.hasBrand($val1418,"$brand$tree$set"));
}),
"tree-set":tree$set1419});
Set1423.$var = anf_assign1422;
var anf_assign1424 = G(Set1423.$var,"Set",L[613]);
Set878.$var = anf_assign1424;
var anf_assign1425 = G(Set1423.$var,"Set",L[613]);
is$Set1426.$var = anf_assign1425;
var anf_assign1427 = G(Set1423.$var,"is-list-set",L[607]);
is$list$set1428.$var = anf_assign1427;
var anf_assign1429 = G(Set1423.$var,"list-set",L[607]);
list$set919.$var = anf_assign1429;
var anf_assign1430 = G(Set1423.$var,"is-tree-set",L[610]);
is$tree$set1431.$var = anf_assign1430;
var anf_assign1432 = G(Set1423.$var,"tree-set",L[610]);
tree$set1180.$var = anf_assign1432;
var $temp_lam1434 = function($s1435) {
var $step1433 = 0;
var $ans1436 = D;
var $al1437 = L[620];
try {
if(R.isActivationRecord($s1435)) {
$step1433 = $s1435.step;
$al1437 = $s1435.from;
$ans1436 = $s1435.ans;
s1435 = $s1435.args[0];
cases1438 = $s1435.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[620],1,$t);
}
var s1435 = $s1435;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1433) {
case 0: var cases1438 = s1435;
$step1433 = 1;
$al1437 = L[619];
R._checkAnn(L[619],Set869,cases1438);
break;
case 1: var $cases_dispatch1443 = {"list-set":2,
"tree-set":3};
$al1437 = L[618];
$step1433 = $cases_dispatch1443[cases1438.$name] || 4;
break;
case 2: if(cases1438.$arity >= 0) {
if(1 !== cases1438.$arity) {
R.ffi.throwCasesArityErrorC(L[615],1,cases1438.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[615],true);
}
var $fn818 = cases1438.$constructor.$fieldNames;
var elems1439 = R.derefField(cases1438.dict[$fn818[0]],cases1438.$mut_fields_mask[0],false);
$step1433 = 5;
$al1437 = L[614];
$field1440 = R.getColonFieldLoc(elems1439,"sort",L[614]);
if(R.isMethod($field1440)) {
$ans1436 = $field1440.full_meth(elems1439);
} else {
if(!(R.isFunction($field1440))) {
R.ffi.throwNonFunApp(L[614],$field1440);
}
$ans1436 = $field1440.app();
}
break;
case 3: if(cases1438.$arity >= 0) {
if(1 !== cases1438.$arity) {
R.ffi.throwCasesArityErrorC(L[617],1,cases1438.$arity);
}
} else {
R.ffi.throwCasesSingletonErrorC(L[617],true);
}
var $fn818 = cases1438.$constructor.$fieldNames;
var elems1441 = R.derefField(cases1438.dict[$fn818[0]],cases1438.$mut_fields_mask[0],false);
$step1433 = 5;
$al1437 = L[616];
$field1442 = R.getColonFieldLoc(elems1441,"inorder",L[616]);
if(R.isMethod($field1442)) {
$ans1436 = $field1442.full_meth(elems1441);
} else {
if(!(R.isFunction($field1442))) {
R.ffi.throwNonFunApp(L[616],$field1442);
}
$ans1436 = $field1442.app();
}
break;
case 4: $step1433 = 5;
$al1437 = L[618];
$ans1436 = R.throwNoCasesMatched(L[618],cases1438);
break;
case 5: ++R.GAS;
return $ans1436;
default: throw "No case numbered " + $step1433 + " in $temp_lam1434";
}
}
} catch($e1444) {
if(R.isCont($e1444) && ($step1433 !== 5)) {
$e1444.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1437,$temp_lam1434,$step1433,[s1435],[cases1438]);
}
if(R.isPyretException($e1444)) {
$e1444.pyretStack.push($al1437);
}
throw $e1444;
}
};
var anf_assign1445 = R.makeFunction($temp_lam1434);
set$to$sorted$elems1446.$var = anf_assign1445;
var $temp_lam1448 = function($elems1449) {
var $step1447 = 0;
var $ans1450 = D;
var $al1451 = L[639];
try {
if(R.isActivationRecord($elems1449)) {
$step1447 = $elems1449.step;
$al1451 = $elems1449.from;
$ans1450 = $elems1449.ans;
elems1449 = $elems1449.args[0];
head1459 = $elems1449.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[639],1,$t);
}
var elems1449 = $elems1449;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1447) {
case 0: var head1459 = {"$var":elems1449};
$step1447 = 1;
$al1451 = L[621];
$field1452 = R.getColonFieldLoc(elems1449,"length",L[621]);
if(R.isMethod($field1452)) {
$ans1450 = $field1452.full_meth(elems1449);
} else {
if(!(R.isFunction($field1452))) {
R.ffi.throwNonFunApp(L[621],$field1452);
}
$ans1450 = $field1452.app();
}
break;
case 1: var len1478 = $ans1450;
var helper1462 = {"$var":D};
var $temp_lam1454 = function($l1455) {
var $step1453 = 0;
var $ans1456 = D;
var $al1457 = L[637];
try {
if(R.isActivationRecord($l1455)) {
$step1453 = $l1455.step;
$al1457 = $l1455.from;
$ans1456 = $l1455.ans;
l1455 = $l1455.args[0];
anf_arg1472 = $l1455.vars[0];
item1471 = $l1455.vars[1];
left1465 = $l1455.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[637],1,$t);
}
var l1455 = $l1455;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1453) {
case 0: $step1453 = 1;
$al1457 = L[622];
if(!(R.isFunction(_lessequal10))) {
R.ffi.throwNonFunApp($al1457,_lessequal10);
}
$ans1456 = _lessequal10.app(l1455,(0));
break;
case 1: var anf_arg1458 = $ans1456;
$al1457 = L[622];
var anf_if1475 = R.checkWrapBoolean(anf_arg1458);
if(R.isPyretTrue(anf_if1475)) {
$step1453 = 2;
} else {
$step1453 = 3;
}
break;
case 2: $step1453 = 16;
$ans1456 = leaf97.$var;
break;
case 3: $step1453 = 4;
$al1457 = L[636];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1457,is$empty1148);
}
$ans1456 = is$empty1148.app(head1459.$var);
break;
case 4: var anf_arg1460 = $ans1456;
$al1457 = L[623];
var anf_if1474 = R.checkWrapBoolean(anf_arg1460);
if(R.isPyretTrue(anf_if1474)) {
$step1453 = 5;
} else {
$step1453 = 6;
}
break;
case 5: $step1453 = 16;
$ans1456 = leaf97.$var;
break;
case 6: $step1453 = 7;
$al1457 = L[635];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1457,_divide15);
}
$ans1456 = _divide15.app(l1455,(2));
break;
case 7: var anf_arg1461 = $ans1456;
$step1453 = 8;
$al1457 = L[634];
if(!(R.isFunction(num$floor16))) {
R.ffi.throwNonFunApp($al1457,num$floor16);
}
$ans1456 = num$floor16.app(anf_arg1461);
break;
case 8: var anf_arg1463 = $ans1456;
$step1453 = 9;
$al1457 = L[633];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1457,helper1462.$var);
}
$ans1456 = helper1462.$var.app(anf_arg1463);
break;
case 9: var left1465 = $ans1456;
var item1471 = G(head1459.$var,"first",L[624]);
var anf_assign1464 = G(head1459.$var,"rest",L[625]);
head1459.$var = anf_assign1464;
$step1453 = 10;
$al1457 = L[626];
$field1466 = R.getColonFieldLoc(left1465,"height",L[626]);
if(R.isMethod($field1466)) {
$ans1456 = $field1466.full_meth(left1465);
} else {
if(!(R.isFunction($field1466))) {
R.ffi.throwNonFunApp(L[626],$field1466);
}
$ans1456 = $field1466.app();
}
break;
case 10: var anf_arg1467 = $ans1456;
$step1453 = 11;
$al1457 = L[632];
if(!(R.isFunction(_plus6))) {
R.ffi.throwNonFunApp($al1457,_plus6);
}
$ans1456 = _plus6.app(anf_arg1467,(1));
break;
case 11: var anf_arg1472 = $ans1456;
$step1453 = 12;
$al1457 = L[631];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1457,_divide15);
}
$ans1456 = _divide15.app(l1455,(2));
break;
case 12: var anf_arg1468 = $ans1456;
$step1453 = 13;
$al1457 = L[630];
if(!(R.isFunction(_minus8))) {
R.ffi.throwNonFunApp($al1457,_minus8);
}
$ans1456 = _minus8.app(anf_arg1468,(1));
break;
case 13: var anf_arg1469 = $ans1456;
$step1453 = 14;
$al1457 = L[629];
if(!(R.isFunction(num$ceiling17))) {
R.ffi.throwNonFunApp($al1457,num$ceiling17);
}
$ans1456 = num$ceiling17.app(anf_arg1469);
break;
case 14: var anf_arg1470 = $ans1456;
$step1453 = 15;
$al1457 = L[628];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1457,helper1462.$var);
}
$ans1456 = helper1462.$var.app(anf_arg1470);
break;
case 15: var anf_arg1473 = $ans1456;
$step1453 = 16;
$al1457 = L[627];
if(!(R.isFunction(branch612.$var))) {
R.ffi.throwNonFunApp($al1457,branch612.$var);
}
$ans1456 = branch612.$var.app(item1471,anf_arg1472,left1465,anf_arg1473);
break;
case 16: ++R.GAS;
return $ans1456;
default: throw "No case numbered " + $step1453 + " in $temp_lam1454";
}
}
} catch($e1476) {
if(R.isCont($e1476) && ($step1453 !== 16)) {
$e1476.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1457,$temp_lam1454,$step1453,[l1455],[anf_arg1472,item1471,left1465]);
}
if(R.isPyretException($e1476)) {
$e1476.pyretStack.push($al1457);
}
throw $e1476;
}
};
var anf_assign1477 = R.makeFunction($temp_lam1454);
helper1462.$var = anf_assign1477;
$step1447 = 2;
$al1451 = L[638];
if(!(R.isFunction(helper1462.$var))) {
R.ffi.throwNonFunApp($al1451,helper1462.$var);
}
$ans1450 = helper1462.$var.app(len1478);
break;
case 2: ++R.GAS;
return $ans1450;
default: throw "No case numbered " + $step1447 + " in $temp_lam1448";
}
}
} catch($e1479) {
if(R.isCont($e1479) && ($step1447 !== 2)) {
$e1479.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1451,$temp_lam1448,$step1447,[elems1449],[head1459]);
}
if(R.isPyretException($e1479)) {
$e1479.pyretStack.push($al1451);
}
throw $e1479;
}
};
var anf_assign1480 = R.makeFunction($temp_lam1448);
elems$to$balanced$avl1481.$var = anf_assign1480;
var $temp_lam1483 = function($l11484,$l21485) {
var $step1482 = 0;
var $ans1486 = D;
var $al1487 = L[661];
try {
if(R.isActivationRecord($l11484)) {
$step1482 = $l11484.step;
$al1487 = $l11484.from;
$ans1486 = $l11484.ans;
l11484 = $l11484.args[0];
l21485 = $l11484.args[1];
anf_arg1502 = $l11484.vars[0];
anf_arg1495 = $l11484.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[661],2,$t);
}
var l11484 = $l11484;
var l21485 = $l21485;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1482) {
case 0: $step1482 = 1;
$al1487 = L[640];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1487,is$empty1148);
}
$ans1486 = is$empty1148.app(l11484);
break;
case 1: var anf_arg1488 = $ans1486;
$al1487 = L[640];
var anf_if1507 = R.checkWrapBoolean(anf_arg1488);
if(R.isPyretTrue(anf_if1507)) {
$step1482 = 2;
} else {
$step1482 = 3;
}
break;
case 2: $step1482 = 15;
$ans1486 = l21485;
break;
case 3: $step1482 = 4;
$al1487 = L[660];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1487,is$empty1148);
}
$ans1486 = is$empty1148.app(l21485);
break;
case 4: var anf_arg1489 = $ans1486;
$al1487 = L[641];
var anf_if1506 = R.checkWrapBoolean(anf_arg1489);
if(R.isPyretTrue(anf_if1506)) {
$step1482 = 5;
} else {
$step1482 = 6;
}
break;
case 5: $step1482 = 15;
$ans1486 = l11484;
break;
case 6: var anf_arg1490 = G(l11484,"first",L[642]);
var anf_arg1491 = G(l21485,"first",L[643]);
$step1482 = 7;
$al1487 = L[659];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1487,_lessthan5);
}
$ans1486 = _lessthan5.app(anf_arg1490,anf_arg1491);
break;
case 7: var anf_arg1492 = $ans1486;
$al1487 = L[644];
var anf_if1505 = R.checkWrapBoolean(anf_arg1492);
if(R.isPyretTrue(anf_if1505)) {
$step1482 = 8;
} else {
$step1482 = 10;
}
break;
case 8: var anf_arg1495 = G(l11484,"first",L[645]);
var anf_arg1494 = G(l11484,"rest",L[646]);
$step1482 = 9;
$al1487 = L[648];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(anf_arg1494,l21485);
break;
case 9: var anf_arg1496 = $ans1486;
$step1482 = 15;
$al1487 = L[647];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1487,link312);
}
$ans1486 = link312.app(anf_arg1495,anf_arg1496);
break;
case 10: var anf_arg1497 = G(l11484,"first",L[649]);
var anf_arg1498 = G(l21485,"first",L[650]);
$step1482 = 11;
$al1487 = L[658];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1487,equal$always4);
}
$ans1486 = equal$always4.app(anf_arg1497,anf_arg1498);
break;
case 11: var anf_arg1499 = $ans1486;
$al1487 = L[651];
var anf_if1504 = R.checkWrapBoolean(anf_arg1499);
if(R.isPyretTrue(anf_if1504)) {
$step1482 = 12;
} else {
$step1482 = 13;
}
break;
case 12: var anf_arg1500 = G(l11484,"rest",L[652]);
$step1482 = 15;
$al1487 = L[653];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(anf_arg1500,l21485);
break;
case 13: var anf_arg1502 = G(l21485,"first",L[654]);
var anf_arg1501 = G(l21485,"rest",L[655]);
$step1482 = 14;
$al1487 = L[657];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1487,merge$no$dups1493.$var);
}
$ans1486 = merge$no$dups1493.$var.app(l11484,anf_arg1501);
break;
case 14: var anf_arg1503 = $ans1486;
$step1482 = 15;
$al1487 = L[656];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1487,link312);
}
$ans1486 = link312.app(anf_arg1502,anf_arg1503);
break;
case 15: ++R.GAS;
return $ans1486;
default: throw "No case numbered " + $step1482 + " in $temp_lam1483";
}
}
} catch($e1508) {
if(R.isCont($e1508) && ($step1482 !== 15)) {
$e1508.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1487,$temp_lam1483,$step1482,[l11484,l21485],[anf_arg1502,anf_arg1495]);
}
if(R.isPyretException($e1508)) {
$e1508.pyretStack.push($al1487);
}
throw $e1508;
}
};
var anf_assign1509 = R.makeFunction($temp_lam1483);
merge$no$dups1493.$var = anf_assign1509;
var $temp_lam1511 = function($s11512,$s21513) {
var $step1510 = 0;
var $ans1514 = D;
var $al1515 = L[668];
try {
if(R.isActivationRecord($s11512)) {
$step1510 = $s11512.step;
$al1515 = $s11512.from;
$ans1514 = $s11512.ans;
s11512 = $s11512.args[0];
s21513 = $s11512.args[1];
ann_check_temp1520 = $s11512.vars[0];
s1$elems1516 = $s11512.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[668],2,$t);
}
var s11512 = $s11512;
var s21513 = $s21513;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1510) {
case 0: $step1510 = 1;
$al1515 = L[667];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1515,set$to$sorted$elems1446.$var);
}
$ans1514 = set$to$sorted$elems1446.$var.app(s11512);
break;
case 1: var s1$elems1516 = $ans1514;
$step1510 = 2;
$al1515 = L[666];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1515,set$to$sorted$elems1446.$var);
}
$ans1514 = set$to$sorted$elems1446.$var.app(s21513);
break;
case 2: var s2$elems1517 = $ans1514;
$step1510 = 3;
$al1515 = L[665];
if(!(R.isFunction(merge$no$dups1493.$var))) {
R.ffi.throwNonFunApp($al1515,merge$no$dups1493.$var);
}
$ans1514 = merge$no$dups1493.$var.app(s1$elems1516,s2$elems1517);
break;
case 3: var new$elems1518 = $ans1514;
$step1510 = 4;
$al1515 = L[664];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1515,elems$to$balanced$avl1481.$var);
}
$ans1514 = elems$to$balanced$avl1481.$var.app(new$elems1518);
break;
case 4: var anf_arg1519 = $ans1514;
$step1510 = 5;
$al1515 = L[663];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1515,tree$set1180.$var);
}
$ans1514 = tree$set1180.$var.app(anf_arg1519);
break;
case 5: var ann_check_temp1520 = $ans1514;
$step1510 = 6;
$al1515 = L[662];
R._checkAnn(L[662],Set869,ann_check_temp1520);
break;
case 6: $step1510 = 7;
$ans1514 = ann_check_temp1520;
break;
case 7: ++R.GAS;
return $ans1514;
default: throw "No case numbered " + $step1510 + " in $temp_lam1511";
}
}
} catch($e1521) {
if(R.isCont($e1521) && ($step1510 !== 7)) {
$e1521.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1515,$temp_lam1511,$step1510,[s11512,s21513],[ann_check_temp1520,s1$elems1516]);
}
if(R.isPyretException($e1521)) {
$e1521.pyretStack.push($al1515);
}
throw $e1521;
}
};
var anf_assign1522 = R.makeFunction($temp_lam1511);
tree$set$union1302.$var = anf_assign1522;
var $temp_lam1524 = function($l11525,$l21526) {
var $step1523 = 0;
var $ans1527 = D;
var $al1528 = L[689];
try {
if(R.isActivationRecord($l11525)) {
$step1523 = $l11525.step;
$al1528 = $l11525.from;
$ans1527 = $l11525.ans;
l11525 = $l11525.args[0];
l21526 = $l11525.args[1];
anf_arg1542 = $l11525.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[689],2,$t);
}
var l11525 = $l11525;
var l21526 = $l21526;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1523) {
case 0: $step1523 = 1;
$al1528 = L[688];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1528,is$empty1148);
}
$ans1527 = is$empty1148.app(l11525);
break;
case 1: var anf_arg1529 = $ans1527;
$al1528 = L[669];
var anf_if1548 = R.checkWrapBoolean(anf_arg1529);
if(R.isPyretTrue(anf_if1548)) {
$step1523 = 2;
} else {
$step1523 = 3;
}
break;
case 2: $step1523 = 5;
$ans1527 = (true);
break;
case 3: $step1523 = 4;
$al1528 = L[670];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1528,is$empty1148);
}
$ans1527 = is$empty1148.app(l21526);
break;
case 4: var anf_arg1530 = $ans1527;
$step1523 = 5;
$al1528 = L[669];
$ans1527 = R.checkWrapBoolean(anf_arg1530);
break;
case 5: var anf_arg1531 = $ans1527;
$al1528 = L[669];
var anf_if1547 = R.checkWrapBoolean(anf_arg1531);
if(R.isPyretTrue(anf_if1547)) {
$step1523 = 6;
} else {
$step1523 = 7;
}
break;
case 6: $step1523 = 15;
$ans1527 = empty114;
break;
case 7: var anf_arg1532 = G(l11525,"first",L[671]);
var anf_arg1533 = G(l21526,"first",L[672]);
$step1523 = 8;
$al1528 = L[687];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1528,_lessthan5);
}
$ans1527 = _lessthan5.app(anf_arg1532,anf_arg1533);
break;
case 8: var anf_arg1534 = $ans1527;
$al1528 = L[673];
var anf_if1546 = R.checkWrapBoolean(anf_arg1534);
if(R.isPyretTrue(anf_if1546)) {
$step1523 = 9;
} else {
$step1523 = 10;
}
break;
case 9: var anf_arg1536 = G(l11525,"rest",L[674]);
$step1523 = 15;
$al1528 = L[675];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(anf_arg1536,l21526);
break;
case 10: var anf_arg1537 = G(l11525,"first",L[676]);
var anf_arg1538 = G(l21526,"first",L[677]);
$step1523 = 11;
$al1528 = L[686];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1528,equal$always4);
}
$ans1527 = equal$always4.app(anf_arg1537,anf_arg1538);
break;
case 11: var anf_arg1539 = $ans1527;
$al1528 = L[678];
var anf_if1545 = R.checkWrapBoolean(anf_arg1539);
if(R.isPyretTrue(anf_if1545)) {
$step1523 = 12;
} else {
$step1523 = 14;
}
break;
case 12: var anf_arg1542 = G(l11525,"first",L[679]);
var anf_arg1540 = G(l11525,"rest",L[680]);
var anf_arg1541 = G(l21526,"rest",L[681]);
$step1523 = 13;
$al1528 = L[683];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(anf_arg1540,anf_arg1541);
break;
case 13: var anf_arg1543 = $ans1527;
$step1523 = 15;
$al1528 = L[682];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1528,link312);
}
$ans1527 = link312.app(anf_arg1542,anf_arg1543);
break;
case 14: var anf_arg1544 = G(l21526,"rest",L[684]);
$step1523 = 15;
$al1528 = L[685];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1528,merge$only$dups1535.$var);
}
$ans1527 = merge$only$dups1535.$var.app(l11525,anf_arg1544);
break;
case 15: ++R.GAS;
return $ans1527;
default: throw "No case numbered " + $step1523 + " in $temp_lam1524";
}
}
} catch($e1549) {
if(R.isCont($e1549) && ($step1523 !== 15)) {
$e1549.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1528,$temp_lam1524,$step1523,[l11525,l21526],[anf_arg1542]);
}
if(R.isPyretException($e1549)) {
$e1549.pyretStack.push($al1528);
}
throw $e1549;
}
};
var anf_assign1550 = R.makeFunction($temp_lam1524);
merge$only$dups1535.$var = anf_assign1550;
var $temp_lam1552 = function($s11553,$s21554) {
var $step1551 = 0;
var $ans1555 = D;
var $al1556 = L[696];
try {
if(R.isActivationRecord($s11553)) {
$step1551 = $s11553.step;
$al1556 = $s11553.from;
$ans1555 = $s11553.ans;
s11553 = $s11553.args[0];
s21554 = $s11553.args[1];
ann_check_temp1561 = $s11553.vars[0];
s1$elems1557 = $s11553.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[696],2,$t);
}
var s11553 = $s11553;
var s21554 = $s21554;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1551) {
case 0: $step1551 = 1;
$al1556 = L[695];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1556,set$to$sorted$elems1446.$var);
}
$ans1555 = set$to$sorted$elems1446.$var.app(s11553);
break;
case 1: var s1$elems1557 = $ans1555;
$step1551 = 2;
$al1556 = L[694];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1556,set$to$sorted$elems1446.$var);
}
$ans1555 = set$to$sorted$elems1446.$var.app(s21554);
break;
case 2: var s2$elems1558 = $ans1555;
$step1551 = 3;
$al1556 = L[693];
if(!(R.isFunction(merge$only$dups1535.$var))) {
R.ffi.throwNonFunApp($al1556,merge$only$dups1535.$var);
}
$ans1555 = merge$only$dups1535.$var.app(s1$elems1557,s2$elems1558);
break;
case 3: var new$elems1559 = $ans1555;
$step1551 = 4;
$al1556 = L[692];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1556,elems$to$balanced$avl1481.$var);
}
$ans1555 = elems$to$balanced$avl1481.$var.app(new$elems1559);
break;
case 4: var anf_arg1560 = $ans1555;
$step1551 = 5;
$al1556 = L[691];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1556,tree$set1180.$var);
}
$ans1555 = tree$set1180.$var.app(anf_arg1560);
break;
case 5: var ann_check_temp1561 = $ans1555;
$step1551 = 6;
$al1556 = L[690];
R._checkAnn(L[690],Set869,ann_check_temp1561);
break;
case 6: $step1551 = 7;
$ans1555 = ann_check_temp1561;
break;
case 7: ++R.GAS;
return $ans1555;
default: throw "No case numbered " + $step1551 + " in $temp_lam1552";
}
}
} catch($e1562) {
if(R.isCont($e1562) && ($step1551 !== 7)) {
$e1562.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1556,$temp_lam1552,$step1551,[s11553,s21554],[ann_check_temp1561,s1$elems1557]);
}
if(R.isPyretException($e1562)) {
$e1562.pyretStack.push($al1556);
}
throw $e1562;
}
};
var anf_assign1563 = R.makeFunction($temp_lam1552);
tree$set$intersect1310.$var = anf_assign1563;
var $temp_lam1565 = function($l11566,$l21567) {
var $step1564 = 0;
var $ans1568 = D;
var $al1569 = L[717];
try {
if(R.isActivationRecord($l11566)) {
$step1564 = $l11566.step;
$al1569 = $l11566.from;
$ans1568 = $l11566.ans;
l11566 = $l11566.args[0];
l21567 = $l11566.args[1];
anf_arg1583 = $l11566.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[717],2,$t);
}
var l11566 = $l11566;
var l21567 = $l21567;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1564) {
case 0: $step1564 = 1;
$al1569 = L[716];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1569,is$empty1148);
}
$ans1568 = is$empty1148.app(l11566);
break;
case 1: var anf_arg1570 = $ans1568;
$al1569 = L[697];
var anf_if1589 = R.checkWrapBoolean(anf_arg1570);
if(R.isPyretTrue(anf_if1589)) {
$step1564 = 2;
} else {
$step1564 = 3;
}
break;
case 2: $step1564 = 5;
$ans1568 = (true);
break;
case 3: $step1564 = 4;
$al1569 = L[698];
if(!(R.isFunction(is$empty1148))) {
R.ffi.throwNonFunApp($al1569,is$empty1148);
}
$ans1568 = is$empty1148.app(l21567);
break;
case 4: var anf_arg1571 = $ans1568;
$step1564 = 5;
$al1569 = L[697];
$ans1568 = R.checkWrapBoolean(anf_arg1571);
break;
case 5: var anf_arg1572 = $ans1568;
$al1569 = L[697];
var anf_if1588 = R.checkWrapBoolean(anf_arg1572);
if(R.isPyretTrue(anf_if1588)) {
$step1564 = 6;
} else {
$step1564 = 7;
}
break;
case 6: $step1564 = 15;
$ans1568 = l11566;
break;
case 7: var anf_arg1573 = G(l11566,"first",L[699]);
var anf_arg1574 = G(l21567,"first",L[700]);
$step1564 = 8;
$al1569 = L[715];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1569,equal$always4);
}
$ans1568 = equal$always4.app(anf_arg1573,anf_arg1574);
break;
case 8: var anf_arg1575 = $ans1568;
$al1569 = L[701];
var anf_if1587 = R.checkWrapBoolean(anf_arg1575);
if(R.isPyretTrue(anf_if1587)) {
$step1564 = 9;
} else {
$step1564 = 10;
}
break;
case 9: var anf_arg1577 = G(l11566,"rest",L[702]);
var anf_arg1578 = G(l21567,"rest",L[703]);
$step1564 = 15;
$al1569 = L[704];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(anf_arg1577,anf_arg1578);
break;
case 10: var anf_arg1579 = G(l11566,"first",L[705]);
var anf_arg1580 = G(l21567,"first",L[706]);
$step1564 = 11;
$al1569 = L[714];
if(!(R.isFunction(_lessthan5))) {
R.ffi.throwNonFunApp($al1569,_lessthan5);
}
$ans1568 = _lessthan5.app(anf_arg1579,anf_arg1580);
break;
case 11: var anf_arg1581 = $ans1568;
$al1569 = L[707];
var anf_if1586 = R.checkWrapBoolean(anf_arg1581);
if(R.isPyretTrue(anf_if1586)) {
$step1564 = 12;
} else {
$step1564 = 14;
}
break;
case 12: var anf_arg1583 = G(l11566,"first",L[708]);
var anf_arg1582 = G(l11566,"rest",L[709]);
$step1564 = 13;
$al1569 = L[711];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(anf_arg1582,l21567);
break;
case 13: var anf_arg1584 = $ans1568;
$step1564 = 15;
$al1569 = L[710];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1569,link312);
}
$ans1568 = link312.app(anf_arg1583,anf_arg1584);
break;
case 14: var anf_arg1585 = G(l21567,"rest",L[712]);
$step1564 = 15;
$al1569 = L[713];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1569,merge$drop$l21576.$var);
}
$ans1568 = merge$drop$l21576.$var.app(l11566,anf_arg1585);
break;
case 15: ++R.GAS;
return $ans1568;
default: throw "No case numbered " + $step1564 + " in $temp_lam1565";
}
}
} catch($e1590) {
if(R.isCont($e1590) && ($step1564 !== 15)) {
$e1590.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1569,$temp_lam1565,$step1564,[l11566,l21567],[anf_arg1583]);
}
if(R.isPyretException($e1590)) {
$e1590.pyretStack.push($al1569);
}
throw $e1590;
}
};
var anf_assign1591 = R.makeFunction($temp_lam1565);
merge$drop$l21576.$var = anf_assign1591;
var $temp_lam1593 = function($s11594,$s21595) {
var $step1592 = 0;
var $ans1596 = D;
var $al1597 = L[724];
try {
if(R.isActivationRecord($s11594)) {
$step1592 = $s11594.step;
$al1597 = $s11594.from;
$ans1596 = $s11594.ans;
s11594 = $s11594.args[0];
s21595 = $s11594.args[1];
ann_check_temp1602 = $s11594.vars[0];
s1$elems1598 = $s11594.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[724],2,$t);
}
var s11594 = $s11594;
var s21595 = $s21595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1592) {
case 0: $step1592 = 1;
$al1597 = L[723];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1597,set$to$sorted$elems1446.$var);
}
$ans1596 = set$to$sorted$elems1446.$var.app(s11594);
break;
case 1: var s1$elems1598 = $ans1596;
$step1592 = 2;
$al1597 = L[722];
if(!(R.isFunction(set$to$sorted$elems1446.$var))) {
R.ffi.throwNonFunApp($al1597,set$to$sorted$elems1446.$var);
}
$ans1596 = set$to$sorted$elems1446.$var.app(s21595);
break;
case 2: var s2$elems1599 = $ans1596;
$step1592 = 3;
$al1597 = L[721];
if(!(R.isFunction(merge$drop$l21576.$var))) {
R.ffi.throwNonFunApp($al1597,merge$drop$l21576.$var);
}
$ans1596 = merge$drop$l21576.$var.app(s1$elems1598,s2$elems1599);
break;
case 3: var new$elems1600 = $ans1596;
$step1592 = 4;
$al1597 = L[720];
if(!(R.isFunction(elems$to$balanced$avl1481.$var))) {
R.ffi.throwNonFunApp($al1597,elems$to$balanced$avl1481.$var);
}
$ans1596 = elems$to$balanced$avl1481.$var.app(new$elems1600);
break;
case 4: var anf_arg1601 = $ans1596;
$step1592 = 5;
$al1597 = L[719];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1597,tree$set1180.$var);
}
$ans1596 = tree$set1180.$var.app(anf_arg1601);
break;
case 5: var ann_check_temp1602 = $ans1596;
$step1592 = 6;
$al1597 = L[718];
R._checkAnn(L[718],Set869,ann_check_temp1602);
break;
case 6: $step1592 = 7;
$ans1596 = ann_check_temp1602;
break;
case 7: ++R.GAS;
return $ans1596;
default: throw "No case numbered " + $step1592 + " in $temp_lam1593";
}
}
} catch($e1603) {
if(R.isCont($e1603) && ($step1592 !== 7)) {
$e1603.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1597,$temp_lam1593,$step1592,[s11594,s21595],[ann_check_temp1602,s1$elems1598]);
}
if(R.isPyretException($e1603)) {
$e1603.pyretStack.push($al1597);
}
throw $e1603;
}
};
var anf_assign1604 = R.makeFunction($temp_lam1593);
tree$set$difference1328.$var = anf_assign1604;
var $temp_lam1606 = function($f1607,$s1608) {
var $step1605 = 0;
var $ans1609 = D;
var $al1610 = L[728];
try {
if(R.isActivationRecord($f1607)) {
$step1605 = $f1607.step;
$al1610 = $f1607.from;
$ans1609 = $f1607.ans;
f1607 = $f1607.args[0];
s1608 = $f1607.args[1];
ann_check_temp1612 = $f1607.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[728],2,$t);
}
var f1607 = $f1607;
var s1608 = $s1608;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1605) {
case 0: $step1605 = 1;
$al1610 = L[727];
R._checkAnn(L[727],Set869,s1608);
break;
case 1: $step1605 = 2;
$al1610 = L[725];
$field1611 = R.getColonFieldLoc(s1608,"all",L[725]);
if(R.isMethod($field1611)) {
$ans1609 = $field1611.full_meth(s1608,f1607);
} else {
if(!(R.isFunction($field1611))) {
R.ffi.throwNonFunApp(L[725],$field1611);
}
$ans1609 = $field1611.app(f1607);
}
break;
case 2: var ann_check_temp1612 = $ans1609;
$step1605 = 3;
$al1610 = L[726];
R._checkAnn(L[726],$type$Boolean3,ann_check_temp1612);
break;
case 3: $step1605 = 4;
$ans1609 = ann_check_temp1612;
break;
case 4: ++R.GAS;
return $ans1609;
default: throw "No case numbered " + $step1605 + " in $temp_lam1606";
}
}
} catch($e1613) {
if(R.isCont($e1613) && ($step1605 !== 4)) {
$e1613.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1610,$temp_lam1606,$step1605,[f1607,s1608],[ann_check_temp1612]);
}
if(R.isPyretException($e1613)) {
$e1613.pyretStack.push($al1610);
}
throw $e1613;
}
};
var anf_assign1614 = R.makeFunction($temp_lam1606);
set$all1615.$var = anf_assign1614;
var $temp_lam1617 = function($f1618,$s1619) {
var $step1616 = 0;
var $ans1620 = D;
var $al1621 = L[732];
try {
if(R.isActivationRecord($f1618)) {
$step1616 = $f1618.step;
$al1621 = $f1618.from;
$ans1620 = $f1618.ans;
f1618 = $f1618.args[0];
s1619 = $f1618.args[1];
ann_check_temp1623 = $f1618.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[732],2,$t);
}
var f1618 = $f1618;
var s1619 = $s1619;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1616) {
case 0: $step1616 = 1;
$al1621 = L[731];
R._checkAnn(L[731],Set869,s1619);
break;
case 1: $step1616 = 2;
$al1621 = L[729];
$field1622 = R.getColonFieldLoc(s1619,"any",L[729]);
if(R.isMethod($field1622)) {
$ans1620 = $field1622.full_meth(s1619,f1618);
} else {
if(!(R.isFunction($field1622))) {
R.ffi.throwNonFunApp(L[729],$field1622);
}
$ans1620 = $field1622.app(f1618);
}
break;
case 2: var ann_check_temp1623 = $ans1620;
$step1616 = 3;
$al1621 = L[730];
R._checkAnn(L[730],$type$Boolean3,ann_check_temp1623);
break;
case 3: $step1616 = 4;
$ans1620 = ann_check_temp1623;
break;
case 4: ++R.GAS;
return $ans1620;
default: throw "No case numbered " + $step1616 + " in $temp_lam1617";
}
}
} catch($e1624) {
if(R.isCont($e1624) && ($step1616 !== 4)) {
$e1624.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1621,$temp_lam1617,$step1616,[f1618,s1619],[ann_check_temp1623]);
}
if(R.isPyretException($e1624)) {
$e1624.pyretStack.push($al1621);
}
throw $e1624;
}
};
var anf_assign1625 = R.makeFunction($temp_lam1617);
set$any1626.$var = anf_assign1625;
var $temp_lam1628 = function($f1629,$base1630,$s1631) {
var $step1627 = 0;
var $ans1632 = D;
var $al1633 = L[735];
try {
if(R.isActivationRecord($f1629)) {
$step1627 = $f1629.step;
$al1633 = $f1629.from;
$ans1632 = $f1629.ans;
f1629 = $f1629.args[0];
base1630 = $f1629.args[1];
s1631 = $f1629.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[735],3,$t);
}
var f1629 = $f1629;
var base1630 = $base1630;
var s1631 = $s1631;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1627) {
case 0: $step1627 = 1;
$al1633 = L[734];
R._checkAnn(L[734],Set869,s1631);
break;
case 1: $step1627 = 2;
$al1633 = L[733];
$field1634 = R.getColonFieldLoc(s1631,"fold",L[733]);
if(R.isMethod($field1634)) {
$ans1632 = $field1634.full_meth(s1631,f1629,base1630);
} else {
if(!(R.isFunction($field1634))) {
R.ffi.throwNonFunApp(L[733],$field1634);
}
$ans1632 = $field1634.app(f1629,base1630);
}
break;
case 2: ++R.GAS;
return $ans1632;
default: throw "No case numbered " + $step1627 + " in $temp_lam1628";
}
}
} catch($e1635) {
if(R.isCont($e1635) && ($step1627 !== 2)) {
$e1635.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1633,$temp_lam1628,$step1627,[f1629,base1630,s1631],[]);
}
if(R.isPyretException($e1635)) {
$e1635.pyretStack.push($al1633);
}
throw $e1635;
}
};
var anf_assign1636 = R.makeFunction($temp_lam1628);
set$fold1637.$var = anf_assign1636;
var $temp_lam1639 = function($lst1640,$base$set1641) {
var $step1638 = 0;
var $ans1642 = D;
var $al1643 = L[741];
try {
if(R.isActivationRecord($lst1640)) {
$step1638 = $lst1640.step;
$al1643 = $lst1640.from;
$ans1642 = $lst1640.ans;
lst1640 = $lst1640.args[0];
base$set1641 = $lst1640.args[1];
ann_check_temp1654 = $lst1640.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[741],2,$t);
}
var lst1640 = $lst1640;
var base$set1641 = $base$set1641;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1638) {
case 0: $step1638 = 1;
$al1643 = L[739];
R._checkAnn(L[739],R.getDotAnn(L[739],"lists",lists31,"List"),lst1640);
break;
case 1: $step1638 = 2;
$al1643 = L[740];
R._checkAnn(L[740],Set869,base$set1641);
break;
case 2: var $temp_lam1645 = function($s1646,$elem1647) {
var $step1644 = 0;
var $ans1648 = D;
var $al1649 = L[737];
try {
if(R.isActivationRecord($s1646)) {
$step1644 = $s1646.step;
$al1649 = $s1646.from;
$ans1648 = $s1646.ans;
s1646 = $s1646.args[0];
elem1647 = $s1646.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[737],2,$t);
}
var s1646 = $s1646;
var elem1647 = $elem1647;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1644) {
case 0: $step1644 = 1;
$al1649 = L[736];
$field1650 = R.getColonFieldLoc(s1646,"add",L[736]);
if(R.isMethod($field1650)) {
$ans1648 = $field1650.full_meth(s1646,elem1647);
} else {
if(!(R.isFunction($field1650))) {
R.ffi.throwNonFunApp(L[736],$field1650);
}
$ans1648 = $field1650.app(elem1647);
}
break;
case 1: ++R.GAS;
return $ans1648;
default: throw "No case numbered " + $step1644 + " in $temp_lam1645";
}
}
} catch($e1651) {
if(R.isCont($e1651) && ($step1644 !== 1)) {
$e1651.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1649,$temp_lam1645,$step1644,[s1646,elem1647],[]);
}
if(R.isPyretException($e1651)) {
$e1651.pyretStack.push($al1649);
}
throw $e1651;
}
};
var anf_arg1652 = R.makeFunction($temp_lam1645);
$step1638 = 3;
$al1643 = L[737];
$field1653 = R.getColonFieldLoc(lists24,"fold",L[737]);
if(R.isMethod($field1653)) {
$ans1642 = $field1653.full_meth(lists24,anf_arg1652,base$set1641,lst1640);
} else {
if(!(R.isFunction($field1653))) {
R.ffi.throwNonFunApp(L[737],$field1653);
}
$ans1642 = $field1653.app(anf_arg1652,base$set1641,lst1640);
}
break;
case 3: var ann_check_temp1654 = $ans1642;
$step1638 = 4;
$al1643 = L[738];
R._checkAnn(L[738],Set869,ann_check_temp1654);
break;
case 4: $step1638 = 5;
$ans1642 = ann_check_temp1654;
break;
case 5: ++R.GAS;
return $ans1642;
default: throw "No case numbered " + $step1638 + " in $temp_lam1639";
}
}
} catch($e1655) {
if(R.isCont($e1655) && ($step1638 !== 5)) {
$e1655.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1643,$temp_lam1639,$step1638,[lst1640,base$set1641],[ann_check_temp1654]);
}
if(R.isPyretException($e1655)) {
$e1655.pyretStack.push($al1643);
}
throw $e1655;
}
};
var anf_assign1656 = R.makeFunction($temp_lam1639);
list$to$set1657.$var = anf_assign1656;
var $temp_lam1659 = function($lst1660) {
var $step1658 = 0;
var $ans1661 = D;
var $al1662 = L[746];
try {
if(R.isActivationRecord($lst1660)) {
$step1658 = $lst1660.step;
$al1662 = $lst1660.from;
$ans1661 = $lst1660.ans;
lst1660 = $lst1660.args[0];
ann_check_temp1664 = $lst1660.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[746],1,$t);
}
var lst1660 = $lst1660;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1658) {
case 0: $step1658 = 1;
$al1662 = L[745];
R._checkAnn(L[745],R.getDotAnn(L[745],"lists",lists31,"List"),lst1660);
break;
case 1: $step1658 = 2;
$al1662 = L[744];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1662,list$set919.$var);
}
$ans1661 = list$set919.$var.app(empty114);
break;
case 2: var anf_arg1663 = $ans1661;
$step1658 = 3;
$al1662 = L[743];
if(!(R.isFunction(list$to$set1657.$var))) {
R.ffi.throwNonFunApp($al1662,list$to$set1657.$var);
}
$ans1661 = list$to$set1657.$var.app(lst1660,anf_arg1663);
break;
case 3: var ann_check_temp1664 = $ans1661;
$step1658 = 4;
$al1662 = L[742];
R._checkAnn(L[742],Set869,ann_check_temp1664);
break;
case 4: $step1658 = 5;
$ans1661 = ann_check_temp1664;
break;
case 5: ++R.GAS;
return $ans1661;
default: throw "No case numbered " + $step1658 + " in $temp_lam1659";
}
}
} catch($e1665) {
if(R.isCont($e1665) && ($step1658 !== 5)) {
$e1665.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1662,$temp_lam1659,$step1658,[lst1660],[ann_check_temp1664]);
}
if(R.isPyretException($e1665)) {
$e1665.pyretStack.push($al1662);
}
throw $e1665;
}
};
var anf_assign1666 = R.makeFunction($temp_lam1659);
list$to$list$set1667.$var = anf_assign1666;
var $temp_lam1669 = function($lst1670) {
var $step1668 = 0;
var $ans1671 = D;
var $al1672 = L[751];
try {
if(R.isActivationRecord($lst1670)) {
$step1668 = $lst1670.step;
$al1672 = $lst1670.from;
$ans1671 = $lst1670.ans;
lst1670 = $lst1670.args[0];
ann_check_temp1674 = $lst1670.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[751],1,$t);
}
var lst1670 = $lst1670;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1668) {
case 0: $step1668 = 1;
$al1672 = L[750];
R._checkAnn(L[750],R.getDotAnn(L[750],"lists",lists31,"List"),lst1670);
break;
case 1: $step1668 = 2;
$al1672 = L[749];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1672,tree$set1180.$var);
}
$ans1671 = tree$set1180.$var.app(leaf97.$var);
break;
case 2: var anf_arg1673 = $ans1671;
$step1668 = 3;
$al1672 = L[748];
if(!(R.isFunction(list$to$set1657.$var))) {
R.ffi.throwNonFunApp($al1672,list$to$set1657.$var);
}
$ans1671 = list$to$set1657.$var.app(lst1670,anf_arg1673);
break;
case 3: var ann_check_temp1674 = $ans1671;
$step1668 = 4;
$al1672 = L[747];
R._checkAnn(L[747],Set869,ann_check_temp1674);
break;
case 4: $step1668 = 5;
$ans1671 = ann_check_temp1674;
break;
case 5: ++R.GAS;
return $ans1671;
default: throw "No case numbered " + $step1668 + " in $temp_lam1669";
}
}
} catch($e1675) {
if(R.isCont($e1675) && ($step1668 !== 5)) {
$e1675.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1672,$temp_lam1669,$step1668,[lst1670],[ann_check_temp1674]);
}
if(R.isPyretException($e1675)) {
$e1675.pyretStack.push($al1672);
}
throw $e1675;
}
};
var anf_assign1676 = R.makeFunction($temp_lam1669);
list$to$tree$set1677.$var = anf_assign1676;
var $temp_lam1679 = function($lst1680) {
var $step1678 = 0;
var $ans1681 = D;
var $al1682 = L[755];
try {
if(R.isActivationRecord($lst1680)) {
$step1678 = $lst1680.step;
$al1682 = $lst1680.from;
$ans1681 = $lst1680.ans;
lst1680 = $lst1680.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[755],1,$t);
}
var lst1680 = $lst1680;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1678) {
case 0: $step1678 = 1;
$al1682 = L[754];
R._checkAnn(L[754],R.getDotAnn(L[754],"lists",lists31,"List"),lst1680);
break;
case 1: var $temp_lam1684 = function($tree1685,$elt1686) {
var $step1683 = 0;
var $ans1687 = D;
var $al1688 = L[753];
try {
if(R.isActivationRecord($tree1685)) {
$step1683 = $tree1685.step;
$al1688 = $tree1685.from;
$ans1687 = $tree1685.ans;
tree1685 = $tree1685.args[0];
elt1686 = $tree1685.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[753],2,$t);
}
var tree1685 = $tree1685;
var elt1686 = $elt1686;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1683) {
case 0: $step1683 = 1;
$al1688 = L[752];
$field1689 = R.getColonFieldLoc(tree1685,"insert",L[752]);
if(R.isMethod($field1689)) {
$ans1687 = $field1689.full_meth(tree1685,elt1686);
} else {
if(!(R.isFunction($field1689))) {
R.ffi.throwNonFunApp(L[752],$field1689);
}
$ans1687 = $field1689.app(elt1686);
}
break;
case 1: ++R.GAS;
return $ans1687;
default: throw "No case numbered " + $step1683 + " in $temp_lam1684";
}
}
} catch($e1690) {
if(R.isCont($e1690) && ($step1683 !== 1)) {
$e1690.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1688,$temp_lam1684,$step1683,[tree1685,elt1686],[]);
}
if(R.isPyretException($e1690)) {
$e1690.pyretStack.push($al1688);
}
throw $e1690;
}
};
var anf_arg1691 = R.makeFunction($temp_lam1684);
$step1678 = 2;
$al1682 = L[753];
$field1692 = R.getColonFieldLoc(lists24,"fold",L[753]);
if(R.isMethod($field1692)) {
$ans1681 = $field1692.full_meth(lists24,anf_arg1691,leaf97.$var,lst1680);
} else {
if(!(R.isFunction($field1692))) {
R.ffi.throwNonFunApp(L[753],$field1692);
}
$ans1681 = $field1692.app(anf_arg1691,leaf97.$var,lst1680);
}
break;
case 2: ++R.GAS;
return $ans1681;
default: throw "No case numbered " + $step1678 + " in $temp_lam1679";
}
}
} catch($e1693) {
if(R.isCont($e1693) && ($step1678 !== 2)) {
$e1693.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1682,$temp_lam1679,$step1678,[lst1680],[]);
}
if(R.isPyretException($e1693)) {
$e1693.pyretStack.push($al1682);
}
throw $e1693;
}
};
var anf_assign1694 = R.makeFunction($temp_lam1679);
list$to$tree1695.$var = anf_assign1694;
var $temp_lam1697 = function($arr1698) {
var $step1696 = 0;
var $ans1699 = D;
var $al1700 = L[761];
try {
if(R.isActivationRecord($arr1698)) {
$step1696 = $arr1698.step;
$al1700 = $arr1698.from;
$ans1699 = $arr1698.ans;
arr1698 = $arr1698.args[0];
ann_check_temp1712 = $arr1698.vars[0];
anf_arg1710 = $arr1698.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[761],1,$t);
}
var arr1698 = $arr1698;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1696) {
case 0: $step1696 = 1;
$al1700 = L[760];
R._checkAnn(L[760],$type$RawArray18,arr1698);
break;
case 1: var $temp_lam1702 = function($ls1703,$elt1704,$$underscore1705) {
var $step1701 = 0;
var $ans1706 = D;
var $al1707 = L[757];
try {
if(R.isActivationRecord($ls1703)) {
$step1701 = $ls1703.step;
$al1707 = $ls1703.from;
$ans1706 = $ls1703.ans;
ls1703 = $ls1703.args[0];
elt1704 = $ls1703.args[1];
$underscore1705 = $ls1703.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[757],3,$t);
}
var ls1703 = $ls1703;
var elt1704 = $elt1704;
var $underscore1705 = $$underscore1705;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1701) {
case 0: $step1701 = 1;
$al1707 = L[756];
$field1708 = R.getColonFieldLoc(ls1703,"add",L[756]);
if(R.isMethod($field1708)) {
$ans1706 = $field1708.full_meth(ls1703,elt1704);
} else {
if(!(R.isFunction($field1708))) {
R.ffi.throwNonFunApp(L[756],$field1708);
}
$ans1706 = $field1708.app(elt1704);
}
break;
case 1: ++R.GAS;
return $ans1706;
default: throw "No case numbered " + $step1701 + " in $temp_lam1702";
}
}
} catch($e1709) {
if(R.isCont($e1709) && ($step1701 !== 1)) {
$e1709.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1707,$temp_lam1702,$step1701,[ls1703,elt1704,$underscore1705],[]);
}
if(R.isPyretException($e1709)) {
$e1709.pyretStack.push($al1707);
}
throw $e1709;
}
};
var anf_arg1710 = R.makeFunction($temp_lam1702);
$step1696 = 2;
$al1700 = L[759];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1700,list$set919.$var);
}
$ans1699 = list$set919.$var.app(empty114);
break;
case 2: var anf_arg1711 = $ans1699;
$step1696 = 3;
$al1700 = L[757];
if(!(R.isFunction(raw$array$fold19))) {
R.ffi.throwNonFunApp($al1700,raw$array$fold19);
}
$ans1699 = raw$array$fold19.app(anf_arg1710,anf_arg1711,arr1698,(0));
break;
case 3: var ann_check_temp1712 = $ans1699;
$step1696 = 4;
$al1700 = L[758];
R._checkAnn(L[758],Set869,ann_check_temp1712);
break;
case 4: $step1696 = 5;
$ans1699 = ann_check_temp1712;
break;
case 5: ++R.GAS;
return $ans1699;
default: throw "No case numbered " + $step1696 + " in $temp_lam1697";
}
}
} catch($e1713) {
if(R.isCont($e1713) && ($step1696 !== 5)) {
$e1713.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1700,$temp_lam1697,$step1696,[arr1698],[ann_check_temp1712,anf_arg1710]);
}
if(R.isPyretException($e1713)) {
$e1713.pyretStack.push($al1700);
}
throw $e1713;
}
};
var anf_assign1714 = R.makeFunction($temp_lam1697);
arr$to$list$set1715.$var = anf_assign1714;
var $temp_lam1717 = function($arr1718) {
var $step1716 = 0;
var $ans1719 = D;
var $al1720 = L[767];
try {
if(R.isActivationRecord($arr1718)) {
$step1716 = $arr1718.step;
$al1720 = $arr1718.from;
$ans1719 = $arr1718.ans;
arr1718 = $arr1718.args[0];
ann_check_temp1732 = $arr1718.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[767],1,$t);
}
var arr1718 = $arr1718;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1716) {
case 0: $step1716 = 1;
$al1720 = L[766];
R._checkAnn(L[766],$type$RawArray18,arr1718);
break;
case 1: var $temp_lam1722 = function($t1723,$elt1724,$$underscore1725) {
var $step1721 = 0;
var $ans1726 = D;
var $al1727 = L[763];
try {
if(R.isActivationRecord($t1723)) {
$step1721 = $t1723.step;
$al1727 = $t1723.from;
$ans1726 = $t1723.ans;
t1723 = $t1723.args[0];
elt1724 = $t1723.args[1];
$underscore1725 = $t1723.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[763],3,$t);
}
var t1723 = $t1723;
var elt1724 = $elt1724;
var $underscore1725 = $$underscore1725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1721) {
case 0: $step1721 = 1;
$al1727 = L[762];
$field1728 = R.getColonFieldLoc(t1723,"insert",L[762]);
if(R.isMethod($field1728)) {
$ans1726 = $field1728.full_meth(t1723,elt1724);
} else {
if(!(R.isFunction($field1728))) {
R.ffi.throwNonFunApp(L[762],$field1728);
}
$ans1726 = $field1728.app(elt1724);
}
break;
case 1: ++R.GAS;
return $ans1726;
default: throw "No case numbered " + $step1721 + " in $temp_lam1722";
}
}
} catch($e1729) {
if(R.isCont($e1729) && ($step1721 !== 1)) {
$e1729.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1727,$temp_lam1722,$step1721,[t1723,elt1724,$underscore1725],[]);
}
if(R.isPyretException($e1729)) {
$e1729.pyretStack.push($al1727);
}
throw $e1729;
}
};
var anf_arg1730 = R.makeFunction($temp_lam1722);
$step1716 = 2;
$al1720 = L[763];
if(!(R.isFunction(raw$array$fold19))) {
R.ffi.throwNonFunApp($al1720,raw$array$fold19);
}
$ans1719 = raw$array$fold19.app(anf_arg1730,leaf97.$var,arr1718,(0));
break;
case 2: var tree1731 = $ans1719;
$step1716 = 3;
$al1720 = L[765];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al1720,tree$set1180.$var);
}
$ans1719 = tree$set1180.$var.app(tree1731);
break;
case 3: var ann_check_temp1732 = $ans1719;
$step1716 = 4;
$al1720 = L[764];
R._checkAnn(L[764],Set869,ann_check_temp1732);
break;
case 4: $step1716 = 5;
$ans1719 = ann_check_temp1732;
break;
case 5: ++R.GAS;
return $ans1719;
default: throw "No case numbered " + $step1716 + " in $temp_lam1717";
}
}
} catch($e1733) {
if(R.isCont($e1733) && ($step1716 !== 5)) {
$e1733.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1720,$temp_lam1717,$step1716,[arr1718],[ann_check_temp1732]);
}
if(R.isPyretException($e1733)) {
$e1733.pyretStack.push($al1720);
}
throw $e1733;
}
};
var anf_assign1734 = R.makeFunction($temp_lam1717);
arr$to$tree$set1735.$var = anf_assign1734;
$step43 = 1;
$al47 = L[844];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al47,list$set919.$var);
}
$ans46 = list$set919.$var.app(empty114);
break;
case 1: var empty$list$set1807 = $ans46;
$step43 = 2;
$al47 = L[843];
if(!(R.isFunction(tree$set1180.$var))) {
R.ffi.throwNonFunApp($al47,tree$set1180.$var);
}
$ans46 = tree$set1180.$var.app(leaf97.$var);
break;
case 2: var empty$tree$set1864 = $ans46;
var makeSet21747 = {"$var":D};
var makeSet31762 = {"$var":D};
var makeSet41780 = {"$var":D};
var makeSet51801 = {"$var":D};
var $temp_lam1737 = function($a1738,$b1739) {
var $step1736 = 0;
var $ans1740 = D;
var $al1741 = L[772];
try {
if(R.isActivationRecord($a1738)) {
$step1736 = $a1738.step;
$al1741 = $a1738.from;
$ans1740 = $a1738.ans;
a1738 = $a1738.args[0];
b1739 = $a1738.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[772],2,$t);
}
var a1738 = $a1738;
var b1739 = $b1739;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1736) {
case 0: $step1736 = 1;
$al1741 = L[768];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1741,equal$always4);
}
$ans1740 = equal$always4.app(a1738,b1739);
break;
case 1: var anf_arg1742 = $ans1740;
$al1741 = L[768];
var anf_if1744 = R.checkWrapBoolean(anf_arg1742);
if(R.isPyretTrue(anf_if1744)) {
$step1736 = 2;
} else {
$step1736 = 3;
}
break;
case 2: $step1736 = 5;
$al1741 = L[769];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(a1738,empty114);
break;
case 3: $step1736 = 4;
$al1741 = L[771];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(b1739,empty114);
break;
case 4: var anf_arg1743 = $ans1740;
$step1736 = 5;
$al1741 = L[770];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1741,link312);
}
$ans1740 = link312.app(a1738,anf_arg1743);
break;
case 5: ++R.GAS;
return $ans1740;
default: throw "No case numbered " + $step1736 + " in $temp_lam1737";
}
}
} catch($e1745) {
if(R.isCont($e1745) && ($step1736 !== 5)) {
$e1745.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1741,$temp_lam1737,$step1736,[a1738,b1739],[]);
}
if(R.isPyretException($e1745)) {
$e1745.pyretStack.push($al1741);
}
throw $e1745;
}
};
var anf_assign1746 = R.makeFunction($temp_lam1737);
makeSet21747.$var = anf_assign1746;
var $temp_lam1749 = function($a1750,$b1751,$c1752) {
var $step1748 = 0;
var $ans1753 = D;
var $al1754 = L[780];
try {
if(R.isActivationRecord($a1750)) {
$step1748 = $a1750.step;
$al1754 = $a1750.from;
$ans1753 = $a1750.ans;
a1750 = $a1750.args[0];
b1751 = $a1750.args[1];
c1752 = $a1750.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[780],3,$t);
}
var a1750 = $a1750;
var b1751 = $b1751;
var c1752 = $c1752;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1748) {
case 0: $step1748 = 1;
$al1754 = L[773];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1754,equal$always4);
}
$ans1753 = equal$always4.app(a1750,b1751);
break;
case 1: var anf_arg1755 = $ans1753;
$al1754 = L[773];
var anf_if1759 = R.checkWrapBoolean(anf_arg1755);
if(R.isPyretTrue(anf_if1759)) {
$step1748 = 2;
} else {
$step1748 = 3;
}
break;
case 2: $step1748 = 8;
$al1754 = L[774];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(b1751,c1752);
break;
case 3: $step1748 = 4;
$al1754 = L[779];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1754,equal$always4);
}
$ans1753 = equal$always4.app(a1750,c1752);
break;
case 4: var anf_arg1756 = $ans1753;
$al1754 = L[775];
var anf_if1758 = R.checkWrapBoolean(anf_arg1756);
if(R.isPyretTrue(anf_if1758)) {
$step1748 = 5;
} else {
$step1748 = 6;
}
break;
case 5: $step1748 = 8;
$al1754 = L[776];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(a1750,c1752);
break;
case 6: $step1748 = 7;
$al1754 = L[778];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1754,makeSet21747.$var);
}
$ans1753 = makeSet21747.$var.app(b1751,c1752);
break;
case 7: var anf_arg1757 = $ans1753;
$step1748 = 8;
$al1754 = L[777];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1754,link312);
}
$ans1753 = link312.app(a1750,anf_arg1757);
break;
case 8: ++R.GAS;
return $ans1753;
default: throw "No case numbered " + $step1748 + " in $temp_lam1749";
}
}
} catch($e1760) {
if(R.isCont($e1760) && ($step1748 !== 8)) {
$e1760.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1754,$temp_lam1749,$step1748,[a1750,b1751,c1752],[]);
}
if(R.isPyretException($e1760)) {
$e1760.pyretStack.push($al1754);
}
throw $e1760;
}
};
var anf_assign1761 = R.makeFunction($temp_lam1749);
makeSet31762.$var = anf_assign1761;
var $temp_lam1764 = function($a1765,$b1766,$c1767,$d1768) {
var $step1763 = 0;
var $ans1769 = D;
var $al1770 = L[791];
try {
if(R.isActivationRecord($a1765)) {
$step1763 = $a1765.step;
$al1770 = $a1765.from;
$ans1769 = $a1765.ans;
a1765 = $a1765.args[0];
b1766 = $a1765.args[1];
c1767 = $a1765.args[2];
d1768 = $a1765.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[791],4,$t);
}
var a1765 = $a1765;
var b1766 = $b1766;
var c1767 = $c1767;
var d1768 = $d1768;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1763) {
case 0: $step1763 = 1;
$al1770 = L[781];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,b1766);
break;
case 1: var anf_arg1771 = $ans1769;
$al1770 = L[781];
var anf_if1777 = R.checkWrapBoolean(anf_arg1771);
if(R.isPyretTrue(anf_if1777)) {
$step1763 = 2;
} else {
$step1763 = 3;
}
break;
case 2: $step1763 = 11;
$al1770 = L[782];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(b1766,c1767,d1768);
break;
case 3: $step1763 = 4;
$al1770 = L[790];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,c1767);
break;
case 4: var anf_arg1772 = $ans1769;
$al1770 = L[783];
var anf_if1776 = R.checkWrapBoolean(anf_arg1772);
if(R.isPyretTrue(anf_if1776)) {
$step1763 = 5;
} else {
$step1763 = 6;
}
break;
case 5: $step1763 = 11;
$al1770 = L[784];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(a1765,c1767,d1768);
break;
case 6: $step1763 = 7;
$al1770 = L[789];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1770,equal$always4);
}
$ans1769 = equal$always4.app(a1765,d1768);
break;
case 7: var anf_arg1773 = $ans1769;
$al1770 = L[785];
var anf_if1775 = R.checkWrapBoolean(anf_arg1773);
if(R.isPyretTrue(anf_if1775)) {
$step1763 = 8;
} else {
$step1763 = 9;
}
break;
case 8: $step1763 = 11;
$al1770 = L[786];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(a1765,b1766,c1767);
break;
case 9: $step1763 = 10;
$al1770 = L[788];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1770,makeSet31762.$var);
}
$ans1769 = makeSet31762.$var.app(b1766,c1767,d1768);
break;
case 10: var anf_arg1774 = $ans1769;
$step1763 = 11;
$al1770 = L[787];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1770,link312);
}
$ans1769 = link312.app(a1765,anf_arg1774);
break;
case 11: ++R.GAS;
return $ans1769;
default: throw "No case numbered " + $step1763 + " in $temp_lam1764";
}
}
} catch($e1778) {
if(R.isCont($e1778) && ($step1763 !== 11)) {
$e1778.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1770,$temp_lam1764,$step1763,[a1765,b1766,c1767,d1768],[]);
}
if(R.isPyretException($e1778)) {
$e1778.pyretStack.push($al1770);
}
throw $e1778;
}
};
var anf_assign1779 = R.makeFunction($temp_lam1764);
makeSet41780.$var = anf_assign1779;
var $temp_lam1782 = function($a1783,$b1784,$c1785,$d1786,$e1787) {
var $step1781 = 0;
var $ans1788 = D;
var $al1789 = L[805];
try {
if(R.isActivationRecord($a1783)) {
$step1781 = $a1783.step;
$al1789 = $a1783.from;
$ans1788 = $a1783.ans;
a1783 = $a1783.args[0];
b1784 = $a1783.args[1];
c1785 = $a1783.args[2];
d1786 = $a1783.args[3];
e1787 = $a1783.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[805],5,$t);
}
var a1783 = $a1783;
var b1784 = $b1784;
var c1785 = $c1785;
var d1786 = $d1786;
var e1787 = $e1787;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1781) {
case 0: $step1781 = 1;
$al1789 = L[792];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,b1784);
break;
case 1: var anf_arg1790 = $ans1788;
$al1789 = L[792];
var anf_if1798 = R.checkWrapBoolean(anf_arg1790);
if(R.isPyretTrue(anf_if1798)) {
$step1781 = 2;
} else {
$step1781 = 3;
}
break;
case 2: $step1781 = 14;
$al1789 = L[793];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(b1784,c1785,d1786,e1787);
break;
case 3: $step1781 = 4;
$al1789 = L[804];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,c1785);
break;
case 4: var anf_arg1791 = $ans1788;
$al1789 = L[794];
var anf_if1797 = R.checkWrapBoolean(anf_arg1791);
if(R.isPyretTrue(anf_if1797)) {
$step1781 = 5;
} else {
$step1781 = 6;
}
break;
case 5: $step1781 = 14;
$al1789 = L[795];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,c1785,d1786,e1787);
break;
case 6: $step1781 = 7;
$al1789 = L[803];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,d1786);
break;
case 7: var anf_arg1792 = $ans1788;
$al1789 = L[796];
var anf_if1796 = R.checkWrapBoolean(anf_arg1792);
if(R.isPyretTrue(anf_if1796)) {
$step1781 = 8;
} else {
$step1781 = 9;
}
break;
case 8: $step1781 = 14;
$al1789 = L[797];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,b1784,c1785,e1787);
break;
case 9: $step1781 = 10;
$al1789 = L[802];
if(!(R.isFunction(equal$always4))) {
R.ffi.throwNonFunApp($al1789,equal$always4);
}
$ans1788 = equal$always4.app(a1783,e1787);
break;
case 10: var anf_arg1793 = $ans1788;
$al1789 = L[798];
var anf_if1795 = R.checkWrapBoolean(anf_arg1793);
if(R.isPyretTrue(anf_if1795)) {
$step1781 = 11;
} else {
$step1781 = 12;
}
break;
case 11: $step1781 = 14;
$al1789 = L[799];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(a1783,b1784,c1785,d1786);
break;
case 12: $step1781 = 13;
$al1789 = L[801];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1789,makeSet41780.$var);
}
$ans1788 = makeSet41780.$var.app(b1784,c1785,d1786,e1787);
break;
case 13: var anf_arg1794 = $ans1788;
$step1781 = 14;
$al1789 = L[800];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1789,link312);
}
$ans1788 = link312.app(a1783,anf_arg1794);
break;
case 14: ++R.GAS;
return $ans1788;
default: throw "No case numbered " + $step1781 + " in $temp_lam1782";
}
}
} catch($e1799) {
if(R.isCont($e1799) && ($step1781 !== 14)) {
$e1799.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1789,$temp_lam1782,$step1781,[a1783,b1784,c1785,d1786,e1787],[]);
}
if(R.isPyretException($e1799)) {
$e1799.pyretStack.push($al1789);
}
throw $e1799;
}
};
var anf_assign1800 = R.makeFunction($temp_lam1782);
makeSet51801.$var = anf_assign1800;
var $temp_lam1803 = function($$resumer1804) {
var $step1802 = 0;
var $ans1805 = D;
var $al1806 = L[806];
try {
if(R.isActivationRecord($$resumer1804)) {
$step1802 = $$resumer1804.step;
$al1806 = $$resumer1804.from;
$ans1805 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[806],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1802) {
case 0: $step1802 = 1;
$ans1805 = empty$list$set1807;
break;
case 1: ++R.GAS;
return $ans1805;
default: throw "No case numbered " + $step1802 + " in $temp_lam1803";
}
}
} catch($e1808) {
if(R.isCont($e1808) && ($step1802 !== 1)) {
$e1808.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1806,$temp_lam1803,$step1802,[],[]);
}
if(R.isPyretException($e1808)) {
$e1808.pyretStack.push($al1806);
}
throw $e1808;
}
};
var anf_obj1854 = R.makeFunction($temp_lam1803);
var $temp_lam1810 = function($a1811) {
var $step1809 = 0;
var $ans1812 = D;
var $al1813 = L[809];
try {
if(R.isActivationRecord($a1811)) {
$step1809 = $a1811.step;
$al1813 = $a1811.from;
$ans1812 = $a1811.ans;
a1811 = $a1811.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[809],1,$t);
}
var a1811 = $a1811;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1809) {
case 0: $step1809 = 1;
$al1813 = L[808];
if(!(R.isFunction(link312))) {
R.ffi.throwNonFunApp($al1813,link312);
}
$ans1812 = link312.app(a1811,empty114);
break;
case 1: var anf_arg1814 = $ans1812;
$step1809 = 2;
$al1813 = L[807];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1813,list$set919.$var);
}
$ans1812 = list$set919.$var.app(anf_arg1814);
break;
case 2: ++R.GAS;
return $ans1812;
default: throw "No case numbered " + $step1809 + " in $temp_lam1810";
}
}
} catch($e1815) {
if(R.isCont($e1815) && ($step1809 !== 2)) {
$e1815.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1813,$temp_lam1810,$step1809,[a1811],[]);
}
if(R.isPyretException($e1815)) {
$e1815.pyretStack.push($al1813);
}
throw $e1815;
}
};
var anf_obj1855 = R.makeFunction($temp_lam1810);
var $temp_lam1817 = function($a1818,$b1819) {
var $step1816 = 0;
var $ans1820 = D;
var $al1821 = L[812];
try {
if(R.isActivationRecord($a1818)) {
$step1816 = $a1818.step;
$al1821 = $a1818.from;
$ans1820 = $a1818.ans;
a1818 = $a1818.args[0];
b1819 = $a1818.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[812],2,$t);
}
var a1818 = $a1818;
var b1819 = $b1819;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1816) {
case 0: $step1816 = 1;
$al1821 = L[811];
if(!(R.isFunction(makeSet21747.$var))) {
R.ffi.throwNonFunApp($al1821,makeSet21747.$var);
}
$ans1820 = makeSet21747.$var.app(a1818,b1819);
break;
case 1: var anf_arg1822 = $ans1820;
$step1816 = 2;
$al1821 = L[810];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1821,list$set919.$var);
}
$ans1820 = list$set919.$var.app(anf_arg1822);
break;
case 2: ++R.GAS;
return $ans1820;
default: throw "No case numbered " + $step1816 + " in $temp_lam1817";
}
}
} catch($e1823) {
if(R.isCont($e1823) && ($step1816 !== 2)) {
$e1823.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1821,$temp_lam1817,$step1816,[a1818,b1819],[]);
}
if(R.isPyretException($e1823)) {
$e1823.pyretStack.push($al1821);
}
throw $e1823;
}
};
var anf_obj1856 = R.makeFunction($temp_lam1817);
var $temp_lam1825 = function($a1826,$b1827,$c1828) {
var $step1824 = 0;
var $ans1829 = D;
var $al1830 = L[815];
try {
if(R.isActivationRecord($a1826)) {
$step1824 = $a1826.step;
$al1830 = $a1826.from;
$ans1829 = $a1826.ans;
a1826 = $a1826.args[0];
b1827 = $a1826.args[1];
c1828 = $a1826.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[815],3,$t);
}
var a1826 = $a1826;
var b1827 = $b1827;
var c1828 = $c1828;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1824) {
case 0: $step1824 = 1;
$al1830 = L[814];
if(!(R.isFunction(makeSet31762.$var))) {
R.ffi.throwNonFunApp($al1830,makeSet31762.$var);
}
$ans1829 = makeSet31762.$var.app(a1826,b1827,c1828);
break;
case 1: var anf_arg1831 = $ans1829;
$step1824 = 2;
$al1830 = L[813];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1830,list$set919.$var);
}
$ans1829 = list$set919.$var.app(anf_arg1831);
break;
case 2: ++R.GAS;
return $ans1829;
default: throw "No case numbered " + $step1824 + " in $temp_lam1825";
}
}
} catch($e1832) {
if(R.isCont($e1832) && ($step1824 !== 2)) {
$e1832.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1830,$temp_lam1825,$step1824,[a1826,b1827,c1828],[]);
}
if(R.isPyretException($e1832)) {
$e1832.pyretStack.push($al1830);
}
throw $e1832;
}
};
var anf_obj1857 = R.makeFunction($temp_lam1825);
var $temp_lam1834 = function($a1835,$b1836,$c1837,$d1838) {
var $step1833 = 0;
var $ans1839 = D;
var $al1840 = L[818];
try {
if(R.isActivationRecord($a1835)) {
$step1833 = $a1835.step;
$al1840 = $a1835.from;
$ans1839 = $a1835.ans;
a1835 = $a1835.args[0];
b1836 = $a1835.args[1];
c1837 = $a1835.args[2];
d1838 = $a1835.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[818],4,$t);
}
var a1835 = $a1835;
var b1836 = $b1836;
var c1837 = $c1837;
var d1838 = $d1838;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1833) {
case 0: $step1833 = 1;
$al1840 = L[817];
if(!(R.isFunction(makeSet41780.$var))) {
R.ffi.throwNonFunApp($al1840,makeSet41780.$var);
}
$ans1839 = makeSet41780.$var.app(a1835,b1836,c1837,d1838);
break;
case 1: var anf_arg1841 = $ans1839;
$step1833 = 2;
$al1840 = L[816];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1840,list$set919.$var);
}
$ans1839 = list$set919.$var.app(anf_arg1841);
break;
case 2: ++R.GAS;
return $ans1839;
default: throw "No case numbered " + $step1833 + " in $temp_lam1834";
}
}
} catch($e1842) {
if(R.isCont($e1842) && ($step1833 !== 2)) {
$e1842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1840,$temp_lam1834,$step1833,[a1835,b1836,c1837,d1838],[]);
}
if(R.isPyretException($e1842)) {
$e1842.pyretStack.push($al1840);
}
throw $e1842;
}
};
var anf_obj1858 = R.makeFunction($temp_lam1834);
var $temp_lam1844 = function($a1845,$b1846,$c1847,$d1848,$e1849) {
var $step1843 = 0;
var $ans1850 = D;
var $al1851 = L[821];
try {
if(R.isActivationRecord($a1845)) {
$step1843 = $a1845.step;
$al1851 = $a1845.from;
$ans1850 = $a1845.ans;
a1845 = $a1845.args[0];
b1846 = $a1845.args[1];
c1847 = $a1845.args[2];
d1848 = $a1845.args[3];
e1849 = $a1845.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[821],5,$t);
}
var a1845 = $a1845;
var b1846 = $b1846;
var c1847 = $c1847;
var d1848 = $d1848;
var e1849 = $e1849;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1843) {
case 0: $step1843 = 1;
$al1851 = L[820];
if(!(R.isFunction(makeSet51801.$var))) {
R.ffi.throwNonFunApp($al1851,makeSet51801.$var);
}
$ans1850 = makeSet51801.$var.app(a1845,b1846,c1847,d1848,e1849);
break;
case 1: var anf_arg1852 = $ans1850;
$step1843 = 2;
$al1851 = L[819];
if(!(R.isFunction(list$set919.$var))) {
R.ffi.throwNonFunApp($al1851,list$set919.$var);
}
$ans1850 = list$set919.$var.app(anf_arg1852);
break;
case 2: ++R.GAS;
return $ans1850;
default: throw "No case numbered " + $step1843 + " in $temp_lam1844";
}
}
} catch($e1853) {
if(R.isCont($e1853) && ($step1843 !== 2)) {
$e1853.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1851,$temp_lam1844,$step1843,[a1845,b1846,c1847,d1848,e1849],[]);
}
if(R.isPyretException($e1853)) {
$e1853.pyretStack.push($al1851);
}
throw $e1853;
}
};
var anf_obj1859 = R.makeFunction($temp_lam1844);
var list$set$maker1937 = R.makeObject({"make":arr$to$list$set1715.$var,
"make0":anf_obj1854,
"make1":anf_obj1855,
"make2":anf_obj1856,
"make3":anf_obj1857,
"make4":anf_obj1858,
"make5":anf_obj1859});
var $temp_lam1861 = function($$resumer1804) {
var $step1860 = 0;
var $ans1862 = D;
var $al1863 = L[822];
try {
if(R.isActivationRecord($$resumer1804)) {
$step1860 = $$resumer1804.step;
$al1863 = $$resumer1804.from;
$ans1862 = $$resumer1804.ans;
$resumer1804 = $$resumer1804.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[822],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1860) {
case 0: $step1860 = 1;
$ans1862 = empty$tree$set1864;
break;
case 1: ++R.GAS;
return $ans1862;
default: throw "No case numbered " + $step1860 + " in $temp_lam1861";
}
}
} catch($e1865) {
if(R.isCont($e1865) && ($step1860 !== 1)) {
$e1865.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1863,$temp_lam1861,$step1860,[],[]);
}
if(R.isPyretException($e1865)) {
$e1865.pyretStack.push($al1863);
}
throw $e1865;
}
};
var anf_obj1931 = R.makeFunction($temp_lam1861);
var $temp_lam1867 = function($a1868) {
var $step1866 = 0;
var $ans1869 = D;
var $al1870 = L[824];
try {
if(R.isActivationRecord($a1868)) {
$step1866 = $a1868.step;
$al1870 = $a1868.from;
$ans1869 = $a1868.ans;
a1868 = $a1868.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[824],1,$t);
}
var a1868 = $a1868;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1866) {
case 0: $step1866 = 1;
$al1870 = L[823];
$field1871 = R.getColonFieldLoc(empty$tree$set1864,"add",L[823]);
if(R.isMethod($field1871)) {
$ans1869 = $field1871.full_meth(empty$tree$set1864,a1868);
} else {
if(!(R.isFunction($field1871))) {
R.ffi.throwNonFunApp(L[823],$field1871);
}
$ans1869 = $field1871.app(a1868);
}
break;
case 1: ++R.GAS;
return $ans1869;
default: throw "No case numbered " + $step1866 + " in $temp_lam1867";
}
}
} catch($e1872) {
if(R.isCont($e1872) && ($step1866 !== 1)) {
$e1872.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1870,$temp_lam1867,$step1866,[a1868],[]);
}
if(R.isPyretException($e1872)) {
$e1872.pyretStack.push($al1870);
}
throw $e1872;
}
};
var anf_obj1932 = R.makeFunction($temp_lam1867);
var $temp_lam1874 = function($a1875,$b1876) {
var $step1873 = 0;
var $ans1877 = D;
var $al1878 = L[827];
try {
if(R.isActivationRecord($a1875)) {
$step1873 = $a1875.step;
$al1878 = $a1875.from;
$ans1877 = $a1875.ans;
a1875 = $a1875.args[0];
b1876 = $a1875.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[827],2,$t);
}
var a1875 = $a1875;
var b1876 = $b1876;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1873) {
case 0: $step1873 = 1;
$al1878 = L[825];
$field1879 = R.getColonFieldLoc(empty$tree$set1864,"add",L[825]);
if(R.isMethod($field1879)) {
$ans1877 = $field1879.full_meth(empty$tree$set1864,a1875);
} else {
if(!(R.isFunction($field1879))) {
R.ffi.throwNonFunApp(L[825],$field1879);
}
$ans1877 = $field1879.app(a1875);
}
break;
case 1: var anf_method_obj1880 = $ans1877;
$step1873 = 2;
$al1878 = L[826];
$field1881 = R.getColonFieldLoc(anf_method_obj1880,"add",L[826]);
if(R.isMethod($field1881)) {
$ans1877 = $field1881.full_meth(anf_method_obj1880,b1876);
} else {
if(!(R.isFunction($field1881))) {
R.ffi.throwNonFunApp(L[826],$field1881);
}
$ans1877 = $field1881.app(b1876);
}
break;
case 2: ++R.GAS;
return $ans1877;
default: throw "No case numbered " + $step1873 + " in $temp_lam1874";
}
}
} catch($e1882) {
if(R.isCont($e1882) && ($step1873 !== 2)) {
$e1882.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1878,$temp_lam1874,$step1873,[a1875,b1876],[]);
}
if(R.isPyretException($e1882)) {
$e1882.pyretStack.push($al1878);
}
throw $e1882;
}
};
var anf_obj1933 = R.makeFunction($temp_lam1874);
var $temp_lam1884 = function($a1885,$b1886,$c1887) {
var $step1883 = 0;
var $ans1888 = D;
var $al1889 = L[831];
try {
if(R.isActivationRecord($a1885)) {
$step1883 = $a1885.step;
$al1889 = $a1885.from;
$ans1888 = $a1885.ans;
a1885 = $a1885.args[0];
b1886 = $a1885.args[1];
c1887 = $a1885.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[831],3,$t);
}
var a1885 = $a1885;
var b1886 = $b1886;
var c1887 = $c1887;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1883) {
case 0: $step1883 = 1;
$al1889 = L[828];
$field1890 = R.getColonFieldLoc(empty$tree$set1864,"add",L[828]);
if(R.isMethod($field1890)) {
$ans1888 = $field1890.full_meth(empty$tree$set1864,a1885);
} else {
if(!(R.isFunction($field1890))) {
R.ffi.throwNonFunApp(L[828],$field1890);
}
$ans1888 = $field1890.app(a1885);
}
break;
case 1: var anf_method_obj1891 = $ans1888;
$step1883 = 2;
$al1889 = L[829];
$field1892 = R.getColonFieldLoc(anf_method_obj1891,"add",L[829]);
if(R.isMethod($field1892)) {
$ans1888 = $field1892.full_meth(anf_method_obj1891,b1886);
} else {
if(!(R.isFunction($field1892))) {
R.ffi.throwNonFunApp(L[829],$field1892);
}
$ans1888 = $field1892.app(b1886);
}
break;
case 2: var anf_method_obj1893 = $ans1888;
$step1883 = 3;
$al1889 = L[830];
$field1894 = R.getColonFieldLoc(anf_method_obj1893,"add",L[830]);
if(R.isMethod($field1894)) {
$ans1888 = $field1894.full_meth(anf_method_obj1893,c1887);
} else {
if(!(R.isFunction($field1894))) {
R.ffi.throwNonFunApp(L[830],$field1894);
}
$ans1888 = $field1894.app(c1887);
}
break;
case 3: ++R.GAS;
return $ans1888;
default: throw "No case numbered " + $step1883 + " in $temp_lam1884";
}
}
} catch($e1895) {
if(R.isCont($e1895) && ($step1883 !== 3)) {
$e1895.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1889,$temp_lam1884,$step1883,[a1885,b1886,c1887],[]);
}
if(R.isPyretException($e1895)) {
$e1895.pyretStack.push($al1889);
}
throw $e1895;
}
};
var anf_obj1934 = R.makeFunction($temp_lam1884);
var $temp_lam1897 = function($a1898,$b1899,$c1900,$d1901) {
var $step1896 = 0;
var $ans1902 = D;
var $al1903 = L[836];
try {
if(R.isActivationRecord($a1898)) {
$step1896 = $a1898.step;
$al1903 = $a1898.from;
$ans1902 = $a1898.ans;
a1898 = $a1898.args[0];
b1899 = $a1898.args[1];
c1900 = $a1898.args[2];
d1901 = $a1898.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[836],4,$t);
}
var a1898 = $a1898;
var b1899 = $b1899;
var c1900 = $c1900;
var d1901 = $d1901;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1896) {
case 0: $step1896 = 1;
$al1903 = L[832];
$field1904 = R.getColonFieldLoc(empty$tree$set1864,"add",L[832]);
if(R.isMethod($field1904)) {
$ans1902 = $field1904.full_meth(empty$tree$set1864,a1898);
} else {
if(!(R.isFunction($field1904))) {
R.ffi.throwNonFunApp(L[832],$field1904);
}
$ans1902 = $field1904.app(a1898);
}
break;
case 1: var anf_method_obj1905 = $ans1902;
$step1896 = 2;
$al1903 = L[833];
$field1906 = R.getColonFieldLoc(anf_method_obj1905,"add",L[833]);
if(R.isMethod($field1906)) {
$ans1902 = $field1906.full_meth(anf_method_obj1905,b1899);
} else {
if(!(R.isFunction($field1906))) {
R.ffi.throwNonFunApp(L[833],$field1906);
}
$ans1902 = $field1906.app(b1899);
}
break;
case 2: var anf_method_obj1907 = $ans1902;
$step1896 = 3;
$al1903 = L[834];
$field1908 = R.getColonFieldLoc(anf_method_obj1907,"add",L[834]);
if(R.isMethod($field1908)) {
$ans1902 = $field1908.full_meth(anf_method_obj1907,c1900);
} else {
if(!(R.isFunction($field1908))) {
R.ffi.throwNonFunApp(L[834],$field1908);
}
$ans1902 = $field1908.app(c1900);
}
break;
case 3: var anf_method_obj1909 = $ans1902;
$step1896 = 4;
$al1903 = L[835];
$field1910 = R.getColonFieldLoc(anf_method_obj1909,"add",L[835]);
if(R.isMethod($field1910)) {
$ans1902 = $field1910.full_meth(anf_method_obj1909,d1901);
} else {
if(!(R.isFunction($field1910))) {
R.ffi.throwNonFunApp(L[835],$field1910);
}
$ans1902 = $field1910.app(d1901);
}
break;
case 4: ++R.GAS;
return $ans1902;
default: throw "No case numbered " + $step1896 + " in $temp_lam1897";
}
}
} catch($e1911) {
if(R.isCont($e1911) && ($step1896 !== 4)) {
$e1911.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1903,$temp_lam1897,$step1896,[a1898,b1899,c1900,d1901],[]);
}
if(R.isPyretException($e1911)) {
$e1911.pyretStack.push($al1903);
}
throw $e1911;
}
};
var anf_obj1935 = R.makeFunction($temp_lam1897);
var $temp_lam1913 = function($a1914,$b1915,$c1916,$d1917,$e1918) {
var $step1912 = 0;
var $ans1919 = D;
var $al1920 = L[842];
try {
if(R.isActivationRecord($a1914)) {
$step1912 = $a1914.step;
$al1920 = $a1914.from;
$ans1919 = $a1914.ans;
a1914 = $a1914.args[0];
b1915 = $a1914.args[1];
c1916 = $a1914.args[2];
d1917 = $a1914.args[3];
e1918 = $a1914.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[842],5,$t);
}
var a1914 = $a1914;
var b1915 = $b1915;
var c1916 = $c1916;
var d1917 = $d1917;
var e1918 = $e1918;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1912) {
case 0: $step1912 = 1;
$al1920 = L[837];
$field1921 = R.getColonFieldLoc(empty$tree$set1864,"add",L[837]);
if(R.isMethod($field1921)) {
$ans1919 = $field1921.full_meth(empty$tree$set1864,a1914);
} else {
if(!(R.isFunction($field1921))) {
R.ffi.throwNonFunApp(L[837],$field1921);
}
$ans1919 = $field1921.app(a1914);
}
break;
case 1: var anf_method_obj1922 = $ans1919;
$step1912 = 2;
$al1920 = L[838];
$field1923 = R.getColonFieldLoc(anf_method_obj1922,"add",L[838]);
if(R.isMethod($field1923)) {
$ans1919 = $field1923.full_meth(anf_method_obj1922,b1915);
} else {
if(!(R.isFunction($field1923))) {
R.ffi.throwNonFunApp(L[838],$field1923);
}
$ans1919 = $field1923.app(b1915);
}
break;
case 2: var anf_method_obj1924 = $ans1919;
$step1912 = 3;
$al1920 = L[839];
$field1925 = R.getColonFieldLoc(anf_method_obj1924,"add",L[839]);
if(R.isMethod($field1925)) {
$ans1919 = $field1925.full_meth(anf_method_obj1924,c1916);
} else {
if(!(R.isFunction($field1925))) {
R.ffi.throwNonFunApp(L[839],$field1925);
}
$ans1919 = $field1925.app(c1916);
}
break;
case 3: var anf_method_obj1926 = $ans1919;
$step1912 = 4;
$al1920 = L[840];
$field1927 = R.getColonFieldLoc(anf_method_obj1926,"add",L[840]);
if(R.isMethod($field1927)) {
$ans1919 = $field1927.full_meth(anf_method_obj1926,d1917);
} else {
if(!(R.isFunction($field1927))) {
R.ffi.throwNonFunApp(L[840],$field1927);
}
$ans1919 = $field1927.app(d1917);
}
break;
case 4: var anf_method_obj1928 = $ans1919;
$step1912 = 5;
$al1920 = L[841];
$field1929 = R.getColonFieldLoc(anf_method_obj1928,"add",L[841]);
if(R.isMethod($field1929)) {
$ans1919 = $field1929.full_meth(anf_method_obj1928,e1918);
} else {
if(!(R.isFunction($field1929))) {
R.ffi.throwNonFunApp(L[841],$field1929);
}
$ans1919 = $field1929.app(e1918);
}
break;
case 5: ++R.GAS;
return $ans1919;
default: throw "No case numbered " + $step1912 + " in $temp_lam1913";
}
}
} catch($e1930) {
if(R.isCont($e1930) && ($step1912 !== 5)) {
$e1930.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1920,$temp_lam1913,$step1912,[a1914,b1915,c1916,d1917,e1918],[]);
}
if(R.isPyretException($e1930)) {
$e1930.pyretStack.push($al1920);
}
throw $e1930;
}
};
var anf_obj1936 = R.makeFunction($temp_lam1913);
var tree$set$maker1938 = R.makeObject({"make":arr$to$tree$set1735.$var,
"make0":anf_obj1931,
"make1":anf_obj1932,
"make2":anf_obj1933,
"make3":anf_obj1934,
"make4":anf_obj1935,
"make5":anf_obj1936});
var provides1943 = R.makeObject({"set":list$set$maker1937,
"list-set":list$set$maker1937,
"tree-set":tree$set$maker1938,
"empty-set":empty$list$set1807,
"empty-list-set":empty$list$set1807,
"empty-tree-set":empty$tree$set1864,
"list-to-set":list$to$list$set1667.$var,
"list-to-list-set":list$to$list$set1667.$var,
"list-to-tree-set":list$to$tree$set1677.$var,
"fold":set$fold1637.$var,
"all":set$all1615.$var,
"any":set$any1626.$var});
$step43 = 3;
$al47 = L[218];
$field1939 = R.getColonFieldLoc(builtins20,"current-checker",L[218]);
if(R.isMethod($field1939)) {
$ans46 = $field1939.full_meth(builtins20);
} else {
if(!(R.isFunction($field1939))) {
R.ffi.throwNonFunApp(L[218],$field1939);
}
$ans46 = $field1939.app();
}
break;
case 3: var anf_method_obj1940 = $ans46;
$step43 = 4;
$al47 = L[218];
$field1941 = R.getColonFieldLoc(anf_method_obj1940,"results",L[218]);
if(R.isMethod($field1941)) {
$ans46 = $field1941.full_meth(anf_method_obj1940);
} else {
if(!(R.isFunction($field1941))) {
R.ffi.throwNonFunApp(L[218],$field1941);
}
$ans46 = $field1941.app();
}
break;
case 4: var checks1944 = $ans46;
$step43 = 5;
$ans46 = R.makeObject({"answer":nothing13,
"namespace":NAMESPACE,
"defined-values":{"tree-set-maker":tree$set$maker1938,
"list-set-maker":list$set$maker1937,
"arr-to-tree-set":arr$to$tree$set1735.$var,
"empty-tree-set":empty$tree$set1864,
"makeSet5":makeSet51801.$var,
"arr-to-list-set":arr$to$list$set1715.$var,
"empty-list-set":empty$list$set1807,
"makeSet4":makeSet41780.$var,
"makeSet3":makeSet31762.$var,
"makeSet2":makeSet21747.$var,
"tree-set":tree$set1180.$var,
"leaf":leaf97.$var,
"list-set":list$set919.$var,
"empty":empty114,
"list-to-tree":list$to$tree1695.$var,
"list-to-tree-set":list$to$tree$set1677.$var,
"list-to-list-set":list$to$list$set1667.$var,
"list-to-set":list$to$set1657.$var,
"set-fold":set$fold1637.$var,
"set-any":set$any1626.$var,
"set-all":set$all1615.$var,
"tree-set-difference":tree$set$difference1328.$var,
"merge-drop-l2":merge$drop$l21576.$var,
"tree-set-intersect":tree$set$intersect1310.$var,
"merge-only-dups":merge$only$dups1535.$var,
"tree-set-union":tree$set$union1302.$var,
"merge-no-dups":merge$no$dups1493.$var,
"elems-to-balanced-avl":elems$to$balanced$avl1481.$var,
"set-to-sorted-elems":set$to$sorted$elems1446.$var,
"is-tree-set":is$tree$set1431.$var,
"is-list-set":is$list$set1428.$var,
"is-Set":is$Set1426.$var,
"Set":Set878.$var,
"swap-next-lowest":swap$next$lowest798.$var,
"remove-root":remove$root282.$var,
"rebalance":rebalance262.$var,
"mkbranch":mkbranch96.$var,
"tree-any":tree$any643.$var,
"tree-all":tree$all633.$var,
"tree-fold":tree$fold623.$var,
"branch":branch612.$var,
"is-branch":is$branch610.$var,
"is-leaf":is$leaf607.$var,
"is-AVLTree":is$AVLTree605.$var,
"AVLTree":AVLTree65.$var,
"pick-some":pick$some920,
"pick-none":pick$none916,
"pick":pick26,
"fold":fold903,
"is-empty":is$empty1148,
"lists":lists24,
"link":link312,
"List":List1945,
"VS":VS27,
"equality":equality22,
"arrays":arrays21,
"option":option25,
"error":error23},
"defined-types":{"Pick":Pick1942,
"AVLTree":AVLTree99,
"lists":lists31,
"List":List937,
"Set":Set869,
"pick":pick33,
"VS":VS34,
"equality":equality29,
"arrays":arrays28,
"option":option32,
"error":error30},
"provide-plus-types":R.makeObject({"values":provides1943,
"types":{"List":List937,
"Pick":Pick1942,
"AVLTree":AVLTree99,
"Set":Set869}}),
"checks":checks1944});
break;
case 5: ++R.GAS;
return $ans46;
default: throw "No case numbered " + $step43 + " in $toplevel44";
}
}
} catch($e1946) {
if(R.isCont($e1946) && ($step43 !== 5)) {
$e1946.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al47,$toplevel44,$step43,[],[provides1943,tree$set$maker1938,list$set$maker1937,makeSet51801,makeSet41780,makeSet31762,makeSet21747,empty$tree$set1864,empty$list$set1807,arr$to$tree$set1735,arr$to$list$set1715,list$to$tree1695,list$to$tree$set1677,list$to$list$set1667,list$to$set1657,set$fold1637,set$any1626,set$all1615,tree$set$difference1328,merge$drop$l21576,tree$set$intersect1310,merge$only$dups1535,tree$set$union1302,merge$no$dups1493,elems$to$balanced$avl1481,set$to$sorted$elems1446,tree$set1180,is$tree$set1431,list$set919,is$list$set1428,is$Set1426,Set878,swap$next$lowest798,remove$root282,rebalance262,mkbranch96,tree$any643,tree$all633,tree$fold623,branch612,is$branch610,leaf97,is$leaf607,is$AVLTree605,AVLTree65,pick$some920,pick$none916,Pick1942,fold903,is$empty1148,link312,empty114,List1945,List937,Set869,AVLTree99]);
}
if(R.isPyretException($e1946)) {
$e1946.pyretStack.push($al47);
}
throw $e1946;
}
};
return R.safeCall($toplevel44,function(moduleVal) {
R.modules["$src/arr/base/sets.arr35"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})
